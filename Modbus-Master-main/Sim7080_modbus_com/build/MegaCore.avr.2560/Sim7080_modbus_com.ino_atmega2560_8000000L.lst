
C:\Users\mbt\AppData\Local\Temp\arduino\sketches\FB69C1DEBB60474B495D046AA45AD51D/Sim7080_modbus_com.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__ctors_end>
       4:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__vector_1>
       8:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__vector_2>
       c:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__vector_3>
      10:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__vector_4>
      14:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__vector_5>
      18:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__vector_6>
      1c:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__vector_7>
      20:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__vector_8>
      24:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_10>
      28:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_10>
      2c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_10>
      30:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      34:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      38:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      3c:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      40:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      44:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      48:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      4c:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      50:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      54:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      58:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      5c:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__vector_23>
      60:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      64:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_25>
      68:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__vector_26>
      6c:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      70:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      74:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      78:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      7c:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      80:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      84:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      88:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      8c:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      90:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__vector_36>
      94:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__vector_37>
      98:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      9c:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      a0:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      a4:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      a8:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      ac:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      b0:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      b4:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      b8:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_46>
      bc:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_47>
      c0:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__vector_48>
      c4:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      c8:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      cc:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__vector_51>
      d0:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_52>
      d4:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      d8:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      dc:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>
      e0:	0c 94 04 02 	jmp	0x408	; 0x408 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <Serial0_available()>
      e8:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <HardwareSerial::peek()>
      ec:	0c 94 42 04 	jmp	0x884	; 0x884 <modbusValue()+0x1ae>
      f0:	0c 94 25 11 	jmp	0x224a	; 0x224a <__stack+0x4b>
      f4:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__stack+0x7b>
      f8:	0c 94 34 04 	jmp	0x868	; 0x868 <modbusValue()+0x192>
      fc:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__stack+0x91>
     100:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <Serial2_available()>
     104:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__stack+0x37>
     108:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__stack+0x13>
     10c:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__stack+0x93>
     110:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <_GLOBAL__sub_I___vector_51>
     114:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__stack+0x83>
     118:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__stack+0x23>
     11c:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <Print::write(unsigned char const*, unsigned int)>
     120:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__stack+0x43>
     124:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <_GLOBAL__sub_I___vector_25>
     128:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__stack+0x5f>
     12c:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <HardwareSerial::write(unsigned char)>
     130:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__stack+0x7>
     134:	0c 94 17 11 	jmp	0x222e	; 0x222e <__stack+0x2f>
     138:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__stack+0x1b>
     13c:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <HardwareSerial::availableForWrite()>
     140:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <HardwareSerial::read()>
     144:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__stack+0x67>
     148:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__stack+0x53>
     14c:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <nothing>
     150:	0c 94 45 11 	jmp	0x228a	; 0x228a <__stack+0x8b>
     154:	0c 94 aa 03 	jmp	0x754	; 0x754 <modbusValue()+0x7e>
     158:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <_GLOBAL__sub_I___vector_36>
     15c:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <serialEventRun()>
     160:	0c 94 bb 03 	jmp	0x776	; 0x776 <modbusValue()+0xa0>
     164:	0c 94 37 11 	jmp	0x226e	; 0x226e <__stack+0x6f>
     168:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <HardwareSerial::available()>
     16c:	0c 94 99 03 	jmp	0x732	; 0x732 <modbusValue()+0x5c>
     170:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <Serial1_available()>
     174:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <HardwareSerial::flush()>
     178:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <modbusValue()+0x102>

0000017c <__trampolines_end>:
__trampolines_end():
     17c:	41 54       	subi	r20, 0x41	; 65
	...

0000017f <Sim_send(short*, int)::__c>:
     17f:	41 54 2b 43 41 52 45 43 56 3d 30 2c 35 30 00        AT+CARECV=0,50.

0000018e <Sim_send(short*, int)::__c>:
     18e:	41 54 2b 43 41 41 43 4b 3d 30 00                    AT+CAACK=0.

00000199 <_ZZ11Sim_ConnectvE3__c__10_>:
     199:	41 54 2b 43 41 4f 50 45 4e 3d 30 2c 30 2c 22 55     AT+CAOPEN=0,0,"U
     1a9:	44 50 22 2c 22 31 36 34 2e 39 32 2e 31 36 34 2e     DP","164.92.164.
     1b9:	31 36 38 22 2c 38 30 38 30 00                       168",8080.

000001c3 <Sim_Connect()::__c>:
     1c3:	41 54 2b 43 4e 41 43 54 3f 00                       AT+CNACT?.

000001cd <Sim_Connect()::__c>:
     1cd:	41 54 2b 43 4e 41 43 54 3d 30 2c 31 00              AT+CNACT=0,1.

000001da <Sim_Connect()::__c>:
     1da:	41 54 2b 43 4e 43 46 47 3d 30 2c 31 2c 22 69 6f     AT+CNCFG=0,1,"io
     1ea:	74 2e 31 6e 63 65 2e 6e 65 74 22 00                 t.1nce.net".

000001f6 <Sim_Connect()::__c>:
     1f6:	41 54 2b 43 47 4e 41 50 4e 00                       AT+CGNAPN.

00000200 <Sim_Connect()::__c>:
     200:	41 54 2b 43 4f 50 53 3f 00                          AT+COPS?.

00000209 <Sim_Connect()::__c>:
     209:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

00000213 <Sim_Connect()::__c>:
     213:	41 54 2b 43 4f 50 53 3d 31 2c 32 2c 22 32 33 38     AT+COPS=1,2,"238
     223:	32 30 22 00                                         20".

00000227 <Sim_Connect()::__c>:
     227:	41 54 2b 43 46 55 4e 3d 31 00                       AT+CFUN=1.

00000231 <Sim_Connect()::__c>:
     231:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     241:	22 2c 22 69 6f 74 2e 31 6e 63 65 2e 6e 65 74 22     ","iot.1nce.net"
	...

00000252 <Sim_Connect()::__c>:
     252:	41 54 2b 43 46 55 4e 3d 30 00                       AT+CFUN=0.

0000025c <Sim_Connect()::__c>:
     25c:	41 54 2b 43 53 51 00                                AT+CSQ.

00000263 <getIMEI()::__c>:
     263:	41 54 2b 47 53 4e 00                                AT+GSN.

0000026a <digital_pin_to_timer_PGM>:
     26a:	00 00 00 0a 0b 0c 00 00 00 00 00 0d 0e 0f 09 00     ................
     27a:	00 00 00 08 04 05 06 00 00 00 00 00 00 11 12 13     ................
	...
     2be:	00 03                                               ..

000002c0 <digital_pin_to_bit_mask_PGM>:
     2c0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 01     ..... @...... @.
     2d0:	02 04 08 10 20 40 80 80 08 10 01 02 04 08 10 20     .... @......... 
     2e0:	40 80 01 02 04 08 10 20 40 80 01 02 01 02 04 08     @...... @.......
     2f0:	10 20 40 80 01 02 04 08 10 20 40 04 80 40 20 10     . @...... @..@ .
     300:	08 04 02 01 80 01 02 04 08 10 20 40 80 01 02 04     .......... @....
     310:	08 10 20 40 80 20                                   .. @. 

00000316 <digital_pin_to_port_PGM>:
     316:	05 05 05 05 05 05 05 05 08 08 08 08 08 08 08 02     ................
     326:	02 02 02 02 02 02 02 08 07 07 0c 0c 0c 0c 0c 0c     ................
     336:	0c 0c 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     346:	03 03 03 03 0a 0a 0a 0a 0a 0a 0a 07 01 01 01 01     ................
     356:	01 01 01 01 0a 06 06 06 06 06 06 06 06 0b 0b 0b     ................
     366:	0b 0b 0b 0b 0b 07                                   ......

0000036c <port_to_output_PGM>:
     36c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     37c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000386 <port_to_mode_PGM>:
     386:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     396:	01 01 00 00 04 01 07 01 0a 01                       ..........

000003a0 <__ctors_start>:
__ctors_start():
     3a0:	ed 0b       	sbc	r30, r29
     3a2:	84 0c       	add	r8, r4
     3a4:	1b 0d       	add	r17, r11

000003a6 <__ctors_end>:
__dtors_end():
     3a6:	11 24       	eor	r1, r1
     3a8:	1f be       	out	0x3f, r1	; 63
     3aa:	cf ef       	ldi	r28, 0xFF	; 255
     3ac:	d1 e2       	ldi	r29, 0x21	; 33
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	00 e0       	ldi	r16, 0x00	; 0
     3b4:	0c bf       	out	0x3c, r16	; 60

000003b6 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     3b6:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     3b8:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     3ba:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     3bc:	ec e0       	ldi	r30, 0x0C	; 12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     3be:	fa e2       	ldi	r31, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     3c0:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     3c2:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     3c6:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     3c8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     3ca:	a0 35       	cpi	r26, 0x50	; 80
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     3cc:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     3ce:	d9 f7       	brne	.-10     	; 0x3c6 <__do_copy_data+0x10>

000003d0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     3d0:	27 e0       	ldi	r18, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     3d2:	a0 e5       	ldi	r26, 0x50	; 80
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     3d4:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <.do_clear_bss_start>

000003d8 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     3d8:	1d 92       	st	X+, r1

000003da <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     3da:	ae 36       	cpi	r26, 0x6E	; 110
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     3dc:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <.do_clear_bss_loop>

000003e0 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     3e0:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     3e2:	c3 ed       	ldi	r28, 0xD3	; 211
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     3e4:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     3e6:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     3ea:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     3ec:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     3ee:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     3f0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     3f2:	0e 94 ed 11 	call	0x23da	; 0x23da <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     3f6:	c0 3d       	cpi	r28, 0xD0	; 208
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     3f8:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     3fa:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     3fc:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     3fe:	a9 f7       	brne	.-22     	; 0x3ea <__do_global_ctors+0xa>
     400:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <main>
     404:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <_exit>

00000408 <__bad_interrupt>:
__vector_38():
     408:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000040c <relaySimToMod()>:
_Z13relaySimToModv():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:762
  ADU[ADUsize++] = highByte(CRC);

  modbusSerial.write(ADU, ADUsize);

  modbusread();
}
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	00 d0       	rcall	.+0      	; 0x422 <relaySimToMod()+0x16>
     422:	00 d0       	rcall	.+0      	; 0x424 <relaySimToMod()+0x18>
     424:	00 d0       	rcall	.+0      	; 0x426 <relaySimToMod()+0x1a>
     426:	1f 92       	push	r1
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	8e 01       	movw	r16, r28
     42e:	0f 5f       	subi	r16, 0xFF	; 255
     430:	1f 4f       	sbci	r17, 0xFF	; 255
     432:	8a e0       	ldi	r24, 0x0A	; 10
     434:	d8 01       	movw	r26, r16
     436:	1d 92       	st	X+, r1
     438:	8a 95       	dec	r24
     43a:	e9 f7       	brne	.-6      	; 0x436 <relaySimToMod()+0x2a>
     43c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <lengthCounter>
     440:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <lengthCounter+0x1>
     444:	0a 97       	sbiw	r24, 0x0a	; 10
     446:	74 eb       	ldi	r23, 0xB4	; 180
     448:	e7 2e       	mov	r14, r23
     44a:	72 e0       	ldi	r23, 0x02	; 2
     44c:	f7 2e       	mov	r15, r23
     44e:	f8 01       	movw	r30, r16
     450:	a8 e0       	ldi	r26, 0x08	; 8
     452:	ca 2e       	mov	r12, r26
     454:	d1 2c       	mov	r13, r1
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	ac 01       	movw	r20, r24
     45c:	47 70       	andi	r20, 0x07	; 7
     45e:	55 27       	eor	r21, r21
     460:	45 2b       	or	r20, r21
     462:	11 f4       	brne	.+4      	; 0x468 <relaySimToMod()+0x5c>
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	ac 01       	movw	r20, r24
     46a:	97 ff       	sbrs	r25, 7
     46c:	02 c0       	rjmp	.+4      	; 0x472 <relaySimToMod()+0x66>
     46e:	49 5f       	subi	r20, 0xF9	; 249
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	63 e0       	ldi	r22, 0x03	; 3
     474:	55 95       	asr	r21
     476:	47 95       	ror	r20
     478:	6a 95       	dec	r22
     47a:	e1 f7       	brne	.-8      	; 0x474 <relaySimToMod()+0x68>
     47c:	24 0f       	add	r18, r20
     47e:	35 1f       	adc	r19, r21
     480:	af 01       	movw	r20, r30
     482:	40 1b       	sub	r20, r16
     484:	51 0b       	sbc	r21, r17
     486:	42 17       	cp	r20, r18
     488:	53 07       	cpc	r21, r19
     48a:	fc f4       	brge	.+62     	; 0x4ca <relaySimToMod()+0xbe>
     48c:	b6 01       	movw	r22, r12
     48e:	0e 94 b7 11 	call	0x236e	; 0x236e <__divmodhi4>
     492:	ac 01       	movw	r20, r24
     494:	18 16       	cp	r1, r24
     496:	19 06       	cpc	r1, r25
     498:	14 f0       	brlt	.+4      	; 0x49e <relaySimToMod()+0x92>
     49a:	48 e0       	ldi	r20, 0x08	; 8
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	60 81       	ld	r22, Z
     4a0:	ab ec       	ldi	r26, 0xCB	; 203
     4a2:	b3 e0       	ldi	r27, 0x03	; 3
     4a4:	b1 2c       	mov	r11, r1
     4a6:	a1 2c       	mov	r10, r1
     4a8:	c5 01       	movw	r24, r10
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	2d 91       	ld	r18, X+
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <relaySimToMod()+0xa6>
     4b0:	22 0f       	add	r18, r18
     4b2:	aa 94       	dec	r10
     4b4:	ea f7       	brpl	.-6      	; 0x4b0 <relaySimToMod()+0xa4>
     4b6:	62 2b       	or	r22, r18
     4b8:	5c 01       	movw	r10, r24
     4ba:	84 17       	cp	r24, r20
     4bc:	95 07       	cpc	r25, r21
     4be:	a1 f7       	brne	.-24     	; 0x4a8 <relaySimToMod()+0x9c>
     4c0:	61 93       	st	Z+, r22
     4c2:	d7 01       	movw	r26, r14
     4c4:	6d 93       	st	X+, r22
     4c6:	7d 01       	movw	r14, r26
     4c8:	c6 cf       	rjmp	.-116    	; 0x456 <relaySimToMod()+0x4a>
     4ca:	84 eb       	ldi	r24, 0xB4	; 180
     4cc:	92 e0       	ldi	r25, 0x02	; 2
     4ce:	2a 96       	adiw	r28, 0x0a	; 10
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	bf 90       	pop	r11
     4ec:	af 90       	pop	r10
     4ee:	08 95       	ret

000004f0 <bytesToShort(unsigned char*, int)>:
_Z12bytesToShortPhi():
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <lengthCounter+0x1>
     508:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <lengthCounter>
     50c:	e0 e5       	ldi	r30, 0x50	; 80
     50e:	f2 e0       	ldi	r31, 0x02	; 2
     510:	24 e6       	ldi	r18, 0x64	; 100
     512:	df 01       	movw	r26, r30
     514:	1d 92       	st	X+, r1
     516:	2a 95       	dec	r18
     518:	e9 f7       	brne	.-6      	; 0x514 <bytesToShort(unsigned char*, int)+0x24>
     51a:	8b 01       	movw	r16, r22
     51c:	77 ff       	sbrs	r23, 7
     51e:	02 c0       	rjmp	.+4      	; 0x524 <bytesToShort(unsigned char*, int)+0x34>
     520:	0f 5f       	subi	r16, 0xFF	; 255
     522:	1f 4f       	sbci	r17, 0xFF	; 255
     524:	15 95       	asr	r17
     526:	07 95       	ror	r16
     528:	ec 01       	movw	r28, r24
     52a:	30 e5       	ldi	r19, 0x50	; 80
     52c:	a3 2e       	mov	r10, r19
     52e:	32 e0       	ldi	r19, 0x02	; 2
     530:	b3 2e       	mov	r11, r19
     532:	d1 2c       	mov	r13, r1
     534:	c1 2c       	mov	r12, r1
     536:	c0 16       	cp	r12, r16
     538:	d1 06       	cpc	r13, r17
     53a:	ec f4       	brge	.+58     	; 0x576 <bytesToShort(unsigned char*, int)+0x86>
     53c:	e8 80       	ld	r14, Y
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	fe 2c       	mov	r15, r14
     542:	e8 2e       	mov	r14, r24
     544:	4a e0       	ldi	r20, 0x0A	; 10
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	b7 01       	movw	r22, r14
     54a:	8e e8       	ldi	r24, 0x8E	; 142
     54c:	95 e0       	ldi	r25, 0x05	; 5
     54e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <Print::println(int, int)>
     552:	f5 01       	movw	r30, r10
     554:	e1 92       	st	Z+, r14
     556:	f1 92       	st	Z+, r15
     558:	5f 01       	movw	r10, r30
     55a:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <lengthCounter>
     55e:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <lengthCounter+0x1>
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <lengthCounter+0x1>
     568:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <lengthCounter>
     56c:	ff ef       	ldi	r31, 0xFF	; 255
     56e:	cf 1a       	sub	r12, r31
     570:	df 0a       	sbc	r13, r31
     572:	22 96       	adiw	r28, 0x02	; 2
     574:	e0 cf       	rjmp	.-64     	; 0x536 <bytesToShort(unsigned char*, int)+0x46>
     576:	80 e5       	ldi	r24, 0x50	; 80
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	08 95       	ret

00000590 <tempConvert(short*, int)>:
_Z11tempConvertPsi():
     590:	fc 01       	movw	r30, r24
     592:	20 81       	ld	r18, Z
     594:	31 81       	ldd	r19, Z+1	; 0x01
     596:	24 5d       	subi	r18, 0xD4	; 212
     598:	3e 4f       	sbci	r19, 0xFE	; 254
     59a:	31 83       	std	Z+1, r19	; 0x01
     59c:	20 83       	st	Z, r18
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	30 93 eb 02 	sts	0x02EB, r19	; 0x8002eb <lengthCounter+0x1>
     5a6:	20 93 ea 02 	sts	0x02EA, r18	; 0x8002ea <lengthCounter>
     5aa:	08 95       	ret

000005ac <modbusPrint(int)>:
_Z11modbusPrinti():
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	8c 01       	movw	r16, r24
     5b6:	c4 e7       	ldi	r28, 0x74	; 116
     5b8:	d4 e0       	ldi	r29, 0x04	; 4
     5ba:	ce 01       	movw	r24, r28
     5bc:	84 57       	subi	r24, 0x74	; 116
     5be:	94 40       	sbci	r25, 0x04	; 4
     5c0:	80 17       	cp	r24, r16
     5c2:	91 07       	cpc	r25, r17
     5c4:	74 f4       	brge	.+28     	; 0x5e2 <modbusPrint(int)+0x36>
     5c6:	69 91       	ld	r22, Y+
     5c8:	40 e1       	ldi	r20, 0x10	; 16
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	8e e8       	ldi	r24, 0x8E	; 142
     5ce:	95 e0       	ldi	r25, 0x05	; 5
     5d0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Print::print(unsigned char, int)>
     5d4:	6c e2       	ldi	r22, 0x2C	; 44
     5d6:	72 e0       	ldi	r23, 0x02	; 2
     5d8:	8e e8       	ldi	r24, 0x8E	; 142
     5da:	95 e0       	ldi	r25, 0x05	; 5
     5dc:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <Print::print(char const*)>
     5e0:	ec cf       	rjmp	.-40     	; 0x5ba <modbusPrint(int)+0xe>
     5e2:	8e e8       	ldi	r24, 0x8E	; 142
     5e4:	95 e0       	ldi	r25, 0x05	; 5
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <Print::println()>

000005f2 <simpow()>:
_Z6simpowv():
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	85 e0       	ldi	r24, 0x05	; 5
     5f6:	0e 94 88 11 	call	0x2310	; 0x2310 <digitalWrite>
     5fa:	60 ed       	ldi	r22, 0xD0	; 208
     5fc:	77 e0       	ldi	r23, 0x07	; 7
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 66 10 	call	0x20cc	; 0x20cc <delay>
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	85 e0       	ldi	r24, 0x05	; 5
     60a:	0c 94 88 11 	jmp	0x2310	; 0x2310 <digitalWrite>

0000060e <clrsimBuffer()>:
_Z12clrsimBufferv():
     60e:	e2 e0       	ldi	r30, 0x02	; 2
     610:	f3 e0       	ldi	r31, 0x03	; 3
     612:	88 ec       	ldi	r24, 0xC8	; 200
     614:	df 01       	movw	r26, r30
     616:	1d 92       	st	X+, r1
     618:	8a 95       	dec	r24
     61a:	e9 f7       	brne	.-6      	; 0x616 <clrsimBuffer()+0x8>
     61c:	08 95       	ret

0000061e <simReadData()>:
_Z11simReadDatav():
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <simBuffer+0x1b>
     626:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <simBuffer+0x1a>
     62a:	02 2e       	mov	r0, r18
     62c:	00 0c       	add	r0, r0
     62e:	33 0b       	sbc	r19, r19
     630:	20 53       	subi	r18, 0x30	; 48
     632:	31 09       	sbc	r19, r1
     634:	80 33       	cpi	r24, 0x30	; 48
     636:	c4 f4       	brge	.+48     	; 0x668 <simReadData()+0x4a>
     638:	30 93 eb 02 	sts	0x02EB, r19	; 0x8002eb <lengthCounter+0x1>
     63c:	20 93 ea 02 	sts	0x02EA, r18	; 0x8002ea <lengthCounter>
     640:	ec e1       	ldi	r30, 0x1C	; 28
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <lengthCounter>
     648:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <lengthCounter+0x1>
     64c:	ee 5f       	subi	r30, 0xFE	; 254
     64e:	fc 4f       	sbci	r31, 0xFC	; 252
     650:	aa ec       	ldi	r26, 0xCA	; 202
     652:	b3 e0       	ldi	r27, 0x03	; 3
     654:	cd 01       	movw	r24, r26
     656:	8a 5c       	subi	r24, 0xCA	; 202
     658:	93 40       	sbci	r25, 0x03	; 3
     65a:	82 17       	cp	r24, r18
     65c:	93 07       	cpc	r25, r19
     65e:	bc f4       	brge	.+46     	; 0x68e <simReadData()+0x70>
     660:	81 91       	ld	r24, Z+
     662:	80 53       	subi	r24, 0x30	; 48
     664:	8d 93       	st	X+, r24
     666:	f6 cf       	rjmp	.-20     	; 0x654 <simReadData()+0x36>
     668:	9a e0       	ldi	r25, 0x0A	; 10
     66a:	92 9f       	mul	r25, r18
     66c:	a0 01       	movw	r20, r0
     66e:	93 9f       	mul	r25, r19
     670:	50 0d       	add	r21, r0
     672:	11 24       	eor	r1, r1
     674:	08 2e       	mov	r0, r24
     676:	00 0c       	add	r0, r0
     678:	99 0b       	sbc	r25, r25
     67a:	c0 97       	sbiw	r24, 0x30	; 48
     67c:	84 0f       	add	r24, r20
     67e:	95 1f       	adc	r25, r21
     680:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <lengthCounter+0x1>
     684:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <lengthCounter>
     688:	ed e1       	ldi	r30, 0x1D	; 29
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	db cf       	rjmp	.-74     	; 0x644 <simReadData()+0x26>
     68e:	ca ec       	ldi	r28, 0xCA	; 202
     690:	d3 e0       	ldi	r29, 0x03	; 3
     692:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <lengthCounter>
     696:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <lengthCounter+0x1>
     69a:	ce 01       	movw	r24, r28
     69c:	8a 5c       	subi	r24, 0xCA	; 202
     69e:	93 40       	sbci	r25, 0x03	; 3
     6a0:	82 17       	cp	r24, r18
     6a2:	93 07       	cpc	r25, r19
     6a4:	44 f4       	brge	.+16     	; 0x6b6 <simReadData()+0x98>
     6a6:	69 91       	ld	r22, Y+
     6a8:	4a e0       	ldi	r20, 0x0A	; 10
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	8e e8       	ldi	r24, 0x8E	; 142
     6ae:	95 e0       	ldi	r25, 0x05	; 5
     6b0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Print::print(unsigned char, int)>
     6b4:	ee cf       	rjmp	.-36     	; 0x692 <simReadData()+0x74>
     6b6:	8e e8       	ldi	r24, 0x8E	; 142
     6b8:	95 e0       	ldi	r25, 0x05	; 5
     6ba:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <Print::println()>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	0c 94 07 03 	jmp	0x60e	; 0x60e <clrsimBuffer()>

000006c6 <clrmodBuffer()>:
_Z12clrmodBufferv():
     6c6:	e2 e4       	ldi	r30, 0x42	; 66
     6c8:	f4 e0       	ldi	r31, 0x04	; 4
     6ca:	82 e3       	ldi	r24, 0x32	; 50
     6cc:	df 01       	movw	r26, r30
     6ce:	1d 92       	st	X+, r1
     6d0:	8a 95       	dec	r24
     6d2:	e9 f7       	brne	.-6      	; 0x6ce <clrmodBuffer()+0x8>
     6d4:	08 95       	ret

000006d6 <modbusValue()>:
_Z11modbusValuev():
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	e4 e7       	ldi	r30, 0x74	; 116
     6e0:	f4 e0       	ldi	r31, 0x04	; 4
     6e2:	82 e3       	ldi	r24, 0x32	; 50
     6e4:	df 01       	movw	r26, r30
     6e6:	1d 92       	st	X+, r1
     6e8:	8a 95       	dec	r24
     6ea:	e9 f7       	brne	.-6      	; 0x6e6 <modbusValue()+0x10>
     6ec:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <slaveReg>
     6f0:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <modBuffer+0x1>
     6f4:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <lengthCounter+0x1>
     6f8:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <lengthCounter>
     6fc:	e1 50       	subi	r30, 0x01	; 1
     6fe:	e0 31       	cpi	r30, 0x10	; 16
     700:	08 f0       	brcs	.+2      	; 0x704 <modbusValue()+0x2e>
     702:	b2 c0       	rjmp	.+356    	; 0x868 <modbusValue()+0x192>
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	88 27       	eor	r24, r24
     708:	e7 57       	subi	r30, 0x77	; 119
     70a:	fc 4f       	sbci	r31, 0xFC	; 252
     70c:	8f 4f       	sbci	r24, 0xFF	; 255
     70e:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__tablejump2__>
     712:	ec 03       	fmulsu	r22, r20
     714:	bb 03       	fmulsu	r19, r19
     716:	aa 03       	fmulsu	r18, r18
     718:	99 03       	fmulsu	r17, r17
     71a:	42 04       	cpc	r4, r2
     71c:	42 04       	cpc	r4, r2
     71e:	34 04       	cpc	r3, r4
     720:	34 04       	cpc	r3, r4
     722:	34 04       	cpc	r3, r4
     724:	34 04       	cpc	r3, r4
     726:	34 04       	cpc	r3, r4
     728:	34 04       	cpc	r3, r4
     72a:	34 04       	cpc	r3, r4
     72c:	34 04       	cpc	r3, r4
     72e:	42 04       	cpc	r4, r2
     730:	42 04       	cpc	r4, r2
     732:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <modBuffer+0x2>
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	a5 e4       	ldi	r26, 0x45	; 69
     73a:	b4 e0       	ldi	r27, 0x04	; 4
     73c:	e4 e7       	ldi	r30, 0x74	; 116
     73e:	f4 e0       	ldi	r31, 0x04	; 4
     740:	9f 01       	movw	r18, r30
     742:	24 57       	subi	r18, 0x74	; 116
     744:	34 40       	sbci	r19, 0x04	; 4
     746:	28 17       	cp	r18, r24
     748:	39 07       	cpc	r19, r25
     74a:	0c f0       	brlt	.+2      	; 0x74e <modbusValue()+0x78>
     74c:	96 c0       	rjmp	.+300    	; 0x87a <modbusValue()+0x1a4>
     74e:	2d 91       	ld	r18, X+
     750:	21 93       	st	Z+, r18
     752:	f6 cf       	rjmp	.-20     	; 0x740 <modbusValue()+0x6a>
     754:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <modBuffer+0x2>
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a5 e4       	ldi	r26, 0x45	; 69
     75c:	b4 e0       	ldi	r27, 0x04	; 4
     75e:	e4 e7       	ldi	r30, 0x74	; 116
     760:	f4 e0       	ldi	r31, 0x04	; 4
     762:	9f 01       	movw	r18, r30
     764:	24 57       	subi	r18, 0x74	; 116
     766:	34 40       	sbci	r19, 0x04	; 4
     768:	28 17       	cp	r18, r24
     76a:	39 07       	cpc	r19, r25
     76c:	0c f0       	brlt	.+2      	; 0x770 <modbusValue()+0x9a>
     76e:	85 c0       	rjmp	.+266    	; 0x87a <modbusValue()+0x1a4>
     770:	2d 91       	ld	r18, X+
     772:	21 93       	st	Z+, r18
     774:	f6 cf       	rjmp	.-20     	; 0x762 <modbusValue()+0x8c>
     776:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <modBuffer+0x2>
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	dc 01       	movw	r26, r24
     77e:	43 e0       	ldi	r20, 0x03	; 3
     780:	aa 0f       	add	r26, r26
     782:	bb 1f       	adc	r27, r27
     784:	4a 95       	dec	r20
     786:	e1 f7       	brne	.-8      	; 0x780 <modbusValue()+0xaa>
     788:	e2 e4       	ldi	r30, 0x42	; 66
     78a:	f4 e0       	ldi	r31, 0x04	; 4
     78c:	01 e0       	ldi	r16, 0x01	; 1
     78e:	10 e0       	ldi	r17, 0x00	; 0
     790:	9f 01       	movw	r18, r30
     792:	22 54       	subi	r18, 0x42	; 66
     794:	34 40       	sbci	r19, 0x04	; 4
     796:	28 17       	cp	r18, r24
     798:	39 07       	cpc	r19, r25
     79a:	0c f0       	brlt	.+2      	; 0x79e <modbusValue()+0xc8>
     79c:	50 c0       	rjmp	.+160    	; 0x83e <modbusValue()+0x168>
     79e:	63 81       	ldd	r22, Z+3	; 0x03
     7a0:	c4 e7       	ldi	r28, 0x74	; 116
     7a2:	d4 e0       	ldi	r29, 0x04	; 4
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	2a 17       	cp	r18, r26
     7ac:	3b 07       	cpc	r19, r27
     7ae:	0c f0       	brlt	.+2      	; 0x7b2 <modbusValue()+0xdc>
     7b0:	44 c0       	rjmp	.+136    	; 0x83a <modbusValue()+0x164>
     7b2:	a8 01       	movw	r20, r16
     7b4:	02 2e       	mov	r0, r18
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <modbusValue()+0xe6>
     7b8:	44 0f       	add	r20, r20
     7ba:	55 1f       	adc	r21, r21
     7bc:	0a 94       	dec	r0
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <modbusValue()+0xe2>
     7c0:	46 23       	and	r20, r22
     7c2:	57 23       	and	r21, r23
     7c4:	02 2e       	mov	r0, r18
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <modbusValue()+0xf6>
     7c8:	55 95       	asr	r21
     7ca:	47 95       	ror	r20
     7cc:	0a 94       	dec	r0
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <modbusValue()+0xf2>
     7d0:	49 93       	st	Y+, r20
     7d2:	2f 5f       	subi	r18, 0xFF	; 255
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	e9 cf       	rjmp	.-46     	; 0x7aa <modbusValue()+0xd4>
     7d8:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <modBuffer+0x2>
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	dc 01       	movw	r26, r24
     7e0:	33 e0       	ldi	r19, 0x03	; 3
     7e2:	aa 0f       	add	r26, r26
     7e4:	bb 1f       	adc	r27, r27
     7e6:	3a 95       	dec	r19
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <modbusValue()+0x10c>
     7ea:	e2 e4       	ldi	r30, 0x42	; 66
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	01 e0       	ldi	r16, 0x01	; 1
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	9f 01       	movw	r18, r30
     7f4:	22 54       	subi	r18, 0x42	; 66
     7f6:	34 40       	sbci	r19, 0x04	; 4
     7f8:	28 17       	cp	r18, r24
     7fa:	39 07       	cpc	r19, r25
     7fc:	04 f5       	brge	.+64     	; 0x83e <modbusValue()+0x168>
     7fe:	63 81       	ldd	r22, Z+3	; 0x03
     800:	c4 e7       	ldi	r28, 0x74	; 116
     802:	d4 e0       	ldi	r29, 0x04	; 4
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	2a 17       	cp	r18, r26
     80c:	3b 07       	cpc	r19, r27
     80e:	9c f4       	brge	.+38     	; 0x836 <modbusValue()+0x160>
     810:	a8 01       	movw	r20, r16
     812:	02 2e       	mov	r0, r18
     814:	02 c0       	rjmp	.+4      	; 0x81a <modbusValue()+0x144>
     816:	44 0f       	add	r20, r20
     818:	55 1f       	adc	r21, r21
     81a:	0a 94       	dec	r0
     81c:	e2 f7       	brpl	.-8      	; 0x816 <modbusValue()+0x140>
     81e:	46 23       	and	r20, r22
     820:	57 23       	and	r21, r23
     822:	02 2e       	mov	r0, r18
     824:	02 c0       	rjmp	.+4      	; 0x82a <modbusValue()+0x154>
     826:	55 95       	asr	r21
     828:	47 95       	ror	r20
     82a:	0a 94       	dec	r0
     82c:	e2 f7       	brpl	.-8      	; 0x826 <modbusValue()+0x150>
     82e:	49 93       	st	Y+, r20
     830:	2f 5f       	subi	r18, 0xFF	; 255
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	ea cf       	rjmp	.-44     	; 0x80a <modbusValue()+0x134>
     836:	31 96       	adiw	r30, 0x01	; 1
     838:	dc cf       	rjmp	.-72     	; 0x7f2 <modbusValue()+0x11c>
     83a:	31 96       	adiw	r30, 0x01	; 1
     83c:	a9 cf       	rjmp	.-174    	; 0x790 <modbusValue()+0xba>
     83e:	8a 9f       	mul	r24, r26
     840:	90 01       	movw	r18, r0
     842:	8b 9f       	mul	r24, r27
     844:	30 0d       	add	r19, r0
     846:	9a 9f       	mul	r25, r26
     848:	30 0d       	add	r19, r0
     84a:	11 24       	eor	r1, r1
     84c:	30 93 eb 02 	sts	0x02EB, r19	; 0x8002eb <lengthCounter+0x1>
     850:	20 93 ea 02 	sts	0x02EA, r18	; 0x8002ea <lengthCounter>
     854:	23 e0       	ldi	r18, 0x03	; 3
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	2a 95       	dec	r18
     85c:	e1 f7       	brne	.-8      	; 0x856 <modbusValue()+0x180>
     85e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <modbusPrint(int)>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <slaveReg>
     868:	0e 94 63 03 	call	0x6c6	; 0x6c6 <clrmodBuffer()>
     86c:	84 e7       	ldi	r24, 0x74	; 116
     86e:	94 e0       	ldi	r25, 0x04	; 4
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret
     87a:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <lengthCounter+0x1>
     87e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <lengthCounter>
     882:	ed cf       	rjmp	.-38     	; 0x85e <modbusValue()+0x188>
     884:	c1 e0       	ldi	r28, 0x01	; 1
     886:	c0 93 74 04 	sts	0x0474, r28	; 0x800474 <value>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <modbusPrint(int)>
     892:	c0 93 ec 02 	sts	0x02EC, r28	; 0x8002ec <slaveReg>
     896:	e8 cf       	rjmp	.-48     	; 0x868 <modbusValue()+0x192>

00000898 <CRC16_modbus(unsigned char*, int)>:
_Z12CRC16_modbusPhi():
     898:	ac 01       	movw	r20, r24
     89a:	fc 01       	movw	r30, r24
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	9f 01       	movw	r18, r30
     8a2:	24 1b       	sub	r18, r20
     8a4:	35 0b       	sbc	r19, r21
     8a6:	26 17       	cp	r18, r22
     8a8:	37 07       	cpc	r19, r23
     8aa:	9c f4       	brge	.+38     	; 0x8d2 <CRC16_modbus(unsigned char*, int)+0x3a>
     8ac:	21 91       	ld	r18, Z+
     8ae:	82 27       	eor	r24, r18
     8b0:	28 e0       	ldi	r18, 0x08	; 8
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	dc 01       	movw	r26, r24
     8b6:	a1 70       	andi	r26, 0x01	; 1
     8b8:	bb 27       	eor	r27, r27
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	ab 2b       	or	r26, r27
     8c0:	21 f0       	breq	.+8      	; 0x8ca <CRC16_modbus(unsigned char*, int)+0x32>
     8c2:	a1 e0       	ldi	r26, 0x01	; 1
     8c4:	8a 27       	eor	r24, r26
     8c6:	a0 ea       	ldi	r26, 0xA0	; 160
     8c8:	9a 27       	eor	r25, r26
     8ca:	21 50       	subi	r18, 0x01	; 1
     8cc:	31 09       	sbc	r19, r1
     8ce:	91 f7       	brne	.-28     	; 0x8b4 <CRC16_modbus(unsigned char*, int)+0x1c>
     8d0:	e7 cf       	rjmp	.-50     	; 0x8a0 <CRC16_modbus(unsigned char*, int)+0x8>
     8d2:	08 95       	ret

000008d4 <CRC16_xmodem(unsigned char*, int)>:
_Z12CRC16_xmodemPhi():
     8d4:	fc 01       	movw	r30, r24
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	61 50       	subi	r22, 0x01	; 1
     8dc:	71 09       	sbc	r23, r1
     8de:	77 fd       	sbrc	r23, 7
     8e0:	12 c0       	rjmp	.+36     	; 0x906 <CRC16_xmodem(unsigned char*, int)+0x32>
     8e2:	21 91       	ld	r18, Z+
     8e4:	92 27       	eor	r25, r18
     8e6:	28 e0       	ldi	r18, 0x08	; 8
     8e8:	ac 01       	movw	r20, r24
     8ea:	44 0f       	add	r20, r20
     8ec:	55 1f       	adc	r21, r21
     8ee:	97 ff       	sbrs	r25, 7
     8f0:	08 c0       	rjmp	.+16     	; 0x902 <CRC16_xmodem(unsigned char*, int)+0x2e>
     8f2:	ca 01       	movw	r24, r20
     8f4:	31 e2       	ldi	r19, 0x21	; 33
     8f6:	83 27       	eor	r24, r19
     8f8:	30 e1       	ldi	r19, 0x10	; 16
     8fa:	93 27       	eor	r25, r19
     8fc:	21 50       	subi	r18, 0x01	; 1
     8fe:	a1 f7       	brne	.-24     	; 0x8e8 <CRC16_xmodem(unsigned char*, int)+0x14>
     900:	ec cf       	rjmp	.-40     	; 0x8da <CRC16_xmodem(unsigned char*, int)+0x6>
     902:	ca 01       	movw	r24, r20
     904:	fb cf       	rjmp	.-10     	; 0x8fc <CRC16_xmodem(unsigned char*, int)+0x28>
     906:	08 95       	ret

00000908 <ATcomcheck(int)>:
_Z10ATcomchecki():
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	bc 01       	movw	r22, r24
     912:	99 0f       	add	r25, r25
     914:	88 0b       	sbc	r24, r24
     916:	99 0b       	sbc	r25, r25
     918:	0e 94 66 10 	call	0x20cc	; 0x20cc <delay>
     91c:	8b e2       	ldi	r24, 0x2B	; 43
     91e:	96 e0       	ldi	r25, 0x06	; 6
     920:	0e 94 30 0a 	call	0x1460	; 0x1460 <HardwareSerial::available()>
     924:	89 2b       	or	r24, r25
     926:	99 f0       	breq	.+38     	; 0x94e <ATcomcheck(int)+0x46>
     928:	8b e2       	ldi	r24, 0x2B	; 43
     92a:	96 e0       	ldi	r25, 0x06	; 6
     92c:	0e 94 30 0a 	call	0x1460	; 0x1460 <HardwareSerial::available()>
     930:	8c 01       	movw	r16, r24
     932:	c2 e0       	ldi	r28, 0x02	; 2
     934:	d3 e0       	ldi	r29, 0x03	; 3
     936:	ce 01       	movw	r24, r28
     938:	82 50       	subi	r24, 0x02	; 2
     93a:	93 40       	sbci	r25, 0x03	; 3
     93c:	80 17       	cp	r24, r16
     93e:	91 07       	cpc	r25, r17
     940:	34 f4       	brge	.+12     	; 0x94e <ATcomcheck(int)+0x46>
     942:	8b e2       	ldi	r24, 0x2B	; 43
     944:	96 e0       	ldi	r25, 0x06	; 6
     946:	0e 94 4a 0a 	call	0x1494	; 0x1494 <HardwareSerial::read()>
     94a:	89 93       	st	Y+, r24
     94c:	f4 cf       	rjmp	.-24     	; 0x936 <ATcomcheck(int)+0x2e>
     94e:	6e e2       	ldi	r22, 0x2E	; 46
     950:	72 e0       	ldi	r23, 0x02	; 2
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	0e 94 14 12 	call	0x2428	; 0x2428 <strstr>
     95a:	ec 01       	movw	r28, r24
     95c:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	cd 2b       	or	r28, r29
     964:	09 f4       	brne	.+2      	; 0x968 <ATcomcheck(int)+0x60>
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <siminit()>:
_Z7siminitv():
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     97a:	88 23       	and	r24, r24
     97c:	c1 f0       	breq	.+48     	; 0x9ae <siminit()+0x3c>
     97e:	c5 e0       	ldi	r28, 0x05	; 5
     980:	d0 e0       	ldi	r29, 0x00	; 0
     982:	6c e7       	ldi	r22, 0x7C	; 124
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	8b e2       	ldi	r24, 0x2B	; 43
     988:	96 e0       	ldi	r25, 0x06	; 6
     98a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     98e:	88 ec       	ldi	r24, 0xC8	; 200
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 84 04 	call	0x908	; 0x908 <ATcomcheck(int)>
     996:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <start>
     99a:	81 11       	cpse	r24, r1
     99c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
     9a0:	21 97       	sbiw	r28, 0x01	; 1
     9a2:	79 f7       	brne	.-34     	; 0x982 <siminit()+0x10>
     9a4:	81 11       	cpse	r24, r1
     9a6:	e7 cf       	rjmp	.-50     	; 0x976 <siminit()+0x4>
     9a8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <simpow()>
     9ac:	e4 cf       	rjmp	.-56     	; 0x976 <siminit()+0x4>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	0c 94 07 03 	jmp	0x60e	; 0x60e <clrsimBuffer()>

000009bc <simread()>:
_Z7simreadv():
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	68 eb       	ldi	r22, 0xB8	; 184
     9c6:	7b e0       	ldi	r23, 0x0B	; 11
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 66 10 	call	0x20cc	; 0x20cc <delay>
     9d0:	8b e2       	ldi	r24, 0x2B	; 43
     9d2:	96 e0       	ldi	r25, 0x06	; 6
     9d4:	0e 94 30 0a 	call	0x1460	; 0x1460 <HardwareSerial::available()>
     9d8:	89 2b       	or	r24, r25
     9da:	99 f0       	breq	.+38     	; 0xa02 <simread()+0x46>
     9dc:	8b e2       	ldi	r24, 0x2B	; 43
     9de:	96 e0       	ldi	r25, 0x06	; 6
     9e0:	0e 94 30 0a 	call	0x1460	; 0x1460 <HardwareSerial::available()>
     9e4:	8c 01       	movw	r16, r24
     9e6:	c2 e0       	ldi	r28, 0x02	; 2
     9e8:	d3 e0       	ldi	r29, 0x03	; 3
     9ea:	ce 01       	movw	r24, r28
     9ec:	82 50       	subi	r24, 0x02	; 2
     9ee:	93 40       	sbci	r25, 0x03	; 3
     9f0:	80 17       	cp	r24, r16
     9f2:	91 07       	cpc	r25, r17
     9f4:	6c f7       	brge	.-38     	; 0x9d0 <simread()+0x14>
     9f6:	8b e2       	ldi	r24, 0x2B	; 43
     9f8:	96 e0       	ldi	r25, 0x06	; 6
     9fa:	0e 94 4a 0a 	call	0x1494	; 0x1494 <HardwareSerial::read()>
     9fe:	89 93       	st	Y+, r24
     a00:	f4 cf       	rjmp	.-24     	; 0x9ea <simread()+0x2e>
_ZN5Print5writeEPKc():
     a02:	42 e0       	ldi	r20, 0x02	; 2
     a04:	53 e0       	ldi	r21, 0x03	; 3
     a06:	fa 01       	movw	r30, r20
     a08:	01 90       	ld	r0, Z+
     a0a:	00 20       	and	r0, r0
     a0c:	e9 f7       	brne	.-6      	; 0xa08 <simread()+0x4c>
     a0e:	af 01       	movw	r20, r30
     a10:	43 50       	subi	r20, 0x03	; 3
     a12:	53 40       	sbci	r21, 0x03	; 3
     a14:	62 e0       	ldi	r22, 0x02	; 2
     a16:	73 e0       	ldi	r23, 0x03	; 3
     a18:	8e e8       	ldi	r24, 0x8E	; 142
     a1a:	95 e0       	ldi	r25, 0x05	; 5
     a1c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Print::write(unsigned char const*, unsigned int)>
_Z7simreadv():
     a20:	8e e8       	ldi	r24, 0x8E	; 142
     a22:	95 e0       	ldi	r25, 0x05	; 5
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <Print::println()>

00000a30 <getIMEI()>:
_Z7getIMEIv():
     a30:	63 e6       	ldi	r22, 0x63	; 99
     a32:	72 e0       	ldi	r23, 0x02	; 2
     a34:	8b e2       	ldi	r24, 0x2B	; 43
     a36:	96 e0       	ldi	r25, 0x06	; 6
     a38:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     a3c:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     a40:	ab e0       	ldi	r26, 0x0B	; 11
     a42:	b3 e0       	ldi	r27, 0x03	; 3
     a44:	ee ee       	ldi	r30, 0xEE	; 238
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	81 93       	st	Z+, r24
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	ed 3f       	cpi	r30, 0xFD	; 253
     a50:	f8 07       	cpc	r31, r24
     a52:	d1 f7       	brne	.-12     	; 0xa48 <getIMEI()+0x18>
     a54:	0c 94 07 03 	jmp	0x60e	; 0x60e <clrsimBuffer()>

00000a58 <Sim_Connect()>:
_Z11Sim_Connectv():
     a58:	6c e5       	ldi	r22, 0x5C	; 92
     a5a:	72 e0       	ldi	r23, 0x02	; 2
     a5c:	8b e2       	ldi	r24, 0x2B	; 43
     a5e:	96 e0       	ldi	r25, 0x06	; 6
     a60:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     a64:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     a68:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     a6c:	62 e5       	ldi	r22, 0x52	; 82
     a6e:	72 e0       	ldi	r23, 0x02	; 2
     a70:	8b e2       	ldi	r24, 0x2B	; 43
     a72:	96 e0       	ldi	r25, 0x06	; 6
     a74:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     a78:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     a7c:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     a80:	61 e3       	ldi	r22, 0x31	; 49
     a82:	72 e0       	ldi	r23, 0x02	; 2
     a84:	8b e2       	ldi	r24, 0x2B	; 43
     a86:	96 e0       	ldi	r25, 0x06	; 6
     a88:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     a8c:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     a90:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     a94:	67 e2       	ldi	r22, 0x27	; 39
     a96:	72 e0       	ldi	r23, 0x02	; 2
     a98:	8b e2       	ldi	r24, 0x2B	; 43
     a9a:	96 e0       	ldi	r25, 0x06	; 6
     a9c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     aa0:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     aa4:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     aa8:	63 e1       	ldi	r22, 0x13	; 19
     aaa:	72 e0       	ldi	r23, 0x02	; 2
     aac:	8b e2       	ldi	r24, 0x2B	; 43
     aae:	96 e0       	ldi	r25, 0x06	; 6
     ab0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     ab4:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     ab8:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     abc:	69 e0       	ldi	r22, 0x09	; 9
     abe:	72 e0       	ldi	r23, 0x02	; 2
     ac0:	8b e2       	ldi	r24, 0x2B	; 43
     ac2:	96 e0       	ldi	r25, 0x06	; 6
     ac4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     ac8:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     acc:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	72 e0       	ldi	r23, 0x02	; 2
     ad4:	8b e2       	ldi	r24, 0x2B	; 43
     ad6:	96 e0       	ldi	r25, 0x06	; 6
     ad8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     adc:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     ae0:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     ae4:	66 ef       	ldi	r22, 0xF6	; 246
     ae6:	71 e0       	ldi	r23, 0x01	; 1
     ae8:	8b e2       	ldi	r24, 0x2B	; 43
     aea:	96 e0       	ldi	r25, 0x06	; 6
     aec:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     af0:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     af4:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     af8:	6a ed       	ldi	r22, 0xDA	; 218
     afa:	71 e0       	ldi	r23, 0x01	; 1
     afc:	8b e2       	ldi	r24, 0x2B	; 43
     afe:	96 e0       	ldi	r25, 0x06	; 6
     b00:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     b04:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     b08:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     b0c:	6d ec       	ldi	r22, 0xCD	; 205
     b0e:	71 e0       	ldi	r23, 0x01	; 1
     b10:	8b e2       	ldi	r24, 0x2B	; 43
     b12:	96 e0       	ldi	r25, 0x06	; 6
     b14:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     b18:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     b1c:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     b20:	63 ec       	ldi	r22, 0xC3	; 195
     b22:	71 e0       	ldi	r23, 0x01	; 1
     b24:	8b e2       	ldi	r24, 0x2B	; 43
     b26:	96 e0       	ldi	r25, 0x06	; 6
     b28:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     b2c:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     b30:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     b34:	69 e9       	ldi	r22, 0x99	; 153
     b36:	71 e0       	ldi	r23, 0x01	; 1
     b38:	8b e2       	ldi	r24, 0x2B	; 43
     b3a:	96 e0       	ldi	r25, 0x06	; 6
     b3c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     b40:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     b44:	0c 94 07 03 	jmp	0x60e	; 0x60e <clrsimBuffer()>

00000b48 <setup>:
_ZN14HardwareSerial5beginEm():
     b48:	26 e0       	ldi	r18, 0x06	; 6
     b4a:	40 e8       	ldi	r20, 0x80	; 128
     b4c:	55 e2       	ldi	r21, 0x25	; 37
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	8b e2       	ldi	r24, 0x2B	; 43
     b54:	96 e0       	ldi	r25, 0x06	; 6
     b56:	0e 94 31 0b 	call	0x1662	; 0x1662 <HardwareSerial::begin(unsigned long, unsigned char)>
     b5a:	26 e0       	ldi	r18, 0x06	; 6
     b5c:	40 e8       	ldi	r20, 0x80	; 128
     b5e:	55 e2       	ldi	r21, 0x25	; 37
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	88 ec       	ldi	r24, 0xC8	; 200
     b66:	96 e0       	ldi	r25, 0x06	; 6
     b68:	0e 94 31 0b 	call	0x1662	; 0x1662 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	85 e0       	ldi	r24, 0x05	; 5
     b70:	0e 94 4c 11 	call	0x2298	; 0x2298 <pinMode>
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	85 e0       	ldi	r24, 0x05	; 5
     b78:	0e 94 88 11 	call	0x2310	; 0x2310 <digitalWrite>
     b7c:	60 ed       	ldi	r22, 0xD0	; 208
     b7e:	77 e0       	ldi	r23, 0x07	; 7
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 66 10 	call	0x20cc	; 0x20cc <delay>
     b88:	0e 94 b9 04 	call	0x972	; 0x972 <siminit()>
     b8c:	0e 94 18 05 	call	0xa30	; 0xa30 <getIMEI()>
     b90:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <Sim_Connect()>

00000b94 <Sim_send(short*, int)>:
_Z8Sim_sendPsi():
     b94:	2f 92       	push	r2
     b96:	3f 92       	push	r3
     b98:	4f 92       	push	r4
     b9a:	5f 92       	push	r5
     b9c:	6f 92       	push	r6
     b9e:	7f 92       	push	r7
     ba0:	8f 92       	push	r8
     ba2:	9f 92       	push	r9
     ba4:	af 92       	push	r10
     ba6:	bf 92       	push	r11
     ba8:	cf 92       	push	r12
     baa:	df 92       	push	r13
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	ce 56       	subi	r28, 0x6E	; 110
     bbe:	d1 09       	sbc	r29, r1
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	5c 01       	movw	r10, r24
     bcc:	1b 01       	movw	r2, r22
     bce:	7e 01       	movw	r14, r28
     bd0:	27 e4       	ldi	r18, 0x47	; 71
     bd2:	e2 0e       	add	r14, r18
     bd4:	f1 1c       	adc	r15, r1
     bd6:	8d e0       	ldi	r24, 0x0D	; 13
     bd8:	e8 e1       	ldi	r30, 0x18	; 24
     bda:	f2 e0       	ldi	r31, 0x02	; 2
     bdc:	d7 01       	movw	r26, r14
     bde:	01 90       	ld	r0, Z+
     be0:	0d 92       	st	X+, r0
     be2:	8a 95       	dec	r24
     be4:	e1 f7       	brne	.-8      	; 0xbde <Sim_send(short*, int)+0x4a>
     be6:	f7 01       	movw	r30, r14
     be8:	3d 96       	adiw	r30, 0x0d	; 13
     bea:	87 e0       	ldi	r24, 0x07	; 7
     bec:	df 01       	movw	r26, r30
     bee:	1d 92       	st	X+, r1
     bf0:	8a 95       	dec	r24
     bf2:	e9 f7       	brne	.-6      	; 0xbee <Sim_send(short*, int)+0x5a>
     bf4:	8e 01       	movw	r16, r28
     bf6:	0f 5f       	subi	r16, 0xFF	; 255
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	82 e3       	ldi	r24, 0x32	; 50
     bfc:	f8 01       	movw	r30, r16
     bfe:	11 92       	st	Z+, r1
     c00:	8a 95       	dec	r24
     c02:	e9 f7       	brne	.-6      	; 0xbfe <Sim_send(short*, int)+0x6a>
     c04:	2e 01       	movw	r4, r28
     c06:	f5 e6       	ldi	r31, 0x65	; 101
     c08:	4f 0e       	add	r4, r31
     c0a:	51 1c       	adc	r5, r1
     c0c:	8a e0       	ldi	r24, 0x0A	; 10
     c0e:	d2 01       	movw	r26, r4
     c10:	e8 2f       	mov	r30, r24
     c12:	1d 92       	st	X+, r1
     c14:	ea 95       	dec	r30
     c16:	e9 f7       	brne	.-6      	; 0xc12 <Sim_send(short*, int)+0x7e>
     c18:	6e 01       	movw	r12, r28
     c1a:	fb e5       	ldi	r31, 0x5B	; 91
     c1c:	cf 0e       	add	r12, r31
     c1e:	d1 1c       	adc	r13, r1
     c20:	d6 01       	movw	r26, r12
     c22:	1d 92       	st	X+, r1
     c24:	8a 95       	dec	r24
     c26:	e9 f7       	brne	.-6      	; 0xc22 <Sim_send(short*, int)+0x8e>
     c28:	8e ee       	ldi	r24, 0xEE	; 238
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	9f 93       	push	r25
     c2e:	8f 93       	push	r24
     c30:	1f 93       	push	r17
     c32:	0f 93       	push	r16
     c34:	0e 94 2e 12 	call	0x245c	; 0x245c <sprintf>
     c38:	66 e0       	ldi	r22, 0x06	; 6
     c3a:	72 e0       	ldi	r23, 0x02	; 2
     c3c:	c8 01       	movw	r24, r16
     c3e:	0e 94 09 12 	call	0x2412	; 0x2412 <strcat>
     c42:	63 e0       	ldi	r22, 0x03	; 3
     c44:	72 e0       	ldi	r23, 0x02	; 2
     c46:	c8 01       	movw	r24, r16
     c48:	0e 94 09 12 	call	0x2412	; 0x2412 <strcat>
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	72 e0       	ldi	r23, 0x02	; 2
     c50:	c8 01       	movw	r24, r16
     c52:	0e 94 09 12 	call	0x2412	; 0x2412 <strcat>
     c56:	35 01       	movw	r6, r10
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	b1 2c       	mov	r11, r1
     c62:	a1 2c       	mov	r10, r1
     c64:	91 e3       	ldi	r25, 0x31	; 49
     c66:	89 2e       	mov	r8, r25
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	99 2e       	mov	r9, r25
     c6c:	a2 14       	cp	r10, r2
     c6e:	b3 04       	cpc	r11, r3
     c70:	e4 f4       	brge	.+56     	; 0xcaa <Sim_send(short*, int)+0x116>
     c72:	f3 01       	movw	r30, r6
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	f2 e0       	ldi	r31, 0x02	; 2
     c7a:	6f 0e       	add	r6, r31
     c7c:	71 1c       	adc	r7, r1
     c7e:	9f 93       	push	r25
     c80:	8f 93       	push	r24
     c82:	9f 92       	push	r9
     c84:	8f 92       	push	r8
     c86:	5f 92       	push	r5
     c88:	4f 92       	push	r4
     c8a:	0e 94 2e 12 	call	0x245c	; 0x245c <sprintf>
     c8e:	b2 01       	movw	r22, r4
     c90:	c8 01       	movw	r24, r16
     c92:	0e 94 09 12 	call	0x2412	; 0x2412 <strcat>
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	a2 1a       	sub	r10, r18
     c9a:	b2 0a       	sbc	r11, r18
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	e1 cf       	rjmp	.-62     	; 0xc6c <Sim_send(short*, int)+0xd8>
     caa:	64 e3       	ldi	r22, 0x34	; 52
     cac:	72 e0       	ldi	r23, 0x02	; 2
     cae:	c8 01       	movw	r24, r16
     cb0:	0e 94 09 12 	call	0x2412	; 0x2412 <strcat>
     cb4:	f8 01       	movw	r30, r16
     cb6:	01 90       	ld	r0, Z+
     cb8:	00 20       	and	r0, r0
     cba:	e9 f7       	brne	.-6      	; 0xcb6 <Sim_send(short*, int)+0x122>
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	bf 01       	movw	r22, r30
     cc0:	60 1b       	sub	r22, r16
     cc2:	71 0b       	sbc	r23, r17
     cc4:	c8 01       	movw	r24, r16
     cc6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <CRC16_xmodem(unsigned char*, int)>
     cca:	9f 93       	push	r25
     ccc:	8f 93       	push	r24
     cce:	87 e3       	ldi	r24, 0x37	; 55
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	df 92       	push	r13
     cd8:	cf 92       	push	r12
     cda:	0e 94 2e 12 	call	0x245c	; 0x245c <sprintf>
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	b1 2c       	mov	r11, r1
     cec:	a1 2c       	mov	r10, r1
     cee:	85 e0       	ldi	r24, 0x05	; 5
     cf0:	88 2e       	mov	r8, r24
     cf2:	91 2c       	mov	r9, r1
     cf4:	f6 01       	movw	r30, r12
     cf6:	01 90       	ld	r0, Z+
     cf8:	00 20       	and	r0, r0
     cfa:	e9 f7       	brne	.-6      	; 0xcf6 <Sim_send(short*, int)+0x162>
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	ec 19       	sub	r30, r12
     d00:	fd 09       	sbc	r31, r13
     d02:	c4 01       	movw	r24, r8
     d04:	8e 1b       	sub	r24, r30
     d06:	9f 0b       	sbc	r25, r31
     d08:	a8 16       	cp	r10, r24
     d0a:	b9 06       	cpc	r11, r25
     d0c:	48 f4       	brcc	.+18     	; 0xd20 <Sim_send(short*, int)+0x18c>
     d0e:	65 e3       	ldi	r22, 0x35	; 53
     d10:	72 e0       	ldi	r23, 0x02	; 2
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 09 12 	call	0x2412	; 0x2412 <strcat>
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	a8 1a       	sub	r10, r24
     d1c:	b8 0a       	sbc	r11, r24
     d1e:	ea cf       	rjmp	.-44     	; 0xcf4 <Sim_send(short*, int)+0x160>
     d20:	b6 01       	movw	r22, r12
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 09 12 	call	0x2412	; 0x2412 <strcat>
     d28:	f8 01       	movw	r30, r16
     d2a:	01 90       	ld	r0, Z+
     d2c:	00 20       	and	r0, r0
     d2e:	e9 f7       	brne	.-6      	; 0xd2a <Sim_send(short*, int)+0x196>
     d30:	31 97       	sbiw	r30, 0x01	; 1
     d32:	af 01       	movw	r20, r30
     d34:	40 1b       	sub	r20, r16
     d36:	51 0b       	sbc	r21, r17
_ZN5Print5writeEPKcj():
     d38:	b8 01       	movw	r22, r16
     d3a:	8e e8       	ldi	r24, 0x8E	; 142
     d3c:	95 e0       	ldi	r25, 0x05	; 5
     d3e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Print::write(unsigned char const*, unsigned int)>
_Z8Sim_sendPsi():
     d42:	8e e8       	ldi	r24, 0x8E	; 142
     d44:	95 e0       	ldi	r25, 0x05	; 5
     d46:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <Print::println()>
     d4a:	f8 01       	movw	r30, r16
     d4c:	01 90       	ld	r0, Z+
     d4e:	00 20       	and	r0, r0
     d50:	e9 f7       	brne	.-6      	; 0xd4c <Sim_send(short*, int)+0x1b8>
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	e0 1b       	sub	r30, r16
     d56:	f1 0b       	sbc	r31, r17
     d58:	ff 93       	push	r31
     d5a:	ef 93       	push	r30
     d5c:	87 e3       	ldi	r24, 0x37	; 55
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	6e 01       	movw	r12, r28
     d66:	93 e3       	ldi	r25, 0x33	; 51
     d68:	c9 0e       	add	r12, r25
     d6a:	d1 1c       	adc	r13, r1
     d6c:	df 92       	push	r13
     d6e:	cf 92       	push	r12
     d70:	0e 94 2e 12 	call	0x245c	; 0x245c <sprintf>
     d74:	b6 01       	movw	r22, r12
     d76:	c7 01       	movw	r24, r14
     d78:	0e 94 09 12 	call	0x2412	; 0x2412 <strcat>
     d7c:	f7 01       	movw	r30, r14
     d7e:	01 90       	ld	r0, Z+
     d80:	00 20       	and	r0, r0
     d82:	e9 f7       	brne	.-6      	; 0xd7e <Sim_send(short*, int)+0x1ea>
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	af 01       	movw	r20, r30
     d88:	4e 19       	sub	r20, r14
     d8a:	5f 09       	sbc	r21, r15
_ZN5Print5writeEPKcj():
     d8c:	b7 01       	movw	r22, r14
     d8e:	8b e2       	ldi	r24, 0x2B	; 43
     d90:	96 e0       	ldi	r25, 0x06	; 6
     d92:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Print::write(unsigned char const*, unsigned int)>
_Z8Sim_sendPsi():
     d96:	8b e2       	ldi	r24, 0x2B	; 43
     d98:	96 e0       	ldi	r25, 0x06	; 6
     d9a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <Print::println()>
     d9e:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     da2:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     da6:	f8 01       	movw	r30, r16
     da8:	01 90       	ld	r0, Z+
     daa:	00 20       	and	r0, r0
     dac:	e9 f7       	brne	.-6      	; 0xda8 <Sim_send(short*, int)+0x214>
     dae:	31 97       	sbiw	r30, 0x01	; 1
     db0:	af 01       	movw	r20, r30
     db2:	40 1b       	sub	r20, r16
     db4:	51 0b       	sbc	r21, r17
_ZN5Print5writeEPKcj():
     db6:	b8 01       	movw	r22, r16
     db8:	8b e2       	ldi	r24, 0x2B	; 43
     dba:	96 e0       	ldi	r25, 0x06	; 6
     dbc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Print::write(unsigned char const*, unsigned int)>
_Z8Sim_sendPsi():
     dc0:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     dc4:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     dc8:	6e e8       	ldi	r22, 0x8E	; 142
     dca:	71 e0       	ldi	r23, 0x01	; 1
     dcc:	8b e2       	ldi	r24, 0x2B	; 43
     dce:	96 e0       	ldi	r25, 0x06	; 6
     dd0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     dd4:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     dd8:	0e 94 07 03 	call	0x60e	; 0x60e <clrsimBuffer()>
     ddc:	6f e7       	ldi	r22, 0x7F	; 127
     dde:	71 e0       	ldi	r23, 0x01	; 1
     de0:	8b e2       	ldi	r24, 0x2B	; 43
     de2:	96 e0       	ldi	r25, 0x06	; 6
     de4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Print::println(__FlashStringHelper const*)>
     de8:	0e 94 de 04 	call	0x9bc	; 0x9bc <simread()>
     dec:	0e 94 0f 03 	call	0x61e	; 0x61e <simReadData()>
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	c2 59       	subi	r28, 0x92	; 146
     dfe:	df 4f       	sbci	r29, 0xFF	; 255
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	bf 90       	pop	r11
     e1c:	af 90       	pop	r10
     e1e:	9f 90       	pop	r9
     e20:	8f 90       	pop	r8
     e22:	7f 90       	pop	r7
     e24:	6f 90       	pop	r6
     e26:	5f 90       	pop	r5
     e28:	4f 90       	pop	r4
     e2a:	3f 90       	pop	r3
     e2c:	2f 90       	pop	r2
     e2e:	08 95       	ret

00000e30 <modbusread()>:
_Z10modbusreadv():
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	6c e2       	ldi	r22, 0x2C	; 44
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 66 10 	call	0x20cc	; 0x20cc <delay>
     e44:	88 ec       	ldi	r24, 0xC8	; 200
     e46:	96 e0       	ldi	r25, 0x06	; 6
     e48:	0e 94 30 0a 	call	0x1460	; 0x1460 <HardwareSerial::available()>
     e4c:	89 2b       	or	r24, r25
     e4e:	29 f1       	breq	.+74     	; 0xe9a <modbusread()+0x6a>
     e50:	88 ec       	ldi	r24, 0xC8	; 200
     e52:	96 e0       	ldi	r25, 0x06	; 6
     e54:	0e 94 30 0a 	call	0x1460	; 0x1460 <HardwareSerial::available()>
     e58:	8c 01       	movw	r16, r24
     e5a:	c2 e4       	ldi	r28, 0x42	; 66
     e5c:	d4 e0       	ldi	r29, 0x04	; 4
     e5e:	ce 01       	movw	r24, r28
     e60:	82 54       	subi	r24, 0x42	; 66
     e62:	94 40       	sbci	r25, 0x04	; 4
     e64:	80 17       	cp	r24, r16
     e66:	91 07       	cpc	r25, r17
     e68:	9c f4       	brge	.+38     	; 0xe90 <modbusread()+0x60>
     e6a:	88 ec       	ldi	r24, 0xC8	; 200
     e6c:	96 e0       	ldi	r25, 0x06	; 6
     e6e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <HardwareSerial::read()>
     e72:	89 93       	st	Y+, r24
     e74:	40 e1       	ldi	r20, 0x10	; 16
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	68 2f       	mov	r22, r24
     e7a:	8e e8       	ldi	r24, 0x8E	; 142
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Print::print(unsigned char, int)>
     e82:	6c e2       	ldi	r22, 0x2C	; 44
     e84:	72 e0       	ldi	r23, 0x02	; 2
     e86:	8e e8       	ldi	r24, 0x8E	; 142
     e88:	95 e0       	ldi	r25, 0x05	; 5
     e8a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <Print::print(char const*)>
     e8e:	e7 cf       	rjmp	.-50     	; 0xe5e <modbusread()+0x2e>
     e90:	8e e8       	ldi	r24, 0x8E	; 142
     e92:	95 e0       	ldi	r25, 0x05	; 5
     e94:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <Print::println()>
     e98:	d5 cf       	rjmp	.-86     	; 0xe44 <modbusread()+0x14>
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret

00000ea4 <readholdingregisters(unsigned char, short, short)>:
_Z20readholdingregistershss():
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <readholdingregisters(unsigned char, short, short)+0x6>
     eaa:	00 d0       	rcall	.+0      	; 0xeac <readholdingregisters(unsigned char, short, short)+0x8>
     eac:	1f 92       	push	r1
     eae:	1f 92       	push	r1
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	8a 83       	std	Y+2, r24	; 0x02
     eba:	7b 83       	std	Y+3, r23	; 0x03
     ebc:	6c 83       	std	Y+4, r22	; 0x04
     ebe:	5d 83       	std	Y+5, r21	; 0x05
     ec0:	4e 83       	std	Y+6, r20	; 0x06
     ec2:	66 e0       	ldi	r22, 0x06	; 6
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	0e 94 4c 04 	call	0x898	; 0x898 <CRC16_modbus(unsigned char*, int)>
     ece:	8f 83       	std	Y+7, r24	; 0x07
     ed0:	98 87       	std	Y+8, r25	; 0x08
     ed2:	48 e0       	ldi	r20, 0x08	; 8
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	be 01       	movw	r22, r28
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	88 ec       	ldi	r24, 0xC8	; 200
     ede:	96 e0       	ldi	r25, 0x06	; 6
     ee0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Print::write(unsigned char const*, unsigned int)>
     ee4:	0e 94 18 07 	call	0xe30	; 0xe30 <modbusread()>
     ee8:	28 96       	adiw	r28, 0x08	; 8
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <writecoils(unsigned char, short, short, unsigned char*)>:
_Z10writecoilshssPh():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:764

void writecoils(byte slave, short adress, short qty, byte* out) { // Write multiple coils
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	e2 97       	sbiw	r28, 0x32	; 50
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	d9 01       	movw	r26, r18
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:770

  byte ADU[50];
  byte ADUsize = 0;
  int CRC;

  ADU[ADUsize++] = slave;
     f18:	89 83       	std	Y+1, r24	; 0x01
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:771
  ADU[ADUsize++] = 0x0F;
     f1a:	8f e0       	ldi	r24, 0x0F	; 15
     f1c:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:772
  ADU[ADUsize++] = highByte(adress);
     f1e:	7b 83       	std	Y+3, r23	; 0x03
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:773
  ADU[ADUsize++] = lowByte(adress);
     f20:	6c 83       	std	Y+4, r22	; 0x04
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:774
  ADU[ADUsize++] = highByte(qty);
     f22:	5d 83       	std	Y+5, r21	; 0x05
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:775
  ADU[ADUsize++] = lowByte(qty);
     f24:	4e 83       	std	Y+6, r20	; 0x06
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:776
  ADU[ADUsize++] = (qty / 8) + ((qty % 8) != 0);            // Calculate number of bytes pr. bit qty e.g 2 = 1 byte, 8 = 1 byte, 11 = 2 bytes.
     f26:	ca 01       	movw	r24, r20
     f28:	57 fd       	sbrc	r21, 7
     f2a:	07 96       	adiw	r24, 0x07	; 7
     f2c:	23 e0       	ldi	r18, 0x03	; 3
     f2e:	95 95       	asr	r25
     f30:	87 95       	ror	r24
     f32:	2a 95       	dec	r18
     f34:	e1 f7       	brne	.-8      	; 0xf2e <writecoils(unsigned char, short, short, unsigned char*)+0x34>
     f36:	47 70       	andi	r20, 0x07	; 7
     f38:	55 27       	eor	r21, r21
     f3a:	01 e0       	ldi	r16, 0x01	; 1
     f3c:	45 2b       	or	r20, r21
     f3e:	09 f4       	brne	.+2      	; 0xf42 <writecoils(unsigned char, short, short, unsigned char*)+0x48>
     f40:	00 e0       	ldi	r16, 0x00	; 0
     f42:	20 2f       	mov	r18, r16
     f44:	28 0f       	add	r18, r24
     f46:	2f 83       	std	Y+7, r18	; 0x07
     f48:	bd 01       	movw	r22, r26
     f4a:	37 e0       	ldi	r19, 0x07	; 7
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:778

  for (int i = 0; i < (qty / 8) + ((qty % 8) != 0); i++) {  // Put output array in bytes into the ADU
     f4c:	08 0f       	add	r16, r24
     f4e:	19 2f       	mov	r17, r25
     f50:	11 1d       	adc	r17, r1
     f52:	e3 2e       	mov	r14, r19
     f54:	f1 2c       	mov	r15, r1
     f56:	3f 5f       	subi	r19, 0xFF	; 255
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:778 (discriminator 3)
     f58:	cb 01       	movw	r24, r22
     f5a:	8a 1b       	sub	r24, r26
     f5c:	9b 0b       	sbc	r25, r27
     f5e:	80 17       	cp	r24, r16
     f60:	91 07       	cpc	r25, r17
     f62:	64 f4       	brge	.+24     	; 0xf7c <writecoils(unsigned char, short, short, unsigned char*)+0x82>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:779 (discriminator 2)
    ADU[ADUsize++] = out[i];
     f64:	fb 01       	movw	r30, r22
     f66:	81 91       	ld	r24, Z+
     f68:	bf 01       	movw	r22, r30
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	4c 0f       	add	r20, r28
     f70:	5d 1f       	adc	r21, r29
     f72:	e4 0e       	add	r14, r20
     f74:	f5 1e       	adc	r15, r21
     f76:	f7 01       	movw	r30, r14
     f78:	80 83       	st	Z, r24
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:778 (discriminator 2)
  ADU[ADUsize++] = lowByte(adress);
  ADU[ADUsize++] = highByte(qty);
  ADU[ADUsize++] = lowByte(qty);
  ADU[ADUsize++] = (qty / 8) + ((qty % 8) != 0);            // Calculate number of bytes pr. bit qty e.g 2 = 1 byte, 8 = 1 byte, 11 = 2 bytes.

  for (int i = 0; i < (qty / 8) + ((qty % 8) != 0); i++) {  // Put output array in bytes into the ADU
     f7a:	eb cf       	rjmp	.-42     	; 0xf52 <writecoils(unsigned char, short, short, unsigned char*)+0x58>
     f7c:	17 fd       	sbrc	r17, 7
     f7e:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:782
    ADU[ADUsize++] = out[i];
  }

  CRC = CRC16_modbus(ADU, ADUsize);
     f80:	b7 01       	movw	r22, r14
     f82:	ce 01       	movw	r24, r28
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	0e 94 4c 04 	call	0x898	; 0x898 <CRC16_modbus(unsigned char*, int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:783
  ADU[ADUsize++] = lowByte(CRC);
     f8a:	e1 e0       	ldi	r30, 0x01	; 1
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	ec 0f       	add	r30, r28
     f90:	fd 1f       	adc	r31, r29
     f92:	ee 0d       	add	r30, r14
     f94:	ff 1d       	adc	r31, r15
     f96:	80 83       	st	Z, r24
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:784
  ADU[ADUsize++] = highByte(CRC);
     f98:	e8 e0       	ldi	r30, 0x08	; 8
     f9a:	e0 0f       	add	r30, r16
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	2c 0f       	add	r18, r28
     fa2:	3d 1f       	adc	r19, r29
     fa4:	2e 0f       	add	r18, r30
     fa6:	31 1d       	adc	r19, r1
     fa8:	f9 01       	movw	r30, r18
     faa:	90 83       	st	Z, r25
     fac:	07 5f       	subi	r16, 0xF7	; 247
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:786

  modbusSerial.write(ADU, ADUsize);
     fae:	40 2f       	mov	r20, r16
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	be 01       	movw	r22, r28
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	88 ec       	ldi	r24, 0xC8	; 200
     fba:	96 e0       	ldi	r25, 0x06	; 6
     fbc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Print::write(unsigned char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:788

  modbusread();
     fc0:	0e 94 18 07 	call	0xe30	; 0xe30 <modbusread()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:789
}
     fc4:	e2 96       	adiw	r28, 0x32	; 50
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	08 95       	ret

00000fde <loop>:
loop():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:76
  // clrsimBuffer();


}

void loop() {
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:131
  //     Serial.print(" ");
  //   }
  //   Serial.println();
  // }
  
  readholdingregisters(1, 0, 1);    // Read holding register af tempurature of slave 1
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	0e 94 52 07 	call	0xea4	; 0xea4 <readholdingregisters(unsigned char, short, short)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:133

  dataByte = modbusValue();         // Put the data into databyte
     ff0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <modbusValue()>
     ff4:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <dataByte+0x1>
     ff8:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <dataByte>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:135

  dataShort = tempConvert(bytesToShort(dataByte, lengthCounter), lengthCounter);    // Make the bytes to short and convert it into the correct value for the server to read
     ffc:	c0 91 ea 02 	lds	r28, 0x02EA	; 0x8002ea <lengthCounter>
    1000:	d0 91 eb 02 	lds	r29, 0x02EB	; 0x8002eb <lengthCounter+0x1>
    1004:	be 01       	movw	r22, r28
    1006:	0e 94 78 02 	call	0x4f0	; 0x4f0 <bytesToShort(unsigned char*, int)>
    100a:	be 01       	movw	r22, r28
    100c:	0e 94 c8 02 	call	0x590	; 0x590 <tempConvert(short*, int)>
    1010:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <dataShort+0x1>
    1014:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <dataShort>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:137

  Sim_send(dataShort, lengthCounter);     // Send the input data of slave 1 to the sim module and read the respone
    1018:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <lengthCounter>
    101c:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <lengthCounter+0x1>
    1020:	0e 94 ca 05 	call	0xb94	; 0xb94 <Sim_send(short*, int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:139

  writecoils(2, 0, 1, relaySimToMod());   // Write relay output to slave 3 from sim module response
    1024:	0e 94 06 02 	call	0x40c	; 0x40c <relaySimToMod()>
    1028:	9c 01       	movw	r18, r24
    102a:	41 e0       	ldi	r20, 0x01	; 1
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	0e 94 7d 07 	call	0xefa	; 0xefa <writecoils(unsigned char, short, short, unsigned char*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:143
  clrmodBuffer();                         // Clear modbus buffer

  // writeTerminal();                        // Function to normal write to sim module
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Sim7080_modbus_com/Sim7080_modbus_com.ino:140
  dataShort = tempConvert(bytesToShort(dataByte, lengthCounter), lengthCounter);    // Make the bytes to short and convert it into the correct value for the server to read

  Sim_send(dataShort, lengthCounter);     // Send the input data of slave 1 to the sim module and read the respone

  writecoils(2, 0, 1, relaySimToMod());   // Write relay output to slave 3 from sim module response
  clrmodBuffer();                         // Clear modbus buffer
    103c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <clrmodBuffer()>

00001040 <__vector_10>:
__vector_11():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	0b b6       	in	r0, 0x3b	; 59
    104c:	0f 92       	push	r0
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    1066:	e0 91 e8 04 	lds	r30, 0x04E8	; 0x8004e8 <SoftwareSerial::active_object>
    106a:	f0 91 e9 04 	lds	r31, 0x04E9	; 0x8004e9 <SoftwareSerial::active_object+0x1>
    106e:	30 97       	sbiw	r30, 0x00	; 0
    1070:	49 f0       	breq	.+18     	; 0x1084 <__vector_10+0x44>
    1072:	a6 85       	ldd	r26, Z+14	; 0x0e
    1074:	b7 85       	ldd	r27, Z+15	; 0x0f
    1076:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1078:	96 8d       	ldd	r25, Z+30	; 0x1e
    107a:	91 ff       	sbrs	r25, 1
    107c:	16 c0       	rjmp	.+44     	; 0x10aa <__vector_10+0x6a>
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    107e:	9c 91       	ld	r25, X
    1080:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1082:	b1 f4       	brne	.+44     	; 0x10b0 <__vector_10+0x70>
__vector_11():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    1084:	ff 91       	pop	r31
    1086:	ef 91       	pop	r30
    1088:	bf 91       	pop	r27
    108a:	af 91       	pop	r26
    108c:	9f 91       	pop	r25
    108e:	8f 91       	pop	r24
    1090:	7f 91       	pop	r23
    1092:	6f 91       	pop	r22
    1094:	5f 91       	pop	r21
    1096:	4f 91       	pop	r20
    1098:	3f 91       	pop	r19
    109a:	2f 91       	pop	r18
    109c:	0f 90       	pop	r0
    109e:	0b be       	out	0x3b, r0	; 59
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    10aa:	9c 91       	ld	r25, X
    10ac:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    10ae:	51 f7       	brne	.-44     	; 0x1084 <__vector_10+0x44>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    10b0:	a3 89       	ldd	r26, Z+19	; 0x13
    10b2:	b4 89       	ldd	r27, Z+20	; 0x14
    10b4:	9c 91       	ld	r25, X
    10b6:	85 89       	ldd	r24, Z+21	; 0x15
    10b8:	80 95       	com	r24
    10ba:	89 23       	and	r24, r25
    10bc:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    10be:	86 89       	ldd	r24, Z+22	; 0x16
    10c0:	97 89       	ldd	r25, Z+23	; 0x17
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <__vector_10+0x82>
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    10c6:	60 8d       	ldd	r22, Z+24	; 0x18
    10c8:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    10ca:	a6 85       	ldd	r26, Z+14	; 0x0e
    10cc:	b7 85       	ldd	r27, Z+15	; 0x0f
    10ce:	55 85       	ldd	r21, Z+13	; 0x0d
    10d0:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif

  uint8_t d = 0;
    10d2:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    10d4:	cb 01       	movw	r24, r22
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <__vector_10+0x96>
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    10da:	82 2f       	mov	r24, r18
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	95 95       	asr	r25
    10e0:	87 95       	ror	r24
    10e2:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    10e4:	4c 91       	ld	r20, X
    10e6:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    10e8:	09 f0       	breq	.+2      	; 0x10ec <__vector_10+0xac>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    10ea:	20 68       	ori	r18, 0x80	; 128
    10ec:	31 50       	subi	r19, 0x01	; 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    10ee:	91 f7       	brne	.-28     	; 0x10d4 <__vector_10+0x94>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    10f0:	86 8d       	ldd	r24, Z+30	; 0x1e
    10f2:	81 fd       	sbrc	r24, 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    10f4:	20 95       	com	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    10f6:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <SoftwareSerial::_receive_buffer_tail>
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	8f 73       	andi	r24, 0x3F	; 63
    1100:	99 27       	eor	r25, r25
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    1102:	30 91 a6 04 	lds	r19, 0x04A6	; 0x8004a6 <SoftwareSerial::_receive_buffer_head>
    1106:	38 17       	cp	r19, r24
    1108:	99 f0       	breq	.+38     	; 0x1130 <__vector_10+0xf0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    110a:	a0 91 a7 04 	lds	r26, 0x04A7	; 0x8004a7 <SoftwareSerial::_receive_buffer_tail>
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	a8 55       	subi	r26, 0x58	; 88
    1112:	bb 4f       	sbci	r27, 0xFB	; 251
    1114:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    1116:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    111a:	82 8d       	ldd	r24, Z+26	; 0x1a
    111c:	93 8d       	ldd	r25, Z+27	; 0x1b
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <__vector_10+0xde>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    1122:	a3 89       	ldd	r26, Z+19	; 0x13
    1124:	b4 89       	ldd	r27, Z+20	; 0x14
    1126:	8c 91       	ld	r24, X
    1128:	95 89       	ldd	r25, Z+21	; 0x15
    112a:	89 2b       	or	r24, r25
    112c:	8c 93       	st	X, r24
__vector_11():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    112e:	aa cf       	rjmp	.-172    	; 0x1084 <__vector_10+0x44>
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    }
    else
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    1130:	86 8d       	ldd	r24, Z+30	; 0x1e
    1132:	81 60       	ori	r24, 0x01	; 1
    1134:	86 8f       	std	Z+30, r24	; 0x1e
    1136:	f1 cf       	rjmp	.-30     	; 0x111a <__vector_10+0xda>

00001138 <__vector_47>:
__vector_47():
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.h:54
	int peek();
	int read();
	int available();
#if ARDUINO >= 100
	size_t write(uint8_t byte) { writeByte(byte); return 1; }
	void flush() { flushOutput(); }
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	0b b6       	in	r0, 0x3b	; 59
    1144:	0f 92       	push	r0
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
    115a:	20 91 32 05 	lds	r18, 0x0532	; 0x800532 <tx_state>
    115e:	60 91 31 05 	lds	r22, 0x0531	; 0x800531 <tx_byte>
    1162:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    1166:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    116a:	40 91 8c 05 	lds	r20, 0x058C	; 0x80058c <ticks_per_bit>
    116e:	50 91 8d 05 	lds	r21, 0x058D	; 0x80058d <ticks_per_bit+0x1>
    1172:	30 91 30 05 	lds	r19, 0x0530	; 0x800530 <tx_bit>
    1176:	2a 30       	cpi	r18, 0x0A	; 10
    1178:	80 f5       	brcc	.+96     	; 0x11da <__vector_47+0xa2>
    117a:	84 0f       	add	r24, r20
    117c:	95 1f       	adc	r25, r21
    117e:	76 2f       	mov	r23, r22
    1180:	71 70       	andi	r23, 0x01	; 1
    1182:	29 30       	cpi	r18, 0x09	; 9
    1184:	09 f4       	brne	.+2      	; 0x1188 <__vector_47+0x50>
    1186:	71 e0       	ldi	r23, 0x01	; 1
    1188:	66 95       	lsr	r22
    118a:	2f 5f       	subi	r18, 0xFF	; 255
    118c:	37 17       	cp	r19, r23
    118e:	99 f3       	breq	.-26     	; 0x1176 <__vector_47+0x3e>
    1190:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1194:	77 23       	and	r23, r23
    1196:	f1 f0       	breq	.+60     	; 0x11d4 <__vector_47+0x9c>
    1198:	30 6c       	ori	r19, 0xC0	; 192
    119a:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    119e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    11a2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    11a6:	70 93 30 05 	sts	0x0530, r23	; 0x800530 <tx_bit>
    11aa:	60 93 31 05 	sts	0x0531, r22	; 0x800531 <tx_byte>
    11ae:	20 93 32 05 	sts	0x0532, r18	; 0x800532 <tx_state>
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0b be       	out	0x3b, r0	; 59
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti
    11d4:	3f 7b       	andi	r19, 0xBF	; 191
    11d6:	30 68       	ori	r19, 0x80	; 128
    11d8:	e0 cf       	rjmp	.-64     	; 0x119a <__vector_47+0x62>
    11da:	30 91 2f 05 	lds	r19, 0x052F	; 0x80052f <tx_buffer_head>
    11de:	e0 91 2e 05 	lds	r30, 0x052E	; 0x80052e <tx_buffer_tail>
    11e2:	3e 13       	cpse	r19, r30
    11e4:	19 c0       	rjmp	.+50     	; 0x1218 <__vector_47+0xe0>
    11e6:	2a 30       	cpi	r18, 0x0A	; 10
    11e8:	51 f4       	brne	.+20     	; 0x11fe <__vector_47+0xc6>
    11ea:	2b e0       	ldi	r18, 0x0B	; 11
    11ec:	20 93 32 05 	sts	0x0532, r18	; 0x800532 <tx_state>
    11f0:	84 0f       	add	r24, r20
    11f2:	95 1f       	adc	r25, r21
    11f4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    11f8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    11fc:	da cf       	rjmp	.-76     	; 0x11b2 <__vector_47+0x7a>
    11fe:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <tx_state>
    1202:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1206:	8f 73       	andi	r24, 0x3F	; 63
    1208:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    120c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1210:	8d 7f       	andi	r24, 0xFD	; 253
    1212:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1216:	cd cf       	rjmp	.-102    	; 0x11b2 <__vector_47+0x7a>
    1218:	ef 5f       	subi	r30, 0xFF	; 255
    121a:	e4 34       	cpi	r30, 0x44	; 68
    121c:	08 f0       	brcs	.+2      	; 0x1220 <__vector_47+0xe8>
    121e:	e0 e0       	ldi	r30, 0x00	; 0
    1220:	e0 93 2e 05 	sts	0x052E, r30	; 0x80052e <tx_buffer_tail>
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	e6 51       	subi	r30, 0x16	; 22
    1228:	fb 4f       	sbci	r31, 0xFB	; 251
    122a:	30 81       	ld	r19, Z
    122c:	30 93 31 05 	sts	0x0531, r19	; 0x800531 <tx_byte>
    1230:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <tx_bit>
    1234:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1238:	3f 7b       	andi	r19, 0xBF	; 191
    123a:	30 68       	ori	r19, 0x80	; 128
    123c:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1240:	2a 30       	cpi	r18, 0x0A	; 10
    1242:	71 f4       	brne	.+28     	; 0x1260 <__vector_47+0x128>
    1244:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <ticks_per_bit>
    1248:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <ticks_per_bit+0x1>
    124c:	82 0f       	add	r24, r18
    124e:	93 1f       	adc	r25, r19
    1250:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1254:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <tx_state>
    125e:	a9 cf       	rjmp	.-174    	; 0x11b2 <__vector_47+0x7a>
    1260:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    1264:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1268:	40 96       	adiw	r24, 0x10	; 16
    126a:	f2 cf       	rjmp	.-28     	; 0x1250 <__vector_47+0x118>

0000126c <__vector_46>:
__vector_46():
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:223
/****************************************/
/**            Reception               **/
/****************************************/

ISR(CAPTURE_INTERRUPT)
{
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	0b b6       	in	r0, 0x3b	; 59
    1278:	0f 92       	push	r0
    127a:	2f 93       	push	r18
    127c:	3f 93       	push	r19
    127e:	4f 93       	push	r20
    1280:	5f 93       	push	r21
    1282:	6f 93       	push	r22
    1284:	7f 93       	push	r23
    1286:	8f 93       	push	r24
    1288:	9f 93       	push	r25
    128a:	af 93       	push	r26
    128c:	bf 93       	push	r27
    128e:	ef 93       	push	r30
    1290:	ff 93       	push	r31
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:228
	uint8_t state, bit, head;
	uint16_t capture, target;
	uint16_t offset, offset_overflow;

	capture = GET_INPUT_CAPTURE();
    1292:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    1296:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:229
	bit = rx_bit;
    129a:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <rx_bit>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:231
	if (bit) {
		CONFIG_CAPTURE_FALLING_EDGE();
    129e:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:230
	uint16_t capture, target;
	uint16_t offset, offset_overflow;

	capture = GET_INPUT_CAPTURE();
	bit = rx_bit;
	if (bit) {
    12a2:	44 23       	and	r20, r20
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <__vector_46+0x3c>
    12a6:	40 c0       	rjmp	.+128    	; 0x1328 <__vector_46+0xbc>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:231
		CONFIG_CAPTURE_FALLING_EDGE();
    12a8:	2f 7b       	andi	r18, 0xBF	; 191
    12aa:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:232
		rx_bit = 0;
    12ae:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <rx_bit>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:237
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
		rx_bit = 0x80;
	}
	state = rx_state;
    12b2:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:238
	if (state == 0) {
    12b6:	31 11       	cpse	r19, r1
    12b8:	3e c0       	rjmp	.+124    	; 0x1336 <__vector_46+0xca>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:239
		if (!bit) {
    12ba:	41 11       	cpse	r20, r1
    12bc:	22 c0       	rjmp	.+68     	; 0x1302 <__vector_46+0x96>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:240
			uint16_t end = capture + rx_stop_ticks;
    12be:	20 91 85 05 	lds	r18, 0x0585	; 0x800585 <rx_stop_ticks>
    12c2:	30 91 86 05 	lds	r19, 0x0586	; 0x800586 <rx_stop_ticks+0x1>
    12c6:	28 0f       	add	r18, r24
    12c8:	39 1f       	adc	r19, r25
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:241
			SET_COMPARE_B(end);
    12ca:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    12ce:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:242
			ENABLE_INT_COMPARE_B();
    12d2:	24 e0       	ldi	r18, 0x04	; 4
    12d4:	2a bb       	out	0x1a, r18	; 26
    12d6:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    12da:	24 60       	ori	r18, 0x04	; 4
    12dc:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:243
			rx_target = capture + ticks_per_bit + ticks_per_bit/2;
    12e0:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <ticks_per_bit>
    12e4:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <ticks_per_bit+0x1>
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	36 95       	lsr	r19
    12ee:	27 95       	ror	r18
    12f0:	28 0f       	add	r18, r24
    12f2:	39 1f       	adc	r19, r25
    12f4:	30 93 88 05 	sts	0x0588, r19	; 0x800588 <rx_target+0x1>
    12f8:	20 93 87 05 	sts	0x0587, r18	; 0x800587 <rx_target>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:244
			rx_state = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:273
		}
		rx_target = target;
		rx_state = state;
	}
	//if (GET_TIMER_COUNT() - capture > ticks_per_bit) AltSoftSerial::timing_error = true;
}
    1302:	ff 91       	pop	r31
    1304:	ef 91       	pop	r30
    1306:	bf 91       	pop	r27
    1308:	af 91       	pop	r26
    130a:	9f 91       	pop	r25
    130c:	8f 91       	pop	r24
    130e:	7f 91       	pop	r23
    1310:	6f 91       	pop	r22
    1312:	5f 91       	pop	r21
    1314:	4f 91       	pop	r20
    1316:	3f 91       	pop	r19
    1318:	2f 91       	pop	r18
    131a:	0f 90       	pop	r0
    131c:	0b be       	out	0x3b, r0	; 59
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:234
	bit = rx_bit;
	if (bit) {
		CONFIG_CAPTURE_FALLING_EDGE();
		rx_bit = 0;
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
    1328:	20 64       	ori	r18, 0x40	; 64
    132a:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:235
		rx_bit = 0x80;
    132e:	20 e8       	ldi	r18, 0x80	; 128
    1330:	20 93 89 05 	sts	0x0589, r18	; 0x800589 <rx_bit>
    1334:	be cf       	rjmp	.-132    	; 0x12b2 <__vector_46+0x46>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:247
			ENABLE_INT_COMPARE_B();
			rx_target = capture + ticks_per_bit + ticks_per_bit/2;
			rx_state = 1;
		}
	} else {
		target = rx_target;
    1336:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <rx_target>
    133a:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <rx_target+0x1>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:248
		offset_overflow = 65535 - ticks_per_bit;
    133e:	60 91 8c 05 	lds	r22, 0x058C	; 0x80058c <ticks_per_bit>
    1342:	70 91 8d 05 	lds	r23, 0x058D	; 0x80058d <ticks_per_bit+0x1>
    1346:	db 01       	movw	r26, r22
    1348:	a0 95       	com	r26
    134a:	b0 95       	com	r27
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:252
		while (1) {
			offset = capture - target;
			if (offset > offset_overflow) break;
			rx_byte = (rx_byte >> 1) | rx_bit;
    134c:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <rx_bit>
    1350:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <rx_byte>
    1354:	84 1b       	sub	r24, r20
    1356:	95 0b       	sbc	r25, r21
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:251
	} else {
		target = rx_target;
		offset_overflow = 65535 - ticks_per_bit;
		while (1) {
			offset = capture - target;
			if (offset > offset_overflow) break;
    1358:	a8 17       	cp	r26, r24
    135a:	b9 07       	cpc	r27, r25
    135c:	68 f1       	brcs	.+90     	; 0x13b8 <__vector_46+0x14c>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:252
			rx_byte = (rx_byte >> 1) | rx_bit;
    135e:	26 95       	lsr	r18
    1360:	2e 2b       	or	r18, r30
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:253
			target += ticks_per_bit;
    1362:	46 0f       	add	r20, r22
    1364:	57 1f       	adc	r21, r23
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:254
			state++;
    1366:	3f 5f       	subi	r19, 0xFF	; 255
    1368:	86 1b       	sub	r24, r22
    136a:	97 0b       	sbc	r25, r23
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:255
			if (state >= 9) {
    136c:	39 30       	cpi	r19, 0x09	; 9
    136e:	a0 f3       	brcs	.-24     	; 0x1358 <__vector_46+0xec>
    1370:	20 93 8a 05 	sts	0x058A, r18	; 0x80058a <rx_byte>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:256
				DISABLE_INT_COMPARE_B();
    1374:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1378:	8b 7f       	andi	r24, 0xFB	; 251
    137a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:257
				head = rx_buffer_head + 1;
    137e:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <rx_buffer_head>
    1382:	8f 5f       	subi	r24, 0xFF	; 255
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:258
				if (head >= RX_BUFFER_SIZE) head = 0;
    1384:	80 35       	cpi	r24, 0x50	; 80
    1386:	08 f0       	brcs	.+2      	; 0x138a <__vector_46+0x11e>
    1388:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:259
				if (head != rx_buffer_tail) {
    138a:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <rx_buffer_tail>
    138e:	98 17       	cp	r25, r24
    1390:	49 f0       	breq	.+18     	; 0x13a4 <__vector_46+0x138>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:260
					rx_buffer[head] = rx_byte;
    1392:	e8 2f       	mov	r30, r24
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <rx_byte>
    139a:	ed 5c       	subi	r30, 0xCD	; 205
    139c:	fa 4f       	sbci	r31, 0xFA	; 250
    139e:	90 83       	st	Z, r25
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:261
					rx_buffer_head = head;
    13a0:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <rx_buffer_head>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:263
				}
				CONFIG_CAPTURE_FALLING_EDGE();
    13a4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    13a8:	8f 7b       	andi	r24, 0xBF	; 191
    13aa:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:264
				rx_bit = 0;
    13ae:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <rx_bit>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:265
				rx_state = 0;
    13b2:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:266
				return;
    13b6:	a5 cf       	rjmp	.-182    	; 0x1302 <__vector_46+0x96>
    13b8:	20 93 8a 05 	sts	0x058A, r18	; 0x80058a <rx_byte>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:269
			}
		}
		rx_target = target;
    13bc:	50 93 88 05 	sts	0x0588, r21	; 0x800588 <rx_target+0x1>
    13c0:	40 93 87 05 	sts	0x0587, r20	; 0x800587 <rx_target>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:270
		rx_state = state;
    13c4:	30 93 8b 05 	sts	0x058B, r19	; 0x80058b <rx_state>
    13c8:	9c cf       	rjmp	.-200    	; 0x1302 <__vector_46+0x96>

000013ca <__vector_48>:
__vector_48():
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:276
	}
	//if (GET_TIMER_COUNT() - capture > ticks_per_bit) AltSoftSerial::timing_error = true;
}

ISR(COMPARE_B_INTERRUPT)
{
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	0b b6       	in	r0, 0x3b	; 59
    13d6:	0f 92       	push	r0
    13d8:	2f 93       	push	r18
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:279
	uint8_t head, state, bit;

	DISABLE_INT_COMPARE_B();
    13e2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    13e6:	8b 7f       	andi	r24, 0xFB	; 251
    13e8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:280
	CONFIG_CAPTURE_FALLING_EDGE();
    13ec:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    13f0:	8f 7b       	andi	r24, 0xBF	; 191
    13f2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:281
	state = rx_state;
    13f6:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:282
	bit = rx_bit ^ 0x80;
    13fa:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <rx_bit>
    13fe:	20 58       	subi	r18, 0x80	; 128
    1400:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <rx_byte>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:283
	while (state < 9) {
    1404:	89 30       	cpi	r24, 0x09	; 9
    1406:	20 f4       	brcc	.+8      	; 0x1410 <__vector_48+0x46>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:284
		rx_byte = (rx_byte >> 1) | bit;
    1408:	96 95       	lsr	r25
    140a:	92 2b       	or	r25, r18
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:285
		state++;
    140c:	8f 5f       	subi	r24, 0xFF	; 255
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:283

	DISABLE_INT_COMPARE_B();
	CONFIG_CAPTURE_FALLING_EDGE();
	state = rx_state;
	bit = rx_bit ^ 0x80;
	while (state < 9) {
    140e:	fa cf       	rjmp	.-12     	; 0x1404 <__vector_48+0x3a>
    1410:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <rx_byte>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:287
		rx_byte = (rx_byte >> 1) | bit;
		state++;
	}
	head = rx_buffer_head + 1;
    1414:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <rx_buffer_head>
    1418:	8f 5f       	subi	r24, 0xFF	; 255
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:288
	if (head >= RX_BUFFER_SIZE) head = 0;
    141a:	80 35       	cpi	r24, 0x50	; 80
    141c:	08 f0       	brcs	.+2      	; 0x1420 <__vector_48+0x56>
    141e:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:289
	if (head != rx_buffer_tail) {
    1420:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <rx_buffer_tail>
    1424:	28 17       	cp	r18, r24
    1426:	39 f0       	breq	.+14     	; 0x1436 <__vector_48+0x6c>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:290
		rx_buffer[head] = rx_byte;
    1428:	e8 2f       	mov	r30, r24
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	ed 5c       	subi	r30, 0xCD	; 205
    142e:	fa 4f       	sbci	r31, 0xFA	; 250
    1430:	90 83       	st	Z, r25
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:291
		rx_buffer_head = head;
    1432:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <rx_buffer_head>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:293
	}
	rx_state = 0;
    1436:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:294
	CONFIG_CAPTURE_FALLING_EDGE();
    143a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    143e:	8f 7b       	andi	r24, 0xBF	; 191
    1440:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:295
	rx_bit = 0;
    1444:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <rx_bit>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:296
}
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0b be       	out	0x3b, r0	; 59
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1460:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1462:	91 8d       	ldd	r25, Z+25	; 0x19
    1464:	22 8d       	ldd	r18, Z+26	; 0x1a
    1466:	89 2f       	mov	r24, r25
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	80 5c       	subi	r24, 0xC0	; 192
    146c:	9f 4f       	sbci	r25, 0xFF	; 255
    146e:	82 1b       	sub	r24, r18
    1470:	91 09       	sbc	r25, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
    1472:	8f 73       	andi	r24, 0x3F	; 63
    1474:	99 27       	eor	r25, r25
    1476:	08 95       	ret

00001478 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    1478:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    147a:	91 8d       	ldd	r25, Z+25	; 0x19
    147c:	82 8d       	ldd	r24, Z+26	; 0x1a
    147e:	98 17       	cp	r25, r24
    1480:	31 f0       	breq	.+12     	; 0x148e <HardwareSerial::peek()+0x16>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1482:	82 8d       	ldd	r24, Z+26	; 0x1a
    1484:	e8 0f       	add	r30, r24
    1486:	f1 1d       	adc	r31, r1
    1488:	85 8d       	ldd	r24, Z+29	; 0x1d
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1492:	08 95       	ret

00001494 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    1494:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1496:	91 8d       	ldd	r25, Z+25	; 0x19
    1498:	82 8d       	ldd	r24, Z+26	; 0x1a
    149a:	98 17       	cp	r25, r24
    149c:	61 f0       	breq	.+24     	; 0x14b6 <HardwareSerial::read()+0x22>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    149e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    14a0:	ae 0f       	add	r26, r30
    14a2:	bf 2f       	mov	r27, r31
    14a4:	b1 1d       	adc	r27, r1
    14a6:	5d 96       	adiw	r26, 0x1d	; 29
    14a8:	8c 91       	ld	r24, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    14aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    14ac:	9f 5f       	subi	r25, 0xFF	; 255
    14ae:	9f 73       	andi	r25, 0x3F	; 63
    14b0:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    14ba:	08 95       	ret

000014bc <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    14bc:	fc 01       	movw	r30, r24
    14be:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    14c0:	44 8d       	ldd	r20, Z+28	; 0x1c
    14c2:	25 2f       	mov	r18, r21
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	84 2f       	mov	r24, r20
    14c8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    14ca:	82 1b       	sub	r24, r18
    14cc:	93 0b       	sbc	r25, r19
    14ce:	54 17       	cp	r21, r20
    14d0:	10 f0       	brcs	.+4      	; 0x14d6 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    14d2:	cf 96       	adiw	r24, 0x3f	; 63
    14d4:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    14d6:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
    14d8:	08 95       	ret

000014da <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    14da:	83 ee       	ldi	r24, 0xE3	; 227
    14dc:	9b e0       	ldi	r25, 0x0B	; 11
    14de:	89 2b       	or	r24, r25
    14e0:	49 f0       	breq	.+18     	; 0x14f4 <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	89 2b       	or	r24, r25
    14e8:	29 f0       	breq	.+10     	; 0x14f4 <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    14ea:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Serial0_available()>
    14ee:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    14f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    14f4:	8a e7       	ldi	r24, 0x7A	; 122
    14f6:	9c e0       	ldi	r25, 0x0C	; 12
    14f8:	89 2b       	or	r24, r25
    14fa:	49 f0       	breq	.+18     	; 0x150e <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	89 2b       	or	r24, r25
    1502:	29 f0       	breq	.+10     	; 0x150e <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    1504:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <Serial1_available()>
    1508:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
    150a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    150e:	81 e1       	ldi	r24, 0x11	; 17
    1510:	9d e0       	ldi	r25, 0x0D	; 13
    1512:	89 2b       	or	r24, r25
    1514:	49 f0       	breq	.+18     	; 0x1528 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 1)
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	89 2b       	or	r24, r25
    151c:	29 f0       	breq	.+10     	; 0x1528 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 3)
    151e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Serial2_available()>
    1522:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
    1524:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	89 2b       	or	r24, r25
    152e:	49 f0       	breq	.+18     	; 0x1542 <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 1)
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	89 2b       	or	r24, r25
    1536:	29 f0       	breq	.+10     	; 0x1542 <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 3)
    1538:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    153c:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
    153e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
    1542:	08 95       	ret

00001544 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1544:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1546:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1548:	a8 0f       	add	r26, r24
    154a:	b9 2f       	mov	r27, r25
    154c:	b1 1d       	adc	r27, r1
    154e:	a3 5a       	subi	r26, 0xA3	; 163
    1550:	bf 4f       	sbci	r27, 0xFF	; 255
    1552:	2c 91       	ld	r18, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1554:	84 8d       	ldd	r24, Z+28	; 0x1c
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	8f 73       	andi	r24, 0x3F	; 63
    155c:	99 27       	eor	r25, r25
    155e:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1560:	a6 89       	ldd	r26, Z+22	; 0x16
    1562:	b7 89       	ldd	r27, Z+23	; 0x17
    1564:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1566:	a0 89       	ldd	r26, Z+16	; 0x10
    1568:	b1 89       	ldd	r27, Z+17	; 0x11
    156a:	8c 91       	ld	r24, X
    156c:	83 70       	andi	r24, 0x03	; 3
    156e:	80 64       	ori	r24, 0x40	; 64
    1570:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1572:	93 8d       	ldd	r25, Z+27	; 0x1b
    1574:	84 8d       	ldd	r24, Z+28	; 0x1c
    1576:	98 13       	cpse	r25, r24
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    157a:	02 88       	ldd	r0, Z+18	; 0x12
    157c:	f3 89       	ldd	r31, Z+19	; 0x13
    157e:	e0 2d       	mov	r30, r0
    1580:	80 81       	ld	r24, Z
    1582:	8f 7d       	andi	r24, 0xDF	; 223
    1584:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    1586:	08 95       	ret

00001588 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    158e:	88 8d       	ldd	r24, Y+24	; 0x18
    1590:	88 23       	and	r24, r24
    1592:	b9 f0       	breq	.+46     	; 0x15c2 <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1594:	aa 89       	ldd	r26, Y+18	; 0x12
    1596:	bb 89       	ldd	r27, Y+19	; 0x13
    1598:	e8 89       	ldd	r30, Y+16	; 0x10
    159a:	f9 89       	ldd	r31, Y+17	; 0x11
    159c:	8c 91       	ld	r24, X
    159e:	85 fd       	sbrc	r24, 5
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <HardwareSerial::flush()+0x20>
    15a2:	80 81       	ld	r24, Z
    15a4:	86 fd       	sbrc	r24, 6
    15a6:	0d c0       	rjmp	.+26     	; 0x15c2 <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	07 fc       	sbrc	r0, 7
    15ac:	f7 cf       	rjmp	.-18     	; 0x159c <HardwareSerial::flush()+0x14>
    15ae:	8c 91       	ld	r24, X
    15b0:	85 ff       	sbrs	r24, 5
    15b2:	f2 cf       	rjmp	.-28     	; 0x1598 <HardwareSerial::flush()+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    15b4:	80 81       	ld	r24, Z
    15b6:	85 ff       	sbrs	r24, 5
    15b8:	ed cf       	rjmp	.-38     	; 0x1594 <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    15ba:	ce 01       	movw	r24, r28
    15bc:	0e 94 a2 0a 	call	0x1544	; 0x1544 <HardwareSerial::_tx_udr_empty_irq()>
    15c0:	e9 cf       	rjmp	.-46     	; 0x1594 <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret

000015c8 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    15da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15de:	98 13       	cpse	r25, r24
    15e0:	1a c0       	rjmp	.+52     	; 0x1616 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    15e2:	e8 89       	ldd	r30, Y+16	; 0x10
    15e4:	f9 89       	ldd	r31, Y+17	; 0x11
    15e6:	80 81       	ld	r24, Z
    15e8:	85 ff       	sbrs	r24, 5
    15ea:	15 c0       	rjmp	.+42     	; 0x1616 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    15ec:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15ee:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    15f0:	ee 89       	ldd	r30, Y+22	; 0x16
    15f2:	ff 89       	ldd	r31, Y+23	; 0x17
    15f4:	60 83       	st	Z, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    15f6:	e8 89       	ldd	r30, Y+16	; 0x10
    15f8:	f9 89       	ldd	r31, Y+17	; 0x11
    15fa:	80 81       	ld	r24, Z
    15fc:	83 70       	andi	r24, 0x03	; 3
    15fe:	80 64       	ori	r24, 0x40	; 64
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    1600:	80 83       	st	Z, r24
__iRestore():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1602:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	08 95       	ret
    1616:	f6 2e       	mov	r15, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1618:	0b 8d       	ldd	r16, Y+27	; 0x1b
    161a:	10 e0       	ldi	r17, 0x00	; 0
    161c:	0f 5f       	subi	r16, 0xFF	; 255
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	0f 73       	andi	r16, 0x3F	; 63
    1622:	11 27       	eor	r17, r17
    1624:	e0 2e       	mov	r14, r16
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1626:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1628:	8e 11       	cpse	r24, r14
    162a:	0c c0       	rjmp	.+24     	; 0x1644 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	07 fc       	sbrc	r0, 7
    1630:	fa cf       	rjmp	.-12     	; 0x1626 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1632:	e8 89       	ldd	r30, Y+16	; 0x10
    1634:	f9 89       	ldd	r31, Y+17	; 0x11
    1636:	80 81       	ld	r24, Z
    1638:	85 ff       	sbrs	r24, 5
    163a:	f5 cf       	rjmp	.-22     	; 0x1626 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    163c:	ce 01       	movw	r24, r28
    163e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <HardwareSerial::_tx_udr_empty_irq()>
    1642:	f1 cf       	rjmp	.-30     	; 0x1626 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1644:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1646:	ec 0f       	add	r30, r28
    1648:	fd 2f       	mov	r31, r29
    164a:	f1 1d       	adc	r31, r1
    164c:	e3 5a       	subi	r30, 0xA3	; 163
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	f0 82       	st	Z, r15
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1652:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1654:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    1656:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    1658:	ea 89       	ldd	r30, Y+18	; 0x12
    165a:	fb 89       	ldd	r31, Y+19	; 0x13
    165c:	80 81       	ld	r24, Z
    165e:	80 62       	ori	r24, 0x20	; 32
    1660:	cf cf       	rjmp	.-98     	; 0x1600 <HardwareSerial::write(unsigned char)+0x38>

00001662 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
    1672:	6a 01       	movw	r12, r20
    1674:	7b 01       	movw	r14, r22
    1676:	12 2f       	mov	r17, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1678:	60 e8       	ldi	r22, 0x80	; 128
    167a:	74 e8       	ldi	r23, 0x84	; 132
    167c:	8e e1       	ldi	r24, 0x1E	; 30
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a7 01       	movw	r20, r14
    1682:	96 01       	movw	r18, r12
    1684:	0e 94 cb 11 	call	0x2396	; 0x2396 <__udivmodsi4>
    1688:	21 50       	subi	r18, 0x01	; 1
    168a:	31 09       	sbc	r19, r1
    168c:	41 09       	sbc	r20, r1
    168e:	51 09       	sbc	r21, r1
    1690:	56 95       	lsr	r21
    1692:	47 95       	ror	r20
    1694:	37 95       	ror	r19
    1696:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    1698:	e8 89       	ldd	r30, Y+16	; 0x10
    169a:	f9 89       	ldd	r31, Y+17	; 0x11
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    16a0:	21 15       	cp	r18, r1
    16a2:	80 e1       	ldi	r24, 0x10	; 16
    16a4:	38 07       	cpc	r19, r24
    16a6:	98 f0       	brcs	.+38     	; 0x16ce <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    16a8:	e8 89       	ldd	r30, Y+16	; 0x10
    16aa:	f9 89       	ldd	r31, Y+17	; 0x11
    16ac:	10 82       	st	Z, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    16ae:	60 e4       	ldi	r22, 0x40	; 64
    16b0:	72 e4       	ldi	r23, 0x42	; 66
    16b2:	8f e0       	ldi	r24, 0x0F	; 15
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a7 01       	movw	r20, r14
    16b8:	96 01       	movw	r18, r12
    16ba:	0e 94 cb 11 	call	0x2396	; 0x2396 <__udivmodsi4>
    16be:	21 50       	subi	r18, 0x01	; 1
    16c0:	31 09       	sbc	r19, r1
    16c2:	41 09       	sbc	r20, r1
    16c4:	51 09       	sbc	r21, r1
    16c6:	56 95       	lsr	r21
    16c8:	47 95       	ror	r20
    16ca:	37 95       	ror	r19
    16cc:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    16ce:	ec 85       	ldd	r30, Y+12	; 0x0c
    16d0:	fd 85       	ldd	r31, Y+13	; 0x0d
    16d2:	30 83       	st	Z, r19
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    16d4:	ee 85       	ldd	r30, Y+14	; 0x0e
    16d6:	ff 85       	ldd	r31, Y+15	; 0x0f
    16d8:	20 83       	st	Z, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    16da:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    16dc:	ec 89       	ldd	r30, Y+20	; 0x14
    16de:	fd 89       	ldd	r31, Y+21	; 0x15
    16e0:	10 83       	st	Z, r17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    16e2:	ea 89       	ldd	r30, Y+18	; 0x12
    16e4:	fb 89       	ldd	r31, Y+19	; 0x13
    16e6:	80 81       	ld	r24, Z
    16e8:	88 69       	ori	r24, 0x98	; 152
    16ea:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    16ec:	ea 89       	ldd	r30, Y+18	; 0x12
    16ee:	fb 89       	ldd	r31, Y+19	; 0x13
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 7d       	andi	r24, 0xDF	; 223
    16f4:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	08 95       	ret

00001706 <__vector_25>:
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	0b b6       	in	r0, 0x3b	; 59
    1712:	0f 92       	push	r0
    1714:	2f 93       	push	r18
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	ef 93       	push	r30
    171c:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    171e:	e0 91 9e 05 	lds	r30, 0x059E	; 0x80059e <Serial+0x10>
    1722:	f0 91 9f 05 	lds	r31, 0x059F	; 0x80059f <Serial+0x11>
    1726:	80 81       	ld	r24, Z
    1728:	e0 91 a4 05 	lds	r30, 0x05A4	; 0x8005a4 <Serial+0x16>
    172c:	f0 91 a5 05 	lds	r31, 0x05A5	; 0x8005a5 <Serial+0x17>
    1730:	82 fd       	sbrc	r24, 2
    1732:	1d c0       	rjmp	.+58     	; 0x176e <__vector_25+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1734:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1736:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <Serial+0x19>
    173a:	8f 5f       	subi	r24, 0xFF	; 255
    173c:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    173e:	20 91 a8 05 	lds	r18, 0x05A8	; 0x8005a8 <Serial+0x1a>
    1742:	82 17       	cp	r24, r18
    1744:	41 f0       	breq	.+16     	; 0x1756 <__vector_25+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1746:	e0 91 a7 05 	lds	r30, 0x05A7	; 0x8005a7 <Serial+0x19>
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	e2 57       	subi	r30, 0x72	; 114
    174e:	fa 4f       	sbci	r31, 0xFA	; 250
    1750:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1752:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <Serial+0x19>
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1756:	ff 91       	pop	r31
    1758:	ef 91       	pop	r30
    175a:	9f 91       	pop	r25
    175c:	8f 91       	pop	r24
    175e:	2f 91       	pop	r18
    1760:	0f 90       	pop	r0
    1762:	0b be       	out	0x3b, r0	; 59
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    176e:	80 81       	ld	r24, Z
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    1770:	f2 cf       	rjmp	.-28     	; 0x1756 <__vector_25+0x50>

00001772 <__vector_26>:
__vector_26():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1772:	1f 92       	push	r1
    1774:	0f 92       	push	r0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	0f 92       	push	r0
    177a:	11 24       	eor	r1, r1
    177c:	0b b6       	in	r0, 0x3b	; 59
    177e:	0f 92       	push	r0
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1798:	8e e8       	ldi	r24, 0x8E	; 142
    179a:	95 e0       	ldi	r25, 0x05	; 5
    179c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    17a0:	ff 91       	pop	r31
    17a2:	ef 91       	pop	r30
    17a4:	bf 91       	pop	r27
    17a6:	af 91       	pop	r26
    17a8:	9f 91       	pop	r25
    17aa:	8f 91       	pop	r24
    17ac:	7f 91       	pop	r23
    17ae:	6f 91       	pop	r22
    17b0:	5f 91       	pop	r21
    17b2:	4f 91       	pop	r20
    17b4:	3f 91       	pop	r19
    17b6:	2f 91       	pop	r18
    17b8:	0f 90       	pop	r0
    17ba:	0b be       	out	0x3b, r0	; 59
    17bc:	0f 90       	pop	r0
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	0f 90       	pop	r0
    17c2:	1f 90       	pop	r1
    17c4:	18 95       	reti

000017c6 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    17c6:	8e e8       	ldi	r24, 0x8E	; 142
    17c8:	95 e0       	ldi	r25, 0x05	; 5
    17ca:	0e 94 30 0a 	call	0x1460	; 0x1460 <HardwareSerial::available()>
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	89 2b       	or	r24, r25
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <Serial0_available()+0x10>
    17d4:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    17d6:	82 2f       	mov	r24, r18
    17d8:	08 95       	ret

000017da <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    17da:	ee e8       	ldi	r30, 0x8E	; 142
    17dc:	f5 e0       	ldi	r31, 0x05	; 5
    17de:	13 82       	std	Z+3, r1	; 0x03
    17e0:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    17e2:	88 ee       	ldi	r24, 0xE8	; 232
    17e4:	93 e0       	ldi	r25, 0x03	; 3
    17e6:	a0 e0       	ldi	r26, 0x00	; 0
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	84 83       	std	Z+4, r24	; 0x04
    17ec:	95 83       	std	Z+5, r25	; 0x05
    17ee:	a6 83       	std	Z+6, r26	; 0x06
    17f0:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    17f2:	8e e3       	ldi	r24, 0x3E	; 62
    17f4:	92 e0       	ldi	r25, 0x02	; 2
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	85 ec       	ldi	r24, 0xC5	; 197
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	95 87       	std	Z+13, r25	; 0x0d
    1800:	84 87       	std	Z+12, r24	; 0x0c
    1802:	84 ec       	ldi	r24, 0xC4	; 196
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	97 87       	std	Z+15, r25	; 0x0f
    1808:	86 87       	std	Z+14, r24	; 0x0e
    180a:	80 ec       	ldi	r24, 0xC0	; 192
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	91 8b       	std	Z+17, r25	; 0x11
    1810:	80 8b       	std	Z+16, r24	; 0x10
    1812:	81 ec       	ldi	r24, 0xC1	; 193
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	93 8b       	std	Z+19, r25	; 0x13
    1818:	82 8b       	std	Z+18, r24	; 0x12
    181a:	82 ec       	ldi	r24, 0xC2	; 194
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	95 8b       	std	Z+21, r25	; 0x15
    1820:	84 8b       	std	Z+20, r24	; 0x14
    1822:	86 ec       	ldi	r24, 0xC6	; 198
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	97 8b       	std	Z+23, r25	; 0x17
    1828:	86 8b       	std	Z+22, r24	; 0x16
    182a:	11 8e       	std	Z+25, r1	; 0x19
    182c:	12 8e       	std	Z+26, r1	; 0x1a
    182e:	13 8e       	std	Z+27, r1	; 0x1b
    1830:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    1832:	08 95       	ret

00001834 <__vector_36>:
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1834:	1f 92       	push	r1
    1836:	0f 92       	push	r0
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	0f 92       	push	r0
    183c:	11 24       	eor	r1, r1
    183e:	0b b6       	in	r0, 0x3b	; 59
    1840:	0f 92       	push	r0
    1842:	2f 93       	push	r18
    1844:	8f 93       	push	r24
    1846:	9f 93       	push	r25
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    184c:	e0 91 3b 06 	lds	r30, 0x063B	; 0x80063b <Serial1+0x10>
    1850:	f0 91 3c 06 	lds	r31, 0x063C	; 0x80063c <Serial1+0x11>
    1854:	80 81       	ld	r24, Z
    1856:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <Serial1+0x16>
    185a:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <Serial1+0x17>
    185e:	82 fd       	sbrc	r24, 2
    1860:	1d c0       	rjmp	.+58     	; 0x189c <__vector_36+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1862:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1864:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <Serial1+0x19>
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    186c:	20 91 45 06 	lds	r18, 0x0645	; 0x800645 <Serial1+0x1a>
    1870:	82 17       	cp	r24, r18
    1872:	41 f0       	breq	.+16     	; 0x1884 <__vector_36+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1874:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <Serial1+0x19>
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	e5 5d       	subi	r30, 0xD5	; 213
    187c:	f9 4f       	sbci	r31, 0xF9	; 249
    187e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1880:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <Serial1+0x19>
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	2f 91       	pop	r18
    188e:	0f 90       	pop	r0
    1890:	0b be       	out	0x3b, r0	; 59
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    189c:	80 81       	ld	r24, Z
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    189e:	f2 cf       	rjmp	.-28     	; 0x1884 <__vector_36+0x50>

000018a0 <__vector_37>:
__vector_37():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    18a0:	1f 92       	push	r1
    18a2:	0f 92       	push	r0
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	0f 92       	push	r0
    18a8:	11 24       	eor	r1, r1
    18aa:	0b b6       	in	r0, 0x3b	; 59
    18ac:	0f 92       	push	r0
    18ae:	2f 93       	push	r18
    18b0:	3f 93       	push	r19
    18b2:	4f 93       	push	r20
    18b4:	5f 93       	push	r21
    18b6:	6f 93       	push	r22
    18b8:	7f 93       	push	r23
    18ba:	8f 93       	push	r24
    18bc:	9f 93       	push	r25
    18be:	af 93       	push	r26
    18c0:	bf 93       	push	r27
    18c2:	ef 93       	push	r30
    18c4:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    18c6:	8b e2       	ldi	r24, 0x2B	; 43
    18c8:	96 e0       	ldi	r25, 0x06	; 6
    18ca:	0e 94 a2 0a 	call	0x1544	; 0x1544 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    18ce:	ff 91       	pop	r31
    18d0:	ef 91       	pop	r30
    18d2:	bf 91       	pop	r27
    18d4:	af 91       	pop	r26
    18d6:	9f 91       	pop	r25
    18d8:	8f 91       	pop	r24
    18da:	7f 91       	pop	r23
    18dc:	6f 91       	pop	r22
    18de:	5f 91       	pop	r21
    18e0:	4f 91       	pop	r20
    18e2:	3f 91       	pop	r19
    18e4:	2f 91       	pop	r18
    18e6:	0f 90       	pop	r0
    18e8:	0b be       	out	0x3b, r0	; 59
    18ea:	0f 90       	pop	r0
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	0f 90       	pop	r0
    18f0:	1f 90       	pop	r1
    18f2:	18 95       	reti

000018f4 <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    18f4:	8b e2       	ldi	r24, 0x2B	; 43
    18f6:	96 e0       	ldi	r25, 0x06	; 6
    18f8:	0e 94 30 0a 	call	0x1460	; 0x1460 <HardwareSerial::available()>
    18fc:	21 e0       	ldi	r18, 0x01	; 1
    18fe:	89 2b       	or	r24, r25
    1900:	09 f4       	brne	.+2      	; 0x1904 <Serial1_available()+0x10>
    1902:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    1904:	82 2f       	mov	r24, r18
    1906:	08 95       	ret

00001908 <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    1908:	eb e2       	ldi	r30, 0x2B	; 43
    190a:	f6 e0       	ldi	r31, 0x06	; 6
    190c:	13 82       	std	Z+3, r1	; 0x03
    190e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
    1910:	88 ee       	ldi	r24, 0xE8	; 232
    1912:	93 e0       	ldi	r25, 0x03	; 3
    1914:	a0 e0       	ldi	r26, 0x00	; 0
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	84 83       	std	Z+4, r24	; 0x04
    191a:	95 83       	std	Z+5, r25	; 0x05
    191c:	a6 83       	std	Z+6, r26	; 0x06
    191e:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1920:	8e e3       	ldi	r24, 0x3E	; 62
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
    1928:	8d ec       	ldi	r24, 0xCD	; 205
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	95 87       	std	Z+13, r25	; 0x0d
    192e:	84 87       	std	Z+12, r24	; 0x0c
    1930:	8c ec       	ldi	r24, 0xCC	; 204
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	97 87       	std	Z+15, r25	; 0x0f
    1936:	86 87       	std	Z+14, r24	; 0x0e
    1938:	88 ec       	ldi	r24, 0xC8	; 200
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	91 8b       	std	Z+17, r25	; 0x11
    193e:	80 8b       	std	Z+16, r24	; 0x10
    1940:	89 ec       	ldi	r24, 0xC9	; 201
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	93 8b       	std	Z+19, r25	; 0x13
    1946:	82 8b       	std	Z+18, r24	; 0x12
    1948:	8a ec       	ldi	r24, 0xCA	; 202
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	95 8b       	std	Z+21, r25	; 0x15
    194e:	84 8b       	std	Z+20, r24	; 0x14
    1950:	8e ec       	ldi	r24, 0xCE	; 206
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	97 8b       	std	Z+23, r25	; 0x17
    1956:	86 8b       	std	Z+22, r24	; 0x16
    1958:	11 8e       	std	Z+25, r1	; 0x19
    195a:	12 8e       	std	Z+26, r1	; 0x1a
    195c:	13 8e       	std	Z+27, r1	; 0x1b
    195e:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    1960:	08 95       	ret

00001962 <__vector_51>:
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:40
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    1962:	1f 92       	push	r1
    1964:	0f 92       	push	r0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	0f 92       	push	r0
    196a:	11 24       	eor	r1, r1
    196c:	0b b6       	in	r0, 0x3b	; 59
    196e:	0f 92       	push	r0
    1970:	2f 93       	push	r18
    1972:	8f 93       	push	r24
    1974:	9f 93       	push	r25
    1976:	ef 93       	push	r30
    1978:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    197a:	e0 91 d8 06 	lds	r30, 0x06D8	; 0x8006d8 <Serial2+0x10>
    197e:	f0 91 d9 06 	lds	r31, 0x06D9	; 0x8006d9 <Serial2+0x11>
    1982:	80 81       	ld	r24, Z
    1984:	e0 91 de 06 	lds	r30, 0x06DE	; 0x8006de <Serial2+0x16>
    1988:	f0 91 df 06 	lds	r31, 0x06DF	; 0x8006df <Serial2+0x17>
    198c:	82 fd       	sbrc	r24, 2
    198e:	1d c0       	rjmp	.+58     	; 0x19ca <__vector_51+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1990:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1992:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <Serial2+0x19>
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    199a:	20 91 e2 06 	lds	r18, 0x06E2	; 0x8006e2 <Serial2+0x1a>
    199e:	82 17       	cp	r24, r18
    19a0:	41 f0       	breq	.+16     	; 0x19b2 <__vector_51+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    19a2:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <Serial2+0x19>
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	e8 53       	subi	r30, 0x38	; 56
    19aa:	f9 4f       	sbci	r31, 0xF9	; 249
    19ac:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    19ae:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <Serial2+0x19>
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
  Serial2._rx_complete_irq();
}
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	9f 91       	pop	r25
    19b8:	8f 91       	pop	r24
    19ba:	2f 91       	pop	r18
    19bc:	0f 90       	pop	r0
    19be:	0b be       	out	0x3b, r0	; 59
    19c0:	0f 90       	pop	r0
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	0f 90       	pop	r0
    19c6:	1f 90       	pop	r1
    19c8:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    19ca:	80 81       	ld	r24, Z
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
    19cc:	f2 cf       	rjmp	.-28     	; 0x19b2 <__vector_51+0x50>

000019ce <__vector_52>:
__vector_52():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:45

ISR(USART2_UDRE_vect)
{
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	11 24       	eor	r1, r1
    19d8:	0b b6       	in	r0, 0x3b	; 59
    19da:	0f 92       	push	r0
    19dc:	2f 93       	push	r18
    19de:	3f 93       	push	r19
    19e0:	4f 93       	push	r20
    19e2:	5f 93       	push	r21
    19e4:	6f 93       	push	r22
    19e6:	7f 93       	push	r23
    19e8:	8f 93       	push	r24
    19ea:	9f 93       	push	r25
    19ec:	af 93       	push	r26
    19ee:	bf 93       	push	r27
    19f0:	ef 93       	push	r30
    19f2:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:46
  Serial2._tx_udr_empty_irq();
    19f4:	88 ec       	ldi	r24, 0xC8	; 200
    19f6:	96 e0       	ldi	r25, 0x06	; 6
    19f8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:47
}
    19fc:	ff 91       	pop	r31
    19fe:	ef 91       	pop	r30
    1a00:	bf 91       	pop	r27
    1a02:	af 91       	pop	r26
    1a04:	9f 91       	pop	r25
    1a06:	8f 91       	pop	r24
    1a08:	7f 91       	pop	r23
    1a0a:	6f 91       	pop	r22
    1a0c:	5f 91       	pop	r21
    1a0e:	4f 91       	pop	r20
    1a10:	3f 91       	pop	r19
    1a12:	2f 91       	pop	r18
    1a14:	0f 90       	pop	r0
    1a16:	0b be       	out	0x3b, r0	; 59
    1a18:	0f 90       	pop	r0
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	0f 90       	pop	r0
    1a1e:	1f 90       	pop	r1
    1a20:	18 95       	reti

00001a22 <Serial2_available()>:
_Z17Serial2_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:54
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    1a22:	88 ec       	ldi	r24, 0xC8	; 200
    1a24:	96 e0       	ldi	r25, 0x06	; 6
    1a26:	0e 94 30 0a 	call	0x1460	; 0x1460 <HardwareSerial::available()>
    1a2a:	21 e0       	ldi	r18, 0x01	; 1
    1a2c:	89 2b       	or	r24, r25
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <Serial2_available()+0x10>
    1a30:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
}
    1a32:	82 2f       	mov	r24, r18
    1a34:	08 95       	ret

00001a36 <_GLOBAL__sub_I___vector_51>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    1a36:	e8 ec       	ldi	r30, 0xC8	; 200
    1a38:	f6 e0       	ldi	r31, 0x06	; 6
    1a3a:	13 82       	std	Z+3, r1	; 0x03
    1a3c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
    1a3e:	88 ee       	ldi	r24, 0xE8	; 232
    1a40:	93 e0       	ldi	r25, 0x03	; 3
    1a42:	a0 e0       	ldi	r26, 0x00	; 0
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	84 83       	std	Z+4, r24	; 0x04
    1a48:	95 83       	std	Z+5, r25	; 0x05
    1a4a:	a6 83       	std	Z+6, r26	; 0x06
    1a4c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1a4e:	8e e3       	ldi	r24, 0x3E	; 62
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	91 83       	std	Z+1, r25	; 0x01
    1a54:	80 83       	st	Z, r24
    1a56:	85 ed       	ldi	r24, 0xD5	; 213
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	95 87       	std	Z+13, r25	; 0x0d
    1a5c:	84 87       	std	Z+12, r24	; 0x0c
    1a5e:	84 ed       	ldi	r24, 0xD4	; 212
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	97 87       	std	Z+15, r25	; 0x0f
    1a64:	86 87       	std	Z+14, r24	; 0x0e
    1a66:	80 ed       	ldi	r24, 0xD0	; 208
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	91 8b       	std	Z+17, r25	; 0x11
    1a6c:	80 8b       	std	Z+16, r24	; 0x10
    1a6e:	81 ed       	ldi	r24, 0xD1	; 209
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	93 8b       	std	Z+19, r25	; 0x13
    1a74:	82 8b       	std	Z+18, r24	; 0x12
    1a76:	82 ed       	ldi	r24, 0xD2	; 210
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	95 8b       	std	Z+21, r25	; 0x15
    1a7c:	84 8b       	std	Z+20, r24	; 0x14
    1a7e:	86 ed       	ldi	r24, 0xD6	; 214
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	97 8b       	std	Z+23, r25	; 0x17
    1a84:	86 8b       	std	Z+22, r24	; 0x16
    1a86:	11 8e       	std	Z+25, r1	; 0x19
    1a88:	12 8e       	std	Z+26, r1	; 0x1a
    1a8a:	13 8e       	std	Z+27, r1	; 0x1b
    1a8c:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
    1a8e:	08 95       	ret

00001a90 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1a90:	af 92       	push	r10
    1a92:	bf 92       	push	r11
    1a94:	cf 92       	push	r12
    1a96:	df 92       	push	r13
    1a98:	ef 92       	push	r14
    1a9a:	ff 92       	push	r15
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	6c 01       	movw	r12, r24
    1aa6:	7b 01       	movw	r14, r22
    1aa8:	8b 01       	movw	r16, r22
    1aaa:	04 0f       	add	r16, r20
    1aac:	15 1f       	adc	r17, r21
    1aae:	eb 01       	movw	r28, r22
    1ab0:	5e 01       	movw	r10, r28
    1ab2:	ae 18       	sub	r10, r14
    1ab4:	bf 08       	sbc	r11, r15
    1ab6:	c0 17       	cp	r28, r16
    1ab8:	d1 07       	cpc	r29, r17
    1aba:	59 f0       	breq	.+22     	; 0x1ad2 <Print::write(unsigned char const*, unsigned int)+0x42>
    1abc:	69 91       	ld	r22, Y+
    1abe:	d6 01       	movw	r26, r12
    1ac0:	ed 91       	ld	r30, X+
    1ac2:	fc 91       	ld	r31, X
    1ac4:	01 90       	ld	r0, Z+
    1ac6:	f0 81       	ld	r31, Z
    1ac8:	e0 2d       	mov	r30, r0
    1aca:	c6 01       	movw	r24, r12
    1acc:	19 95       	eicall
    1ace:	89 2b       	or	r24, r25
    1ad0:	79 f7       	brne	.-34     	; 0x1ab0 <Print::write(unsigned char const*, unsigned int)+0x20>
    1ad2:	c5 01       	movw	r24, r10
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	bf 90       	pop	r11
    1ae6:	af 90       	pop	r10
    1ae8:	08 95       	ret

00001aea <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1aea:	fb 01       	movw	r30, r22
    1aec:	01 90       	ld	r0, Z+
    1aee:	00 20       	and	r0, r0
    1af0:	e9 f7       	brne	.-6      	; 0x1aec <Print::write(char const*) [clone .part.2]+0x2>
    1af2:	31 97       	sbiw	r30, 0x01	; 1
    1af4:	af 01       	movw	r20, r30
    1af6:	46 1b       	sub	r20, r22
    1af8:	57 0b       	sbc	r21, r23
    1afa:	dc 01       	movw	r26, r24
    1afc:	ed 91       	ld	r30, X+
    1afe:	fc 91       	ld	r31, X
    1b00:	02 80       	ldd	r0, Z+2	; 0x02
    1b02:	f3 81       	ldd	r31, Z+3	; 0x03
    1b04:	e0 2d       	mov	r30, r0
    1b06:	19 94       	eijmp

00001b08 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	8c 01       	movw	r16, r24
    1b16:	7b 01       	movw	r14, r22
    1b18:	d0 e0       	ldi	r29, 0x00	; 0
    1b1a:	c0 e0       	ldi	r28, 0x00	; 0
    1b1c:	f7 01       	movw	r30, r14
    1b1e:	ec 0f       	add	r30, r28
    1b20:	fd 1f       	adc	r31, r29
    1b22:	64 91       	lpm	r22, Z
    1b24:	66 23       	and	r22, r22
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <Print::print(__FlashStringHelper const*)+0x38>
    1b28:	d8 01       	movw	r26, r16
    1b2a:	ed 91       	ld	r30, X+
    1b2c:	fc 91       	ld	r31, X
    1b2e:	01 90       	ld	r0, Z+
    1b30:	f0 81       	ld	r31, Z
    1b32:	e0 2d       	mov	r30, r0
    1b34:	c8 01       	movw	r24, r16
    1b36:	19 95       	eicall
    1b38:	89 2b       	or	r24, r25
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <Print::print(__FlashStringHelper const*)+0x38>
    1b3c:	21 96       	adiw	r28, 0x01	; 1
    1b3e:	ee cf       	rjmp	.-36     	; 0x1b1c <Print::print(__FlashStringHelper const*)+0x14>
    1b40:	ce 01       	movw	r24, r28
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	ff 90       	pop	r15
    1b4c:	ef 90       	pop	r14
    1b4e:	08 95       	ret

00001b50 <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    1b50:	61 15       	cp	r22, r1
    1b52:	71 05       	cpc	r23, r1
    1b54:	11 f0       	breq	.+4      	; 0x1b5a <Print::print(char const*)+0xa>
    1b56:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	08 95       	ret

00001b60 <Print::print(char)>:
_ZN5Print5printEc():
    1b60:	dc 01       	movw	r26, r24
    1b62:	ed 91       	ld	r30, X+
    1b64:	fc 91       	ld	r31, X
    1b66:	01 90       	ld	r0, Z+
    1b68:	f0 81       	ld	r31, Z
    1b6a:	e0 2d       	mov	r30, r0
    1b6c:	19 94       	eijmp

00001b6e <Print::println()>:
_ZN5Print5writeEPKc():
    1b6e:	6c e4       	ldi	r22, 0x4C	; 76
    1b70:	72 e0       	ldi	r23, 0x02	; 2
    1b72:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <Print::write(char const*) [clone .part.2]>

00001b76 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	ec 01       	movw	r28, r24
    1b80:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Print::print(__FlashStringHelper const*)>
    1b84:	8c 01       	movw	r16, r24
    1b86:	ce 01       	movw	r24, r28
    1b88:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <Print::println()>
    1b8c:	80 0f       	add	r24, r16
    1b8e:	91 1f       	adc	r25, r17
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    1b9a:	8f 92       	push	r8
    1b9c:	9f 92       	push	r9
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	a1 97       	sbiw	r28, 0x21	; 33
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	7c 01       	movw	r14, r24
    1bc0:	fa 01       	movw	r30, r20
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	19 a2       	std	Y+33, r1	; 0x21
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <Print::printNumber(unsigned long, unsigned char)+0x32>
    1bca:	2a e0       	ldi	r18, 0x0A	; 10
    1bcc:	8e 01       	movw	r16, r28
    1bce:	0f 5d       	subi	r16, 0xDF	; 223
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	82 2e       	mov	r8, r18
    1bd4:	91 2c       	mov	r9, r1
    1bd6:	b1 2c       	mov	r11, r1
    1bd8:	a1 2c       	mov	r10, r1
    1bda:	bf 01       	movw	r22, r30
    1bdc:	a5 01       	movw	r20, r10
    1bde:	94 01       	movw	r18, r8
    1be0:	0e 94 cb 11 	call	0x2396	; 0x2396 <__udivmodsi4>
    1be4:	f9 01       	movw	r30, r18
    1be6:	ca 01       	movw	r24, r20
    1be8:	6a 30       	cpi	r22, 0x0A	; 10
    1bea:	0c f5       	brge	.+66     	; 0x1c2e <Print::printNumber(unsigned long, unsigned char)+0x94>
    1bec:	60 5d       	subi	r22, 0xD0	; 208
    1bee:	d8 01       	movw	r26, r16
    1bf0:	6e 93       	st	-X, r22
    1bf2:	8d 01       	movw	r16, r26
    1bf4:	23 2b       	or	r18, r19
    1bf6:	24 2b       	or	r18, r20
    1bf8:	25 2b       	or	r18, r21
    1bfa:	79 f7       	brne	.-34     	; 0x1bda <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	10 97       	sbiw	r26, 0x00	; 0
    1c02:	21 f0       	breq	.+8      	; 0x1c0c <Print::printNumber(unsigned long, unsigned char)+0x72>
    1c04:	bd 01       	movw	r22, r26
    1c06:	c7 01       	movw	r24, r14
    1c08:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    1c0c:	a1 96       	adiw	r28, 0x21	; 33
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	bf 90       	pop	r11
    1c26:	af 90       	pop	r10
    1c28:	9f 90       	pop	r9
    1c2a:	8f 90       	pop	r8
    1c2c:	08 95       	ret
    1c2e:	69 5c       	subi	r22, 0xC9	; 201
    1c30:	de cf       	rjmp	.-68     	; 0x1bee <Print::printNumber(unsigned long, unsigned char)+0x54>

00001c32 <Print::print(long, int)>:
_ZN5Print5printEli():
    1c32:	cf 92       	push	r12
    1c34:	df 92       	push	r13
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	21 15       	cp	r18, r1
    1c44:	31 05       	cpc	r19, r1
    1c46:	81 f4       	brne	.+32     	; 0x1c68 <Print::print(long, int)+0x36>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	ed 91       	ld	r30, X+
    1c4c:	fc 91       	ld	r31, X
    1c4e:	01 90       	ld	r0, Z+
    1c50:	f0 81       	ld	r31, Z
    1c52:	e0 2d       	mov	r30, r0
    1c54:	64 2f       	mov	r22, r20
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	19 94       	eijmp
    1c68:	2a 30       	cpi	r18, 0x0A	; 10
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	01 f5       	brne	.+64     	; 0x1cae <Print::print(long, int)+0x7c>
    1c6e:	2a e0       	ldi	r18, 0x0A	; 10
    1c70:	77 ff       	sbrs	r23, 7
    1c72:	1d c0       	rjmp	.+58     	; 0x1cae <Print::print(long, int)+0x7c>
    1c74:	6a 01       	movw	r12, r20
    1c76:	7b 01       	movw	r14, r22
    1c78:	ec 01       	movw	r28, r24
    1c7a:	6d e2       	ldi	r22, 0x2D	; 45
    1c7c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <Print::print(char)>
    1c80:	8c 01       	movw	r16, r24
    1c82:	44 27       	eor	r20, r20
    1c84:	55 27       	eor	r21, r21
    1c86:	ba 01       	movw	r22, r20
    1c88:	4c 19       	sub	r20, r12
    1c8a:	5d 09       	sbc	r21, r13
    1c8c:	6e 09       	sbc	r22, r14
    1c8e:	7f 09       	sbc	r23, r15
    1c90:	2a e0       	ldi	r18, 0x0A	; 10
    1c92:	ce 01       	movw	r24, r28
    1c94:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Print::printNumber(unsigned long, unsigned char)>
    1c98:	80 0f       	add	r24, r16
    1c9a:	91 1f       	adc	r25, r17
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	cf 90       	pop	r12
    1cac:	08 95       	ret
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <Print::printNumber(unsigned long, unsigned char)>

00001cc2 <Print::print(int, int)>:
_ZN5Print5printEii():
    1cc2:	9a 01       	movw	r18, r20
    1cc4:	ab 01       	movw	r20, r22
    1cc6:	77 0f       	add	r23, r23
    1cc8:	66 0b       	sbc	r22, r22
    1cca:	77 0b       	sbc	r23, r23
    1ccc:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <Print::print(long, int)>

00001cd0 <Print::println(int, int)>:
_ZN5Print7printlnEii():
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	ec 01       	movw	r28, r24
    1cda:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <Print::print(int, int)>
    1cde:	8c 01       	movw	r16, r24
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <Print::println()>
    1ce6:	80 0f       	add	r24, r16
    1ce8:	91 1f       	adc	r25, r17
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	08 95       	ret

00001cf4 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1cf4:	21 15       	cp	r18, r1
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	41 f4       	brne	.+16     	; 0x1d0a <Print::print(unsigned long, int)+0x16>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	ed 91       	ld	r30, X+
    1cfe:	fc 91       	ld	r31, X
    1d00:	01 90       	ld	r0, Z+
    1d02:	f0 81       	ld	r31, Z
    1d04:	e0 2d       	mov	r30, r0
    1d06:	64 2f       	mov	r22, r20
    1d08:	19 94       	eijmp
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
    1d0a:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <Print::printNumber(unsigned long, unsigned char)>

00001d0e <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1d0e:	9a 01       	movw	r18, r20
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
    1d10:	46 2f       	mov	r20, r22
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <Print::print(unsigned long, int)>

00001d1c <nothing>:
nothing():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/WInterrupts.c:350
        case 6:
          EIMSK &= ~(1 << INT6);
          break;
        case 7:
          EIMSK &= ~(1 << INT7);
          break;
    1d1c:	08 95       	ret

00001d1e <__vector_1>:
__vector_1():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/WInterrupts.c:449
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

// ATmega640, ATmega1280, ATmega2560 - "AVR compatible" pinout
#elif defined(MEGACORE_100_PIN_AVR_PINOUT) && (defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__))
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	0f 92       	push	r0
    1d26:	11 24       	eor	r1, r1
    1d28:	0b b6       	in	r0, 0x3b	; 59
    1d2a:	0f 92       	push	r0
    1d2c:	2f 93       	push	r18
    1d2e:	3f 93       	push	r19
    1d30:	4f 93       	push	r20
    1d32:	5f 93       	push	r21
    1d34:	6f 93       	push	r22
    1d36:	7f 93       	push	r23
    1d38:	8f 93       	push	r24
    1d3a:	9f 93       	push	r25
    1d3c:	af 93       	push	r26
    1d3e:	bf 93       	push	r27
    1d40:	ef 93       	push	r30
    1d42:	ff 93       	push	r31
    1d44:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc>
    1d48:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x1>
    1d4c:	19 95       	eicall
    1d4e:	ff 91       	pop	r31
    1d50:	ef 91       	pop	r30
    1d52:	bf 91       	pop	r27
    1d54:	af 91       	pop	r26
    1d56:	9f 91       	pop	r25
    1d58:	8f 91       	pop	r24
    1d5a:	7f 91       	pop	r23
    1d5c:	6f 91       	pop	r22
    1d5e:	5f 91       	pop	r21
    1d60:	4f 91       	pop	r20
    1d62:	3f 91       	pop	r19
    1d64:	2f 91       	pop	r18
    1d66:	0f 90       	pop	r0
    1d68:	0b be       	out	0x3b, r0	; 59
    1d6a:	0f 90       	pop	r0
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	0f 90       	pop	r0
    1d70:	1f 90       	pop	r1
    1d72:	18 95       	reti

00001d74 <__vector_2>:
__vector_2():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/WInterrupts.c:450
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1d74:	1f 92       	push	r1
    1d76:	0f 92       	push	r0
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	0f 92       	push	r0
    1d7c:	11 24       	eor	r1, r1
    1d7e:	0b b6       	in	r0, 0x3b	; 59
    1d80:	0f 92       	push	r0
    1d82:	2f 93       	push	r18
    1d84:	3f 93       	push	r19
    1d86:	4f 93       	push	r20
    1d88:	5f 93       	push	r21
    1d8a:	6f 93       	push	r22
    1d8c:	7f 93       	push	r23
    1d8e:	8f 93       	push	r24
    1d90:	9f 93       	push	r25
    1d92:	af 93       	push	r26
    1d94:	bf 93       	push	r27
    1d96:	ef 93       	push	r30
    1d98:	ff 93       	push	r31
    1d9a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x2>
    1d9e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x3>
    1da2:	19 95       	eicall
    1da4:	ff 91       	pop	r31
    1da6:	ef 91       	pop	r30
    1da8:	bf 91       	pop	r27
    1daa:	af 91       	pop	r26
    1dac:	9f 91       	pop	r25
    1dae:	8f 91       	pop	r24
    1db0:	7f 91       	pop	r23
    1db2:	6f 91       	pop	r22
    1db4:	5f 91       	pop	r21
    1db6:	4f 91       	pop	r20
    1db8:	3f 91       	pop	r19
    1dba:	2f 91       	pop	r18
    1dbc:	0f 90       	pop	r0
    1dbe:	0b be       	out	0x3b, r0	; 59
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	0f 90       	pop	r0
    1dc6:	1f 90       	pop	r1
    1dc8:	18 95       	reti

00001dca <__vector_3>:
__vector_3():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/WInterrupts.c:451
  IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    1dca:	1f 92       	push	r1
    1dcc:	0f 92       	push	r0
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	0f 92       	push	r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	0b b6       	in	r0, 0x3b	; 59
    1dd6:	0f 92       	push	r0
    1dd8:	2f 93       	push	r18
    1dda:	3f 93       	push	r19
    1ddc:	4f 93       	push	r20
    1dde:	5f 93       	push	r21
    1de0:	6f 93       	push	r22
    1de2:	7f 93       	push	r23
    1de4:	8f 93       	push	r24
    1de6:	9f 93       	push	r25
    1de8:	af 93       	push	r26
    1dea:	bf 93       	push	r27
    1dec:	ef 93       	push	r30
    1dee:	ff 93       	push	r31
    1df0:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x4>
    1df4:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x5>
    1df8:	19 95       	eicall
    1dfa:	ff 91       	pop	r31
    1dfc:	ef 91       	pop	r30
    1dfe:	bf 91       	pop	r27
    1e00:	af 91       	pop	r26
    1e02:	9f 91       	pop	r25
    1e04:	8f 91       	pop	r24
    1e06:	7f 91       	pop	r23
    1e08:	6f 91       	pop	r22
    1e0a:	5f 91       	pop	r21
    1e0c:	4f 91       	pop	r20
    1e0e:	3f 91       	pop	r19
    1e10:	2f 91       	pop	r18
    1e12:	0f 90       	pop	r0
    1e14:	0b be       	out	0x3b, r0	; 59
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	0f 90       	pop	r0
    1e1c:	1f 90       	pop	r1
    1e1e:	18 95       	reti

00001e20 <__vector_4>:
__vector_4():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/WInterrupts.c:452
  IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    1e20:	1f 92       	push	r1
    1e22:	0f 92       	push	r0
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	0f 92       	push	r0
    1e28:	11 24       	eor	r1, r1
    1e2a:	0b b6       	in	r0, 0x3b	; 59
    1e2c:	0f 92       	push	r0
    1e2e:	2f 93       	push	r18
    1e30:	3f 93       	push	r19
    1e32:	4f 93       	push	r20
    1e34:	5f 93       	push	r21
    1e36:	6f 93       	push	r22
    1e38:	7f 93       	push	r23
    1e3a:	8f 93       	push	r24
    1e3c:	9f 93       	push	r25
    1e3e:	af 93       	push	r26
    1e40:	bf 93       	push	r27
    1e42:	ef 93       	push	r30
    1e44:	ff 93       	push	r31
    1e46:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x6>
    1e4a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x7>
    1e4e:	19 95       	eicall
    1e50:	ff 91       	pop	r31
    1e52:	ef 91       	pop	r30
    1e54:	bf 91       	pop	r27
    1e56:	af 91       	pop	r26
    1e58:	9f 91       	pop	r25
    1e5a:	8f 91       	pop	r24
    1e5c:	7f 91       	pop	r23
    1e5e:	6f 91       	pop	r22
    1e60:	5f 91       	pop	r21
    1e62:	4f 91       	pop	r20
    1e64:	3f 91       	pop	r19
    1e66:	2f 91       	pop	r18
    1e68:	0f 90       	pop	r0
    1e6a:	0b be       	out	0x3b, r0	; 59
    1e6c:	0f 90       	pop	r0
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	0f 90       	pop	r0
    1e72:	1f 90       	pop	r1
    1e74:	18 95       	reti

00001e76 <__vector_5>:
__vector_5():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/WInterrupts.c:453
  IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_4)
    1e76:	1f 92       	push	r1
    1e78:	0f 92       	push	r0
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	0f 92       	push	r0
    1e7e:	11 24       	eor	r1, r1
    1e80:	0b b6       	in	r0, 0x3b	; 59
    1e82:	0f 92       	push	r0
    1e84:	2f 93       	push	r18
    1e86:	3f 93       	push	r19
    1e88:	4f 93       	push	r20
    1e8a:	5f 93       	push	r21
    1e8c:	6f 93       	push	r22
    1e8e:	7f 93       	push	r23
    1e90:	8f 93       	push	r24
    1e92:	9f 93       	push	r25
    1e94:	af 93       	push	r26
    1e96:	bf 93       	push	r27
    1e98:	ef 93       	push	r30
    1e9a:	ff 93       	push	r31
    1e9c:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0x8>
    1ea0:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0x9>
    1ea4:	19 95       	eicall
    1ea6:	ff 91       	pop	r31
    1ea8:	ef 91       	pop	r30
    1eaa:	bf 91       	pop	r27
    1eac:	af 91       	pop	r26
    1eae:	9f 91       	pop	r25
    1eb0:	8f 91       	pop	r24
    1eb2:	7f 91       	pop	r23
    1eb4:	6f 91       	pop	r22
    1eb6:	5f 91       	pop	r21
    1eb8:	4f 91       	pop	r20
    1eba:	3f 91       	pop	r19
    1ebc:	2f 91       	pop	r18
    1ebe:	0f 90       	pop	r0
    1ec0:	0b be       	out	0x3b, r0	; 59
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <__vector_6>:
__vector_6():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/WInterrupts.c:454
  IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_5)
    1ecc:	1f 92       	push	r1
    1ece:	0f 92       	push	r0
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	0f 92       	push	r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	0b b6       	in	r0, 0x3b	; 59
    1ed8:	0f 92       	push	r0
    1eda:	2f 93       	push	r18
    1edc:	3f 93       	push	r19
    1ede:	4f 93       	push	r20
    1ee0:	5f 93       	push	r21
    1ee2:	6f 93       	push	r22
    1ee4:	7f 93       	push	r23
    1ee6:	8f 93       	push	r24
    1ee8:	9f 93       	push	r25
    1eea:	af 93       	push	r26
    1eec:	bf 93       	push	r27
    1eee:	ef 93       	push	r30
    1ef0:	ff 93       	push	r31
    1ef2:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xa>
    1ef6:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xb>
    1efa:	19 95       	eicall
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0b be       	out	0x3b, r0	; 59
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <__vector_7>:
__vector_7():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/WInterrupts.c:455
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    1f22:	1f 92       	push	r1
    1f24:	0f 92       	push	r0
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	0f 92       	push	r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	0b b6       	in	r0, 0x3b	; 59
    1f2e:	0f 92       	push	r0
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	4f 93       	push	r20
    1f36:	5f 93       	push	r21
    1f38:	6f 93       	push	r22
    1f3a:	7f 93       	push	r23
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
    1f48:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xc>
    1f4c:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xd>
    1f50:	19 95       	eicall
    1f52:	ff 91       	pop	r31
    1f54:	ef 91       	pop	r30
    1f56:	bf 91       	pop	r27
    1f58:	af 91       	pop	r26
    1f5a:	9f 91       	pop	r25
    1f5c:	8f 91       	pop	r24
    1f5e:	7f 91       	pop	r23
    1f60:	6f 91       	pop	r22
    1f62:	5f 91       	pop	r21
    1f64:	4f 91       	pop	r20
    1f66:	3f 91       	pop	r19
    1f68:	2f 91       	pop	r18
    1f6a:	0f 90       	pop	r0
    1f6c:	0b be       	out	0x3b, r0	; 59
    1f6e:	0f 90       	pop	r0
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	0f 90       	pop	r0
    1f74:	1f 90       	pop	r1
    1f76:	18 95       	reti

00001f78 <__vector_8>:
__vector_8():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/WInterrupts.c:456
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    1f78:	1f 92       	push	r1
    1f7a:	0f 92       	push	r0
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	0f 92       	push	r0
    1f80:	11 24       	eor	r1, r1
    1f82:	0b b6       	in	r0, 0x3b	; 59
    1f84:	0f 92       	push	r0
    1f86:	2f 93       	push	r18
    1f88:	3f 93       	push	r19
    1f8a:	4f 93       	push	r20
    1f8c:	5f 93       	push	r21
    1f8e:	6f 93       	push	r22
    1f90:	7f 93       	push	r23
    1f92:	8f 93       	push	r24
    1f94:	9f 93       	push	r25
    1f96:	af 93       	push	r26
    1f98:	bf 93       	push	r27
    1f9a:	ef 93       	push	r30
    1f9c:	ff 93       	push	r31
    1f9e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <intFunc+0xe>
    1fa2:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <intFunc+0xf>
    1fa6:	19 95       	eicall
    1fa8:	ff 91       	pop	r31
    1faa:	ef 91       	pop	r30
    1fac:	bf 91       	pop	r27
    1fae:	af 91       	pop	r26
    1fb0:	9f 91       	pop	r25
    1fb2:	8f 91       	pop	r24
    1fb4:	7f 91       	pop	r23
    1fb6:	6f 91       	pop	r22
    1fb8:	5f 91       	pop	r21
    1fba:	4f 91       	pop	r20
    1fbc:	3f 91       	pop	r19
    1fbe:	2f 91       	pop	r18
    1fc0:	0f 90       	pop	r0
    1fc2:	0b be       	out	0x3b, r0	; 59
    1fc4:	0f 90       	pop	r0
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	0f 90       	pop	r0
    1fca:	1f 90       	pop	r1
    1fcc:	18 95       	reti

00001fce <initVariant>:
initVariant():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1fce:	08 95       	ret

00001fd0 <main>:
main():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1fd0:	0e 94 9f 10 	call	0x213e	; 0x213e <init>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1fd4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <initVariant>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1fd8:	0e 94 a4 05 	call	0xb48	; 0xb48 <setup>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1fdc:	cd e6       	ldi	r28, 0x6D	; 109
    1fde:	da e0       	ldi	r29, 0x0A	; 10
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1fe0:	0e 94 ef 07 	call	0xfde	; 0xfde <loop>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1fe4:	20 97       	sbiw	r28, 0x00	; 0
    1fe6:	e1 f3       	breq	.-8      	; 0x1fe0 <main+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1fe8:	0e 94 6d 0a 	call	0x14da	; 0x14da <serialEventRun()>
    1fec:	f9 cf       	rjmp	.-14     	; 0x1fe0 <main+0x10>

00001fee <__vector_23>:
__vector_23():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1fee:	1f 92       	push	r1
    1ff0:	0f 92       	push	r0
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	0f 92       	push	r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	2f 93       	push	r18
    1ffa:	3f 93       	push	r19
    1ffc:	8f 93       	push	r24
    1ffe:	9f 93       	push	r25
    2000:	af 93       	push	r26
    2002:	bf 93       	push	r27
    2004:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <timer0_millis>
    2008:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <timer0_millis+0x1>
    200c:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <timer0_millis+0x2>
    2010:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <timer0_millis+0x3>
    2014:	30 91 69 07 	lds	r19, 0x0769	; 0x800769 <timer0_fract>
    2018:	26 e0       	ldi	r18, 0x06	; 6
    201a:	23 0f       	add	r18, r19
    201c:	2d 37       	cpi	r18, 0x7D	; 125
    201e:	68 f1       	brcs	.+90     	; 0x207a <__vector_23+0x8c>
    2020:	29 e8       	ldi	r18, 0x89	; 137
    2022:	23 0f       	add	r18, r19
    2024:	03 96       	adiw	r24, 0x03	; 3
    2026:	a1 1d       	adc	r26, r1
    2028:	b1 1d       	adc	r27, r1
    202a:	20 93 69 07 	sts	0x0769, r18	; 0x800769 <timer0_fract>
    202e:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <timer0_millis>
    2032:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <timer0_millis+0x1>
    2036:	a0 93 6c 07 	sts	0x076C, r26	; 0x80076c <timer0_millis+0x2>
    203a:	b0 93 6d 07 	sts	0x076D, r27	; 0x80076d <timer0_millis+0x3>
    203e:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <timer0_overflow_count>
    2042:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <timer0_overflow_count+0x1>
    2046:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <timer0_overflow_count+0x2>
    204a:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <timer0_overflow_count+0x3>
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	a1 1d       	adc	r26, r1
    2052:	b1 1d       	adc	r27, r1
    2054:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <timer0_overflow_count>
    2058:	90 93 66 07 	sts	0x0766, r25	; 0x800766 <timer0_overflow_count+0x1>
    205c:	a0 93 67 07 	sts	0x0767, r26	; 0x800767 <timer0_overflow_count+0x2>
    2060:	b0 93 68 07 	sts	0x0768, r27	; 0x800768 <timer0_overflow_count+0x3>
    2064:	bf 91       	pop	r27
    2066:	af 91       	pop	r26
    2068:	9f 91       	pop	r25
    206a:	8f 91       	pop	r24
    206c:	3f 91       	pop	r19
    206e:	2f 91       	pop	r18
    2070:	0f 90       	pop	r0
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	0f 90       	pop	r0
    2076:	1f 90       	pop	r1
    2078:	18 95       	reti
    207a:	02 96       	adiw	r24, 0x02	; 2
    207c:	a1 1d       	adc	r26, r1
    207e:	b1 1d       	adc	r27, r1
    2080:	d4 cf       	rjmp	.-88     	; 0x202a <__vector_23+0x3c>

00002082 <micros>:
micros():
    2082:	3f b7       	in	r19, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <timer0_overflow_count>
    208a:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <timer0_overflow_count+0x1>
    208e:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <timer0_overflow_count+0x2>
    2092:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <timer0_overflow_count+0x3>
    2096:	26 b5       	in	r18, 0x26	; 38
    2098:	a8 9b       	sbis	0x15, 0	; 21
    209a:	05 c0       	rjmp	.+10     	; 0x20a6 <micros+0x24>
    209c:	2f 3f       	cpi	r18, 0xFF	; 255
    209e:	19 f0       	breq	.+6      	; 0x20a6 <micros+0x24>
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	a1 1d       	adc	r26, r1
    20a4:	b1 1d       	adc	r27, r1
    20a6:	3f bf       	out	0x3f, r19	; 63
    20a8:	ba 2f       	mov	r27, r26
    20aa:	a9 2f       	mov	r26, r25
    20ac:	98 2f       	mov	r25, r24
    20ae:	88 27       	eor	r24, r24
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	62 0f       	add	r22, r18
    20b6:	71 1d       	adc	r23, r1
    20b8:	81 1d       	adc	r24, r1
    20ba:	91 1d       	adc	r25, r1
    20bc:	43 e0       	ldi	r20, 0x03	; 3
    20be:	66 0f       	add	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	88 1f       	adc	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	4a 95       	dec	r20
    20c8:	d1 f7       	brne	.-12     	; 0x20be <micros+0x3c>
    20ca:	08 95       	ret

000020cc <delay>:
delay():
    20cc:	8f 92       	push	r8
    20ce:	9f 92       	push	r9
    20d0:	af 92       	push	r10
    20d2:	bf 92       	push	r11
    20d4:	cf 92       	push	r12
    20d6:	df 92       	push	r13
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	6b 01       	movw	r12, r22
    20de:	7c 01       	movw	r14, r24
    20e0:	0e 94 41 10 	call	0x2082	; 0x2082 <micros>
    20e4:	4b 01       	movw	r8, r22
    20e6:	5c 01       	movw	r10, r24
    20e8:	c1 14       	cp	r12, r1
    20ea:	d1 04       	cpc	r13, r1
    20ec:	e1 04       	cpc	r14, r1
    20ee:	f1 04       	cpc	r15, r1
    20f0:	e9 f0       	breq	.+58     	; 0x212c <delay+0x60>
    20f2:	0e 94 b6 11 	call	0x236c	; 0x236c <yield>
    20f6:	0e 94 41 10 	call	0x2082	; 0x2082 <micros>
    20fa:	68 19       	sub	r22, r8
    20fc:	79 09       	sbc	r23, r9
    20fe:	8a 09       	sbc	r24, r10
    2100:	9b 09       	sbc	r25, r11
    2102:	68 3e       	cpi	r22, 0xE8	; 232
    2104:	73 40       	sbci	r23, 0x03	; 3
    2106:	81 05       	cpc	r24, r1
    2108:	91 05       	cpc	r25, r1
    210a:	70 f3       	brcs	.-36     	; 0x20e8 <delay+0x1c>
    210c:	21 e0       	ldi	r18, 0x01	; 1
    210e:	c2 1a       	sub	r12, r18
    2110:	d1 08       	sbc	r13, r1
    2112:	e1 08       	sbc	r14, r1
    2114:	f1 08       	sbc	r15, r1
    2116:	88 ee       	ldi	r24, 0xE8	; 232
    2118:	88 0e       	add	r8, r24
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	98 1e       	adc	r9, r24
    211e:	a1 1c       	adc	r10, r1
    2120:	b1 1c       	adc	r11, r1
    2122:	c1 14       	cp	r12, r1
    2124:	d1 04       	cpc	r13, r1
    2126:	e1 04       	cpc	r14, r1
    2128:	f1 04       	cpc	r15, r1
    212a:	29 f7       	brne	.-54     	; 0x20f6 <delay+0x2a>
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	cf 90       	pop	r12
    2134:	bf 90       	pop	r11
    2136:	af 90       	pop	r10
    2138:	9f 90       	pop	r9
    213a:	8f 90       	pop	r8
    213c:	08 95       	ret

0000213e <init>:
init():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    213e:	78 94       	sei
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2140:	84 b5       	in	r24, 0x24	; 36
    2142:	83 60       	ori	r24, 0x03	; 3
    2144:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2146:	85 b5       	in	r24, 0x25	; 37
    2148:	83 60       	ori	r24, 0x03	; 3
    214a:	85 bd       	out	0x25, r24	; 37
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    214c:	ee e6       	ldi	r30, 0x6E	; 110
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	81 60       	ori	r24, 0x01	; 1
    2154:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2156:	e1 e8       	ldi	r30, 0x81	; 129
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	82 e0       	ldi	r24, 0x02	; 2
    215c:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    215e:	80 81       	ld	r24, Z
    2160:	81 60       	ori	r24, 0x01	; 1
    2162:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2164:	e0 e8       	ldi	r30, 0x80	; 128
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	81 60       	ori	r24, 0x01	; 1
    216c:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    216e:	e1 eb       	ldi	r30, 0xB1	; 177
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	84 60       	ori	r24, 0x04	; 4
    2176:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2178:	e0 eb       	ldi	r30, 0xB0	; 176
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	81 60       	ori	r24, 0x01	; 1
    2180:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    2182:	e1 e9       	ldi	r30, 0x91	; 145
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	83 60       	ori	r24, 0x03	; 3
    218a:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    218c:	e0 e9       	ldi	r30, 0x90	; 144
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	81 60       	ori	r24, 0x01	; 1
    2194:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    2196:	e1 ea       	ldi	r30, 0xA1	; 161
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	83 60       	ori	r24, 0x03	; 3
    219e:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    21a0:	e0 ea       	ldi	r30, 0xA0	; 160
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	81 60       	ori	r24, 0x01	; 1
    21a8:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    21aa:	e1 e2       	ldi	r30, 0x21	; 33
    21ac:	f1 e0       	ldi	r31, 0x01	; 1
    21ae:	80 81       	ld	r24, Z
    21b0:	83 60       	ori	r24, 0x03	; 3
    21b2:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    21b4:	e0 e2       	ldi	r30, 0x20	; 32
    21b6:	f1 e0       	ldi	r31, 0x01	; 1
    21b8:	80 81       	ld	r24, Z
    21ba:	81 60       	ori	r24, 0x01	; 1
    21bc:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    21be:	86 e8       	ldi	r24, 0x86	; 134
    21c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    21c4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    21c8:	08 95       	ret

000021ca <turnOffPWM>:
turnOffPWM():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    21ca:	82 50       	subi	r24, 0x02	; 2
    21cc:	82 31       	cpi	r24, 0x12	; 18
    21ce:	08 f0       	brcs	.+2      	; 0x21d2 <turnOffPWM+0x8>
    21d0:	5f c0       	rjmp	.+190    	; 0x2290 <__stack+0x91>
    21d2:	e8 2f       	mov	r30, r24
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	88 27       	eor	r24, r24
    21d8:	ef 50       	subi	r30, 0x0F	; 15
    21da:	ff 4e       	sbci	r31, 0xEF	; 239
    21dc:	8f 4f       	sbci	r24, 0xFF	; 255
    21de:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__tablejump2__>
    21e2:	45 11       	cpse	r20, r5
    21e4:	49 11       	cpse	r20, r9
    21e6:	03 11       	cpse	r16, r3
    21e8:	09 11       	cpse	r16, r9
    21ea:	0d 11       	cpse	r16, r13
    21ec:	48 11       	cpse	r20, r8
    21ee:	11 11       	cpse	r17, r1
    21f0:	17 11       	cpse	r17, r7
    21f2:	1b 11       	cpse	r17, r11
    21f4:	21 11       	cpse	r18, r1
    21f6:	25 11       	cpse	r18, r5
    21f8:	29 11       	cpse	r18, r9
    21fa:	2f 11       	cpse	r18, r15
    21fc:	33 11       	cpse	r19, r3
    21fe:	48 11       	cpse	r20, r8
    2200:	37 11       	cpse	r19, r7
    2202:	3d 11       	cpse	r19, r13
    2204:	41 11       	cpse	r20, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    2206:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    220a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    220c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    2210:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2212:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2216:	8f 7d       	andi	r24, 0xDF	; 223
    2218:	f9 cf       	rjmp	.-14     	; 0x220c <__stack+0xd>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    221a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    221e:	87 7f       	andi	r24, 0xF7	; 247
    2220:	f5 cf       	rjmp	.-22     	; 0x220c <__stack+0xd>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2222:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2226:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2228:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    222c:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    222e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2232:	8f 7d       	andi	r24, 0xDF	; 223
    2234:	f9 cf       	rjmp	.-14     	; 0x2228 <__stack+0x29>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2236:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    223a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    223c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    2240:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2242:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2246:	8f 7d       	andi	r24, 0xDF	; 223
    2248:	f9 cf       	rjmp	.-14     	; 0x223c <__stack+0x3d>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    224a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    224e:	87 7f       	andi	r24, 0xF7	; 247
    2250:	f5 cf       	rjmp	.-22     	; 0x223c <__stack+0x3d>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    2252:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2256:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    2258:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    225c:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    225e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2262:	8f 7d       	andi	r24, 0xDF	; 223
    2264:	f9 cf       	rjmp	.-14     	; 0x2258 <__stack+0x59>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    2266:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    226a:	87 7f       	andi	r24, 0xF7	; 247
    226c:	f5 cf       	rjmp	.-22     	; 0x2258 <__stack+0x59>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    226e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2272:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    2274:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    2278:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    227a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    227e:	8f 7d       	andi	r24, 0xDF	; 223
    2280:	f9 cf       	rjmp	.-14     	; 0x2274 <__stack+0x75>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    2282:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2286:	87 7f       	andi	r24, 0xF7	; 247
    2288:	f5 cf       	rjmp	.-22     	; 0x2274 <__stack+0x75>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    228a:	84 b5       	in	r24, 0x24	; 36
    228c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    228e:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    2290:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2292:	84 b5       	in	r24, 0x24	; 36
    2294:	8f 7d       	andi	r24, 0xDF	; 223
    2296:	fb cf       	rjmp	.-10     	; 0x228e <__stack+0x8f>

00002298 <pinMode>:
pinMode():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	fc 01       	movw	r30, r24
    22a0:	e0 54       	subi	r30, 0x40	; 64
    22a2:	fd 4f       	sbci	r31, 0xFD	; 253
    22a4:	24 91       	lpm	r18, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    22a6:	8a 5e       	subi	r24, 0xEA	; 234
    22a8:	9c 4f       	sbci	r25, 0xFC	; 252
    22aa:	fc 01       	movw	r30, r24
    22ac:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    22ae:	88 23       	and	r24, r24
    22b0:	c9 f0       	breq	.+50     	; 0x22e4 <pinMode+0x4c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	fc 01       	movw	r30, r24
    22ba:	ea 57       	subi	r30, 0x7A	; 122
    22bc:	fc 4f       	sbci	r31, 0xFC	; 252
    22be:	a5 91       	lpm	r26, Z+
    22c0:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    22c2:	fc 01       	movw	r30, r24
    22c4:	e4 59       	subi	r30, 0x94	; 148
    22c6:	fc 4f       	sbci	r31, 0xFC	; 252
    22c8:	c5 91       	lpm	r28, Z+
    22ca:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    22cc:	61 11       	cpse	r22, r1
    22ce:	0d c0       	rjmp	.+26     	; 0x22ea <pinMode+0x52>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    22d0:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    22d2:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    22d4:	8c 91       	ld	r24, X
    22d6:	20 95       	com	r18
    22d8:	82 23       	and	r24, r18
    22da:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    22dc:	88 81       	ld	r24, Y
    22de:	28 23       	and	r18, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    22e0:	28 83       	st	Y, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    22e2:	9f bf       	out	0x3f, r25	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    22ea:	62 30       	cpi	r22, 0x02	; 2
    22ec:	51 f4       	brne	.+20     	; 0x2302 <pinMode+0x6a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    22ee:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    22f0:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    22f2:	3c 91       	ld	r19, X
    22f4:	82 2f       	mov	r24, r18
    22f6:	80 95       	com	r24
    22f8:	83 23       	and	r24, r19
    22fa:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    22fc:	e8 81       	ld	r30, Y
    22fe:	2e 2b       	or	r18, r30
    2300:	ef cf       	rjmp	.-34     	; 0x22e0 <pinMode+0x48>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2302:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    2304:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2306:	ec 91       	ld	r30, X
    2308:	2e 2b       	or	r18, r30
    230a:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    230c:	8f bf       	out	0x3f, r24	; 63
    230e:	ea cf       	rjmp	.-44     	; 0x22e4 <pinMode+0x4c>

00002310 <digitalWrite>:
digitalWrite():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2310:	1f 93       	push	r17
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	f9 01       	movw	r30, r18
    231c:	e6 59       	subi	r30, 0x96	; 150
    231e:	fd 4f       	sbci	r31, 0xFD	; 253
    2320:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2322:	f9 01       	movw	r30, r18
    2324:	e0 54       	subi	r30, 0x40	; 64
    2326:	fd 4f       	sbci	r31, 0xFD	; 253
    2328:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    232a:	f9 01       	movw	r30, r18
    232c:	ea 5e       	subi	r30, 0xEA	; 234
    232e:	fc 4f       	sbci	r31, 0xFC	; 252
    2330:	c4 91       	lpm	r28, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2332:	cc 23       	and	r28, r28
    2334:	a9 f0       	breq	.+42     	; 0x2360 <digitalWrite+0x50>
    2336:	16 2f       	mov	r17, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2338:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    233a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <turnOffPWM>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    233e:	ec 2f       	mov	r30, r28
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	e4 59       	subi	r30, 0x94	; 148
    2348:	fc 4f       	sbci	r31, 0xFC	; 252
    234a:	a5 91       	lpm	r26, Z+
    234c:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    234e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    2350:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2352:	ec 91       	ld	r30, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2354:	11 11       	cpse	r17, r1
    2356:	08 c0       	rjmp	.+16     	; 0x2368 <digitalWrite+0x58>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2358:	d0 95       	com	r29
    235a:	de 23       	and	r29, r30
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    235c:	dc 93       	st	X, r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    235e:	8f bf       	out	0x3f, r24	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	1f 91       	pop	r17
    2366:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2368:	de 2b       	or	r29, r30
    236a:	f8 cf       	rjmp	.-16     	; 0x235c <digitalWrite+0x4c>

0000236c <yield>:
__empty():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    236c:	08 95       	ret

0000236e <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    236e:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    2370:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    2372:	16 f4       	brtc	.+4      	; 0x2378 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    2374:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    2376:	07 d0       	rcall	.+14     	; 0x2386 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    2378:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    237a:	09 d0       	rcall	.+18     	; 0x238e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    237c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    2380:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    2382:	05 d0       	rcall	.+10     	; 0x238e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    2384:	3e f4       	brtc	.+14     	; 0x2394 <__divmodhi4_exit>

00002386 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    2386:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    2388:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    238a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    238c:	08 95       	ret

0000238e <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    238e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    2390:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    2392:	7f 4f       	sbci	r23, 0xFF	; 255

00002394 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    2394:	08 95       	ret

00002396 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    2396:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2398:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    239a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    239c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    239e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <__udivmodsi4_ep>

000023a2 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    23a2:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    23a4:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    23a6:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    23a8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    23aa:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    23ac:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    23ae:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    23b0:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    23b2:	20 f0       	brcs	.+8      	; 0x23bc <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    23b4:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    23b6:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    23b8:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    23ba:	f5 0b       	sbc	r31, r21

000023bc <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    23bc:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    23be:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    23c0:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    23c2:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    23c4:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    23c6:	69 f7       	brne	.-38     	; 0x23a2 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    23c8:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    23ca:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    23cc:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    23ce:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    23d0:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    23d2:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    23d4:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    23d6:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    23d8:	08 95       	ret

000023da <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    23da:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    23dc:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    23de:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    23e0:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    23e2:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    23e4:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    23e6:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    23e8:	19 94       	eijmp

000023ea <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    23ea:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    23ec:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    23ee:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    23f0:	07 c0       	rjmp	.+14     	; 0x2400 <__udivmodhi4_ep>

000023f2 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    23f2:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    23f4:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    23f6:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    23f8:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    23fa:	10 f0       	brcs	.+4      	; 0x2400 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    23fc:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    23fe:	b7 0b       	sbc	r27, r23

00002400 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    2400:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    2402:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    2404:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    2406:	a9 f7       	brne	.-22     	; 0x23f2 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    2408:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    240a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    240c:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    240e:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    2410:	08 95       	ret

00002412 <strcat>:
strcat():
    2412:	fb 01       	movw	r30, r22
    2414:	dc 01       	movw	r26, r24
    2416:	0d 90       	ld	r0, X+
    2418:	00 20       	and	r0, r0
    241a:	e9 f7       	brne	.-6      	; 0x2416 <strcat+0x4>
    241c:	11 97       	sbiw	r26, 0x01	; 1
    241e:	01 90       	ld	r0, Z+
    2420:	0d 92       	st	X+, r0
    2422:	00 20       	and	r0, r0
    2424:	e1 f7       	brne	.-8      	; 0x241e <strcat+0xc>
    2426:	08 95       	ret

00002428 <strstr>:
strstr():
    2428:	fb 01       	movw	r30, r22
    242a:	51 91       	ld	r21, Z+
    242c:	55 23       	and	r21, r21
    242e:	a9 f0       	breq	.+42     	; 0x245a <strstr+0x32>
    2430:	bf 01       	movw	r22, r30
    2432:	dc 01       	movw	r26, r24
    2434:	4d 91       	ld	r20, X+
    2436:	45 17       	cp	r20, r21
    2438:	41 11       	cpse	r20, r1
    243a:	e1 f7       	brne	.-8      	; 0x2434 <strstr+0xc>
    243c:	59 f4       	brne	.+22     	; 0x2454 <strstr+0x2c>
    243e:	cd 01       	movw	r24, r26
    2440:	01 90       	ld	r0, Z+
    2442:	00 20       	and	r0, r0
    2444:	49 f0       	breq	.+18     	; 0x2458 <strstr+0x30>
    2446:	4d 91       	ld	r20, X+
    2448:	40 15       	cp	r20, r0
    244a:	41 11       	cpse	r20, r1
    244c:	c9 f3       	breq	.-14     	; 0x2440 <strstr+0x18>
    244e:	fb 01       	movw	r30, r22
    2450:	41 11       	cpse	r20, r1
    2452:	ef cf       	rjmp	.-34     	; 0x2432 <strstr+0xa>
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	08 95       	ret

0000245c <sprintf>:
sprintf():
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	2e 97       	sbiw	r28, 0x0e	; 14
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	0e 89       	ldd	r16, Y+22	; 0x16
    2476:	1f 89       	ldd	r17, Y+23	; 0x17
    2478:	86 e0       	ldi	r24, 0x06	; 6
    247a:	8c 83       	std	Y+4, r24	; 0x04
    247c:	1a 83       	std	Y+2, r17	; 0x02
    247e:	09 83       	std	Y+1, r16	; 0x01
    2480:	8f ef       	ldi	r24, 0xFF	; 255
    2482:	9f e7       	ldi	r25, 0x7F	; 127
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	ae 01       	movw	r20, r28
    248a:	46 5e       	subi	r20, 0xE6	; 230
    248c:	5f 4f       	sbci	r21, 0xFF	; 255
    248e:	68 8d       	ldd	r22, Y+24	; 0x18
    2490:	79 8d       	ldd	r23, Y+25	; 0x19
    2492:	ce 01       	movw	r24, r28
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	0e 94 5e 12 	call	0x24bc	; 0x24bc <vfprintf>
    249a:	2f 81       	ldd	r18, Y+7	; 0x07
    249c:	38 85       	ldd	r19, Y+8	; 0x08
    249e:	02 0f       	add	r16, r18
    24a0:	13 1f       	adc	r17, r19
    24a2:	f8 01       	movw	r30, r16
    24a4:	10 82       	st	Z, r1
    24a6:	2e 96       	adiw	r28, 0x0e	; 14
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	08 95       	ret

000024bc <vfprintf>:
vfprintf():
    24bc:	2f 92       	push	r2
    24be:	3f 92       	push	r3
    24c0:	4f 92       	push	r4
    24c2:	5f 92       	push	r5
    24c4:	6f 92       	push	r6
    24c6:	7f 92       	push	r7
    24c8:	8f 92       	push	r8
    24ca:	9f 92       	push	r9
    24cc:	af 92       	push	r10
    24ce:	bf 92       	push	r11
    24d0:	cf 92       	push	r12
    24d2:	df 92       	push	r13
    24d4:	ef 92       	push	r14
    24d6:	ff 92       	push	r15
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <vfprintf+0x26>
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <vfprintf+0x28>
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <vfprintf+0x2a>
    24e6:	1f 92       	push	r1
    24e8:	1f 92       	push	r1
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	7c 01       	movw	r14, r24
    24f0:	3b 01       	movw	r6, r22
    24f2:	8a 01       	movw	r16, r20
    24f4:	fc 01       	movw	r30, r24
    24f6:	17 82       	std	Z+7, r1	; 0x07
    24f8:	16 82       	std	Z+6, r1	; 0x06
    24fa:	83 81       	ldd	r24, Z+3	; 0x03
    24fc:	81 ff       	sbrs	r24, 1
    24fe:	dd c1       	rjmp	.+954    	; 0x28ba <vfprintf+0x3fe>
    2500:	ce 01       	movw	r24, r28
    2502:	01 96       	adiw	r24, 0x01	; 1
    2504:	5c 01       	movw	r10, r24
    2506:	f7 01       	movw	r30, r14
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	f3 01       	movw	r30, r6
    250c:	93 fd       	sbrc	r25, 3
    250e:	85 91       	lpm	r24, Z+
    2510:	93 ff       	sbrs	r25, 3
    2512:	81 91       	ld	r24, Z+
    2514:	3f 01       	movw	r6, r30
    2516:	88 23       	and	r24, r24
    2518:	09 f4       	brne	.+2      	; 0x251c <vfprintf+0x60>
    251a:	53 c1       	rjmp	.+678    	; 0x27c2 <vfprintf+0x306>
    251c:	85 32       	cpi	r24, 0x25	; 37
    251e:	39 f4       	brne	.+14     	; 0x252e <vfprintf+0x72>
    2520:	93 fd       	sbrc	r25, 3
    2522:	85 91       	lpm	r24, Z+
    2524:	93 ff       	sbrs	r25, 3
    2526:	81 91       	ld	r24, Z+
    2528:	3f 01       	movw	r6, r30
    252a:	85 32       	cpi	r24, 0x25	; 37
    252c:	29 f4       	brne	.+10     	; 0x2538 <vfprintf+0x7c>
    252e:	b7 01       	movw	r22, r14
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 76 14 	call	0x28ec	; 0x28ec <fputc>
    2536:	e7 cf       	rjmp	.-50     	; 0x2506 <vfprintf+0x4a>
    2538:	91 2c       	mov	r9, r1
    253a:	21 2c       	mov	r2, r1
    253c:	31 2c       	mov	r3, r1
    253e:	ff e1       	ldi	r31, 0x1F	; 31
    2540:	f3 15       	cp	r31, r3
    2542:	38 f0       	brcs	.+14     	; 0x2552 <vfprintf+0x96>
    2544:	8b 32       	cpi	r24, 0x2B	; 43
    2546:	11 f1       	breq	.+68     	; 0x258c <vfprintf+0xd0>
    2548:	90 f4       	brcc	.+36     	; 0x256e <vfprintf+0xb2>
    254a:	80 32       	cpi	r24, 0x20	; 32
    254c:	09 f1       	breq	.+66     	; 0x2590 <vfprintf+0xd4>
    254e:	83 32       	cpi	r24, 0x23	; 35
    2550:	29 f1       	breq	.+74     	; 0x259c <vfprintf+0xe0>
    2552:	37 fc       	sbrc	r3, 7
    2554:	3c c0       	rjmp	.+120    	; 0x25ce <vfprintf+0x112>
    2556:	20 ed       	ldi	r18, 0xD0	; 208
    2558:	28 0f       	add	r18, r24
    255a:	2a 30       	cpi	r18, 0x0A	; 10
    255c:	50 f5       	brcc	.+84     	; 0x25b2 <vfprintf+0xf6>
    255e:	36 fe       	sbrs	r3, 6
    2560:	20 c0       	rjmp	.+64     	; 0x25a2 <vfprintf+0xe6>
    2562:	8a e0       	ldi	r24, 0x0A	; 10
    2564:	98 9e       	mul	r9, r24
    2566:	20 0d       	add	r18, r0
    2568:	11 24       	eor	r1, r1
    256a:	92 2e       	mov	r9, r18
    256c:	06 c0       	rjmp	.+12     	; 0x257a <vfprintf+0xbe>
    256e:	8d 32       	cpi	r24, 0x2D	; 45
    2570:	91 f0       	breq	.+36     	; 0x2596 <vfprintf+0xda>
    2572:	80 33       	cpi	r24, 0x30	; 48
    2574:	71 f7       	brne	.-36     	; 0x2552 <vfprintf+0x96>
    2576:	68 94       	set
    2578:	30 f8       	bld	r3, 0
    257a:	f3 01       	movw	r30, r6
    257c:	93 fd       	sbrc	r25, 3
    257e:	85 91       	lpm	r24, Z+
    2580:	93 ff       	sbrs	r25, 3
    2582:	81 91       	ld	r24, Z+
    2584:	3f 01       	movw	r6, r30
    2586:	81 11       	cpse	r24, r1
    2588:	da cf       	rjmp	.-76     	; 0x253e <vfprintf+0x82>
    258a:	21 c0       	rjmp	.+66     	; 0x25ce <vfprintf+0x112>
    258c:	68 94       	set
    258e:	31 f8       	bld	r3, 1
    2590:	68 94       	set
    2592:	32 f8       	bld	r3, 2
    2594:	f2 cf       	rjmp	.-28     	; 0x257a <vfprintf+0xbe>
    2596:	68 94       	set
    2598:	33 f8       	bld	r3, 3
    259a:	ef cf       	rjmp	.-34     	; 0x257a <vfprintf+0xbe>
    259c:	68 94       	set
    259e:	34 f8       	bld	r3, 4
    25a0:	ec cf       	rjmp	.-40     	; 0x257a <vfprintf+0xbe>
    25a2:	ea e0       	ldi	r30, 0x0A	; 10
    25a4:	2e 9e       	mul	r2, r30
    25a6:	20 0d       	add	r18, r0
    25a8:	11 24       	eor	r1, r1
    25aa:	22 2e       	mov	r2, r18
    25ac:	68 94       	set
    25ae:	35 f8       	bld	r3, 5
    25b0:	e4 cf       	rjmp	.-56     	; 0x257a <vfprintf+0xbe>
    25b2:	8e 32       	cpi	r24, 0x2E	; 46
    25b4:	29 f4       	brne	.+10     	; 0x25c0 <vfprintf+0x104>
    25b6:	36 fc       	sbrc	r3, 6
    25b8:	04 c1       	rjmp	.+520    	; 0x27c2 <vfprintf+0x306>
    25ba:	68 94       	set
    25bc:	36 f8       	bld	r3, 6
    25be:	dd cf       	rjmp	.-70     	; 0x257a <vfprintf+0xbe>
    25c0:	8c 36       	cpi	r24, 0x6C	; 108
    25c2:	19 f4       	brne	.+6      	; 0x25ca <vfprintf+0x10e>
    25c4:	68 94       	set
    25c6:	37 f8       	bld	r3, 7
    25c8:	d8 cf       	rjmp	.-80     	; 0x257a <vfprintf+0xbe>
    25ca:	88 36       	cpi	r24, 0x68	; 104
    25cc:	b1 f2       	breq	.-84     	; 0x257a <vfprintf+0xbe>
    25ce:	98 2f       	mov	r25, r24
    25d0:	9f 7d       	andi	r25, 0xDF	; 223
    25d2:	95 54       	subi	r25, 0x45	; 69
    25d4:	93 30       	cpi	r25, 0x03	; 3
    25d6:	e0 f0       	brcs	.+56     	; 0x2610 <vfprintf+0x154>
    25d8:	83 36       	cpi	r24, 0x63	; 99
    25da:	a1 f1       	breq	.+104    	; 0x2644 <vfprintf+0x188>
    25dc:	83 37       	cpi	r24, 0x73	; 115
    25de:	c1 f1       	breq	.+112    	; 0x2650 <vfprintf+0x194>
    25e0:	83 35       	cpi	r24, 0x53	; 83
    25e2:	09 f0       	breq	.+2      	; 0x25e6 <vfprintf+0x12a>
    25e4:	63 c0       	rjmp	.+198    	; 0x26ac <vfprintf+0x1f0>
    25e6:	28 01       	movw	r4, r16
    25e8:	f2 e0       	ldi	r31, 0x02	; 2
    25ea:	4f 0e       	add	r4, r31
    25ec:	51 1c       	adc	r5, r1
    25ee:	f8 01       	movw	r30, r16
    25f0:	c0 80       	ld	r12, Z
    25f2:	d1 80       	ldd	r13, Z+1	; 0x01
    25f4:	69 2d       	mov	r22, r9
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	36 fc       	sbrc	r3, 6
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <vfprintf+0x144>
    25fc:	6f ef       	ldi	r22, 0xFF	; 255
    25fe:	7f ef       	ldi	r23, 0xFF	; 255
    2600:	c6 01       	movw	r24, r12
    2602:	0e 94 60 14 	call	0x28c0	; 0x28c0 <strnlen_P>
    2606:	4c 01       	movw	r8, r24
    2608:	68 94       	set
    260a:	37 f8       	bld	r3, 7
    260c:	82 01       	movw	r16, r4
    260e:	0a c0       	rjmp	.+20     	; 0x2624 <vfprintf+0x168>
    2610:	0c 5f       	subi	r16, 0xFC	; 252
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	ff e3       	ldi	r31, 0x3F	; 63
    2616:	f9 83       	std	Y+1, r31	; 0x01
    2618:	88 24       	eor	r8, r8
    261a:	83 94       	inc	r8
    261c:	91 2c       	mov	r9, r1
    261e:	65 01       	movw	r12, r10
    2620:	e8 94       	clt
    2622:	37 f8       	bld	r3, 7
    2624:	33 fe       	sbrs	r3, 3
    2626:	2d c0       	rjmp	.+90     	; 0x2682 <vfprintf+0x1c6>
    2628:	52 2c       	mov	r5, r2
    262a:	81 14       	cp	r8, r1
    262c:	91 04       	cpc	r9, r1
    262e:	71 f5       	brne	.+92     	; 0x268c <vfprintf+0x1d0>
    2630:	55 20       	and	r5, r5
    2632:	09 f4       	brne	.+2      	; 0x2636 <vfprintf+0x17a>
    2634:	68 cf       	rjmp	.-304    	; 0x2506 <vfprintf+0x4a>
    2636:	b7 01       	movw	r22, r14
    2638:	80 e2       	ldi	r24, 0x20	; 32
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 76 14 	call	0x28ec	; 0x28ec <fputc>
    2640:	5a 94       	dec	r5
    2642:	f6 cf       	rjmp	.-20     	; 0x2630 <vfprintf+0x174>
    2644:	f8 01       	movw	r30, r16
    2646:	80 81       	ld	r24, Z
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	0e 5f       	subi	r16, 0xFE	; 254
    264c:	1f 4f       	sbci	r17, 0xFF	; 255
    264e:	e4 cf       	rjmp	.-56     	; 0x2618 <vfprintf+0x15c>
    2650:	28 01       	movw	r4, r16
    2652:	f2 e0       	ldi	r31, 0x02	; 2
    2654:	4f 0e       	add	r4, r31
    2656:	51 1c       	adc	r5, r1
    2658:	f8 01       	movw	r30, r16
    265a:	c0 80       	ld	r12, Z
    265c:	d1 80       	ldd	r13, Z+1	; 0x01
    265e:	69 2d       	mov	r22, r9
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	36 fc       	sbrc	r3, 6
    2664:	02 c0       	rjmp	.+4      	; 0x266a <vfprintf+0x1ae>
    2666:	6f ef       	ldi	r22, 0xFF	; 255
    2668:	7f ef       	ldi	r23, 0xFF	; 255
    266a:	c6 01       	movw	r24, r12
    266c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <strnlen>
    2670:	4c 01       	movw	r8, r24
    2672:	82 01       	movw	r16, r4
    2674:	d5 cf       	rjmp	.-86     	; 0x2620 <vfprintf+0x164>
    2676:	b7 01       	movw	r22, r14
    2678:	80 e2       	ldi	r24, 0x20	; 32
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 76 14 	call	0x28ec	; 0x28ec <fputc>
    2680:	2a 94       	dec	r2
    2682:	28 14       	cp	r2, r8
    2684:	19 04       	cpc	r1, r9
    2686:	09 f0       	breq	.+2      	; 0x268a <vfprintf+0x1ce>
    2688:	b0 f7       	brcc	.-20     	; 0x2676 <vfprintf+0x1ba>
    268a:	ce cf       	rjmp	.-100    	; 0x2628 <vfprintf+0x16c>
    268c:	f6 01       	movw	r30, r12
    268e:	37 fc       	sbrc	r3, 7
    2690:	85 91       	lpm	r24, Z+
    2692:	37 fe       	sbrs	r3, 7
    2694:	81 91       	ld	r24, Z+
    2696:	6f 01       	movw	r12, r30
    2698:	b7 01       	movw	r22, r14
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 76 14 	call	0x28ec	; 0x28ec <fputc>
    26a0:	51 10       	cpse	r5, r1
    26a2:	5a 94       	dec	r5
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	8f 1a       	sub	r8, r31
    26a8:	91 08       	sbc	r9, r1
    26aa:	bf cf       	rjmp	.-130    	; 0x262a <vfprintf+0x16e>
    26ac:	84 36       	cpi	r24, 0x64	; 100
    26ae:	19 f0       	breq	.+6      	; 0x26b6 <vfprintf+0x1fa>
    26b0:	89 36       	cpi	r24, 0x69	; 105
    26b2:	09 f0       	breq	.+2      	; 0x26b6 <vfprintf+0x1fa>
    26b4:	77 c0       	rjmp	.+238    	; 0x27a4 <vfprintf+0x2e8>
    26b6:	f8 01       	movw	r30, r16
    26b8:	37 fe       	sbrs	r3, 7
    26ba:	6b c0       	rjmp	.+214    	; 0x2792 <vfprintf+0x2d6>
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	0c 5f       	subi	r16, 0xFC	; 252
    26c6:	1f 4f       	sbci	r17, 0xFF	; 255
    26c8:	f3 2d       	mov	r31, r3
    26ca:	ff 76       	andi	r31, 0x6F	; 111
    26cc:	3f 2e       	mov	r3, r31
    26ce:	97 ff       	sbrs	r25, 7
    26d0:	09 c0       	rjmp	.+18     	; 0x26e4 <vfprintf+0x228>
    26d2:	90 95       	com	r25
    26d4:	80 95       	com	r24
    26d6:	70 95       	com	r23
    26d8:	61 95       	neg	r22
    26da:	7f 4f       	sbci	r23, 0xFF	; 255
    26dc:	8f 4f       	sbci	r24, 0xFF	; 255
    26de:	9f 4f       	sbci	r25, 0xFF	; 255
    26e0:	68 94       	set
    26e2:	37 f8       	bld	r3, 7
    26e4:	2a e0       	ldi	r18, 0x0A	; 10
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	a5 01       	movw	r20, r10
    26ea:	0e 94 a6 14 	call	0x294c	; 0x294c <__ultoa_invert>
    26ee:	c8 2e       	mov	r12, r24
    26f0:	ca 18       	sub	r12, r10
    26f2:	8c 2c       	mov	r8, r12
    26f4:	43 2c       	mov	r4, r3
    26f6:	36 fe       	sbrs	r3, 6
    26f8:	0c c0       	rjmp	.+24     	; 0x2712 <vfprintf+0x256>
    26fa:	e8 94       	clt
    26fc:	40 f8       	bld	r4, 0
    26fe:	c9 14       	cp	r12, r9
    2700:	40 f4       	brcc	.+16     	; 0x2712 <vfprintf+0x256>
    2702:	34 fe       	sbrs	r3, 4
    2704:	05 c0       	rjmp	.+10     	; 0x2710 <vfprintf+0x254>
    2706:	32 fc       	sbrc	r3, 2
    2708:	03 c0       	rjmp	.+6      	; 0x2710 <vfprintf+0x254>
    270a:	f3 2d       	mov	r31, r3
    270c:	fe 7e       	andi	r31, 0xEE	; 238
    270e:	4f 2e       	mov	r4, r31
    2710:	89 2c       	mov	r8, r9
    2712:	44 fe       	sbrs	r4, 4
    2714:	aa c0       	rjmp	.+340    	; 0x286a <vfprintf+0x3ae>
    2716:	fe 01       	movw	r30, r28
    2718:	ec 0d       	add	r30, r12
    271a:	f1 1d       	adc	r31, r1
    271c:	80 81       	ld	r24, Z
    271e:	80 33       	cpi	r24, 0x30	; 48
    2720:	09 f0       	breq	.+2      	; 0x2724 <vfprintf+0x268>
    2722:	9c c0       	rjmp	.+312    	; 0x285c <vfprintf+0x3a0>
    2724:	24 2d       	mov	r18, r4
    2726:	29 7e       	andi	r18, 0xE9	; 233
    2728:	42 2e       	mov	r4, r18
    272a:	84 2d       	mov	r24, r4
    272c:	88 70       	andi	r24, 0x08	; 8
    272e:	58 2e       	mov	r5, r24
    2730:	43 fc       	sbrc	r4, 3
    2732:	aa c0       	rjmp	.+340    	; 0x2888 <vfprintf+0x3cc>
    2734:	40 fe       	sbrs	r4, 0
    2736:	a4 c0       	rjmp	.+328    	; 0x2880 <vfprintf+0x3c4>
    2738:	9c 2c       	mov	r9, r12
    273a:	82 14       	cp	r8, r2
    273c:	18 f4       	brcc	.+6      	; 0x2744 <vfprintf+0x288>
    273e:	2c 0c       	add	r2, r12
    2740:	92 2c       	mov	r9, r2
    2742:	98 18       	sub	r9, r8
    2744:	44 fe       	sbrs	r4, 4
    2746:	a6 c0       	rjmp	.+332    	; 0x2894 <vfprintf+0x3d8>
    2748:	b7 01       	movw	r22, r14
    274a:	80 e3       	ldi	r24, 0x30	; 48
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 76 14 	call	0x28ec	; 0x28ec <fputc>
    2752:	42 fe       	sbrs	r4, 2
    2754:	09 c0       	rjmp	.+18     	; 0x2768 <vfprintf+0x2ac>
    2756:	88 e7       	ldi	r24, 0x78	; 120
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	41 fe       	sbrs	r4, 1
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <vfprintf+0x2a6>
    275e:	88 e5       	ldi	r24, 0x58	; 88
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	b7 01       	movw	r22, r14
    2764:	0e 94 76 14 	call	0x28ec	; 0x28ec <fputc>
    2768:	c9 14       	cp	r12, r9
    276a:	08 f4       	brcc	.+2      	; 0x276e <vfprintf+0x2b2>
    276c:	9f c0       	rjmp	.+318    	; 0x28ac <vfprintf+0x3f0>
    276e:	ca 94       	dec	r12
    2770:	d1 2c       	mov	r13, r1
    2772:	9f ef       	ldi	r25, 0xFF	; 255
    2774:	c9 1a       	sub	r12, r25
    2776:	d9 0a       	sbc	r13, r25
    2778:	ca 0c       	add	r12, r10
    277a:	db 1c       	adc	r13, r11
    277c:	f6 01       	movw	r30, r12
    277e:	82 91       	ld	r24, -Z
    2780:	6f 01       	movw	r12, r30
    2782:	b7 01       	movw	r22, r14
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 76 14 	call	0x28ec	; 0x28ec <fputc>
    278a:	ac 14       	cp	r10, r12
    278c:	bd 04       	cpc	r11, r13
    278e:	b1 f7       	brne	.-20     	; 0x277c <vfprintf+0x2c0>
    2790:	4f cf       	rjmp	.-354    	; 0x2630 <vfprintf+0x174>
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	07 2e       	mov	r0, r23
    2798:	00 0c       	add	r0, r0
    279a:	88 0b       	sbc	r24, r24
    279c:	99 0b       	sbc	r25, r25
    279e:	0e 5f       	subi	r16, 0xFE	; 254
    27a0:	1f 4f       	sbci	r17, 0xFF	; 255
    27a2:	92 cf       	rjmp	.-220    	; 0x26c8 <vfprintf+0x20c>
    27a4:	d3 2c       	mov	r13, r3
    27a6:	e8 94       	clt
    27a8:	d4 f8       	bld	r13, 4
    27aa:	2a e0       	ldi	r18, 0x0A	; 10
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	85 37       	cpi	r24, 0x75	; 117
    27b0:	e1 f1       	breq	.+120    	; 0x282a <vfprintf+0x36e>
    27b2:	23 2d       	mov	r18, r3
    27b4:	29 7f       	andi	r18, 0xF9	; 249
    27b6:	d2 2e       	mov	r13, r18
    27b8:	8f 36       	cpi	r24, 0x6F	; 111
    27ba:	a9 f1       	breq	.+106    	; 0x2826 <vfprintf+0x36a>
    27bc:	f0 f4       	brcc	.+60     	; 0x27fa <vfprintf+0x33e>
    27be:	88 35       	cpi	r24, 0x58	; 88
    27c0:	51 f1       	breq	.+84     	; 0x2816 <vfprintf+0x35a>
    27c2:	f7 01       	movw	r30, r14
    27c4:	86 81       	ldd	r24, Z+6	; 0x06
    27c6:	97 81       	ldd	r25, Z+7	; 0x07
    27c8:	2b 96       	adiw	r28, 0x0b	; 11
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	ff 90       	pop	r15
    27de:	ef 90       	pop	r14
    27e0:	df 90       	pop	r13
    27e2:	cf 90       	pop	r12
    27e4:	bf 90       	pop	r11
    27e6:	af 90       	pop	r10
    27e8:	9f 90       	pop	r9
    27ea:	8f 90       	pop	r8
    27ec:	7f 90       	pop	r7
    27ee:	6f 90       	pop	r6
    27f0:	5f 90       	pop	r5
    27f2:	4f 90       	pop	r4
    27f4:	3f 90       	pop	r3
    27f6:	2f 90       	pop	r2
    27f8:	08 95       	ret
    27fa:	80 37       	cpi	r24, 0x70	; 112
    27fc:	49 f0       	breq	.+18     	; 0x2810 <vfprintf+0x354>
    27fe:	88 37       	cpi	r24, 0x78	; 120
    2800:	01 f7       	brne	.-64     	; 0x27c2 <vfprintf+0x306>
    2802:	d4 fe       	sbrs	r13, 4
    2804:	02 c0       	rjmp	.+4      	; 0x280a <vfprintf+0x34e>
    2806:	68 94       	set
    2808:	d2 f8       	bld	r13, 2
    280a:	20 e1       	ldi	r18, 0x10	; 16
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	0d c0       	rjmp	.+26     	; 0x282a <vfprintf+0x36e>
    2810:	68 94       	set
    2812:	d4 f8       	bld	r13, 4
    2814:	f6 cf       	rjmp	.-20     	; 0x2802 <vfprintf+0x346>
    2816:	34 fe       	sbrs	r3, 4
    2818:	03 c0       	rjmp	.+6      	; 0x2820 <vfprintf+0x364>
    281a:	82 2f       	mov	r24, r18
    281c:	86 60       	ori	r24, 0x06	; 6
    281e:	d8 2e       	mov	r13, r24
    2820:	20 e1       	ldi	r18, 0x10	; 16
    2822:	32 e0       	ldi	r19, 0x02	; 2
    2824:	02 c0       	rjmp	.+4      	; 0x282a <vfprintf+0x36e>
    2826:	28 e0       	ldi	r18, 0x08	; 8
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	f8 01       	movw	r30, r16
    282c:	d7 fe       	sbrs	r13, 7
    282e:	0f c0       	rjmp	.+30     	; 0x284e <vfprintf+0x392>
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	93 81       	ldd	r25, Z+3	; 0x03
    2838:	0c 5f       	subi	r16, 0xFC	; 252
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	a5 01       	movw	r20, r10
    283e:	0e 94 a6 14 	call	0x294c	; 0x294c <__ultoa_invert>
    2842:	c8 2e       	mov	r12, r24
    2844:	ca 18       	sub	r12, r10
    2846:	3d 2c       	mov	r3, r13
    2848:	e8 94       	clt
    284a:	37 f8       	bld	r3, 7
    284c:	52 cf       	rjmp	.-348    	; 0x26f2 <vfprintf+0x236>
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	0e 5f       	subi	r16, 0xFE	; 254
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	f0 cf       	rjmp	.-32     	; 0x283c <vfprintf+0x380>
    285c:	42 fc       	sbrc	r4, 2
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <vfprintf+0x3a8>
    2860:	83 94       	inc	r8
    2862:	63 cf       	rjmp	.-314    	; 0x272a <vfprintf+0x26e>
    2864:	83 94       	inc	r8
    2866:	83 94       	inc	r8
    2868:	60 cf       	rjmp	.-320    	; 0x272a <vfprintf+0x26e>
    286a:	84 2d       	mov	r24, r4
    286c:	86 78       	andi	r24, 0x86	; 134
    286e:	09 f4       	brne	.+2      	; 0x2872 <vfprintf+0x3b6>
    2870:	5c cf       	rjmp	.-328    	; 0x272a <vfprintf+0x26e>
    2872:	f6 cf       	rjmp	.-20     	; 0x2860 <vfprintf+0x3a4>
    2874:	b7 01       	movw	r22, r14
    2876:	80 e2       	ldi	r24, 0x20	; 32
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 76 14 	call	0x28ec	; 0x28ec <fputc>
    287e:	83 94       	inc	r8
    2880:	82 14       	cp	r8, r2
    2882:	c0 f3       	brcs	.-16     	; 0x2874 <vfprintf+0x3b8>
    2884:	51 2c       	mov	r5, r1
    2886:	5e cf       	rjmp	.-324    	; 0x2744 <vfprintf+0x288>
    2888:	52 2c       	mov	r5, r2
    288a:	58 18       	sub	r5, r8
    288c:	82 14       	cp	r8, r2
    288e:	08 f4       	brcc	.+2      	; 0x2892 <vfprintf+0x3d6>
    2890:	59 cf       	rjmp	.-334    	; 0x2744 <vfprintf+0x288>
    2892:	f8 cf       	rjmp	.-16     	; 0x2884 <vfprintf+0x3c8>
    2894:	84 2d       	mov	r24, r4
    2896:	86 78       	andi	r24, 0x86	; 134
    2898:	09 f4       	brne	.+2      	; 0x289c <vfprintf+0x3e0>
    289a:	66 cf       	rjmp	.-308    	; 0x2768 <vfprintf+0x2ac>
    289c:	8b e2       	ldi	r24, 0x2B	; 43
    289e:	41 fe       	sbrs	r4, 1
    28a0:	80 e2       	ldi	r24, 0x20	; 32
    28a2:	47 fc       	sbrc	r4, 7
    28a4:	8d e2       	ldi	r24, 0x2D	; 45
    28a6:	b7 01       	movw	r22, r14
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	5c cf       	rjmp	.-328    	; 0x2764 <vfprintf+0x2a8>
    28ac:	b7 01       	movw	r22, r14
    28ae:	80 e3       	ldi	r24, 0x30	; 48
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	0e 94 76 14 	call	0x28ec	; 0x28ec <fputc>
    28b6:	9a 94       	dec	r9
    28b8:	57 cf       	rjmp	.-338    	; 0x2768 <vfprintf+0x2ac>
    28ba:	8f ef       	ldi	r24, 0xFF	; 255
    28bc:	9f ef       	ldi	r25, 0xFF	; 255
    28be:	84 cf       	rjmp	.-248    	; 0x27c8 <vfprintf+0x30c>

000028c0 <strnlen_P>:
strnlen_P():
    28c0:	fc 01       	movw	r30, r24
    28c2:	05 90       	lpm	r0, Z+
    28c4:	61 50       	subi	r22, 0x01	; 1
    28c6:	70 40       	sbci	r23, 0x00	; 0
    28c8:	01 10       	cpse	r0, r1
    28ca:	d8 f7       	brcc	.-10     	; 0x28c2 <strnlen_P+0x2>
    28cc:	80 95       	com	r24
    28ce:	90 95       	com	r25
    28d0:	8e 0f       	add	r24, r30
    28d2:	9f 1f       	adc	r25, r31
    28d4:	08 95       	ret

000028d6 <strnlen>:
strnlen():
    28d6:	fc 01       	movw	r30, r24
    28d8:	61 50       	subi	r22, 0x01	; 1
    28da:	70 40       	sbci	r23, 0x00	; 0
    28dc:	01 90       	ld	r0, Z+
    28de:	01 10       	cpse	r0, r1
    28e0:	d8 f7       	brcc	.-10     	; 0x28d8 <strnlen+0x2>
    28e2:	80 95       	com	r24
    28e4:	90 95       	com	r25
    28e6:	8e 0f       	add	r24, r30
    28e8:	9f 1f       	adc	r25, r31
    28ea:	08 95       	ret

000028ec <fputc>:
fputc():
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	18 2f       	mov	r17, r24
    28f6:	09 2f       	mov	r16, r25
    28f8:	eb 01       	movw	r28, r22
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	81 fd       	sbrc	r24, 1
    28fe:	09 c0       	rjmp	.+18     	; 0x2912 <fputc+0x26>
    2900:	1f ef       	ldi	r17, 0xFF	; 255
    2902:	0f ef       	ldi	r16, 0xFF	; 255
    2904:	81 2f       	mov	r24, r17
    2906:	90 2f       	mov	r25, r16
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	08 95       	ret
    2912:	82 ff       	sbrs	r24, 2
    2914:	14 c0       	rjmp	.+40     	; 0x293e <fputc+0x52>
    2916:	2e 81       	ldd	r18, Y+6	; 0x06
    2918:	3f 81       	ldd	r19, Y+7	; 0x07
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	28 17       	cp	r18, r24
    2920:	39 07       	cpc	r19, r25
    2922:	3c f4       	brge	.+14     	; 0x2932 <fputc+0x46>
    2924:	e8 81       	ld	r30, Y
    2926:	f9 81       	ldd	r31, Y+1	; 0x01
    2928:	cf 01       	movw	r24, r30
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	99 83       	std	Y+1, r25	; 0x01
    292e:	88 83       	st	Y, r24
    2930:	10 83       	st	Z, r17
    2932:	8e 81       	ldd	r24, Y+6	; 0x06
    2934:	9f 81       	ldd	r25, Y+7	; 0x07
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	9f 83       	std	Y+7, r25	; 0x07
    293a:	8e 83       	std	Y+6, r24	; 0x06
    293c:	e3 cf       	rjmp	.-58     	; 0x2904 <fputc+0x18>
    293e:	e8 85       	ldd	r30, Y+8	; 0x08
    2940:	f9 85       	ldd	r31, Y+9	; 0x09
    2942:	81 2f       	mov	r24, r17
    2944:	19 95       	eicall
    2946:	89 2b       	or	r24, r25
    2948:	a1 f3       	breq	.-24     	; 0x2932 <fputc+0x46>
    294a:	da cf       	rjmp	.-76     	; 0x2900 <fputc+0x14>

0000294c <__ultoa_invert>:
__ultoa_invert():
    294c:	fa 01       	movw	r30, r20
    294e:	aa 27       	eor	r26, r26
    2950:	28 30       	cpi	r18, 0x08	; 8
    2952:	51 f1       	breq	.+84     	; 0x29a8 <__ultoa_invert+0x5c>
    2954:	20 31       	cpi	r18, 0x10	; 16
    2956:	81 f1       	breq	.+96     	; 0x29b8 <__ultoa_invert+0x6c>
    2958:	e8 94       	clt
    295a:	6f 93       	push	r22
    295c:	6e 7f       	andi	r22, 0xFE	; 254
    295e:	6e 5f       	subi	r22, 0xFE	; 254
    2960:	7f 4f       	sbci	r23, 0xFF	; 255
    2962:	8f 4f       	sbci	r24, 0xFF	; 255
    2964:	9f 4f       	sbci	r25, 0xFF	; 255
    2966:	af 4f       	sbci	r26, 0xFF	; 255
    2968:	b1 e0       	ldi	r27, 0x01	; 1
    296a:	3e d0       	rcall	.+124    	; 0x29e8 <__ultoa_invert+0x9c>
    296c:	b4 e0       	ldi	r27, 0x04	; 4
    296e:	3c d0       	rcall	.+120    	; 0x29e8 <__ultoa_invert+0x9c>
    2970:	67 0f       	add	r22, r23
    2972:	78 1f       	adc	r23, r24
    2974:	89 1f       	adc	r24, r25
    2976:	9a 1f       	adc	r25, r26
    2978:	a1 1d       	adc	r26, r1
    297a:	68 0f       	add	r22, r24
    297c:	79 1f       	adc	r23, r25
    297e:	8a 1f       	adc	r24, r26
    2980:	91 1d       	adc	r25, r1
    2982:	a1 1d       	adc	r26, r1
    2984:	6a 0f       	add	r22, r26
    2986:	71 1d       	adc	r23, r1
    2988:	81 1d       	adc	r24, r1
    298a:	91 1d       	adc	r25, r1
    298c:	a1 1d       	adc	r26, r1
    298e:	20 d0       	rcall	.+64     	; 0x29d0 <__ultoa_invert+0x84>
    2990:	09 f4       	brne	.+2      	; 0x2994 <__ultoa_invert+0x48>
    2992:	68 94       	set
    2994:	3f 91       	pop	r19
    2996:	2a e0       	ldi	r18, 0x0A	; 10
    2998:	26 9f       	mul	r18, r22
    299a:	11 24       	eor	r1, r1
    299c:	30 19       	sub	r19, r0
    299e:	30 5d       	subi	r19, 0xD0	; 208
    29a0:	31 93       	st	Z+, r19
    29a2:	de f6       	brtc	.-74     	; 0x295a <__ultoa_invert+0xe>
    29a4:	cf 01       	movw	r24, r30
    29a6:	08 95       	ret
    29a8:	46 2f       	mov	r20, r22
    29aa:	47 70       	andi	r20, 0x07	; 7
    29ac:	40 5d       	subi	r20, 0xD0	; 208
    29ae:	41 93       	st	Z+, r20
    29b0:	b3 e0       	ldi	r27, 0x03	; 3
    29b2:	0f d0       	rcall	.+30     	; 0x29d2 <__ultoa_invert+0x86>
    29b4:	c9 f7       	brne	.-14     	; 0x29a8 <__ultoa_invert+0x5c>
    29b6:	f6 cf       	rjmp	.-20     	; 0x29a4 <__ultoa_invert+0x58>
    29b8:	46 2f       	mov	r20, r22
    29ba:	4f 70       	andi	r20, 0x0F	; 15
    29bc:	40 5d       	subi	r20, 0xD0	; 208
    29be:	4a 33       	cpi	r20, 0x3A	; 58
    29c0:	18 f0       	brcs	.+6      	; 0x29c8 <__ultoa_invert+0x7c>
    29c2:	49 5d       	subi	r20, 0xD9	; 217
    29c4:	31 fd       	sbrc	r19, 1
    29c6:	40 52       	subi	r20, 0x20	; 32
    29c8:	41 93       	st	Z+, r20
    29ca:	02 d0       	rcall	.+4      	; 0x29d0 <__ultoa_invert+0x84>
    29cc:	a9 f7       	brne	.-22     	; 0x29b8 <__ultoa_invert+0x6c>
    29ce:	ea cf       	rjmp	.-44     	; 0x29a4 <__ultoa_invert+0x58>
    29d0:	b4 e0       	ldi	r27, 0x04	; 4
    29d2:	a6 95       	lsr	r26
    29d4:	97 95       	ror	r25
    29d6:	87 95       	ror	r24
    29d8:	77 95       	ror	r23
    29da:	67 95       	ror	r22
    29dc:	ba 95       	dec	r27
    29de:	c9 f7       	brne	.-14     	; 0x29d2 <__ultoa_invert+0x86>
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	61 05       	cpc	r22, r1
    29e4:	71 05       	cpc	r23, r1
    29e6:	08 95       	ret
    29e8:	9b 01       	movw	r18, r22
    29ea:	ac 01       	movw	r20, r24
    29ec:	0a 2e       	mov	r0, r26
    29ee:	06 94       	lsr	r0
    29f0:	57 95       	ror	r21
    29f2:	47 95       	ror	r20
    29f4:	37 95       	ror	r19
    29f6:	27 95       	ror	r18
    29f8:	ba 95       	dec	r27
    29fa:	c9 f7       	brne	.-14     	; 0x29ee <__ultoa_invert+0xa2>
    29fc:	62 0f       	add	r22, r18
    29fe:	73 1f       	adc	r23, r19
    2a00:	84 1f       	adc	r24, r20
    2a02:	95 1f       	adc	r25, r21
    2a04:	a0 1d       	adc	r26, r0
    2a06:	08 95       	ret

00002a08 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2a08:	f8 94       	cli

00002a0a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2a0a:	ff cf       	rjmp	.-2      	; 0x2a0a <__stop_program>
