
C:\Users\mbt\AppData\Local\Temp\arduino\sketches\DDE1A134C526CDBD68FCB1B670DA36C5/Modbus_master_test.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__ctors_end>
   4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
   8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
   c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  10:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  14:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  18:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  1c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  20:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  24:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  28:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  2c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  30:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  34:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  38:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  3c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  40:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  44:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  48:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  4c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  50:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  54:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  58:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  5c:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_23>
  60:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  64:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_25>
  68:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_26>
  6c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  70:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  74:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  78:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  7c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  80:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  84:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  88:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  8c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  90:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__vector_36>
  94:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_37>
  98:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  9c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  a0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  a4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  a8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  ac:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  b0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  b4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  b8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  bc:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  c0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  c4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  c8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  cc:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_51>
  d0:	0c 94 8c 04 	jmp	0x918	; 0x918 <__vector_52>
  d4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  d8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  dc:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  e0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
  e4:	0c 94 03 02 	jmp	0x406	; 0x406 <HardwareSerial::availableForWrite()>
  e8:	0c 94 66 06 	jmp	0xccc	; 0xccc <turnOffPWM+0x9c>
  ec:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <turnOffPWM+0xc6>
  f0:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <HardwareSerial::available()>
  f4:	0c 94 44 06 	jmp	0xc88	; 0xc88 <turnOffPWM+0x58>
  f8:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <turnOffPWM+0x3c>
  fc:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <turnOffPWM+0x80>
 100:	0c 94 74 06 	jmp	0xce8	; 0xce8 <turnOffPWM+0xb8>
 104:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <turnOffPWM+0x48>
 108:	0c 94 92 03 	jmp	0x724	; 0x724 <_GLOBAL__sub_I___vector_25>
 10c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <turnOffPWM+0xc8>
 110:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <HardwareSerial::flush()>
 114:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <HardwareSerial::peek()>
 118:	0c 94 ef 01 	jmp	0x3de	; 0x3de <HardwareSerial::read()>
 11c:	0c 94 89 02 	jmp	0x512	; 0x512 <HardwareSerial::write(unsigned char)>
 120:	0c 94 12 02 	jmp	0x424	; 0x424 <serialEventRun()>
 124:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <turnOffPWM+0xc0>
 128:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <turnOffPWM+0x6c>
 12c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <Serial1_available()>
 130:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <turnOffPWM+0x94>
 134:	0c 94 88 03 	jmp	0x710	; 0x710 <Serial0_available()>
 138:	0c 94 29 04 	jmp	0x852	; 0x852 <_GLOBAL__sub_I___vector_36>
 13c:	0c 94 b6 04 	jmp	0x96c	; 0x96c <Serial2_available()>
 140:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <turnOffPWM+0x64>
 144:	0c 94 40 06 	jmp	0xc80	; 0xc80 <turnOffPWM+0x50>
 148:	0c 94 ed 04 	jmp	0x9da	; 0x9da <Print::write(unsigned char const*, unsigned int)>
 14c:	0c 94 c0 04 	jmp	0x980	; 0x980 <_GLOBAL__sub_I___vector_51>
 150:	0c 94 70 06 	jmp	0xce0	; 0xce0 <turnOffPWM+0xb0>
 154:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <turnOffPWM+0xa4>
 158:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <turnOffPWM+0x88>
 15c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <turnOffPWM+0x78>

00000160 <__trampolines_end>:
__trampolines_end():
 160:	00 00       	nop
 162:	00 0a       	sbc	r0, r16
 164:	0b 0c       	add	r0, r11
 166:	00 00       	nop
 168:	00 00       	nop
 16a:	00 0d       	add	r16, r0
 16c:	0e 0f       	add	r16, r30
 16e:	09 00       	.word	0x0009	; ????
 170:	00 00       	nop
 172:	00 08       	sbc	r0, r0
 174:	04 05       	cpc	r16, r4
 176:	06 00       	.word	0x0006	; ????
 178:	00 00       	nop
 17a:	00 00       	nop
 17c:	00 11       	cpse	r16, r0
 17e:	12 13       	cpse	r17, r18
	...
 1b4:	00 03       	mulsu	r16, r16

000001b6 <digital_pin_to_bit_mask_PGM>:
 1b6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 01     ..... @...... @.
 1c6:	02 04 08 10 20 40 80 80 08 10 01 02 04 08 10 20     .... @......... 
 1d6:	40 80 01 02 04 08 10 20 40 80 01 02 01 02 04 08     @...... @.......
 1e6:	10 20 40 80 01 02 04 08 10 20 40 04 80 40 20 10     . @...... @..@ .
 1f6:	08 04 02 01 80 01 02 04 08 10 20 40 80 01 02 04     .......... @....
 206:	08 10 20 40 80 20                                   .. @. 

0000020c <digital_pin_to_port_PGM>:
 20c:	05 05 05 05 05 05 05 05 08 08 08 08 08 08 08 02     ................
 21c:	02 02 02 02 02 02 02 08 07 07 0c 0c 0c 0c 0c 0c     ................
 22c:	0c 0c 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
 23c:	03 03 03 03 0a 0a 0a 0a 0a 0a 0a 07 01 01 01 01     ................
 24c:	01 01 01 01 0a 06 06 06 06 06 06 06 06 0b 0b 0b     ................
 25c:	0b 0b 0b 0b 0b 07                                   ......

00000262 <port_to_input_PGM>:
 262:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
 272:	00 01 00 00 03 01 06 01 09 01                       ..........

0000027c <port_to_output_PGM>:
 27c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 28c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000296 <port_to_mode_PGM>:
 296:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 2a6:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002b0 <__ctors_start>:
__ctors_start():
 2b0:	92 03       	fmuls	r17, r18
 2b2:	29 04       	cpc	r2, r9
 2b4:	c0 04       	cpc	r12, r0

000002b6 <__ctors_end>:
__dtors_end():
 2b6:	11 24       	eor	r1, r1
 2b8:	1f be       	out	0x3f, r1	; 63
 2ba:	cf ef       	ldi	r28, 0xFF	; 255
 2bc:	d1 e2       	ldi	r29, 0x21	; 33
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	00 e0       	ldi	r16, 0x00	; 0
 2c4:	0c bf       	out	0x3c, r16	; 60

000002c6 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
 2c6:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
 2c8:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
 2ca:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
 2cc:	ee e7       	ldi	r30, 0x7E	; 126
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
 2ce:	fe e0       	ldi	r31, 0x0E	; 14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
 2d0:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
 2d2:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
 2d6:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
 2d8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
 2da:	a2 31       	cpi	r26, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
 2dc:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
 2de:	d9 f7       	brne	.-10     	; 0x2d6 <__do_copy_data+0x10>

000002e0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
 2e0:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
 2e2:	a2 e1       	ldi	r26, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
 2e4:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <.do_clear_bss_start>

000002e8 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
 2e8:	1d 92       	st	X+, r1

000002ea <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
 2ea:	a2 3f       	cpi	r26, 0xF2	; 242
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
 2ec:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <.do_clear_bss_loop>

000002f0 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
 2f0:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
 2f2:	cb e5       	ldi	r28, 0x5B	; 91
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
 2f4:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
 2f6:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
 2fa:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
 2fc:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
 2fe:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
 300:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
 302:	0e 94 35 07 	call	0xe6a	; 0xe6a <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
 306:	c8 35       	cpi	r28, 0x58	; 88
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
 308:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
 30a:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
 30c:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
 30e:	a9 f7       	brne	.-22     	; 0x2fa <__do_global_ctors+0xa>
 310:	0e 94 1b 05 	call	0xa36	; 0xa36 <main>
 314:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <_exit>

00000318 <__bad_interrupt>:
__vector_38():
 318:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000031c <setup>:
setup():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:40
byte* dataByte;             // Pointer to array with bytes
short* dataShort;           // Pointer to array with shorts 

void setup() {

  CLKPR = 1 << CLKPCE;      // Clock Prescaler Change Enable
 31c:	e1 e6       	ldi	r30, 0x61	; 97
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 e8       	ldi	r24, 0x80	; 128
 322:	80 83       	st	Z, r24
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:41
  CLKPR = 0;                // Change clock division factor to 1.
 324:	10 82       	st	Z, r1
_ZN14HardwareSerial5beginEm():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 326:	26 e0       	ldi	r18, 0x06	; 6
 328:	40 e8       	ldi	r20, 0x80	; 128
 32a:	55 e2       	ldi	r21, 0x25	; 37
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	8f ea       	ldi	r24, 0xAF	; 175
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	0e 94 d6 02 	call	0x5ac	; 0x5ac <HardwareSerial::begin(unsigned long, unsigned char)>
 338:	26 e0       	ldi	r18, 0x06	; 6
 33a:	40 e8       	ldi	r20, 0x80	; 128
 33c:	55 e2       	ldi	r21, 0x25	; 37
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	8c e4       	ldi	r24, 0x4C	; 76
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	0e 94 d6 02 	call	0x5ac	; 0x5ac <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:46

  Serial1.begin(9600);      // Begin serial with sim module on hardware serial 2 with baud rate 9600
  Serial2.begin(9600);       // Begin serial with Modbus baud rate 9600

  pinMode(BLUE_LED, OUTPUT);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	82 e4       	ldi	r24, 0x42	; 66
 34e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:47
  pinMode(43, OUTPUT);       // Set pin 5 on arduino as input for pwr key on sim module
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	8b e2       	ldi	r24, 0x2B	; 43
 356:	0e 94 7f 06 	call	0xcfe	; 0xcfe <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:48
  pinMode(42, OUTPUT);
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	8a e2       	ldi	r24, 0x2A	; 42
 35e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:49
  pinMode(GREEN_LED, OUTPUT);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	81 e4       	ldi	r24, 0x41	; 65
 366:	0e 94 7f 06 	call	0xcfe	; 0xcfe <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:50
  pinMode(RED_LED, OUTPUT);
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	80 e4       	ldi	r24, 0x40	; 64
 36e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:51
  pinMode(67, INPUT);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	83 e4       	ldi	r24, 0x43	; 67
 376:	0e 94 7f 06 	call	0xcfe	; 0xcfe <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:53

  digitalWrite(43, HIGH);    // Set pin 5 to standard high for pwr key to not activate
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	8b e2       	ldi	r24, 0x2B	; 43
 37e:	0e 94 bb 06 	call	0xd76	; 0xd76 <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:55

  digitalWrite(42, LOW);    // Set pin 5 to standard high for pwr key to not activate
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	8a e2       	ldi	r24, 0x2A	; 42
 386:	0e 94 bb 06 	call	0xd76	; 0xd76 <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:57

  delay(1000);              // Start delay before siminit. To make sure sim module is properly turned of or on
 38a:	68 ee       	ldi	r22, 0xE8	; 232
 38c:	73 e0       	ldi	r23, 0x03	; 3
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0c 94 99 05 	jmp	0xb32	; 0xb32 <delay>

00000396 <loop>:
loop():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:72
  
}

void loop() {

  if(digitalRead(67) == HIGH)
 396:	83 e4       	ldi	r24, 0x43	; 67
 398:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <digitalRead>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:74
  {
    digitalWrite(BLUE_LED, HIGH);
 39c:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:72
  
}

void loop() {

  if(digitalRead(67) == HIGH)
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <loop+0xe>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:76
  {
    digitalWrite(BLUE_LED, HIGH);
  } else{
    digitalWrite(BLUE_LED, LOW);
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	82 e4       	ldi	r24, 0x42	; 66
 3a6:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <digitalWrite>

000003aa <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3aa:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3ac:	91 8d       	ldd	r25, Z+25	; 0x19
 3ae:	22 8d       	ldd	r18, Z+26	; 0x1a
 3b0:	89 2f       	mov	r24, r25
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	80 5c       	subi	r24, 0xC0	; 192
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	82 1b       	sub	r24, r18
 3ba:	91 09       	sbc	r25, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
 3bc:	8f 73       	andi	r24, 0x3F	; 63
 3be:	99 27       	eor	r25, r25
 3c0:	08 95       	ret

000003c2 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
 3c2:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
 3c4:	91 8d       	ldd	r25, Z+25	; 0x19
 3c6:	82 8d       	ldd	r24, Z+26	; 0x1a
 3c8:	98 17       	cp	r25, r24
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <HardwareSerial::peek()+0x16>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 3cc:	82 8d       	ldd	r24, Z+26	; 0x1a
 3ce:	e8 0f       	add	r30, r24
 3d0:	f1 1d       	adc	r31, r1
 3d2:	85 8d       	ldd	r24, Z+29	; 0x1d
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 3dc:	08 95       	ret

000003de <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
 3de:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 3e0:	91 8d       	ldd	r25, Z+25	; 0x19
 3e2:	82 8d       	ldd	r24, Z+26	; 0x1a
 3e4:	98 17       	cp	r25, r24
 3e6:	61 f0       	breq	.+24     	; 0x400 <__LOCK_REGION_LENGTH__>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 3e8:	a2 8d       	ldd	r26, Z+26	; 0x1a
 3ea:	ae 0f       	add	r26, r30
 3ec:	bf 2f       	mov	r27, r31
 3ee:	b1 1d       	adc	r27, r1
 3f0:	5d 96       	adiw	r26, 0x1d	; 29
 3f2:	8c 91       	ld	r24, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 3f4:	92 8d       	ldd	r25, Z+26	; 0x1a
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	9f 73       	andi	r25, 0x3F	; 63
 3fa:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 404:	08 95       	ret

00000406 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 406:	fc 01       	movw	r30, r24
 408:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
 40a:	44 8d       	ldd	r20, Z+28	; 0x1c
 40c:	25 2f       	mov	r18, r21
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	84 2f       	mov	r24, r20
 412:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 414:	82 1b       	sub	r24, r18
 416:	93 0b       	sbc	r25, r19
 418:	54 17       	cp	r21, r20
 41a:	10 f0       	brcs	.+4      	; 0x420 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
 41c:	cf 96       	adiw	r24, 0x3f	; 63
 41e:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
 420:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
 422:	08 95       	ret

00000424 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 424:	88 e8       	ldi	r24, 0x88	; 136
 426:	93 e0       	ldi	r25, 0x03	; 3
 428:	89 2b       	or	r24, r25
 42a:	49 f0       	breq	.+18     	; 0x43e <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	89 2b       	or	r24, r25
 432:	29 f0       	breq	.+10     	; 0x43e <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
 434:	0e 94 88 03 	call	0x710	; 0x710 <Serial0_available()>
 438:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
 43a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 43e:	8f e1       	ldi	r24, 0x1F	; 31
 440:	94 e0       	ldi	r25, 0x04	; 4
 442:	89 2b       	or	r24, r25
 444:	49 f0       	breq	.+18     	; 0x458 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	89 2b       	or	r24, r25
 44c:	29 f0       	breq	.+10     	; 0x458 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
 44e:	0e 94 1f 04 	call	0x83e	; 0x83e <Serial1_available()>
 452:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
 454:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 458:	86 eb       	ldi	r24, 0xB6	; 182
 45a:	94 e0       	ldi	r25, 0x04	; 4
 45c:	89 2b       	or	r24, r25
 45e:	49 f0       	breq	.+18     	; 0x472 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 1)
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	89 2b       	or	r24, r25
 466:	29 f0       	breq	.+10     	; 0x472 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 3)
 468:	0e 94 b6 04 	call	0x96c	; 0x96c <Serial2_available()>
 46c:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
 46e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	89 2b       	or	r24, r25
 478:	49 f0       	breq	.+18     	; 0x48c <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 1)
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	89 2b       	or	r24, r25
 480:	29 f0       	breq	.+10     	; 0x48c <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 3)
 482:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 486:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
 488:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
 48c:	08 95       	ret

0000048e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 48e:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 490:	a4 8d       	ldd	r26, Z+28	; 0x1c
 492:	a8 0f       	add	r26, r24
 494:	b9 2f       	mov	r27, r25
 496:	b1 1d       	adc	r27, r1
 498:	a3 5a       	subi	r26, 0xA3	; 163
 49a:	bf 4f       	sbci	r27, 0xFF	; 255
 49c:	2c 91       	ld	r18, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 49e:	84 8d       	ldd	r24, Z+28	; 0x1c
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	8f 73       	andi	r24, 0x3F	; 63
 4a6:	99 27       	eor	r25, r25
 4a8:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
 4aa:	a6 89       	ldd	r26, Z+22	; 0x16
 4ac:	b7 89       	ldd	r27, Z+23	; 0x17
 4ae:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 4b0:	a0 89       	ldd	r26, Z+16	; 0x10
 4b2:	b1 89       	ldd	r27, Z+17	; 0x11
 4b4:	8c 91       	ld	r24, X
 4b6:	83 70       	andi	r24, 0x03	; 3
 4b8:	80 64       	ori	r24, 0x40	; 64
 4ba:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 4bc:	93 8d       	ldd	r25, Z+27	; 0x1b
 4be:	84 8d       	ldd	r24, Z+28	; 0x1c
 4c0:	98 13       	cpse	r25, r24
 4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
 4c4:	02 88       	ldd	r0, Z+18	; 0x12
 4c6:	f3 89       	ldd	r31, Z+19	; 0x13
 4c8:	e0 2d       	mov	r30, r0
 4ca:	80 81       	ld	r24, Z
 4cc:	8f 7d       	andi	r24, 0xDF	; 223
 4ce:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
 4d0:	08 95       	ret

000004d2 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 4d8:	88 8d       	ldd	r24, Y+24	; 0x18
 4da:	88 23       	and	r24, r24
 4dc:	b9 f0       	breq	.+46     	; 0x50c <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4de:	aa 89       	ldd	r26, Y+18	; 0x12
 4e0:	bb 89       	ldd	r27, Y+19	; 0x13
 4e2:	e8 89       	ldd	r30, Y+16	; 0x10
 4e4:	f9 89       	ldd	r31, Y+17	; 0x11
 4e6:	8c 91       	ld	r24, X
 4e8:	85 fd       	sbrc	r24, 5
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <HardwareSerial::flush()+0x20>
 4ec:	80 81       	ld	r24, Z
 4ee:	86 fd       	sbrc	r24, 6
 4f0:	0d c0       	rjmp	.+26     	; 0x50c <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	07 fc       	sbrc	r0, 7
 4f6:	f7 cf       	rjmp	.-18     	; 0x4e6 <HardwareSerial::flush()+0x14>
 4f8:	8c 91       	ld	r24, X
 4fa:	85 ff       	sbrs	r24, 5
 4fc:	f2 cf       	rjmp	.-28     	; 0x4e2 <HardwareSerial::flush()+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
 4fe:	80 81       	ld	r24, Z
 500:	85 ff       	sbrs	r24, 5
 502:	ed cf       	rjmp	.-38     	; 0x4de <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
 504:	ce 01       	movw	r24, r28
 506:	0e 94 47 02 	call	0x48e	; 0x48e <HardwareSerial::_tx_udr_empty_irq()>
 50a:	e9 cf       	rjmp	.-46     	; 0x4de <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
 512:	ef 92       	push	r14
 514:	ff 92       	push	r15
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 524:	9b 8d       	ldd	r25, Y+27	; 0x1b
 526:	8c 8d       	ldd	r24, Y+28	; 0x1c
 528:	98 13       	cpse	r25, r24
 52a:	1a c0       	rjmp	.+52     	; 0x560 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
 52c:	e8 89       	ldd	r30, Y+16	; 0x10
 52e:	f9 89       	ldd	r31, Y+17	; 0x11
 530:	80 81       	ld	r24, Z
 532:	85 ff       	sbrs	r24, 5
 534:	15 c0       	rjmp	.+42     	; 0x560 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 536:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 538:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
 53a:	ee 89       	ldd	r30, Y+22	; 0x16
 53c:	ff 89       	ldd	r31, Y+23	; 0x17
 53e:	60 83       	st	Z, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 540:	e8 89       	ldd	r30, Y+16	; 0x10
 542:	f9 89       	ldd	r31, Y+17	; 0x11
 544:	80 81       	ld	r24, Z
 546:	83 70       	andi	r24, 0x03	; 3
 548:	80 64       	ori	r24, 0x40	; 64
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
 54a:	80 83       	st	Z, r24
__iRestore():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 54c:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	0f 91       	pop	r16
 55a:	ff 90       	pop	r15
 55c:	ef 90       	pop	r14
 55e:	08 95       	ret
 560:	f6 2e       	mov	r15, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 562:	0b 8d       	ldd	r16, Y+27	; 0x1b
 564:	10 e0       	ldi	r17, 0x00	; 0
 566:	0f 5f       	subi	r16, 0xFF	; 255
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	0f 73       	andi	r16, 0x3F	; 63
 56c:	11 27       	eor	r17, r17
 56e:	e0 2e       	mov	r14, r16
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 570:	8c 8d       	ldd	r24, Y+28	; 0x1c
 572:	8e 11       	cpse	r24, r14
 574:	0c c0       	rjmp	.+24     	; 0x58e <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	07 fc       	sbrc	r0, 7
 57a:	fa cf       	rjmp	.-12     	; 0x570 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 57c:	e8 89       	ldd	r30, Y+16	; 0x10
 57e:	f9 89       	ldd	r31, Y+17	; 0x11
 580:	80 81       	ld	r24, Z
 582:	85 ff       	sbrs	r24, 5
 584:	f5 cf       	rjmp	.-22     	; 0x570 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
 586:	ce 01       	movw	r24, r28
 588:	0e 94 47 02 	call	0x48e	; 0x48e <HardwareSerial::_tx_udr_empty_irq()>
 58c:	f1 cf       	rjmp	.-30     	; 0x570 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 58e:	eb 8d       	ldd	r30, Y+27	; 0x1b
 590:	ec 0f       	add	r30, r28
 592:	fd 2f       	mov	r31, r29
 594:	f1 1d       	adc	r31, r1
 596:	e3 5a       	subi	r30, 0xA3	; 163
 598:	ff 4f       	sbci	r31, 0xFF	; 255
 59a:	f0 82       	st	Z, r15
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 59c:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 59e:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
 5a0:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
 5a2:	ea 89       	ldd	r30, Y+18	; 0x12
 5a4:	fb 89       	ldd	r31, Y+19	; 0x13
 5a6:	80 81       	ld	r24, Z
 5a8:	80 62       	ori	r24, 0x20	; 32
 5aa:	cf cf       	rjmp	.-98     	; 0x54a <HardwareSerial::write(unsigned char)+0x38>

000005ac <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 5ac:	cf 92       	push	r12
 5ae:	df 92       	push	r13
 5b0:	ef 92       	push	r14
 5b2:	ff 92       	push	r15
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	ec 01       	movw	r28, r24
 5bc:	6a 01       	movw	r12, r20
 5be:	7b 01       	movw	r14, r22
 5c0:	12 2f       	mov	r17, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 5c2:	60 e8       	ldi	r22, 0x80	; 128
 5c4:	74 e8       	ldi	r23, 0x84	; 132
 5c6:	8e e1       	ldi	r24, 0x1E	; 30
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	a7 01       	movw	r20, r14
 5cc:	96 01       	movw	r18, r12
 5ce:	0e 94 13 07 	call	0xe26	; 0xe26 <__udivmodsi4>
 5d2:	21 50       	subi	r18, 0x01	; 1
 5d4:	31 09       	sbc	r19, r1
 5d6:	41 09       	sbc	r20, r1
 5d8:	51 09       	sbc	r21, r1
 5da:	56 95       	lsr	r21
 5dc:	47 95       	ror	r20
 5de:	37 95       	ror	r19
 5e0:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
 5e2:	e8 89       	ldd	r30, Y+16	; 0x10
 5e4:	f9 89       	ldd	r31, Y+17	; 0x11
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5ea:	21 15       	cp	r18, r1
 5ec:	80 e1       	ldi	r24, 0x10	; 16
 5ee:	38 07       	cpc	r19, r24
 5f0:	98 f0       	brcs	.+38     	; 0x618 <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
 5f2:	e8 89       	ldd	r30, Y+16	; 0x10
 5f4:	f9 89       	ldd	r31, Y+17	; 0x11
 5f6:	10 82       	st	Z, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 5f8:	60 e4       	ldi	r22, 0x40	; 64
 5fa:	72 e4       	ldi	r23, 0x42	; 66
 5fc:	8f e0       	ldi	r24, 0x0F	; 15
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	a7 01       	movw	r20, r14
 602:	96 01       	movw	r18, r12
 604:	0e 94 13 07 	call	0xe26	; 0xe26 <__udivmodsi4>
 608:	21 50       	subi	r18, 0x01	; 1
 60a:	31 09       	sbc	r19, r1
 60c:	41 09       	sbc	r20, r1
 60e:	51 09       	sbc	r21, r1
 610:	56 95       	lsr	r21
 612:	47 95       	ror	r20
 614:	37 95       	ror	r19
 616:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 618:	ec 85       	ldd	r30, Y+12	; 0x0c
 61a:	fd 85       	ldd	r31, Y+13	; 0x0d
 61c:	30 83       	st	Z, r19
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
 61e:	ee 85       	ldd	r30, Y+14	; 0x0e
 620:	ff 85       	ldd	r31, Y+15	; 0x0f
 622:	20 83       	st	Z, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
 624:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 626:	ec 89       	ldd	r30, Y+20	; 0x14
 628:	fd 89       	ldd	r31, Y+21	; 0x15
 62a:	10 83       	st	Z, r17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
 62c:	ea 89       	ldd	r30, Y+18	; 0x12
 62e:	fb 89       	ldd	r31, Y+19	; 0x13
 630:	80 81       	ld	r24, Z
 632:	88 69       	ori	r24, 0x98	; 152
 634:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
 636:	ea 89       	ldd	r30, Y+18	; 0x12
 638:	fb 89       	ldd	r31, Y+19	; 0x13
 63a:	80 81       	ld	r24, Z
 63c:	8f 7d       	andi	r24, 0xDF	; 223
 63e:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	df 90       	pop	r13
 64c:	cf 90       	pop	r12
 64e:	08 95       	ret

00000650 <__vector_25>:
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	0b b6       	in	r0, 0x3b	; 59
 65c:	0f 92       	push	r0
 65e:	2f 93       	push	r18
 660:	8f 93       	push	r24
 662:	9f 93       	push	r25
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 668:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__data_end+0x10>
 66c:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <__data_end+0x11>
 670:	80 81       	ld	r24, Z
 672:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <__data_end+0x16>
 676:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <__data_end+0x17>
 67a:	82 fd       	sbrc	r24, 2
 67c:	1d c0       	rjmp	.+58     	; 0x6b8 <__vector_25+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 67e:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 680:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__data_end+0x19>
 684:	8f 5f       	subi	r24, 0xFF	; 255
 686:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 688:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <__data_end+0x1a>
 68c:	82 17       	cp	r24, r18
 68e:	41 f0       	breq	.+16     	; 0x6a0 <__vector_25+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
 690:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <__data_end+0x19>
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	ee 5e       	subi	r30, 0xEE	; 238
 698:	fd 4f       	sbci	r31, 0xFD	; 253
 69a:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
 69c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__data_end+0x19>
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
 6a0:	ff 91       	pop	r31
 6a2:	ef 91       	pop	r30
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	2f 91       	pop	r18
 6aa:	0f 90       	pop	r0
 6ac:	0b be       	out	0x3b, r0	; 59
 6ae:	0f 90       	pop	r0
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	0f 90       	pop	r0
 6b4:	1f 90       	pop	r1
 6b6:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 6b8:	80 81       	ld	r24, Z
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
 6ba:	f2 cf       	rjmp	.-28     	; 0x6a0 <__vector_25+0x50>

000006bc <__vector_26>:
__vector_26():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	0b b6       	in	r0, 0x3b	; 59
 6c8:	0f 92       	push	r0
 6ca:	2f 93       	push	r18
 6cc:	3f 93       	push	r19
 6ce:	4f 93       	push	r20
 6d0:	5f 93       	push	r21
 6d2:	6f 93       	push	r22
 6d4:	7f 93       	push	r23
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
 6da:	af 93       	push	r26
 6dc:	bf 93       	push	r27
 6de:	ef 93       	push	r30
 6e0:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
 6e2:	82 e1       	ldi	r24, 0x12	; 18
 6e4:	92 e0       	ldi	r25, 0x02	; 2
 6e6:	0e 94 47 02 	call	0x48e	; 0x48e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
 6ea:	ff 91       	pop	r31
 6ec:	ef 91       	pop	r30
 6ee:	bf 91       	pop	r27
 6f0:	af 91       	pop	r26
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	7f 91       	pop	r23
 6f8:	6f 91       	pop	r22
 6fa:	5f 91       	pop	r21
 6fc:	4f 91       	pop	r20
 6fe:	3f 91       	pop	r19
 700:	2f 91       	pop	r18
 702:	0f 90       	pop	r0
 704:	0b be       	out	0x3b, r0	; 59
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 710:	82 e1       	ldi	r24, 0x12	; 18
 712:	92 e0       	ldi	r25, 0x02	; 2
 714:	0e 94 d5 01 	call	0x3aa	; 0x3aa <HardwareSerial::available()>
 718:	21 e0       	ldi	r18, 0x01	; 1
 71a:	89 2b       	or	r24, r25
 71c:	09 f4       	brne	.+2      	; 0x720 <Serial0_available()+0x10>
 71e:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
 720:	82 2f       	mov	r24, r18
 722:	08 95       	ret

00000724 <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 724:	e2 e1       	ldi	r30, 0x12	; 18
 726:	f2 e0       	ldi	r31, 0x02	; 2
 728:	13 82       	std	Z+3, r1	; 0x03
 72a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 72c:	88 ee       	ldi	r24, 0xE8	; 232
 72e:	93 e0       	ldi	r25, 0x03	; 3
 730:	a0 e0       	ldi	r26, 0x00	; 0
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	84 83       	std	Z+4, r24	; 0x04
 736:	95 83       	std	Z+5, r25	; 0x05
 738:	a6 83       	std	Z+6, r26	; 0x06
 73a:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 73c:	84 e0       	ldi	r24, 0x04	; 4
 73e:	92 e0       	ldi	r25, 0x02	; 2
 740:	91 83       	std	Z+1, r25	; 0x01
 742:	80 83       	st	Z, r24
 744:	85 ec       	ldi	r24, 0xC5	; 197
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	95 87       	std	Z+13, r25	; 0x0d
 74a:	84 87       	std	Z+12, r24	; 0x0c
 74c:	84 ec       	ldi	r24, 0xC4	; 196
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	97 87       	std	Z+15, r25	; 0x0f
 752:	86 87       	std	Z+14, r24	; 0x0e
 754:	80 ec       	ldi	r24, 0xC0	; 192
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	91 8b       	std	Z+17, r25	; 0x11
 75a:	80 8b       	std	Z+16, r24	; 0x10
 75c:	81 ec       	ldi	r24, 0xC1	; 193
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	93 8b       	std	Z+19, r25	; 0x13
 762:	82 8b       	std	Z+18, r24	; 0x12
 764:	82 ec       	ldi	r24, 0xC2	; 194
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	95 8b       	std	Z+21, r25	; 0x15
 76a:	84 8b       	std	Z+20, r24	; 0x14
 76c:	86 ec       	ldi	r24, 0xC6	; 198
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	97 8b       	std	Z+23, r25	; 0x17
 772:	86 8b       	std	Z+22, r24	; 0x16
 774:	11 8e       	std	Z+25, r1	; 0x19
 776:	12 8e       	std	Z+26, r1	; 0x1a
 778:	13 8e       	std	Z+27, r1	; 0x1b
 77a:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
 77c:	08 95       	ret

0000077e <__vector_36>:
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	0b b6       	in	r0, 0x3b	; 59
 78a:	0f 92       	push	r0
 78c:	2f 93       	push	r18
 78e:	8f 93       	push	r24
 790:	9f 93       	push	r25
 792:	ef 93       	push	r30
 794:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 796:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <Serial1+0x10>
 79a:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <Serial1+0x11>
 79e:	80 81       	ld	r24, Z
 7a0:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <Serial1+0x16>
 7a4:	f0 91 c6 02 	lds	r31, 0x02C6	; 0x8002c6 <Serial1+0x17>
 7a8:	82 fd       	sbrc	r24, 2
 7aa:	1d c0       	rjmp	.+58     	; 0x7e6 <__vector_36+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 7ac:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 7ae:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Serial1+0x19>
 7b2:	8f 5f       	subi	r24, 0xFF	; 255
 7b4:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 7b6:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <Serial1+0x1a>
 7ba:	82 17       	cp	r24, r18
 7bc:	41 f0       	breq	.+16     	; 0x7ce <__vector_36+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
 7be:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <Serial1+0x19>
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	e1 55       	subi	r30, 0x51	; 81
 7c6:	fd 4f       	sbci	r31, 0xFD	; 253
 7c8:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
 7ca:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <Serial1+0x19>
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	9f 91       	pop	r25
 7d4:	8f 91       	pop	r24
 7d6:	2f 91       	pop	r18
 7d8:	0f 90       	pop	r0
 7da:	0b be       	out	0x3b, r0	; 59
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 7e6:	80 81       	ld	r24, Z
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
 7e8:	f2 cf       	rjmp	.-28     	; 0x7ce <__vector_36+0x50>

000007ea <__vector_37>:
__vector_37():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	0b b6       	in	r0, 0x3b	; 59
 7f6:	0f 92       	push	r0
 7f8:	2f 93       	push	r18
 7fa:	3f 93       	push	r19
 7fc:	4f 93       	push	r20
 7fe:	5f 93       	push	r21
 800:	6f 93       	push	r22
 802:	7f 93       	push	r23
 804:	8f 93       	push	r24
 806:	9f 93       	push	r25
 808:	af 93       	push	r26
 80a:	bf 93       	push	r27
 80c:	ef 93       	push	r30
 80e:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
 810:	8f ea       	ldi	r24, 0xAF	; 175
 812:	92 e0       	ldi	r25, 0x02	; 2
 814:	0e 94 47 02 	call	0x48e	; 0x48e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
 818:	ff 91       	pop	r31
 81a:	ef 91       	pop	r30
 81c:	bf 91       	pop	r27
 81e:	af 91       	pop	r26
 820:	9f 91       	pop	r25
 822:	8f 91       	pop	r24
 824:	7f 91       	pop	r23
 826:	6f 91       	pop	r22
 828:	5f 91       	pop	r21
 82a:	4f 91       	pop	r20
 82c:	3f 91       	pop	r19
 82e:	2f 91       	pop	r18
 830:	0f 90       	pop	r0
 832:	0b be       	out	0x3b, r0	; 59
 834:	0f 90       	pop	r0
 836:	0f be       	out	0x3f, r0	; 63
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
 83e:	8f ea       	ldi	r24, 0xAF	; 175
 840:	92 e0       	ldi	r25, 0x02	; 2
 842:	0e 94 d5 01 	call	0x3aa	; 0x3aa <HardwareSerial::available()>
 846:	21 e0       	ldi	r18, 0x01	; 1
 848:	89 2b       	or	r24, r25
 84a:	09 f4       	brne	.+2      	; 0x84e <Serial1_available()+0x10>
 84c:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
 84e:	82 2f       	mov	r24, r18
 850:	08 95       	ret

00000852 <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
 852:	ef ea       	ldi	r30, 0xAF	; 175
 854:	f2 e0       	ldi	r31, 0x02	; 2
 856:	13 82       	std	Z+3, r1	; 0x03
 858:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
 85a:	88 ee       	ldi	r24, 0xE8	; 232
 85c:	93 e0       	ldi	r25, 0x03	; 3
 85e:	a0 e0       	ldi	r26, 0x00	; 0
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	84 83       	std	Z+4, r24	; 0x04
 864:	95 83       	std	Z+5, r25	; 0x05
 866:	a6 83       	std	Z+6, r26	; 0x06
 868:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 86a:	84 e0       	ldi	r24, 0x04	; 4
 86c:	92 e0       	ldi	r25, 0x02	; 2
 86e:	91 83       	std	Z+1, r25	; 0x01
 870:	80 83       	st	Z, r24
 872:	8d ec       	ldi	r24, 0xCD	; 205
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	95 87       	std	Z+13, r25	; 0x0d
 878:	84 87       	std	Z+12, r24	; 0x0c
 87a:	8c ec       	ldi	r24, 0xCC	; 204
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	97 87       	std	Z+15, r25	; 0x0f
 880:	86 87       	std	Z+14, r24	; 0x0e
 882:	88 ec       	ldi	r24, 0xC8	; 200
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	91 8b       	std	Z+17, r25	; 0x11
 888:	80 8b       	std	Z+16, r24	; 0x10
 88a:	89 ec       	ldi	r24, 0xC9	; 201
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	93 8b       	std	Z+19, r25	; 0x13
 890:	82 8b       	std	Z+18, r24	; 0x12
 892:	8a ec       	ldi	r24, 0xCA	; 202
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	95 8b       	std	Z+21, r25	; 0x15
 898:	84 8b       	std	Z+20, r24	; 0x14
 89a:	8e ec       	ldi	r24, 0xCE	; 206
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	97 8b       	std	Z+23, r25	; 0x17
 8a0:	86 8b       	std	Z+22, r24	; 0x16
 8a2:	11 8e       	std	Z+25, r1	; 0x19
 8a4:	12 8e       	std	Z+26, r1	; 0x1a
 8a6:	13 8e       	std	Z+27, r1	; 0x1b
 8a8:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
 8aa:	08 95       	ret

000008ac <__vector_51>:
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:40
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
 8ac:	1f 92       	push	r1
 8ae:	0f 92       	push	r0
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	0f 92       	push	r0
 8b4:	11 24       	eor	r1, r1
 8b6:	0b b6       	in	r0, 0x3b	; 59
 8b8:	0f 92       	push	r0
 8ba:	2f 93       	push	r18
 8bc:	8f 93       	push	r24
 8be:	9f 93       	push	r25
 8c0:	ef 93       	push	r30
 8c2:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 8c4:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <Serial2+0x10>
 8c8:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <Serial2+0x11>
 8cc:	80 81       	ld	r24, Z
 8ce:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <Serial2+0x16>
 8d2:	f0 91 63 03 	lds	r31, 0x0363	; 0x800363 <Serial2+0x17>
 8d6:	82 fd       	sbrc	r24, 2
 8d8:	1d c0       	rjmp	.+58     	; 0x914 <__vector_51+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 8da:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 8dc:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <Serial2+0x19>
 8e0:	8f 5f       	subi	r24, 0xFF	; 255
 8e2:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 8e4:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <Serial2+0x1a>
 8e8:	82 17       	cp	r24, r18
 8ea:	41 f0       	breq	.+16     	; 0x8fc <__vector_51+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
 8ec:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <Serial2+0x19>
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	e4 5b       	subi	r30, 0xB4	; 180
 8f4:	fc 4f       	sbci	r31, 0xFC	; 252
 8f6:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
 8f8:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <Serial2+0x19>
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
  Serial2._rx_complete_irq();
}
 8fc:	ff 91       	pop	r31
 8fe:	ef 91       	pop	r30
 900:	9f 91       	pop	r25
 902:	8f 91       	pop	r24
 904:	2f 91       	pop	r18
 906:	0f 90       	pop	r0
 908:	0b be       	out	0x3b, r0	; 59
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 914:	80 81       	ld	r24, Z
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
 916:	f2 cf       	rjmp	.-28     	; 0x8fc <__vector_51+0x50>

00000918 <__vector_52>:
__vector_52():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:45

ISR(USART2_UDRE_vect)
{
 918:	1f 92       	push	r1
 91a:	0f 92       	push	r0
 91c:	0f b6       	in	r0, 0x3f	; 63
 91e:	0f 92       	push	r0
 920:	11 24       	eor	r1, r1
 922:	0b b6       	in	r0, 0x3b	; 59
 924:	0f 92       	push	r0
 926:	2f 93       	push	r18
 928:	3f 93       	push	r19
 92a:	4f 93       	push	r20
 92c:	5f 93       	push	r21
 92e:	6f 93       	push	r22
 930:	7f 93       	push	r23
 932:	8f 93       	push	r24
 934:	9f 93       	push	r25
 936:	af 93       	push	r26
 938:	bf 93       	push	r27
 93a:	ef 93       	push	r30
 93c:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:46
  Serial2._tx_udr_empty_irq();
 93e:	8c e4       	ldi	r24, 0x4C	; 76
 940:	93 e0       	ldi	r25, 0x03	; 3
 942:	0e 94 47 02 	call	0x48e	; 0x48e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:47
}
 946:	ff 91       	pop	r31
 948:	ef 91       	pop	r30
 94a:	bf 91       	pop	r27
 94c:	af 91       	pop	r26
 94e:	9f 91       	pop	r25
 950:	8f 91       	pop	r24
 952:	7f 91       	pop	r23
 954:	6f 91       	pop	r22
 956:	5f 91       	pop	r21
 958:	4f 91       	pop	r20
 95a:	3f 91       	pop	r19
 95c:	2f 91       	pop	r18
 95e:	0f 90       	pop	r0
 960:	0b be       	out	0x3b, r0	; 59
 962:	0f 90       	pop	r0
 964:	0f be       	out	0x3f, r0	; 63
 966:	0f 90       	pop	r0
 968:	1f 90       	pop	r1
 96a:	18 95       	reti

0000096c <Serial2_available()>:
_Z17Serial2_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:54
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
 96c:	8c e4       	ldi	r24, 0x4C	; 76
 96e:	93 e0       	ldi	r25, 0x03	; 3
 970:	0e 94 d5 01 	call	0x3aa	; 0x3aa <HardwareSerial::available()>
 974:	21 e0       	ldi	r18, 0x01	; 1
 976:	89 2b       	or	r24, r25
 978:	09 f4       	brne	.+2      	; 0x97c <Serial2_available()+0x10>
 97a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
}
 97c:	82 2f       	mov	r24, r18
 97e:	08 95       	ret

00000980 <_GLOBAL__sub_I___vector_51>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
 980:	ec e4       	ldi	r30, 0x4C	; 76
 982:	f3 e0       	ldi	r31, 0x03	; 3
 984:	13 82       	std	Z+3, r1	; 0x03
 986:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
 988:	88 ee       	ldi	r24, 0xE8	; 232
 98a:	93 e0       	ldi	r25, 0x03	; 3
 98c:	a0 e0       	ldi	r26, 0x00	; 0
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	84 83       	std	Z+4, r24	; 0x04
 992:	95 83       	std	Z+5, r25	; 0x05
 994:	a6 83       	std	Z+6, r26	; 0x06
 996:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 998:	84 e0       	ldi	r24, 0x04	; 4
 99a:	92 e0       	ldi	r25, 0x02	; 2
 99c:	91 83       	std	Z+1, r25	; 0x01
 99e:	80 83       	st	Z, r24
 9a0:	85 ed       	ldi	r24, 0xD5	; 213
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	95 87       	std	Z+13, r25	; 0x0d
 9a6:	84 87       	std	Z+12, r24	; 0x0c
 9a8:	84 ed       	ldi	r24, 0xD4	; 212
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	97 87       	std	Z+15, r25	; 0x0f
 9ae:	86 87       	std	Z+14, r24	; 0x0e
 9b0:	80 ed       	ldi	r24, 0xD0	; 208
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	91 8b       	std	Z+17, r25	; 0x11
 9b6:	80 8b       	std	Z+16, r24	; 0x10
 9b8:	81 ed       	ldi	r24, 0xD1	; 209
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	93 8b       	std	Z+19, r25	; 0x13
 9be:	82 8b       	std	Z+18, r24	; 0x12
 9c0:	82 ed       	ldi	r24, 0xD2	; 210
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	95 8b       	std	Z+21, r25	; 0x15
 9c6:	84 8b       	std	Z+20, r24	; 0x14
 9c8:	86 ed       	ldi	r24, 0xD6	; 214
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	97 8b       	std	Z+23, r25	; 0x17
 9ce:	86 8b       	std	Z+22, r24	; 0x16
 9d0:	11 8e       	std	Z+25, r1	; 0x19
 9d2:	12 8e       	std	Z+26, r1	; 0x1a
 9d4:	13 8e       	std	Z+27, r1	; 0x1b
 9d6:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
 9d8:	08 95       	ret

000009da <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 9da:	af 92       	push	r10
 9dc:	bf 92       	push	r11
 9de:	cf 92       	push	r12
 9e0:	df 92       	push	r13
 9e2:	ef 92       	push	r14
 9e4:	ff 92       	push	r15
 9e6:	0f 93       	push	r16
 9e8:	1f 93       	push	r17
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	6c 01       	movw	r12, r24
 9f0:	7b 01       	movw	r14, r22
 9f2:	8b 01       	movw	r16, r22
 9f4:	04 0f       	add	r16, r20
 9f6:	15 1f       	adc	r17, r21
 9f8:	eb 01       	movw	r28, r22
 9fa:	5e 01       	movw	r10, r28
 9fc:	ae 18       	sub	r10, r14
 9fe:	bf 08       	sbc	r11, r15
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
 a00:	c0 17       	cp	r28, r16
 a02:	d1 07       	cpc	r29, r17
 a04:	59 f0       	breq	.+22     	; 0xa1c <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
 a06:	69 91       	ld	r22, Y+
 a08:	d6 01       	movw	r26, r12
 a0a:	ed 91       	ld	r30, X+
 a0c:	fc 91       	ld	r31, X
 a0e:	01 90       	ld	r0, Z+
 a10:	f0 81       	ld	r31, Z
 a12:	e0 2d       	mov	r30, r0
 a14:	c6 01       	movw	r24, r12
 a16:	19 95       	eicall
 a18:	89 2b       	or	r24, r25
 a1a:	79 f7       	brne	.-34     	; 0x9fa <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
 a1c:	c5 01       	movw	r24, r10
 a1e:	df 91       	pop	r29
 a20:	cf 91       	pop	r28
 a22:	1f 91       	pop	r17
 a24:	0f 91       	pop	r16
 a26:	ff 90       	pop	r15
 a28:	ef 90       	pop	r14
 a2a:	df 90       	pop	r13
 a2c:	cf 90       	pop	r12
 a2e:	bf 90       	pop	r11
 a30:	af 90       	pop	r10
 a32:	08 95       	ret

00000a34 <initVariant>:
initVariant():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 a34:	08 95       	ret

00000a36 <main>:
main():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
 a36:	0e 94 d2 05 	call	0xba4	; 0xba4 <init>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
 a3a:	0e 94 1a 05 	call	0xa34	; 0xa34 <initVariant>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
 a3e:	0e 94 8e 01 	call	0x31c	; 0x31c <setup>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 a42:	c2 e1       	ldi	r28, 0x12	; 18
 a44:	d2 e0       	ldi	r29, 0x02	; 2
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
 a46:	0e 94 cb 01 	call	0x396	; 0x396 <loop>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
 a4a:	20 97       	sbiw	r28, 0x00	; 0
 a4c:	e1 f3       	breq	.-8      	; 0xa46 <main+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
 a4e:	0e 94 12 02 	call	0x424	; 0x424 <serialEventRun()>
 a52:	f9 cf       	rjmp	.-14     	; 0xa46 <main+0x10>

00000a54 <__vector_23>:
__vector_23():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
 a54:	1f 92       	push	r1
 a56:	0f 92       	push	r0
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	0f 92       	push	r0
 a5c:	11 24       	eor	r1, r1
 a5e:	2f 93       	push	r18
 a60:	3f 93       	push	r19
 a62:	8f 93       	push	r24
 a64:	9f 93       	push	r25
 a66:	af 93       	push	r26
 a68:	bf 93       	push	r27
 a6a:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <timer0_millis>
 a6e:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <timer0_millis+0x1>
 a72:	a0 91 f0 03 	lds	r26, 0x03F0	; 0x8003f0 <timer0_millis+0x2>
 a76:	b0 91 f1 03 	lds	r27, 0x03F1	; 0x8003f1 <timer0_millis+0x3>
 a7a:	30 91 ed 03 	lds	r19, 0x03ED	; 0x8003ed <timer0_fract>
 a7e:	26 e0       	ldi	r18, 0x06	; 6
 a80:	23 0f       	add	r18, r19
 a82:	2d 37       	cpi	r18, 0x7D	; 125
 a84:	68 f1       	brcs	.+90     	; 0xae0 <__vector_23+0x8c>
 a86:	29 e8       	ldi	r18, 0x89	; 137
 a88:	23 0f       	add	r18, r19
 a8a:	03 96       	adiw	r24, 0x03	; 3
 a8c:	a1 1d       	adc	r26, r1
 a8e:	b1 1d       	adc	r27, r1
 a90:	20 93 ed 03 	sts	0x03ED, r18	; 0x8003ed <timer0_fract>
 a94:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <timer0_millis>
 a98:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <timer0_millis+0x1>
 a9c:	a0 93 f0 03 	sts	0x03F0, r26	; 0x8003f0 <timer0_millis+0x2>
 aa0:	b0 93 f1 03 	sts	0x03F1, r27	; 0x8003f1 <timer0_millis+0x3>
 aa4:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer0_overflow_count>
 aa8:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <timer0_overflow_count+0x1>
 aac:	a0 91 eb 03 	lds	r26, 0x03EB	; 0x8003eb <timer0_overflow_count+0x2>
 ab0:	b0 91 ec 03 	lds	r27, 0x03EC	; 0x8003ec <timer0_overflow_count+0x3>
 ab4:	01 96       	adiw	r24, 0x01	; 1
 ab6:	a1 1d       	adc	r26, r1
 ab8:	b1 1d       	adc	r27, r1
 aba:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <timer0_overflow_count>
 abe:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <timer0_overflow_count+0x1>
 ac2:	a0 93 eb 03 	sts	0x03EB, r26	; 0x8003eb <timer0_overflow_count+0x2>
 ac6:	b0 93 ec 03 	sts	0x03EC, r27	; 0x8003ec <timer0_overflow_count+0x3>
 aca:	bf 91       	pop	r27
 acc:	af 91       	pop	r26
 ace:	9f 91       	pop	r25
 ad0:	8f 91       	pop	r24
 ad2:	3f 91       	pop	r19
 ad4:	2f 91       	pop	r18
 ad6:	0f 90       	pop	r0
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	0f 90       	pop	r0
 adc:	1f 90       	pop	r1
 ade:	18 95       	reti
 ae0:	02 96       	adiw	r24, 0x02	; 2
 ae2:	a1 1d       	adc	r26, r1
 ae4:	b1 1d       	adc	r27, r1
 ae6:	d4 cf       	rjmp	.-88     	; 0xa90 <__vector_23+0x3c>

00000ae8 <micros>:
micros():
 ae8:	3f b7       	in	r19, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer0_overflow_count>
 af0:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <timer0_overflow_count+0x1>
 af4:	a0 91 eb 03 	lds	r26, 0x03EB	; 0x8003eb <timer0_overflow_count+0x2>
 af8:	b0 91 ec 03 	lds	r27, 0x03EC	; 0x8003ec <timer0_overflow_count+0x3>
 afc:	26 b5       	in	r18, 0x26	; 38
 afe:	a8 9b       	sbis	0x15, 0	; 21
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <micros+0x24>
 b02:	2f 3f       	cpi	r18, 0xFF	; 255
 b04:	19 f0       	breq	.+6      	; 0xb0c <micros+0x24>
 b06:	01 96       	adiw	r24, 0x01	; 1
 b08:	a1 1d       	adc	r26, r1
 b0a:	b1 1d       	adc	r27, r1
 b0c:	3f bf       	out	0x3f, r19	; 63
 b0e:	ba 2f       	mov	r27, r26
 b10:	a9 2f       	mov	r26, r25
 b12:	98 2f       	mov	r25, r24
 b14:	88 27       	eor	r24, r24
 b16:	bc 01       	movw	r22, r24
 b18:	cd 01       	movw	r24, r26
 b1a:	62 0f       	add	r22, r18
 b1c:	71 1d       	adc	r23, r1
 b1e:	81 1d       	adc	r24, r1
 b20:	91 1d       	adc	r25, r1
 b22:	43 e0       	ldi	r20, 0x03	; 3
 b24:	66 0f       	add	r22, r22
 b26:	77 1f       	adc	r23, r23
 b28:	88 1f       	adc	r24, r24
 b2a:	99 1f       	adc	r25, r25
 b2c:	4a 95       	dec	r20
 b2e:	d1 f7       	brne	.-12     	; 0xb24 <micros+0x3c>
 b30:	08 95       	ret

00000b32 <delay>:
delay():
 b32:	8f 92       	push	r8
 b34:	9f 92       	push	r9
 b36:	af 92       	push	r10
 b38:	bf 92       	push	r11
 b3a:	cf 92       	push	r12
 b3c:	df 92       	push	r13
 b3e:	ef 92       	push	r14
 b40:	ff 92       	push	r15
 b42:	6b 01       	movw	r12, r22
 b44:	7c 01       	movw	r14, r24
 b46:	0e 94 74 05 	call	0xae8	; 0xae8 <micros>
 b4a:	4b 01       	movw	r8, r22
 b4c:	5c 01       	movw	r10, r24
 b4e:	c1 14       	cp	r12, r1
 b50:	d1 04       	cpc	r13, r1
 b52:	e1 04       	cpc	r14, r1
 b54:	f1 04       	cpc	r15, r1
 b56:	e9 f0       	breq	.+58     	; 0xb92 <delay+0x60>
 b58:	0e 94 12 07 	call	0xe24	; 0xe24 <yield>
 b5c:	0e 94 74 05 	call	0xae8	; 0xae8 <micros>
 b60:	68 19       	sub	r22, r8
 b62:	79 09       	sbc	r23, r9
 b64:	8a 09       	sbc	r24, r10
 b66:	9b 09       	sbc	r25, r11
 b68:	68 3e       	cpi	r22, 0xE8	; 232
 b6a:	73 40       	sbci	r23, 0x03	; 3
 b6c:	81 05       	cpc	r24, r1
 b6e:	91 05       	cpc	r25, r1
 b70:	70 f3       	brcs	.-36     	; 0xb4e <delay+0x1c>
 b72:	21 e0       	ldi	r18, 0x01	; 1
 b74:	c2 1a       	sub	r12, r18
 b76:	d1 08       	sbc	r13, r1
 b78:	e1 08       	sbc	r14, r1
 b7a:	f1 08       	sbc	r15, r1
 b7c:	88 ee       	ldi	r24, 0xE8	; 232
 b7e:	88 0e       	add	r8, r24
 b80:	83 e0       	ldi	r24, 0x03	; 3
 b82:	98 1e       	adc	r9, r24
 b84:	a1 1c       	adc	r10, r1
 b86:	b1 1c       	adc	r11, r1
 b88:	c1 14       	cp	r12, r1
 b8a:	d1 04       	cpc	r13, r1
 b8c:	e1 04       	cpc	r14, r1
 b8e:	f1 04       	cpc	r15, r1
 b90:	29 f7       	brne	.-54     	; 0xb5c <delay+0x2a>
 b92:	ff 90       	pop	r15
 b94:	ef 90       	pop	r14
 b96:	df 90       	pop	r13
 b98:	cf 90       	pop	r12
 b9a:	bf 90       	pop	r11
 b9c:	af 90       	pop	r10
 b9e:	9f 90       	pop	r9
 ba0:	8f 90       	pop	r8
 ba2:	08 95       	ret

00000ba4 <init>:
init():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 ba4:	78 94       	sei
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
 ba6:	84 b5       	in	r24, 0x24	; 36
 ba8:	83 60       	ori	r24, 0x03	; 3
 baa:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
 bac:	85 b5       	in	r24, 0x25	; 37
 bae:	83 60       	ori	r24, 0x03	; 3
 bb0:	85 bd       	out	0x25, r24	; 37
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
 bb2:	ee e6       	ldi	r30, 0x6E	; 110
 bb4:	f0 e0       	ldi	r31, 0x00	; 0
 bb6:	80 81       	ld	r24, Z
 bb8:	81 60       	ori	r24, 0x01	; 1
 bba:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 bbc:	e1 e8       	ldi	r30, 0x81	; 129
 bbe:	f0 e0       	ldi	r31, 0x00	; 0
 bc0:	82 e0       	ldi	r24, 0x02	; 2
 bc2:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 bc4:	80 81       	ld	r24, Z
 bc6:	81 60       	ori	r24, 0x01	; 1
 bc8:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 bca:	e0 e8       	ldi	r30, 0x80	; 128
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	80 81       	ld	r24, Z
 bd0:	81 60       	ori	r24, 0x01	; 1
 bd2:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
 bd4:	e1 eb       	ldi	r30, 0xB1	; 177
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	80 81       	ld	r24, Z
 bda:	84 60       	ori	r24, 0x04	; 4
 bdc:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
 bde:	e0 eb       	ldi	r30, 0xB0	; 176
 be0:	f0 e0       	ldi	r31, 0x00	; 0
 be2:	80 81       	ld	r24, Z
 be4:	81 60       	ori	r24, 0x01	; 1
 be6:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
 be8:	e1 e9       	ldi	r30, 0x91	; 145
 bea:	f0 e0       	ldi	r31, 0x00	; 0
 bec:	80 81       	ld	r24, Z
 bee:	83 60       	ori	r24, 0x03	; 3
 bf0:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
 bf2:	e0 e9       	ldi	r30, 0x90	; 144
 bf4:	f0 e0       	ldi	r31, 0x00	; 0
 bf6:	80 81       	ld	r24, Z
 bf8:	81 60       	ori	r24, 0x01	; 1
 bfa:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
 bfc:	e1 ea       	ldi	r30, 0xA1	; 161
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	80 81       	ld	r24, Z
 c02:	83 60       	ori	r24, 0x03	; 3
 c04:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
 c06:	e0 ea       	ldi	r30, 0xA0	; 160
 c08:	f0 e0       	ldi	r31, 0x00	; 0
 c0a:	80 81       	ld	r24, Z
 c0c:	81 60       	ori	r24, 0x01	; 1
 c0e:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
 c10:	e1 e2       	ldi	r30, 0x21	; 33
 c12:	f1 e0       	ldi	r31, 0x01	; 1
 c14:	80 81       	ld	r24, Z
 c16:	83 60       	ori	r24, 0x03	; 3
 c18:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
 c1a:	e0 e2       	ldi	r30, 0x20	; 32
 c1c:	f1 e0       	ldi	r31, 0x01	; 1
 c1e:	80 81       	ld	r24, Z
 c20:	81 60       	ori	r24, 0x01	; 1
 c22:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
 c24:	86 e8       	ldi	r24, 0x86	; 134
 c26:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
 c2a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
 c2e:	08 95       	ret

00000c30 <turnOffPWM>:
turnOffPWM():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 c30:	82 50       	subi	r24, 0x02	; 2
 c32:	82 31       	cpi	r24, 0x12	; 18
 c34:	08 f0       	brcs	.+2      	; 0xc38 <turnOffPWM+0x8>
 c36:	5f c0       	rjmp	.+190    	; 0xcf6 <turnOffPWM+0xc6>
 c38:	e8 2f       	mov	r30, r24
 c3a:	f0 e0       	ldi	r31, 0x00	; 0
 c3c:	88 27       	eor	r24, r24
 c3e:	ec 5d       	subi	r30, 0xDC	; 220
 c40:	f9 4f       	sbci	r31, 0xF9	; 249
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__tablejump2__>
 c48:	78 06       	cpc	r7, r24
 c4a:	7c 06       	cpc	r7, r28
 c4c:	36 06       	cpc	r3, r22
 c4e:	3c 06       	cpc	r3, r28
 c50:	40 06       	cpc	r4, r16
 c52:	7b 06       	cpc	r7, r27
 c54:	44 06       	cpc	r4, r20
 c56:	4a 06       	cpc	r4, r26
 c58:	4e 06       	cpc	r4, r30
 c5a:	54 06       	cpc	r5, r20
 c5c:	58 06       	cpc	r5, r24
 c5e:	5c 06       	cpc	r5, r28
 c60:	62 06       	cpc	r6, r18
 c62:	66 06       	cpc	r6, r22
 c64:	7b 06       	cpc	r7, r27
 c66:	6a 06       	cpc	r6, r26
 c68:	70 06       	cpc	r7, r16
 c6a:	74 06       	cpc	r7, r20
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 c6c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 c70:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 c72:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
 c76:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 c78:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 c7c:	8f 7d       	andi	r24, 0xDF	; 223
 c7e:	f9 cf       	rjmp	.-14     	; 0xc72 <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
 c80:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 c84:	87 7f       	andi	r24, 0xF7	; 247
 c86:	f5 cf       	rjmp	.-22     	; 0xc72 <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
 c88:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 c8c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 c8e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
 c92:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 c94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 c98:	8f 7d       	andi	r24, 0xDF	; 223
 c9a:	f9 cf       	rjmp	.-14     	; 0xc8e <turnOffPWM+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
 c9c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 ca0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
 ca2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
 ca6:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
 ca8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 cac:	8f 7d       	andi	r24, 0xDF	; 223
 cae:	f9 cf       	rjmp	.-14     	; 0xca2 <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
 cb0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 cb4:	87 7f       	andi	r24, 0xF7	; 247
 cb6:	f5 cf       	rjmp	.-22     	; 0xca2 <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
 cb8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 cbc:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
 cbe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
 cc2:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
 cc4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 cc8:	8f 7d       	andi	r24, 0xDF	; 223
 cca:	f9 cf       	rjmp	.-14     	; 0xcbe <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
 ccc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 cd0:	87 7f       	andi	r24, 0xF7	; 247
 cd2:	f5 cf       	rjmp	.-22     	; 0xcbe <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
 cd4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 cd8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
 cda:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
 cde:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
 ce0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 ce4:	8f 7d       	andi	r24, 0xDF	; 223
 ce6:	f9 cf       	rjmp	.-14     	; 0xcda <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
 ce8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 cec:	87 7f       	andi	r24, 0xF7	; 247
 cee:	f5 cf       	rjmp	.-22     	; 0xcda <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
 cf0:	84 b5       	in	r24, 0x24	; 36
 cf2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 cf4:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
 cf6:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 cf8:	84 b5       	in	r24, 0x24	; 36
 cfa:	8f 7d       	andi	r24, 0xDF	; 223
 cfc:	fb cf       	rjmp	.-10     	; 0xcf4 <turnOffPWM+0xc4>

00000cfe <pinMode>:
pinMode():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 cfe:	cf 93       	push	r28
 d00:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	fc 01       	movw	r30, r24
 d06:	ea 54       	subi	r30, 0x4A	; 74
 d08:	fe 4f       	sbci	r31, 0xFE	; 254
 d0a:	24 91       	lpm	r18, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 d0c:	84 5f       	subi	r24, 0xF4	; 244
 d0e:	9d 4f       	sbci	r25, 0xFD	; 253
 d10:	fc 01       	movw	r30, r24
 d12:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 d14:	88 23       	and	r24, r24
 d16:	c9 f0       	breq	.+50     	; 0xd4a <pinMode+0x4c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	88 0f       	add	r24, r24
 d1c:	99 1f       	adc	r25, r25
 d1e:	fc 01       	movw	r30, r24
 d20:	ea 56       	subi	r30, 0x6A	; 106
 d22:	fd 4f       	sbci	r31, 0xFD	; 253
 d24:	a5 91       	lpm	r26, Z+
 d26:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 d28:	fc 01       	movw	r30, r24
 d2a:	e4 58       	subi	r30, 0x84	; 132
 d2c:	fd 4f       	sbci	r31, 0xFD	; 253
 d2e:	c5 91       	lpm	r28, Z+
 d30:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
 d32:	61 11       	cpse	r22, r1
 d34:	0d c0       	rjmp	.+26     	; 0xd50 <pinMode+0x52>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
 d36:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
 d38:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
 d3a:	8c 91       	ld	r24, X
 d3c:	20 95       	com	r18
 d3e:	82 23       	and	r24, r18
 d40:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
 d42:	88 81       	ld	r24, Y
 d44:	28 23       	and	r18, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
 d46:	28 83       	st	Y, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
 d48:	9f bf       	out	0x3f, r25	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 d4a:	df 91       	pop	r29
 d4c:	cf 91       	pop	r28
 d4e:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 d50:	62 30       	cpi	r22, 0x02	; 2
 d52:	51 f4       	brne	.+20     	; 0xd68 <pinMode+0x6a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
 d54:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
 d56:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
 d58:	3c 91       	ld	r19, X
 d5a:	82 2f       	mov	r24, r18
 d5c:	80 95       	com	r24
 d5e:	83 23       	and	r24, r19
 d60:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
 d62:	e8 81       	ld	r30, Y
 d64:	2e 2b       	or	r18, r30
 d66:	ef cf       	rjmp	.-34     	; 0xd46 <pinMode+0x48>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 d68:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
 d6a:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 d6c:	ec 91       	ld	r30, X
 d6e:	2e 2b       	or	r18, r30
 d70:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 d72:	8f bf       	out	0x3f, r24	; 63
 d74:	ea cf       	rjmp	.-44     	; 0xd4a <pinMode+0x4c>

00000d76 <digitalWrite>:
digitalWrite():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 d76:	1f 93       	push	r17
 d78:	cf 93       	push	r28
 d7a:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
 d7c:	28 2f       	mov	r18, r24
 d7e:	30 e0       	ldi	r19, 0x00	; 0
 d80:	f9 01       	movw	r30, r18
 d82:	e0 5a       	subi	r30, 0xA0	; 160
 d84:	fe 4f       	sbci	r31, 0xFE	; 254
 d86:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 d88:	f9 01       	movw	r30, r18
 d8a:	ea 54       	subi	r30, 0x4A	; 74
 d8c:	fe 4f       	sbci	r31, 0xFE	; 254
 d8e:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 d90:	f9 01       	movw	r30, r18
 d92:	e4 5f       	subi	r30, 0xF4	; 244
 d94:	fd 4f       	sbci	r31, 0xFD	; 253
 d96:	c4 91       	lpm	r28, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 d98:	cc 23       	and	r28, r28
 d9a:	a9 f0       	breq	.+42     	; 0xdc6 <digitalWrite+0x50>
 d9c:	16 2f       	mov	r17, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 d9e:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
 da0:	0e 94 18 06 	call	0xc30	; 0xc30 <turnOffPWM>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
 da4:	ec 2f       	mov	r30, r28
 da6:	f0 e0       	ldi	r31, 0x00	; 0
 da8:	ee 0f       	add	r30, r30
 daa:	ff 1f       	adc	r31, r31
 dac:	e4 58       	subi	r30, 0x84	; 132
 dae:	fd 4f       	sbci	r31, 0xFD	; 253
 db0:	a5 91       	lpm	r26, Z+
 db2:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 db4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 db6:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 db8:	ec 91       	ld	r30, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 dba:	11 11       	cpse	r17, r1
 dbc:	08 c0       	rjmp	.+16     	; 0xdce <digitalWrite+0x58>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 dbe:	d0 95       	com	r29
 dc0:	de 23       	and	r29, r30
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 dc2:	dc 93       	st	X, r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 dc4:	8f bf       	out	0x3f, r24	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
 dc6:	df 91       	pop	r29
 dc8:	cf 91       	pop	r28
 dca:	1f 91       	pop	r17
 dcc:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 dce:	de 2b       	or	r29, r30
 dd0:	f8 cf       	rjmp	.-16     	; 0xdc2 <digitalWrite+0x4c>

00000dd2 <digitalRead>:
digitalRead():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
 dd2:	cf 93       	push	r28
 dd4:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
 dd6:	28 2f       	mov	r18, r24
 dd8:	30 e0       	ldi	r19, 0x00	; 0
 dda:	f9 01       	movw	r30, r18
 ddc:	e0 5a       	subi	r30, 0xA0	; 160
 dde:	fe 4f       	sbci	r31, 0xFE	; 254
 de0:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
 de2:	f9 01       	movw	r30, r18
 de4:	ea 54       	subi	r30, 0x4A	; 74
 de6:	fe 4f       	sbci	r31, 0xFE	; 254
 de8:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
 dea:	f9 01       	movw	r30, r18
 dec:	e4 5f       	subi	r30, 0xF4	; 244
 dee:	fd 4f       	sbci	r31, 0xFD	; 253
 df0:	c4 91       	lpm	r28, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
 df2:	cc 23       	and	r28, r28
 df4:	a1 f0       	breq	.+40     	; 0xe1e <digitalRead+0x4c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 df6:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
 df8:	0e 94 18 06 	call	0xc30	; 0xc30 <turnOffPWM>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
 dfc:	ec 2f       	mov	r30, r28
 dfe:	f0 e0       	ldi	r31, 0x00	; 0
 e00:	ee 0f       	add	r30, r30
 e02:	ff 1f       	adc	r31, r31
 e04:	ee 59       	subi	r30, 0x9E	; 158
 e06:	fd 4f       	sbci	r31, 0xFD	; 253
 e08:	a5 91       	lpm	r26, Z+
 e0a:	b4 91       	lpm	r27, Z
 e0c:	ec 91       	ld	r30, X
 e0e:	ed 23       	and	r30, r29
 e10:	81 e0       	ldi	r24, 0x01	; 1
 e12:	90 e0       	ldi	r25, 0x00	; 0
 e14:	09 f4       	brne	.+2      	; 0xe18 <digitalRead+0x46>
 e16:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
 e18:	df 91       	pop	r29
 e1a:	cf 91       	pop	r28
 e1c:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
 e1e:	80 e0       	ldi	r24, 0x00	; 0
 e20:	90 e0       	ldi	r25, 0x00	; 0
 e22:	fa cf       	rjmp	.-12     	; 0xe18 <digitalRead+0x46>

00000e24 <yield>:
__empty():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
 e24:	08 95       	ret

00000e26 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
 e26:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
 e28:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
 e2a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
 e2c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
 e2e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
 e30:	0d c0       	rjmp	.+26     	; 0xe4c <__udivmodsi4_ep>

00000e32 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
 e32:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
 e34:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
 e36:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
 e38:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
 e3a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
 e3c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
 e3e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
 e40:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
 e42:	20 f0       	brcs	.+8      	; 0xe4c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
 e44:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
 e46:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
 e48:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
 e4a:	f5 0b       	sbc	r31, r21

00000e4c <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
 e4c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
 e4e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
 e50:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
 e52:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
 e54:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
 e56:	69 f7       	brne	.-38     	; 0xe32 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
 e58:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
 e5a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
 e5c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
 e5e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
 e60:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
 e62:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
 e64:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
 e66:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
 e68:	08 95       	ret

00000e6a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 e6a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 e6c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
 e6e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
 e70:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
 e72:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
 e74:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
 e76:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
 e78:	19 94       	eijmp

00000e7a <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 e7a:	f8 94       	cli

00000e7c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 e7c:	ff cf       	rjmp	.-2      	; 0xe7c <__stop_program>
