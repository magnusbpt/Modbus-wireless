
C:\Users\mbt\AppData\Local\Temp\arduino\sketches\DDE1A134C526CDBD68FCB1B670DA36C5/Modbus_master_test.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__ctors_end>
       4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
       8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
       c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      10:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      14:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      18:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      1c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      20:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      24:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      28:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      2c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      30:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      34:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      38:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      3c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      40:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      44:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      48:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      4c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      50:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      54:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      58:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      5c:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__vector_23>
      60:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      64:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__vector_25>
      68:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_26>
      6c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      70:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      74:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      78:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      7c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      80:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      84:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      88:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      8c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      90:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_36>
      94:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__vector_37>
      98:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      9c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      a0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      a4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      a8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      ac:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      b0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      b4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      b8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      bc:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      c0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      c4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      c8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      cc:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__vector_51>
      d0:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__vector_52>
      d4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      d8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      dc:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      e0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <HardwareSerial::availableForWrite()>
      e8:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <turnOffPWM+0x9c>
      ec:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <turnOffPWM+0xc6>
      f0:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <HardwareSerial::available()>
      f4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <turnOffPWM+0x58>
      f8:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <modbusValue()+0x102>
      fc:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <turnOffPWM+0x3c>
     100:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <turnOffPWM+0x80>
     104:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <turnOffPWM+0xb8>
     108:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <turnOffPWM+0x48>
     10c:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <_GLOBAL__sub_I___vector_25>
     110:	0c 94 96 03 	jmp	0x72c	; 0x72c <modbusValue()+0x7e>
     114:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <turnOffPWM+0xc8>
     118:	0c 94 40 09 	jmp	0x1280	; 0x1280 <HardwareSerial::flush()>
     11c:	0c 94 a7 03 	jmp	0x74e	; 0x74e <modbusValue()+0xa0>
     120:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <HardwareSerial::peek()>
     124:	0c 94 c6 08 	jmp	0x118c	; 0x118c <HardwareSerial::read()>
     128:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <HardwareSerial::write(unsigned char)>
     12c:	0c 94 85 03 	jmp	0x70a	; 0x70a <modbusValue()+0x5c>
     130:	0c 94 20 04 	jmp	0x840	; 0x840 <modbusValue()+0x192>
     134:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <serialEventRun()>
     138:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <turnOffPWM+0xc0>
     13c:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <turnOffPWM+0x6c>
     140:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <Serial1_available()>
     144:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <turnOffPWM+0x94>
     148:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <Serial0_available()>
     14c:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <_GLOBAL__sub_I___vector_36>
     150:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <Serial2_available()>
     154:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <turnOffPWM+0x64>
     158:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <turnOffPWM+0x50>
     15c:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <Print::write(unsigned char const*, unsigned int)>
     160:	0c 94 97 0b 	jmp	0x172e	; 0x172e <_GLOBAL__sub_I___vector_51>
     164:	0c 94 2e 04 	jmp	0x85c	; 0x85c <modbusValue()+0x1ae>
     168:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <turnOffPWM+0xb0>
     16c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <turnOffPWM+0xa4>
     170:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <turnOffPWM+0x88>
     174:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <turnOffPWM+0x78>

00000178 <__trampolines_end>:
__trampolines_end():
     178:	41 54       	subi	r20, 0x41	; 65
	...

0000017b <ATcomcheck(int)::__c>:
     17b:	44 65 74 65 63 74 65 64 3a 20 00                    Detected: .

00000186 <Sim_send(short*, int)::__c>:
     186:	41 54 2b 43 41 52 45 43 56 3d 30 2c 35 30 00        AT+CARECV=0,50.

00000195 <Sim_send(short*, int)::__c>:
     195:	41 54 2b 43 41 41 43 4b 3d 30 00                    AT+CAACK=0.

000001a0 <Sim_Connect()::__c>:
     1a0:	41 54 2b 43 41 4f 50 45 4e 3d 30 2c 30 2c 22 55     AT+CAOPEN=0,0,"U
     1b0:	44 50 22 2c 22 32 30 37 2e 31 35 34 2e 32 35 31     DP","207.154.251
     1c0:	2e 31 37 31 22 2c 38 30 38 30 00                    .171",8080.

000001cb <Sim_Connect()::__c>:
     1cb:	41 54 2b 43 4e 41 43 54 3f 00                       AT+CNACT?.

000001d5 <Sim_Connect()::__c>:
     1d5:	41 54 2b 43 4e 41 43 54 3d 30 2c 31 00              AT+CNACT=0,1.

000001e2 <Sim_Connect()::__c>:
     1e2:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

000001ec <Sim_Connect()::__c>:
     1ec:	41 54 2b 43 47 4e 41 50 4e 00                       AT+CGNAPN.

000001f6 <Sim_Connect()::__c>:
     1f6:	41 54 2b 43 4f 50 53 3f 00                          AT+COPS?.

000001ff <Sim_Connect()::__c>:
     1ff:	41 54 2b 43 46 55 4e 3d 31 00                       AT+CFUN=1.

00000209 <Sim_Connect()::__c>:
     209:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     219:	22 2c 22 69 6f 74 2e 31 6e 63 65 2e 6e 65 74 22     ","iot.1nce.net"
	...

0000022a <Sim_Connect()::__c>:
     22a:	41 54 2b 43 46 55 4e 3d 30 00                       AT+CFUN=0.

00000234 <Sim_Connect()::__c>:
     234:	41 54 2b 43 53 51 00                                AT+CSQ.

0000023b <getIMEI()::__c>:
     23b:	41 54 2b 47 53 4e 00                                AT+GSN.

00000242 <digital_pin_to_timer_PGM>:
     242:	00 00 00 0a 0b 0c 00 00 00 00 00 0d 0e 0f 09 00     ................
     252:	00 00 00 08 04 05 06 00 00 00 00 00 00 11 12 13     ................
	...
     296:	00 03                                               ..

00000298 <digital_pin_to_bit_mask_PGM>:
     298:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 01     ..... @...... @.
     2a8:	02 04 08 10 20 40 80 80 08 10 01 02 04 08 10 20     .... @......... 
     2b8:	40 80 01 02 04 08 10 20 40 80 01 02 01 02 04 08     @...... @.......
     2c8:	10 20 40 80 01 02 04 08 10 20 40 04 80 40 20 10     . @...... @..@ .
     2d8:	08 04 02 01 80 01 02 04 08 10 20 40 80 01 02 04     .......... @....
     2e8:	08 10 20 40 80 20                                   .. @. 

000002ee <digital_pin_to_port_PGM>:
     2ee:	05 05 05 05 05 05 05 05 08 08 08 08 08 08 08 02     ................
     2fe:	02 02 02 02 02 02 02 08 07 07 0c 0c 0c 0c 0c 0c     ................
     30e:	0c 0c 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     31e:	03 03 03 03 0a 0a 0a 0a 0a 0a 0a 07 01 01 01 01     ................
     32e:	01 01 01 01 0a 06 06 06 06 06 06 06 06 0b 0b 0b     ................
     33e:	0b 0b 0b 0b 0b 07                                   ......

00000344 <port_to_output_PGM>:
     344:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     354:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000035e <port_to_mode_PGM>:
     35e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     36e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000378 <__ctors_start>:
__ctors_start():
     378:	69 0a       	sbc	r6, r25
     37a:	00 0b       	sbc	r16, r16
     37c:	97 0b       	sbc	r25, r23

0000037e <__ctors_end>:
__dtors_end():
     37e:	11 24       	eor	r1, r1
     380:	1f be       	out	0x3f, r1	; 63
     382:	cf ef       	ldi	r28, 0xFF	; 255
     384:	d1 e2       	ldi	r29, 0x21	; 33
     386:	de bf       	out	0x3e, r29	; 62
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	0c bf       	out	0x3c, r16	; 60

0000038e <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     38e:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     390:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     392:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     394:	e0 e8       	ldi	r30, 0x80	; 128
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     396:	f4 e2       	ldi	r31, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     398:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     39a:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     39e:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     3a0:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     3a2:	a6 34       	cpi	r26, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     3a4:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0x10>

000003a8 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     3a8:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     3aa:	a6 e4       	ldi	r26, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     3ac:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     3b2:	ac 32       	cpi	r26, 0x2C	; 44
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     3b4:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>

000003b8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     3b8:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     3ba:	cf eb       	ldi	r28, 0xBF	; 191
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     3bc:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     3be:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     3c0:	06 c0       	rjmp	.+12     	; 0x3ce <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     3c2:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     3c4:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     3c6:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     3c8:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     3ca:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     3ce:	cc 3b       	cpi	r28, 0xBC	; 188
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     3d0:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     3d2:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     3d4:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     3d6:	a9 f7       	brne	.-22     	; 0x3c2 <__do_global_ctors+0xa>
     3d8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <main>
     3dc:	0c 94 3e 12 	jmp	0x247c	; 0x247c <_exit>

000003e0 <__bad_interrupt>:
__vector_38():
     3e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e4 <relaySimToMod()>:
_Z13relaySimToModv():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:701
  ADU[ADUsize++] = highByte(CRC);

  Serial2.write(ADU, ADUsize);

  modbusread();
}
     3e4:	af 92       	push	r10
     3e6:	bf 92       	push	r11
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <relaySimToMod()+0x16>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <relaySimToMod()+0x18>
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <relaySimToMod()+0x1a>
     3fe:	1f 92       	push	r1
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	8e 01       	movw	r16, r28
     406:	0f 5f       	subi	r16, 0xFF	; 255
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	8a e0       	ldi	r24, 0x0A	; 10
     40c:	d8 01       	movw	r26, r16
     40e:	1d 92       	st	X+, r1
     410:	8a 95       	dec	r24
     412:	e9 f7       	brne	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     414:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <lengthCounter>
     418:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <lengthCounter+0x1>
     41c:	0a 97       	sbiw	r24, 0x0a	; 10
     41e:	7a ea       	ldi	r23, 0xAA	; 170
     420:	e7 2e       	mov	r14, r23
     422:	72 e0       	ldi	r23, 0x02	; 2
     424:	f7 2e       	mov	r15, r23
     426:	f8 01       	movw	r30, r16
     428:	a8 e0       	ldi	r26, 0x08	; 8
     42a:	ca 2e       	mov	r12, r26
     42c:	d1 2c       	mov	r13, r1
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	ac 01       	movw	r20, r24
     434:	47 70       	andi	r20, 0x07	; 7
     436:	55 27       	eor	r21, r21
     438:	45 2b       	or	r20, r21
     43a:	11 f4       	brne	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	ac 01       	movw	r20, r24
     442:	97 ff       	sbrs	r25, 7
     444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     446:	49 5f       	subi	r20, 0xF9	; 249
     448:	5f 4f       	sbci	r21, 0xFF	; 255
     44a:	63 e0       	ldi	r22, 0x03	; 3
     44c:	55 95       	asr	r21
     44e:	47 95       	ror	r20
     450:	6a 95       	dec	r22
     452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     454:	24 0f       	add	r18, r20
     456:	35 1f       	adc	r19, r21
     458:	af 01       	movw	r20, r30
     45a:	40 1b       	sub	r20, r16
     45c:	51 0b       	sbc	r21, r17
     45e:	42 17       	cp	r20, r18
     460:	53 07       	cpc	r21, r19
     462:	fc f4       	brge	.+62     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     464:	b6 01       	movw	r22, r12
     466:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__divmodhi4>
     46a:	ac 01       	movw	r20, r24
     46c:	18 16       	cp	r1, r24
     46e:	19 06       	cpc	r1, r25
     470:	14 f0       	brlt	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     472:	48 e0       	ldi	r20, 0x08	; 8
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	60 81       	ld	r22, Z
     478:	a1 e7       	ldi	r26, 0x71	; 113
     47a:	b3 e0       	ldi	r27, 0x03	; 3
     47c:	b1 2c       	mov	r11, r1
     47e:	a1 2c       	mov	r10, r1
     480:	c5 01       	movw	r24, r10
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	2d 91       	ld	r18, X+
     486:	01 c0       	rjmp	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     488:	22 0f       	add	r18, r18
     48a:	aa 94       	dec	r10
     48c:	ea f7       	brpl	.-6      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     48e:	62 2b       	or	r22, r18
     490:	5c 01       	movw	r10, r24
     492:	84 17       	cp	r24, r20
     494:	95 07       	cpc	r25, r21
     496:	a1 f7       	brne	.-24     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     498:	61 93       	st	Z+, r22
     49a:	d7 01       	movw	r26, r14
     49c:	6d 93       	st	X+, r22
     49e:	7d 01       	movw	r14, r26
     4a0:	c6 cf       	rjmp	.-116    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     4a2:	8a ea       	ldi	r24, 0xAA	; 170
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	2a 96       	adiw	r28, 0x0a	; 10
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	bf 90       	pop	r11
     4c4:	af 90       	pop	r10
     4c6:	08 95       	ret

000004c8 <bytesToShort(unsigned char*, int)>:
_Z12bytesToShortPhi():
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <lengthCounter+0x1>
     4e0:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <lengthCounter>
     4e4:	e6 e4       	ldi	r30, 0x46	; 70
     4e6:	f2 e0       	ldi	r31, 0x02	; 2
     4e8:	24 e6       	ldi	r18, 0x64	; 100
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	2a 95       	dec	r18
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <bytesToShort(unsigned char*, int)+0x24>
     4f2:	8b 01       	movw	r16, r22
     4f4:	77 ff       	sbrs	r23, 7
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <bytesToShort(unsigned char*, int)+0x34>
     4f8:	0f 5f       	subi	r16, 0xFF	; 255
     4fa:	1f 4f       	sbci	r17, 0xFF	; 255
     4fc:	15 95       	asr	r17
     4fe:	07 95       	ror	r16
     500:	ec 01       	movw	r28, r24
     502:	36 e4       	ldi	r19, 0x46	; 70
     504:	a3 2e       	mov	r10, r19
     506:	32 e0       	ldi	r19, 0x02	; 2
     508:	b3 2e       	mov	r11, r19
     50a:	d1 2c       	mov	r13, r1
     50c:	c1 2c       	mov	r12, r1
     50e:	c0 16       	cp	r12, r16
     510:	d1 06       	cpc	r13, r17
     512:	ec f4       	brge	.+58     	; 0x54e <bytesToShort(unsigned char*, int)+0x86>
     514:	e8 80       	ld	r14, Y
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	fe 2c       	mov	r15, r14
     51a:	e8 2e       	mov	r14, r24
     51c:	4a e0       	ldi	r20, 0x0A	; 10
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	b7 01       	movw	r22, r14
     522:	8c e4       	ldi	r24, 0x4C	; 76
     524:	94 e0       	ldi	r25, 0x04	; 4
     526:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Print::println(int, int)>
     52a:	f5 01       	movw	r30, r10
     52c:	e1 92       	st	Z+, r14
     52e:	f1 92       	st	Z+, r15
     530:	5f 01       	movw	r10, r30
     532:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <lengthCounter>
     536:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <lengthCounter+0x1>
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <lengthCounter+0x1>
     540:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <lengthCounter>
     544:	ff ef       	ldi	r31, 0xFF	; 255
     546:	cf 1a       	sub	r12, r31
     548:	df 0a       	sbc	r13, r31
     54a:	22 96       	adiw	r28, 0x02	; 2
     54c:	e0 cf       	rjmp	.-64     	; 0x50e <bytesToShort(unsigned char*, int)+0x46>
     54e:	86 e4       	ldi	r24, 0x46	; 70
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	08 95       	ret

00000568 <tempConvert(short*)>:
_Z11tempConvertPs():
     568:	fc 01       	movw	r30, r24
     56a:	20 81       	ld	r18, Z
     56c:	31 81       	ldd	r19, Z+1	; 0x01
     56e:	24 5d       	subi	r18, 0xD4	; 212
     570:	3e 4f       	sbci	r19, 0xFE	; 254
     572:	31 83       	std	Z+1, r19	; 0x01
     574:	20 83       	st	Z, r18
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	30 93 e1 02 	sts	0x02E1, r19	; 0x8002e1 <lengthCounter+0x1>
     57e:	20 93 e0 02 	sts	0x02E0, r18	; 0x8002e0 <lengthCounter>
     582:	08 95       	ret

00000584 <modbusPrint(int)>:
_Z11modbusPrinti():
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	8c 01       	movw	r16, r24
     58e:	ca e1       	ldi	r28, 0x1A	; 26
     590:	d4 e0       	ldi	r29, 0x04	; 4
     592:	ce 01       	movw	r24, r28
     594:	8a 51       	subi	r24, 0x1A	; 26
     596:	94 40       	sbci	r25, 0x04	; 4
     598:	80 17       	cp	r24, r16
     59a:	91 07       	cpc	r25, r17
     59c:	74 f4       	brge	.+28     	; 0x5ba <modbusPrint(int)+0x36>
     59e:	69 91       	ld	r22, Y+
     5a0:	40 e1       	ldi	r20, 0x10	; 16
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	8c e4       	ldi	r24, 0x4C	; 76
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <Print::print(unsigned char, int)>
     5ac:	6c e1       	ldi	r22, 0x1C	; 28
     5ae:	72 e0       	ldi	r23, 0x02	; 2
     5b0:	8c e4       	ldi	r24, 0x4C	; 76
     5b2:	94 e0       	ldi	r25, 0x04	; 4
     5b4:	0e 94 24 0c 	call	0x1848	; 0x1848 <Print::print(char const*)>
     5b8:	ec cf       	rjmp	.-40     	; 0x592 <modbusPrint(int)+0xe>
     5ba:	8c e4       	ldi	r24, 0x4C	; 76
     5bc:	94 e0       	ldi	r25, 0x04	; 4
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <Print::println()>

000005ca <simpow()>:
_Z6simpowv():
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	8b e2       	ldi	r24, 0x2B	; 43
     5ce:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     5d2:	60 ed       	ldi	r22, 0xD0	; 208
     5d4:	77 e0       	ldi	r23, 0x07	; 7
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	8b e2       	ldi	r24, 0x2B	; 43
     5e2:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <digitalWrite>

000005e6 <clrsimBuffer()>:
_Z12clrsimBufferv():
     5e6:	e8 ef       	ldi	r30, 0xF8	; 248
     5e8:	f2 e0       	ldi	r31, 0x02	; 2
     5ea:	88 e7       	ldi	r24, 0x78	; 120
     5ec:	df 01       	movw	r26, r30
     5ee:	1d 92       	st	X+, r1
     5f0:	8a 95       	dec	r24
     5f2:	e9 f7       	brne	.-6      	; 0x5ee <clrsimBuffer()+0x8>
     5f4:	08 95       	ret

000005f6 <simReadData()>:
_Z11simReadDatav():
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <simBuffer+0x1b>
     5fe:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <simBuffer+0x1a>
     602:	02 2e       	mov	r0, r18
     604:	00 0c       	add	r0, r0
     606:	33 0b       	sbc	r19, r19
     608:	20 53       	subi	r18, 0x30	; 48
     60a:	31 09       	sbc	r19, r1
     60c:	80 33       	cpi	r24, 0x30	; 48
     60e:	c4 f4       	brge	.+48     	; 0x640 <simReadData()+0x4a>
     610:	30 93 e1 02 	sts	0x02E1, r19	; 0x8002e1 <lengthCounter+0x1>
     614:	20 93 e0 02 	sts	0x02E0, r18	; 0x8002e0 <lengthCounter>
     618:	ec e1       	ldi	r30, 0x1C	; 28
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <lengthCounter>
     620:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <lengthCounter+0x1>
     624:	e8 50       	subi	r30, 0x08	; 8
     626:	fd 4f       	sbci	r31, 0xFD	; 253
     628:	a0 e7       	ldi	r26, 0x70	; 112
     62a:	b3 e0       	ldi	r27, 0x03	; 3
     62c:	cd 01       	movw	r24, r26
     62e:	80 57       	subi	r24, 0x70	; 112
     630:	93 40       	sbci	r25, 0x03	; 3
     632:	82 17       	cp	r24, r18
     634:	93 07       	cpc	r25, r19
     636:	bc f4       	brge	.+46     	; 0x666 <simReadData()+0x70>
     638:	81 91       	ld	r24, Z+
     63a:	80 53       	subi	r24, 0x30	; 48
     63c:	8d 93       	st	X+, r24
     63e:	f6 cf       	rjmp	.-20     	; 0x62c <simReadData()+0x36>
     640:	9a e0       	ldi	r25, 0x0A	; 10
     642:	92 9f       	mul	r25, r18
     644:	a0 01       	movw	r20, r0
     646:	93 9f       	mul	r25, r19
     648:	50 0d       	add	r21, r0
     64a:	11 24       	eor	r1, r1
     64c:	08 2e       	mov	r0, r24
     64e:	00 0c       	add	r0, r0
     650:	99 0b       	sbc	r25, r25
     652:	c0 97       	sbiw	r24, 0x30	; 48
     654:	84 0f       	add	r24, r20
     656:	95 1f       	adc	r25, r21
     658:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <lengthCounter+0x1>
     65c:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <lengthCounter>
     660:	ed e1       	ldi	r30, 0x1D	; 29
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	db cf       	rjmp	.-74     	; 0x61c <simReadData()+0x26>
     666:	c0 e7       	ldi	r28, 0x70	; 112
     668:	d3 e0       	ldi	r29, 0x03	; 3
     66a:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <lengthCounter>
     66e:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <lengthCounter+0x1>
     672:	ce 01       	movw	r24, r28
     674:	80 57       	subi	r24, 0x70	; 112
     676:	93 40       	sbci	r25, 0x03	; 3
     678:	82 17       	cp	r24, r18
     67a:	93 07       	cpc	r25, r19
     67c:	44 f4       	brge	.+16     	; 0x68e <simReadData()+0x98>
     67e:	69 91       	ld	r22, Y+
     680:	4a e0       	ldi	r20, 0x0A	; 10
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	8c e4       	ldi	r24, 0x4C	; 76
     686:	94 e0       	ldi	r25, 0x04	; 4
     688:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <Print::print(unsigned char, int)>
     68c:	ee cf       	rjmp	.-36     	; 0x66a <simReadData()+0x74>
     68e:	8c e4       	ldi	r24, 0x4C	; 76
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	0e 94 33 0c 	call	0x1866	; 0x1866 <Print::println()>
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <clrsimBuffer()>

0000069e <clrmodBuffer()>:
_Z12clrmodBufferv():
     69e:	e8 ee       	ldi	r30, 0xE8	; 232
     6a0:	f3 e0       	ldi	r31, 0x03	; 3
     6a2:	82 e3       	ldi	r24, 0x32	; 50
     6a4:	df 01       	movw	r26, r30
     6a6:	1d 92       	st	X+, r1
     6a8:	8a 95       	dec	r24
     6aa:	e9 f7       	brne	.-6      	; 0x6a6 <clrmodBuffer()+0x8>
     6ac:	08 95       	ret

000006ae <modbusValue()>:
_Z11modbusValuev():
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ea e1       	ldi	r30, 0x1A	; 26
     6b8:	f4 e0       	ldi	r31, 0x04	; 4
     6ba:	82 e3       	ldi	r24, 0x32	; 50
     6bc:	df 01       	movw	r26, r30
     6be:	1d 92       	st	X+, r1
     6c0:	8a 95       	dec	r24
     6c2:	e9 f7       	brne	.-6      	; 0x6be <modbusValue()+0x10>
     6c4:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <slaveReg>
     6c8:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <modBuffer+0x1>
     6cc:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <lengthCounter+0x1>
     6d0:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <lengthCounter>
     6d4:	e1 50       	subi	r30, 0x01	; 1
     6d6:	e0 31       	cpi	r30, 0x10	; 16
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <modbusValue()+0x2e>
     6da:	b2 c0       	rjmp	.+356    	; 0x840 <modbusValue()+0x192>
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	88 27       	eor	r24, r24
     6e0:	eb 58       	subi	r30, 0x8B	; 139
     6e2:	fc 4f       	sbci	r31, 0xFC	; 252
     6e4:	8f 4f       	sbci	r24, 0xFF	; 255
     6e6:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__tablejump2__>
     6ea:	d8 03       	fmulsu	r21, r16
     6ec:	a7 03       	fmuls	r18, r23
     6ee:	96 03       	fmuls	r17, r22
     6f0:	85 03       	fmuls	r16, r21
     6f2:	2e 04       	cpc	r2, r14
     6f4:	2e 04       	cpc	r2, r14
     6f6:	20 04       	cpc	r2, r0
     6f8:	20 04       	cpc	r2, r0
     6fa:	20 04       	cpc	r2, r0
     6fc:	20 04       	cpc	r2, r0
     6fe:	20 04       	cpc	r2, r0
     700:	20 04       	cpc	r2, r0
     702:	20 04       	cpc	r2, r0
     704:	20 04       	cpc	r2, r0
     706:	2e 04       	cpc	r2, r14
     708:	2e 04       	cpc	r2, r14
     70a:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <modBuffer+0x2>
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	ab ee       	ldi	r26, 0xEB	; 235
     712:	b3 e0       	ldi	r27, 0x03	; 3
     714:	ea e1       	ldi	r30, 0x1A	; 26
     716:	f4 e0       	ldi	r31, 0x04	; 4
     718:	9f 01       	movw	r18, r30
     71a:	2a 51       	subi	r18, 0x1A	; 26
     71c:	34 40       	sbci	r19, 0x04	; 4
     71e:	28 17       	cp	r18, r24
     720:	39 07       	cpc	r19, r25
     722:	0c f0       	brlt	.+2      	; 0x726 <modbusValue()+0x78>
     724:	96 c0       	rjmp	.+300    	; 0x852 <modbusValue()+0x1a4>
     726:	2d 91       	ld	r18, X+
     728:	21 93       	st	Z+, r18
     72a:	f6 cf       	rjmp	.-20     	; 0x718 <modbusValue()+0x6a>
     72c:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <modBuffer+0x2>
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	ab ee       	ldi	r26, 0xEB	; 235
     734:	b3 e0       	ldi	r27, 0x03	; 3
     736:	ea e1       	ldi	r30, 0x1A	; 26
     738:	f4 e0       	ldi	r31, 0x04	; 4
     73a:	9f 01       	movw	r18, r30
     73c:	2a 51       	subi	r18, 0x1A	; 26
     73e:	34 40       	sbci	r19, 0x04	; 4
     740:	28 17       	cp	r18, r24
     742:	39 07       	cpc	r19, r25
     744:	0c f0       	brlt	.+2      	; 0x748 <modbusValue()+0x9a>
     746:	85 c0       	rjmp	.+266    	; 0x852 <modbusValue()+0x1a4>
     748:	2d 91       	ld	r18, X+
     74a:	21 93       	st	Z+, r18
     74c:	f6 cf       	rjmp	.-20     	; 0x73a <modbusValue()+0x8c>
     74e:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <modBuffer+0x2>
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	dc 01       	movw	r26, r24
     756:	43 e0       	ldi	r20, 0x03	; 3
     758:	aa 0f       	add	r26, r26
     75a:	bb 1f       	adc	r27, r27
     75c:	4a 95       	dec	r20
     75e:	e1 f7       	brne	.-8      	; 0x758 <modbusValue()+0xaa>
     760:	e8 ee       	ldi	r30, 0xE8	; 232
     762:	f3 e0       	ldi	r31, 0x03	; 3
     764:	01 e0       	ldi	r16, 0x01	; 1
     766:	10 e0       	ldi	r17, 0x00	; 0
     768:	9f 01       	movw	r18, r30
     76a:	28 5e       	subi	r18, 0xE8	; 232
     76c:	33 40       	sbci	r19, 0x03	; 3
     76e:	28 17       	cp	r18, r24
     770:	39 07       	cpc	r19, r25
     772:	0c f0       	brlt	.+2      	; 0x776 <modbusValue()+0xc8>
     774:	50 c0       	rjmp	.+160    	; 0x816 <modbusValue()+0x168>
     776:	63 81       	ldd	r22, Z+3	; 0x03
     778:	ca e1       	ldi	r28, 0x1A	; 26
     77a:	d4 e0       	ldi	r29, 0x04	; 4
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	2a 17       	cp	r18, r26
     784:	3b 07       	cpc	r19, r27
     786:	0c f0       	brlt	.+2      	; 0x78a <modbusValue()+0xdc>
     788:	44 c0       	rjmp	.+136    	; 0x812 <modbusValue()+0x164>
     78a:	a8 01       	movw	r20, r16
     78c:	02 2e       	mov	r0, r18
     78e:	02 c0       	rjmp	.+4      	; 0x794 <modbusValue()+0xe6>
     790:	44 0f       	add	r20, r20
     792:	55 1f       	adc	r21, r21
     794:	0a 94       	dec	r0
     796:	e2 f7       	brpl	.-8      	; 0x790 <modbusValue()+0xe2>
     798:	46 23       	and	r20, r22
     79a:	57 23       	and	r21, r23
     79c:	02 2e       	mov	r0, r18
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <modbusValue()+0xf6>
     7a0:	55 95       	asr	r21
     7a2:	47 95       	ror	r20
     7a4:	0a 94       	dec	r0
     7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <modbusValue()+0xf2>
     7a8:	49 93       	st	Y+, r20
     7aa:	2f 5f       	subi	r18, 0xFF	; 255
     7ac:	3f 4f       	sbci	r19, 0xFF	; 255
     7ae:	e9 cf       	rjmp	.-46     	; 0x782 <modbusValue()+0xd4>
     7b0:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <modBuffer+0x2>
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	dc 01       	movw	r26, r24
     7b8:	33 e0       	ldi	r19, 0x03	; 3
     7ba:	aa 0f       	add	r26, r26
     7bc:	bb 1f       	adc	r27, r27
     7be:	3a 95       	dec	r19
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <modbusValue()+0x10c>
     7c2:	e8 ee       	ldi	r30, 0xE8	; 232
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	01 e0       	ldi	r16, 0x01	; 1
     7c8:	10 e0       	ldi	r17, 0x00	; 0
     7ca:	9f 01       	movw	r18, r30
     7cc:	28 5e       	subi	r18, 0xE8	; 232
     7ce:	33 40       	sbci	r19, 0x03	; 3
     7d0:	28 17       	cp	r18, r24
     7d2:	39 07       	cpc	r19, r25
     7d4:	04 f5       	brge	.+64     	; 0x816 <modbusValue()+0x168>
     7d6:	63 81       	ldd	r22, Z+3	; 0x03
     7d8:	ca e1       	ldi	r28, 0x1A	; 26
     7da:	d4 e0       	ldi	r29, 0x04	; 4
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	2a 17       	cp	r18, r26
     7e4:	3b 07       	cpc	r19, r27
     7e6:	9c f4       	brge	.+38     	; 0x80e <modbusValue()+0x160>
     7e8:	a8 01       	movw	r20, r16
     7ea:	02 2e       	mov	r0, r18
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <modbusValue()+0x144>
     7ee:	44 0f       	add	r20, r20
     7f0:	55 1f       	adc	r21, r21
     7f2:	0a 94       	dec	r0
     7f4:	e2 f7       	brpl	.-8      	; 0x7ee <modbusValue()+0x140>
     7f6:	46 23       	and	r20, r22
     7f8:	57 23       	and	r21, r23
     7fa:	02 2e       	mov	r0, r18
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <modbusValue()+0x154>
     7fe:	55 95       	asr	r21
     800:	47 95       	ror	r20
     802:	0a 94       	dec	r0
     804:	e2 f7       	brpl	.-8      	; 0x7fe <modbusValue()+0x150>
     806:	49 93       	st	Y+, r20
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
     80c:	ea cf       	rjmp	.-44     	; 0x7e2 <modbusValue()+0x134>
     80e:	31 96       	adiw	r30, 0x01	; 1
     810:	dc cf       	rjmp	.-72     	; 0x7ca <modbusValue()+0x11c>
     812:	31 96       	adiw	r30, 0x01	; 1
     814:	a9 cf       	rjmp	.-174    	; 0x768 <modbusValue()+0xba>
     816:	8a 9f       	mul	r24, r26
     818:	90 01       	movw	r18, r0
     81a:	8b 9f       	mul	r24, r27
     81c:	30 0d       	add	r19, r0
     81e:	9a 9f       	mul	r25, r26
     820:	30 0d       	add	r19, r0
     822:	11 24       	eor	r1, r1
     824:	30 93 e1 02 	sts	0x02E1, r19	; 0x8002e1 <lengthCounter+0x1>
     828:	20 93 e0 02 	sts	0x02E0, r18	; 0x8002e0 <lengthCounter>
     82c:	23 e0       	ldi	r18, 0x03	; 3
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	2a 95       	dec	r18
     834:	e1 f7       	brne	.-8      	; 0x82e <modbusValue()+0x180>
     836:	0e 94 c2 02 	call	0x584	; 0x584 <modbusPrint(int)>
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <slaveReg>
     840:	0e 94 4f 03 	call	0x69e	; 0x69e <clrmodBuffer()>
     844:	8a e1       	ldi	r24, 0x1A	; 26
     846:	94 e0       	ldi	r25, 0x04	; 4
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret
     852:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <lengthCounter+0x1>
     856:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <lengthCounter>
     85a:	ed cf       	rjmp	.-38     	; 0x836 <modbusValue()+0x188>
     85c:	c1 e0       	ldi	r28, 0x01	; 1
     85e:	c0 93 1a 04 	sts	0x041A, r28	; 0x80041a <value>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 c2 02 	call	0x584	; 0x584 <modbusPrint(int)>
     86a:	c0 93 e2 02 	sts	0x02E2, r28	; 0x8002e2 <slaveReg>
     86e:	e8 cf       	rjmp	.-48     	; 0x840 <modbusValue()+0x192>

00000870 <CRC16_modbus(unsigned char*, int)>:
_Z12CRC16_modbusPhi():
     870:	ac 01       	movw	r20, r24
     872:	fc 01       	movw	r30, r24
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	9f ef       	ldi	r25, 0xFF	; 255
     878:	9f 01       	movw	r18, r30
     87a:	24 1b       	sub	r18, r20
     87c:	35 0b       	sbc	r19, r21
     87e:	26 17       	cp	r18, r22
     880:	37 07       	cpc	r19, r23
     882:	9c f4       	brge	.+38     	; 0x8aa <CRC16_modbus(unsigned char*, int)+0x3a>
     884:	21 91       	ld	r18, Z+
     886:	82 27       	eor	r24, r18
     888:	28 e0       	ldi	r18, 0x08	; 8
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	dc 01       	movw	r26, r24
     88e:	a1 70       	andi	r26, 0x01	; 1
     890:	bb 27       	eor	r27, r27
     892:	96 95       	lsr	r25
     894:	87 95       	ror	r24
     896:	ab 2b       	or	r26, r27
     898:	21 f0       	breq	.+8      	; 0x8a2 <CRC16_modbus(unsigned char*, int)+0x32>
     89a:	a1 e0       	ldi	r26, 0x01	; 1
     89c:	8a 27       	eor	r24, r26
     89e:	a0 ea       	ldi	r26, 0xA0	; 160
     8a0:	9a 27       	eor	r25, r26
     8a2:	21 50       	subi	r18, 0x01	; 1
     8a4:	31 09       	sbc	r19, r1
     8a6:	91 f7       	brne	.-28     	; 0x88c <CRC16_modbus(unsigned char*, int)+0x1c>
     8a8:	e7 cf       	rjmp	.-50     	; 0x878 <CRC16_modbus(unsigned char*, int)+0x8>
     8aa:	08 95       	ret

000008ac <CRC16_xmodem(char*, int)>:
_Z12CRC16_xmodemPci():
     8ac:	fc 01       	movw	r30, r24
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	71 09       	sbc	r23, r1
     8b6:	77 fd       	sbrc	r23, 7
     8b8:	18 c0       	rjmp	.+48     	; 0x8ea <CRC16_xmodem(char*, int)+0x3e>
     8ba:	21 91       	ld	r18, Z+
     8bc:	02 2e       	mov	r0, r18
     8be:	00 0c       	add	r0, r0
     8c0:	33 0b       	sbc	r19, r19
     8c2:	32 2f       	mov	r19, r18
     8c4:	22 27       	eor	r18, r18
     8c6:	82 27       	eor	r24, r18
     8c8:	93 27       	eor	r25, r19
     8ca:	28 e0       	ldi	r18, 0x08	; 8
     8cc:	ac 01       	movw	r20, r24
     8ce:	44 0f       	add	r20, r20
     8d0:	55 1f       	adc	r21, r21
     8d2:	97 ff       	sbrs	r25, 7
     8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <CRC16_xmodem(char*, int)+0x3a>
     8d6:	ca 01       	movw	r24, r20
     8d8:	31 e2       	ldi	r19, 0x21	; 33
     8da:	83 27       	eor	r24, r19
     8dc:	30 e1       	ldi	r19, 0x10	; 16
     8de:	93 27       	eor	r25, r19
     8e0:	21 50       	subi	r18, 0x01	; 1
     8e2:	a1 f7       	brne	.-24     	; 0x8cc <CRC16_xmodem(char*, int)+0x20>
     8e4:	e6 cf       	rjmp	.-52     	; 0x8b2 <CRC16_xmodem(char*, int)+0x6>
     8e6:	ca 01       	movw	r24, r20
     8e8:	fb cf       	rjmp	.-10     	; 0x8e0 <CRC16_xmodem(char*, int)+0x34>
     8ea:	08 95       	ret

000008ec <LED_status()>:
_Z10LED_statusv():
     8ec:	6e e1       	ldi	r22, 0x1E	; 30
     8ee:	72 e0       	ldi	r23, 0x02	; 2
     8f0:	88 ef       	ldi	r24, 0xF8	; 248
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <strstr>
     8f8:	89 2b       	or	r24, r25
     8fa:	41 f1       	breq	.+80     	; 0x94c <LED_status()+0x60>
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	80 e4       	ldi	r24, 0x40	; 64
     900:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     904:	6d e7       	ldi	r22, 0x7D	; 125
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	80 e4       	ldi	r24, 0x40	; 64
     914:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     918:	6d e7       	ldi	r22, 0x7D	; 125
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	80 e4       	ldi	r24, 0x40	; 64
     928:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     92c:	6d e7       	ldi	r22, 0x7D	; 125
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	80 e4       	ldi	r24, 0x40	; 64
     93c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     940:	6d e7       	ldi	r22, 0x7D	; 125
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <delay>
     94c:	64 e2       	ldi	r22, 0x24	; 36
     94e:	72 e0       	ldi	r23, 0x02	; 2
     950:	88 ef       	ldi	r24, 0xF8	; 248
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <strstr>
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	89 2b       	or	r24, r25
     95c:	01 f1       	breq	.+64     	; 0x99e <LED_status()+0xb2>
     95e:	82 e4       	ldi	r24, 0x42	; 66
     960:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     964:	6d e7       	ldi	r22, 0x7D	; 125
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	82 e4       	ldi	r24, 0x42	; 66
     974:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     978:	6d e7       	ldi	r22, 0x7D	; 125
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	82 e4       	ldi	r24, 0x42	; 66
     988:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     98c:	6d e7       	ldi	r22, 0x7D	; 125
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	82 e4       	ldi	r24, 0x42	; 66
     99c:	cf cf       	rjmp	.-98     	; 0x93c <LED_status()+0x50>
     99e:	82 e4       	ldi	r24, 0x42	; 66
     9a0:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     9a4:	6a ef       	ldi	r22, 0xFA	; 250
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	82 e4       	ldi	r24, 0x42	; 66
     9b4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     9b8:	6a ef       	ldi	r22, 0xFA	; 250
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	82 e4       	ldi	r24, 0x42	; 66
     9c8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     9cc:	6a ef       	ldi	r22, 0xFA	; 250
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	82 e4       	ldi	r24, 0x42	; 66
     9dc:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     9e0:	6a ef       	ldi	r22, 0xFA	; 250
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	af cf       	rjmp	.-162    	; 0x948 <LED_status()+0x5c>

000009ea <ATcomcheck(int)>:
_Z10ATcomchecki():
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	bc 01       	movw	r22, r24
     9f4:	99 0f       	add	r25, r25
     9f6:	88 0b       	sbc	r24, r24
     9f8:	99 0b       	sbc	r25, r25
     9fa:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     9fe:	89 ee       	ldi	r24, 0xE9	; 233
     a00:	94 e0       	ldi	r25, 0x04	; 4
     a02:	0e 94 ac 08 	call	0x1158	; 0x1158 <HardwareSerial::available()>
     a06:	89 2b       	or	r24, r25
     a08:	99 f0       	breq	.+38     	; 0xa30 <ATcomcheck(int)+0x46>
     a0a:	89 ee       	ldi	r24, 0xE9	; 233
     a0c:	94 e0       	ldi	r25, 0x04	; 4
     a0e:	0e 94 ac 08 	call	0x1158	; 0x1158 <HardwareSerial::available()>
     a12:	8c 01       	movw	r16, r24
     a14:	c8 ef       	ldi	r28, 0xF8	; 248
     a16:	d2 e0       	ldi	r29, 0x02	; 2
     a18:	ce 01       	movw	r24, r28
     a1a:	88 5f       	subi	r24, 0xF8	; 248
     a1c:	92 40       	sbci	r25, 0x02	; 2
     a1e:	80 17       	cp	r24, r16
     a20:	91 07       	cpc	r25, r17
     a22:	34 f4       	brge	.+12     	; 0xa30 <ATcomcheck(int)+0x46>
     a24:	89 ee       	ldi	r24, 0xE9	; 233
     a26:	94 e0       	ldi	r25, 0x04	; 4
     a28:	0e 94 c6 08 	call	0x118c	; 0x118c <HardwareSerial::read()>
     a2c:	89 93       	st	Y+, r24
     a2e:	f4 cf       	rjmp	.-24     	; 0xa18 <ATcomcheck(int)+0x2e>
     a30:	64 e2       	ldi	r22, 0x24	; 36
     a32:	72 e0       	ldi	r23, 0x02	; 2
     a34:	88 ef       	ldi	r24, 0xF8	; 248
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <strstr>
     a3c:	c0 e0       	ldi	r28, 0x00	; 0
     a3e:	89 2b       	or	r24, r25
     a40:	69 f0       	breq	.+26     	; 0xa5c <ATcomcheck(int)+0x72>
     a42:	6b e7       	ldi	r22, 0x7B	; 123
     a44:	71 e0       	ldi	r23, 0x01	; 1
     a46:	8c e4       	ldi	r24, 0x4C	; 76
     a48:	94 e0       	ldi	r25, 0x04	; 4
     a4a:	0e 94 00 0c 	call	0x1800	; 0x1800 <Print::print(__FlashStringHelper const*)>
     a4e:	64 e2       	ldi	r22, 0x24	; 36
     a50:	72 e0       	ldi	r23, 0x02	; 2
     a52:	8c e4       	ldi	r24, 0x4C	; 76
     a54:	94 e0       	ldi	r25, 0x04	; 4
     a56:	0e 94 49 0c 	call	0x1892	; 0x1892 <Print::println(char const*)>
     a5a:	c1 e0       	ldi	r28, 0x01	; 1
     a5c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     a60:	8c 2f       	mov	r24, r28
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <siminit()>:
_Z7siminitv():
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     a74:	88 23       	and	r24, r24
     a76:	c1 f0       	breq	.+48     	; 0xaa8 <siminit()+0x3c>
     a78:	c4 e0       	ldi	r28, 0x04	; 4
     a7a:	d0 e0       	ldi	r29, 0x00	; 0
     a7c:	68 e7       	ldi	r22, 0x78	; 120
     a7e:	71 e0       	ldi	r23, 0x01	; 1
     a80:	89 ee       	ldi	r24, 0xE9	; 233
     a82:	94 e0       	ldi	r25, 0x04	; 4
     a84:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     a88:	8c e2       	ldi	r24, 0x2C	; 44
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <ATcomcheck(int)>
     a90:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <start>
     a94:	81 11       	cpse	r24, r1
     a96:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
     a9a:	21 97       	sbiw	r28, 0x01	; 1
     a9c:	79 f7       	brne	.-34     	; 0xa7c <siminit()+0x10>
     a9e:	81 11       	cpse	r24, r1
     aa0:	e7 cf       	rjmp	.-50     	; 0xa70 <siminit()+0x4>
     aa2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <simpow()>
     aa6:	e4 cf       	rjmp	.-56     	; 0xa70 <siminit()+0x4>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <clrsimBuffer()>

00000ab6 <simread()>:
_Z7simreadv():
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	68 eb       	ldi	r22, 0xB8	; 184
     ac0:	7b e0       	ldi	r23, 0x0B	; 11
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     aca:	89 ee       	ldi	r24, 0xE9	; 233
     acc:	94 e0       	ldi	r25, 0x04	; 4
     ace:	0e 94 ac 08 	call	0x1158	; 0x1158 <HardwareSerial::available()>
     ad2:	89 2b       	or	r24, r25
     ad4:	99 f0       	breq	.+38     	; 0xafc <simread()+0x46>
     ad6:	89 ee       	ldi	r24, 0xE9	; 233
     ad8:	94 e0       	ldi	r25, 0x04	; 4
     ada:	0e 94 ac 08 	call	0x1158	; 0x1158 <HardwareSerial::available()>
     ade:	8c 01       	movw	r16, r24
     ae0:	c8 ef       	ldi	r28, 0xF8	; 248
     ae2:	d2 e0       	ldi	r29, 0x02	; 2
     ae4:	ce 01       	movw	r24, r28
     ae6:	88 5f       	subi	r24, 0xF8	; 248
     ae8:	92 40       	sbci	r25, 0x02	; 2
     aea:	80 17       	cp	r24, r16
     aec:	91 07       	cpc	r25, r17
     aee:	6c f7       	brge	.-38     	; 0xaca <simread()+0x14>
     af0:	89 ee       	ldi	r24, 0xE9	; 233
     af2:	94 e0       	ldi	r25, 0x04	; 4
     af4:	0e 94 c6 08 	call	0x118c	; 0x118c <HardwareSerial::read()>
     af8:	89 93       	st	Y+, r24
     afa:	f4 cf       	rjmp	.-24     	; 0xae4 <simread()+0x2e>
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	08 95       	ret

00000b06 <getIMEI()>:
_Z7getIMEIv():
     b06:	6b e3       	ldi	r22, 0x3B	; 59
     b08:	72 e0       	ldi	r23, 0x02	; 2
     b0a:	89 ee       	ldi	r24, 0xE9	; 233
     b0c:	94 e0       	ldi	r25, 0x04	; 4
     b0e:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     b12:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     b16:	a1 e0       	ldi	r26, 0x01	; 1
     b18:	b3 e0       	ldi	r27, 0x03	; 3
     b1a:	e4 ee       	ldi	r30, 0xE4	; 228
     b1c:	f2 e0       	ldi	r31, 0x02	; 2
     b1e:	8d 91       	ld	r24, X+
     b20:	81 93       	st	Z+, r24
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	e3 3f       	cpi	r30, 0xF3	; 243
     b26:	f8 07       	cpc	r31, r24
     b28:	d1 f7       	brne	.-12     	; 0xb1e <getIMEI()+0x18>
     b2a:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <clrsimBuffer()>

00000b2e <Sim_Connect()>:
_Z11Sim_Connectv():
     b2e:	64 e3       	ldi	r22, 0x34	; 52
     b30:	72 e0       	ldi	r23, 0x02	; 2
     b32:	89 ee       	ldi	r24, 0xE9	; 233
     b34:	94 e0       	ldi	r25, 0x04	; 4
     b36:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     b3a:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     b3e:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     b42:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     b46:	6a e2       	ldi	r22, 0x2A	; 42
     b48:	72 e0       	ldi	r23, 0x02	; 2
     b4a:	89 ee       	ldi	r24, 0xE9	; 233
     b4c:	94 e0       	ldi	r25, 0x04	; 4
     b4e:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     b52:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     b56:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     b5a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     b5e:	69 e0       	ldi	r22, 0x09	; 9
     b60:	72 e0       	ldi	r23, 0x02	; 2
     b62:	89 ee       	ldi	r24, 0xE9	; 233
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     b6a:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     b6e:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     b72:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     b76:	6f ef       	ldi	r22, 0xFF	; 255
     b78:	71 e0       	ldi	r23, 0x01	; 1
     b7a:	89 ee       	ldi	r24, 0xE9	; 233
     b7c:	94 e0       	ldi	r25, 0x04	; 4
     b7e:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     b82:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     b86:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     b8a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     b8e:	66 ef       	ldi	r22, 0xF6	; 246
     b90:	71 e0       	ldi	r23, 0x01	; 1
     b92:	89 ee       	ldi	r24, 0xE9	; 233
     b94:	94 e0       	ldi	r25, 0x04	; 4
     b96:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     b9a:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     b9e:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     ba2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     ba6:	6c ee       	ldi	r22, 0xEC	; 236
     ba8:	71 e0       	ldi	r23, 0x01	; 1
     baa:	89 ee       	ldi	r24, 0xE9	; 233
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     bb2:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     bb6:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     bba:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     bbe:	62 ee       	ldi	r22, 0xE2	; 226
     bc0:	71 e0       	ldi	r23, 0x01	; 1
     bc2:	89 ee       	ldi	r24, 0xE9	; 233
     bc4:	94 e0       	ldi	r25, 0x04	; 4
     bc6:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     bca:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     bce:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     bd2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     bd6:	65 ed       	ldi	r22, 0xD5	; 213
     bd8:	71 e0       	ldi	r23, 0x01	; 1
     bda:	89 ee       	ldi	r24, 0xE9	; 233
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     be2:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     be6:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     bea:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     bee:	6b ec       	ldi	r22, 0xCB	; 203
     bf0:	71 e0       	ldi	r23, 0x01	; 1
     bf2:	89 ee       	ldi	r24, 0xE9	; 233
     bf4:	94 e0       	ldi	r25, 0x04	; 4
     bf6:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     bfa:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     bfe:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     c02:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     c06:	60 ea       	ldi	r22, 0xA0	; 160
     c08:	71 e0       	ldi	r23, 0x01	; 1
     c0a:	89 ee       	ldi	r24, 0xE9	; 233
     c0c:	94 e0       	ldi	r25, 0x04	; 4
     c0e:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     c12:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     c16:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     c1a:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <clrsimBuffer()>

00000c1e <setup>:
setup():
     c1e:	e1 e6       	ldi	r30, 0x61	; 97
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 e8       	ldi	r24, 0x80	; 128
     c24:	80 83       	st	Z, r24
     c26:	10 82       	st	Z, r1
_ZN14HardwareSerial5beginEm():
     c28:	26 e0       	ldi	r18, 0x06	; 6
     c2a:	40 e8       	ldi	r20, 0x80	; 128
     c2c:	55 e2       	ldi	r21, 0x25	; 37
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	89 ee       	ldi	r24, 0xE9	; 233
     c34:	94 e0       	ldi	r25, 0x04	; 4
     c36:	0e 94 ad 09 	call	0x135a	; 0x135a <HardwareSerial::begin(unsigned long, unsigned char)>
     c3a:	26 e0       	ldi	r18, 0x06	; 6
     c3c:	40 e8       	ldi	r20, 0x80	; 128
     c3e:	55 e2       	ldi	r21, 0x25	; 37
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	86 e8       	ldi	r24, 0x86	; 134
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	0e 94 ad 09 	call	0x135a	; 0x135a <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	82 e4       	ldi	r24, 0x42	; 66
     c50:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <pinMode>
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	8b e2       	ldi	r24, 0x2B	; 43
     c58:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <pinMode>
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	8a e2       	ldi	r24, 0x2A	; 42
     c60:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <pinMode>
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	81 e4       	ldi	r24, 0x41	; 65
     c68:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <pinMode>
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	80 e4       	ldi	r24, 0x40	; 64
     c70:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <pinMode>
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	83 e4       	ldi	r24, 0x43	; 67
     c78:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <pinMode>
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	8b e2       	ldi	r24, 0x2B	; 43
     c80:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	8a e2       	ldi	r24, 0x2A	; 42
     c88:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <digitalWrite>
     c8c:	68 ee       	ldi	r22, 0xE8	; 232
     c8e:	73 e0       	ldi	r23, 0x03	; 3
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     c98:	0e 94 36 05 	call	0xa6c	; 0xa6c <siminit()>
     c9c:	0e 94 83 05 	call	0xb06	; 0xb06 <getIMEI()>
     ca0:	0e 94 97 05 	call	0xb2e	; 0xb2e <Sim_Connect()>
     ca4:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <clrsimBuffer()>

00000ca8 <Sim_send(short*, int)>:
_Z8Sim_sendPsi():
     ca8:	2f 92       	push	r2
     caa:	3f 92       	push	r3
     cac:	4f 92       	push	r4
     cae:	5f 92       	push	r5
     cb0:	6f 92       	push	r6
     cb2:	7f 92       	push	r7
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	ce 56       	subi	r28, 0x6E	; 110
     cd2:	d1 09       	sbc	r29, r1
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	5c 01       	movw	r10, r24
     ce0:	1b 01       	movw	r2, r22
     ce2:	7e 01       	movw	r14, r28
     ce4:	27 e4       	ldi	r18, 0x47	; 71
     ce6:	e2 0e       	add	r14, r18
     ce8:	f1 1c       	adc	r15, r1
     cea:	8d e0       	ldi	r24, 0x0D	; 13
     cec:	e8 e0       	ldi	r30, 0x08	; 8
     cee:	f2 e0       	ldi	r31, 0x02	; 2
     cf0:	d7 01       	movw	r26, r14
     cf2:	01 90       	ld	r0, Z+
     cf4:	0d 92       	st	X+, r0
     cf6:	8a 95       	dec	r24
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <Sim_send(short*, int)+0x4a>
     cfa:	f7 01       	movw	r30, r14
     cfc:	3d 96       	adiw	r30, 0x0d	; 13
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	df 01       	movw	r26, r30
     d02:	1d 92       	st	X+, r1
     d04:	8a 95       	dec	r24
     d06:	e9 f7       	brne	.-6      	; 0xd02 <Sim_send(short*, int)+0x5a>
     d08:	8e 01       	movw	r16, r28
     d0a:	0f 5f       	subi	r16, 0xFF	; 255
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	82 e3       	ldi	r24, 0x32	; 50
     d10:	f8 01       	movw	r30, r16
     d12:	11 92       	st	Z+, r1
     d14:	8a 95       	dec	r24
     d16:	e9 f7       	brne	.-6      	; 0xd12 <Sim_send(short*, int)+0x6a>
     d18:	2e 01       	movw	r4, r28
     d1a:	f5 e6       	ldi	r31, 0x65	; 101
     d1c:	4f 0e       	add	r4, r31
     d1e:	51 1c       	adc	r5, r1
     d20:	8a e0       	ldi	r24, 0x0A	; 10
     d22:	d2 01       	movw	r26, r4
     d24:	e8 2f       	mov	r30, r24
     d26:	1d 92       	st	X+, r1
     d28:	ea 95       	dec	r30
     d2a:	e9 f7       	brne	.-6      	; 0xd26 <Sim_send(short*, int)+0x7e>
     d2c:	6e 01       	movw	r12, r28
     d2e:	fb e5       	ldi	r31, 0x5B	; 91
     d30:	cf 0e       	add	r12, r31
     d32:	d1 1c       	adc	r13, r1
     d34:	d6 01       	movw	r26, r12
     d36:	1d 92       	st	X+, r1
     d38:	8a 95       	dec	r24
     d3a:	e9 f7       	brne	.-6      	; 0xd36 <Sim_send(short*, int)+0x8e>
     d3c:	84 ee       	ldi	r24, 0xE4	; 228
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	9f 93       	push	r25
     d42:	8f 93       	push	r24
     d44:	1f 93       	push	r17
     d46:	0f 93       	push	r16
     d48:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     d4c:	66 e0       	ldi	r22, 0x06	; 6
     d4e:	72 e0       	ldi	r23, 0x02	; 2
     d50:	c8 01       	movw	r24, r16
     d52:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <strcat>
     d56:	63 e0       	ldi	r22, 0x03	; 3
     d58:	72 e0       	ldi	r23, 0x02	; 2
     d5a:	c8 01       	movw	r24, r16
     d5c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <strcat>
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	72 e0       	ldi	r23, 0x02	; 2
     d64:	c8 01       	movw	r24, r16
     d66:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <strcat>
     d6a:	35 01       	movw	r6, r10
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	b1 2c       	mov	r11, r1
     d76:	a1 2c       	mov	r10, r1
     d78:	97 e2       	ldi	r25, 0x27	; 39
     d7a:	89 2e       	mov	r8, r25
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	99 2e       	mov	r9, r25
     d80:	a2 14       	cp	r10, r2
     d82:	b3 04       	cpc	r11, r3
     d84:	e4 f4       	brge	.+56     	; 0xdbe <Sim_send(short*, int)+0x116>
     d86:	f3 01       	movw	r30, r6
     d88:	80 81       	ld	r24, Z
     d8a:	91 81       	ldd	r25, Z+1	; 0x01
     d8c:	f2 e0       	ldi	r31, 0x02	; 2
     d8e:	6f 0e       	add	r6, r31
     d90:	71 1c       	adc	r7, r1
     d92:	9f 93       	push	r25
     d94:	8f 93       	push	r24
     d96:	9f 92       	push	r9
     d98:	8f 92       	push	r8
     d9a:	5f 92       	push	r5
     d9c:	4f 92       	push	r4
     d9e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     da2:	b2 01       	movw	r22, r4
     da4:	c8 01       	movw	r24, r16
     da6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <strcat>
     daa:	2f ef       	ldi	r18, 0xFF	; 255
     dac:	a2 1a       	sub	r10, r18
     dae:	b2 0a       	sbc	r11, r18
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	e1 cf       	rjmp	.-62     	; 0xd80 <Sim_send(short*, int)+0xd8>
     dbe:	6a e2       	ldi	r22, 0x2A	; 42
     dc0:	72 e0       	ldi	r23, 0x02	; 2
     dc2:	c8 01       	movw	r24, r16
     dc4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <strcat>
     dc8:	f8 01       	movw	r30, r16
     dca:	01 90       	ld	r0, Z+
     dcc:	00 20       	and	r0, r0
     dce:	e9 f7       	brne	.-6      	; 0xdca <Sim_send(short*, int)+0x122>
     dd0:	31 97       	sbiw	r30, 0x01	; 1
     dd2:	bf 01       	movw	r22, r30
     dd4:	60 1b       	sub	r22, r16
     dd6:	71 0b       	sbc	r23, r17
     dd8:	c8 01       	movw	r24, r16
     dda:	0e 94 56 04 	call	0x8ac	; 0x8ac <CRC16_xmodem(char*, int)>
     dde:	9f 93       	push	r25
     de0:	8f 93       	push	r24
     de2:	8d e2       	ldi	r24, 0x2D	; 45
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	9f 93       	push	r25
     de8:	8f 93       	push	r24
     dea:	df 92       	push	r13
     dec:	cf 92       	push	r12
     dee:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	b1 2c       	mov	r11, r1
     e00:	a1 2c       	mov	r10, r1
     e02:	85 e0       	ldi	r24, 0x05	; 5
     e04:	88 2e       	mov	r8, r24
     e06:	91 2c       	mov	r9, r1
     e08:	f6 01       	movw	r30, r12
     e0a:	01 90       	ld	r0, Z+
     e0c:	00 20       	and	r0, r0
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <Sim_send(short*, int)+0x162>
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	ec 19       	sub	r30, r12
     e14:	fd 09       	sbc	r31, r13
     e16:	c4 01       	movw	r24, r8
     e18:	8e 1b       	sub	r24, r30
     e1a:	9f 0b       	sbc	r25, r31
     e1c:	a8 16       	cp	r10, r24
     e1e:	b9 06       	cpc	r11, r25
     e20:	48 f4       	brcc	.+18     	; 0xe34 <Sim_send(short*, int)+0x18c>
     e22:	6b e2       	ldi	r22, 0x2B	; 43
     e24:	72 e0       	ldi	r23, 0x02	; 2
     e26:	c8 01       	movw	r24, r16
     e28:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <strcat>
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	a8 1a       	sub	r10, r24
     e30:	b8 0a       	sbc	r11, r24
     e32:	ea cf       	rjmp	.-44     	; 0xe08 <Sim_send(short*, int)+0x160>
     e34:	b6 01       	movw	r22, r12
     e36:	c8 01       	movw	r24, r16
     e38:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <strcat>
     e3c:	f8 01       	movw	r30, r16
     e3e:	01 90       	ld	r0, Z+
     e40:	00 20       	and	r0, r0
     e42:	e9 f7       	brne	.-6      	; 0xe3e <Sim_send(short*, int)+0x196>
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	af 01       	movw	r20, r30
     e48:	40 1b       	sub	r20, r16
     e4a:	51 0b       	sbc	r21, r17
_ZN5Print5writeEPKcj():
     e4c:	b8 01       	movw	r22, r16
     e4e:	8c e4       	ldi	r24, 0x4C	; 76
     e50:	94 e0       	ldi	r25, 0x04	; 4
     e52:	0e 94 c4 0b 	call	0x1788	; 0x1788 <Print::write(unsigned char const*, unsigned int)>
_Z8Sim_sendPsi():
     e56:	8c e4       	ldi	r24, 0x4C	; 76
     e58:	94 e0       	ldi	r25, 0x04	; 4
     e5a:	0e 94 33 0c 	call	0x1866	; 0x1866 <Print::println()>
     e5e:	f8 01       	movw	r30, r16
     e60:	01 90       	ld	r0, Z+
     e62:	00 20       	and	r0, r0
     e64:	e9 f7       	brne	.-6      	; 0xe60 <Sim_send(short*, int)+0x1b8>
     e66:	31 97       	sbiw	r30, 0x01	; 1
     e68:	e0 1b       	sub	r30, r16
     e6a:	f1 0b       	sbc	r31, r17
     e6c:	ff 93       	push	r31
     e6e:	ef 93       	push	r30
     e70:	8d e2       	ldi	r24, 0x2D	; 45
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	9f 93       	push	r25
     e76:	8f 93       	push	r24
     e78:	6e 01       	movw	r12, r28
     e7a:	93 e3       	ldi	r25, 0x33	; 51
     e7c:	c9 0e       	add	r12, r25
     e7e:	d1 1c       	adc	r13, r1
     e80:	df 92       	push	r13
     e82:	cf 92       	push	r12
     e84:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     e88:	b6 01       	movw	r22, r12
     e8a:	c7 01       	movw	r24, r14
     e8c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <strcat>
     e90:	f7 01       	movw	r30, r14
     e92:	01 90       	ld	r0, Z+
     e94:	00 20       	and	r0, r0
     e96:	e9 f7       	brne	.-6      	; 0xe92 <Sim_send(short*, int)+0x1ea>
     e98:	31 97       	sbiw	r30, 0x01	; 1
     e9a:	af 01       	movw	r20, r30
     e9c:	4e 19       	sub	r20, r14
     e9e:	5f 09       	sbc	r21, r15
_ZN5Print5writeEPKcj():
     ea0:	b7 01       	movw	r22, r14
     ea2:	89 ee       	ldi	r24, 0xE9	; 233
     ea4:	94 e0       	ldi	r25, 0x04	; 4
     ea6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <Print::write(unsigned char const*, unsigned int)>
_Z8Sim_sendPsi():
     eaa:	89 ee       	ldi	r24, 0xE9	; 233
     eac:	94 e0       	ldi	r25, 0x04	; 4
     eae:	0e 94 33 0c 	call	0x1866	; 0x1866 <Print::println()>
     eb2:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     eb6:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     eba:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     ebe:	f8 01       	movw	r30, r16
     ec0:	01 90       	ld	r0, Z+
     ec2:	00 20       	and	r0, r0
     ec4:	e9 f7       	brne	.-6      	; 0xec0 <Sim_send(short*, int)+0x218>
     ec6:	31 97       	sbiw	r30, 0x01	; 1
     ec8:	af 01       	movw	r20, r30
     eca:	40 1b       	sub	r20, r16
     ecc:	51 0b       	sbc	r21, r17
_ZN5Print5writeEPKcj():
     ece:	b8 01       	movw	r22, r16
     ed0:	89 ee       	ldi	r24, 0xE9	; 233
     ed2:	94 e0       	ldi	r25, 0x04	; 4
     ed4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <Print::write(unsigned char const*, unsigned int)>
_Z8Sim_sendPsi():
     ed8:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     edc:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     ee0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     ee4:	65 e9       	ldi	r22, 0x95	; 149
     ee6:	71 e0       	ldi	r23, 0x01	; 1
     ee8:	89 ee       	ldi	r24, 0xE9	; 233
     eea:	94 e0       	ldi	r25, 0x04	; 4
     eec:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     ef0:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     ef4:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     ef8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <clrsimBuffer()>
     efc:	66 e8       	ldi	r22, 0x86	; 134
     efe:	71 e0       	ldi	r23, 0x01	; 1
     f00:	89 ee       	ldi	r24, 0xE9	; 233
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	0e 94 37 0c 	call	0x186e	; 0x186e <Print::println(__FlashStringHelper const*)>
     f08:	0e 94 5b 05 	call	0xab6	; 0xab6 <simread()>
     f0c:	0e 94 76 04 	call	0x8ec	; 0x8ec <LED_status()>
     f10:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <simReadData()>
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	c2 59       	subi	r28, 0x92	; 146
     f22:	df 4f       	sbci	r29, 0xFF	; 255
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	bf 90       	pop	r11
     f40:	af 90       	pop	r10
     f42:	9f 90       	pop	r9
     f44:	8f 90       	pop	r8
     f46:	7f 90       	pop	r7
     f48:	6f 90       	pop	r6
     f4a:	5f 90       	pop	r5
     f4c:	4f 90       	pop	r4
     f4e:	3f 90       	pop	r3
     f50:	2f 90       	pop	r2
     f52:	08 95       	ret

00000f54 <modbusread()>:
_Z10modbusreadv():
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	6c e2       	ldi	r22, 0x2C	; 44
     f5e:	71 e0       	ldi	r23, 0x01	; 1
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <delay>
     f68:	86 e8       	ldi	r24, 0x86	; 134
     f6a:	95 e0       	ldi	r25, 0x05	; 5
     f6c:	0e 94 ac 08 	call	0x1158	; 0x1158 <HardwareSerial::available()>
     f70:	89 2b       	or	r24, r25
     f72:	29 f1       	breq	.+74     	; 0xfbe <modbusread()+0x6a>
     f74:	86 e8       	ldi	r24, 0x86	; 134
     f76:	95 e0       	ldi	r25, 0x05	; 5
     f78:	0e 94 ac 08 	call	0x1158	; 0x1158 <HardwareSerial::available()>
     f7c:	8c 01       	movw	r16, r24
     f7e:	c8 ee       	ldi	r28, 0xE8	; 232
     f80:	d3 e0       	ldi	r29, 0x03	; 3
     f82:	ce 01       	movw	r24, r28
     f84:	88 5e       	subi	r24, 0xE8	; 232
     f86:	93 40       	sbci	r25, 0x03	; 3
     f88:	80 17       	cp	r24, r16
     f8a:	91 07       	cpc	r25, r17
     f8c:	9c f4       	brge	.+38     	; 0xfb4 <modbusread()+0x60>
     f8e:	86 e8       	ldi	r24, 0x86	; 134
     f90:	95 e0       	ldi	r25, 0x05	; 5
     f92:	0e 94 c6 08 	call	0x118c	; 0x118c <HardwareSerial::read()>
     f96:	89 93       	st	Y+, r24
     f98:	40 e1       	ldi	r20, 0x10	; 16
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	68 2f       	mov	r22, r24
     f9e:	8c e4       	ldi	r24, 0x4C	; 76
     fa0:	94 e0       	ldi	r25, 0x04	; 4
     fa2:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <Print::print(unsigned char, int)>
     fa6:	6c e1       	ldi	r22, 0x1C	; 28
     fa8:	72 e0       	ldi	r23, 0x02	; 2
     faa:	8c e4       	ldi	r24, 0x4C	; 76
     fac:	94 e0       	ldi	r25, 0x04	; 4
     fae:	0e 94 24 0c 	call	0x1848	; 0x1848 <Print::print(char const*)>
     fb2:	e7 cf       	rjmp	.-50     	; 0xf82 <modbusread()+0x2e>
     fb4:	8c e4       	ldi	r24, 0x4C	; 76
     fb6:	94 e0       	ldi	r25, 0x04	; 4
     fb8:	0e 94 33 0c 	call	0x1866	; 0x1866 <Print::println()>
     fbc:	d5 cf       	rjmp	.-86     	; 0xf68 <modbusread()+0x14>
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <readholdingregisters(unsigned char, short, short)>:
_Z20readholdingregistershss():
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	00 d0       	rcall	.+0      	; 0xfce <readholdingregisters(unsigned char, short, short)+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <readholdingregisters(unsigned char, short, short)+0x8>
     fd0:	1f 92       	push	r1
     fd2:	1f 92       	push	r1
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	83 e0       	ldi	r24, 0x03	; 3
     fdc:	8a 83       	std	Y+2, r24	; 0x02
     fde:	7b 83       	std	Y+3, r23	; 0x03
     fe0:	6c 83       	std	Y+4, r22	; 0x04
     fe2:	5d 83       	std	Y+5, r21	; 0x05
     fe4:	4e 83       	std	Y+6, r20	; 0x06
     fe6:	66 e0       	ldi	r22, 0x06	; 6
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	ce 01       	movw	r24, r28
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	0e 94 38 04 	call	0x870	; 0x870 <CRC16_modbus(unsigned char*, int)>
     ff2:	8f 83       	std	Y+7, r24	; 0x07
     ff4:	98 87       	std	Y+8, r25	; 0x08
     ff6:	48 e0       	ldi	r20, 0x08	; 8
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	be 01       	movw	r22, r28
     ffc:	6f 5f       	subi	r22, 0xFF	; 255
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	86 e8       	ldi	r24, 0x86	; 134
    1002:	95 e0       	ldi	r25, 0x05	; 5
    1004:	0e 94 c4 0b 	call	0x1788	; 0x1788 <Print::write(unsigned char const*, unsigned int)>
    1008:	0e 94 aa 07 	call	0xf54	; 0xf54 <modbusread()>
    100c:	28 96       	adiw	r28, 0x08	; 8
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

0000101e <writecoils(unsigned char, short, short, unsigned char*)>:
_Z10writecoilshssPh():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:703

void writecoils(byte slave, short adress, short qty, byte* out) { // Write multiple coils
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	e2 97       	sbiw	r28, 0x32	; 50
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	d9 01       	movw	r26, r18
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:709

  byte ADU[50];
  byte ADUsize = 0;
  int CRC;

  ADU[ADUsize++] = slave;
    103c:	89 83       	std	Y+1, r24	; 0x01
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:710
  ADU[ADUsize++] = 0x0F;
    103e:	8f e0       	ldi	r24, 0x0F	; 15
    1040:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:711
  ADU[ADUsize++] = highByte(adress);
    1042:	7b 83       	std	Y+3, r23	; 0x03
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:712
  ADU[ADUsize++] = lowByte(adress);
    1044:	6c 83       	std	Y+4, r22	; 0x04
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:713
  ADU[ADUsize++] = highByte(qty);
    1046:	5d 83       	std	Y+5, r21	; 0x05
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:714
  ADU[ADUsize++] = lowByte(qty);
    1048:	4e 83       	std	Y+6, r20	; 0x06
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:715
  ADU[ADUsize++] = (qty / 8) + ((qty % 8) != 0);            // Calculate number of bytes pr. bit qty e.g 2 = 1 byte, 8 = 1 byte, 11 = 2 bytes.
    104a:	ca 01       	movw	r24, r20
    104c:	57 fd       	sbrc	r21, 7
    104e:	07 96       	adiw	r24, 0x07	; 7
    1050:	23 e0       	ldi	r18, 0x03	; 3
    1052:	95 95       	asr	r25
    1054:	87 95       	ror	r24
    1056:	2a 95       	dec	r18
    1058:	e1 f7       	brne	.-8      	; 0x1052 <writecoils(unsigned char, short, short, unsigned char*)+0x34>
    105a:	47 70       	andi	r20, 0x07	; 7
    105c:	55 27       	eor	r21, r21
    105e:	01 e0       	ldi	r16, 0x01	; 1
    1060:	45 2b       	or	r20, r21
    1062:	09 f4       	brne	.+2      	; 0x1066 <writecoils(unsigned char, short, short, unsigned char*)+0x48>
    1064:	00 e0       	ldi	r16, 0x00	; 0
    1066:	20 2f       	mov	r18, r16
    1068:	28 0f       	add	r18, r24
    106a:	2f 83       	std	Y+7, r18	; 0x07
    106c:	bd 01       	movw	r22, r26
    106e:	37 e0       	ldi	r19, 0x07	; 7
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:717

  for (int i = 0; i < (qty / 8) + ((qty % 8) != 0); i++) {  // Put output array in bytes into the ADU
    1070:	08 0f       	add	r16, r24
    1072:	19 2f       	mov	r17, r25
    1074:	11 1d       	adc	r17, r1
    1076:	e3 2e       	mov	r14, r19
    1078:	f1 2c       	mov	r15, r1
    107a:	3f 5f       	subi	r19, 0xFF	; 255
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:717 (discriminator 3)
    107c:	cb 01       	movw	r24, r22
    107e:	8a 1b       	sub	r24, r26
    1080:	9b 0b       	sbc	r25, r27
    1082:	80 17       	cp	r24, r16
    1084:	91 07       	cpc	r25, r17
    1086:	64 f4       	brge	.+24     	; 0x10a0 <writecoils(unsigned char, short, short, unsigned char*)+0x82>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:718 (discriminator 2)
    ADU[ADUsize++] = out[i];
    1088:	fb 01       	movw	r30, r22
    108a:	81 91       	ld	r24, Z+
    108c:	bf 01       	movw	r22, r30
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	4c 0f       	add	r20, r28
    1094:	5d 1f       	adc	r21, r29
    1096:	e4 0e       	add	r14, r20
    1098:	f5 1e       	adc	r15, r21
    109a:	f7 01       	movw	r30, r14
    109c:	80 83       	st	Z, r24
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:717 (discriminator 2)
  ADU[ADUsize++] = lowByte(adress);
  ADU[ADUsize++] = highByte(qty);
  ADU[ADUsize++] = lowByte(qty);
  ADU[ADUsize++] = (qty / 8) + ((qty % 8) != 0);            // Calculate number of bytes pr. bit qty e.g 2 = 1 byte, 8 = 1 byte, 11 = 2 bytes.

  for (int i = 0; i < (qty / 8) + ((qty % 8) != 0); i++) {  // Put output array in bytes into the ADU
    109e:	eb cf       	rjmp	.-42     	; 0x1076 <writecoils(unsigned char, short, short, unsigned char*)+0x58>
    10a0:	17 fd       	sbrc	r17, 7
    10a2:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:721
    ADU[ADUsize++] = out[i];
  }

  CRC = CRC16_modbus(ADU, ADUsize);
    10a4:	b7 01       	movw	r22, r14
    10a6:	ce 01       	movw	r24, r28
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	0e 94 38 04 	call	0x870	; 0x870 <CRC16_modbus(unsigned char*, int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:722
  ADU[ADUsize++] = lowByte(CRC);
    10ae:	e1 e0       	ldi	r30, 0x01	; 1
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	ec 0f       	add	r30, r28
    10b4:	fd 1f       	adc	r31, r29
    10b6:	ee 0d       	add	r30, r14
    10b8:	ff 1d       	adc	r31, r15
    10ba:	80 83       	st	Z, r24
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:723
  ADU[ADUsize++] = highByte(CRC);
    10bc:	e8 e0       	ldi	r30, 0x08	; 8
    10be:	e0 0f       	add	r30, r16
    10c0:	21 e0       	ldi	r18, 0x01	; 1
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	2c 0f       	add	r18, r28
    10c6:	3d 1f       	adc	r19, r29
    10c8:	2e 0f       	add	r18, r30
    10ca:	31 1d       	adc	r19, r1
    10cc:	f9 01       	movw	r30, r18
    10ce:	90 83       	st	Z, r25
    10d0:	07 5f       	subi	r16, 0xF7	; 247
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:725

  Serial2.write(ADU, ADUsize);
    10d2:	40 2f       	mov	r20, r16
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	be 01       	movw	r22, r28
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	86 e8       	ldi	r24, 0x86	; 134
    10de:	95 e0       	ldi	r25, 0x05	; 5
    10e0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <Print::write(unsigned char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:727

  modbusread();
    10e4:	0e 94 aa 07 	call	0xf54	; 0xf54 <modbusread()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:728
}
    10e8:	e2 96       	adiw	r28, 0x32	; 50
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	08 95       	ret

00001102 <loop>:
loop():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:71

}

void loop() {

  readholdingregisters(1, 0, 1);    // Read holding register af tempurature of slave 1
    1102:	41 e0       	ldi	r20, 0x01	; 1
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <readholdingregisters(unsigned char, short, short)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:73

  dataByte = modbusValue();         // Put the data into databyte
    1110:	0e 94 57 03 	call	0x6ae	; 0x6ae <modbusValue()>
    1114:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <dataByte+0x1>
    1118:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <dataByte>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:75

  dataShort = tempConvert(bytesToShort(dataByte, lengthCounter));    // Make the bytes to short and convert it into the correct value for the server to read
    111c:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <lengthCounter>
    1120:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <lengthCounter+0x1>
    1124:	0e 94 64 02 	call	0x4c8	; 0x4c8 <bytesToShort(unsigned char*, int)>
    1128:	0e 94 b4 02 	call	0x568	; 0x568 <tempConvert(short*)>
    112c:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <dataShort+0x1>
    1130:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <dataShort>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:77

  Sim_send(dataShort, lengthCounter);     // Send the input data of slave 1 to the sim module and read the respone
    1134:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <lengthCounter>
    1138:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <lengthCounter+0x1>
    113c:	0e 94 54 06 	call	0xca8	; 0xca8 <Sim_send(short*, int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:79

  writecoils(2, 0, 1, relaySimToMod());   // Write relay output to slave 3 from sim module response
    1140:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <relaySimToMod()>
    1144:	9c 01       	movw	r18, r24
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	0e 94 0f 08 	call	0x101e	; 0x101e <writecoils(unsigned char, short, short, unsigned char*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_master_test/Modbus_master_test.ino:80
  clrmodBuffer();                         // Clear modbus buffer
    1154:	0c 94 4f 03 	jmp	0x69e	; 0x69e <clrmodBuffer()>

00001158 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1158:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    115a:	91 8d       	ldd	r25, Z+25	; 0x19
    115c:	22 8d       	ldd	r18, Z+26	; 0x1a
    115e:	89 2f       	mov	r24, r25
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	80 5c       	subi	r24, 0xC0	; 192
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	82 1b       	sub	r24, r18
    1168:	91 09       	sbc	r25, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
    116a:	8f 73       	andi	r24, 0x3F	; 63
    116c:	99 27       	eor	r25, r25
    116e:	08 95       	ret

00001170 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    1170:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    1172:	91 8d       	ldd	r25, Z+25	; 0x19
    1174:	82 8d       	ldd	r24, Z+26	; 0x1a
    1176:	98 17       	cp	r25, r24
    1178:	31 f0       	breq	.+12     	; 0x1186 <HardwareSerial::peek()+0x16>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    117a:	82 8d       	ldd	r24, Z+26	; 0x1a
    117c:	e8 0f       	add	r30, r24
    117e:	f1 1d       	adc	r31, r1
    1180:	85 8d       	ldd	r24, Z+29	; 0x1d
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    118a:	08 95       	ret

0000118c <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    118c:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    118e:	91 8d       	ldd	r25, Z+25	; 0x19
    1190:	82 8d       	ldd	r24, Z+26	; 0x1a
    1192:	98 17       	cp	r25, r24
    1194:	61 f0       	breq	.+24     	; 0x11ae <HardwareSerial::read()+0x22>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1196:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1198:	ae 0f       	add	r26, r30
    119a:	bf 2f       	mov	r27, r31
    119c:	b1 1d       	adc	r27, r1
    119e:	5d 96       	adiw	r26, 0x1d	; 29
    11a0:	8c 91       	ld	r24, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    11a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    11a4:	9f 5f       	subi	r25, 0xFF	; 255
    11a6:	9f 73       	andi	r25, 0x3F	; 63
    11a8:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    11b2:	08 95       	ret

000011b4 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    11b4:	fc 01       	movw	r30, r24
    11b6:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    11b8:	44 8d       	ldd	r20, Z+28	; 0x1c
    11ba:	25 2f       	mov	r18, r21
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	84 2f       	mov	r24, r20
    11c0:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    11c2:	82 1b       	sub	r24, r18
    11c4:	93 0b       	sbc	r25, r19
    11c6:	54 17       	cp	r21, r20
    11c8:	10 f0       	brcs	.+4      	; 0x11ce <HardwareSerial::availableForWrite()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    11ca:	cf 96       	adiw	r24, 0x3f	; 63
    11cc:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    11ce:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
    11d0:	08 95       	ret

000011d2 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    11d2:	8f e5       	ldi	r24, 0x5F	; 95
    11d4:	9a e0       	ldi	r25, 0x0A	; 10
    11d6:	89 2b       	or	r24, r25
    11d8:	49 f0       	breq	.+18     	; 0x11ec <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	89 2b       	or	r24, r25
    11e0:	29 f0       	breq	.+10     	; 0x11ec <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    11e2:	0e 94 5f 0a 	call	0x14be	; 0x14be <Serial0_available()>
    11e6:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    11e8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    11ec:	86 ef       	ldi	r24, 0xF6	; 246
    11ee:	9a e0       	ldi	r25, 0x0A	; 10
    11f0:	89 2b       	or	r24, r25
    11f2:	49 f0       	breq	.+18     	; 0x1206 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	89 2b       	or	r24, r25
    11fa:	29 f0       	breq	.+10     	; 0x1206 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    11fc:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Serial1_available()>
    1200:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
    1202:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1206:	8d e8       	ldi	r24, 0x8D	; 141
    1208:	9b e0       	ldi	r25, 0x0B	; 11
    120a:	89 2b       	or	r24, r25
    120c:	49 f0       	breq	.+18     	; 0x1220 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 1)
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	89 2b       	or	r24, r25
    1214:	29 f0       	breq	.+10     	; 0x1220 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 3)
    1216:	0e 94 8d 0b 	call	0x171a	; 0x171a <Serial2_available()>
    121a:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
    121c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	89 2b       	or	r24, r25
    1226:	49 f0       	breq	.+18     	; 0x123a <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 1)
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	89 2b       	or	r24, r25
    122e:	29 f0       	breq	.+10     	; 0x123a <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 3)
    1230:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1234:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
    1236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
    123a:	08 95       	ret

0000123c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    123c:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    123e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1240:	a8 0f       	add	r26, r24
    1242:	b9 2f       	mov	r27, r25
    1244:	b1 1d       	adc	r27, r1
    1246:	a3 5a       	subi	r26, 0xA3	; 163
    1248:	bf 4f       	sbci	r27, 0xFF	; 255
    124a:	2c 91       	ld	r18, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    124c:	84 8d       	ldd	r24, Z+28	; 0x1c
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	8f 73       	andi	r24, 0x3F	; 63
    1254:	99 27       	eor	r25, r25
    1256:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1258:	a6 89       	ldd	r26, Z+22	; 0x16
    125a:	b7 89       	ldd	r27, Z+23	; 0x17
    125c:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    125e:	a0 89       	ldd	r26, Z+16	; 0x10
    1260:	b1 89       	ldd	r27, Z+17	; 0x11
    1262:	8c 91       	ld	r24, X
    1264:	83 70       	andi	r24, 0x03	; 3
    1266:	80 64       	ori	r24, 0x40	; 64
    1268:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    126a:	93 8d       	ldd	r25, Z+27	; 0x1b
    126c:	84 8d       	ldd	r24, Z+28	; 0x1c
    126e:	98 13       	cpse	r25, r24
    1270:	06 c0       	rjmp	.+12     	; 0x127e <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1272:	02 88       	ldd	r0, Z+18	; 0x12
    1274:	f3 89       	ldd	r31, Z+19	; 0x13
    1276:	e0 2d       	mov	r30, r0
    1278:	80 81       	ld	r24, Z
    127a:	8f 7d       	andi	r24, 0xDF	; 223
    127c:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    127e:	08 95       	ret

00001280 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1286:	88 8d       	ldd	r24, Y+24	; 0x18
    1288:	88 23       	and	r24, r24
    128a:	b9 f0       	breq	.+46     	; 0x12ba <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    128c:	aa 89       	ldd	r26, Y+18	; 0x12
    128e:	bb 89       	ldd	r27, Y+19	; 0x13
    1290:	e8 89       	ldd	r30, Y+16	; 0x10
    1292:	f9 89       	ldd	r31, Y+17	; 0x11
    1294:	8c 91       	ld	r24, X
    1296:	85 fd       	sbrc	r24, 5
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <HardwareSerial::flush()+0x20>
    129a:	80 81       	ld	r24, Z
    129c:	86 fd       	sbrc	r24, 6
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	07 fc       	sbrc	r0, 7
    12a4:	f7 cf       	rjmp	.-18     	; 0x1294 <HardwareSerial::flush()+0x14>
    12a6:	8c 91       	ld	r24, X
    12a8:	85 ff       	sbrs	r24, 5
    12aa:	f2 cf       	rjmp	.-28     	; 0x1290 <HardwareSerial::flush()+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    12ac:	80 81       	ld	r24, Z
    12ae:	85 ff       	sbrs	r24, 5
    12b0:	ed cf       	rjmp	.-38     	; 0x128c <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    12b2:	ce 01       	movw	r24, r28
    12b4:	0e 94 1e 09 	call	0x123c	; 0x123c <HardwareSerial::_tx_udr_empty_irq()>
    12b8:	e9 cf       	rjmp	.-46     	; 0x128c <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    12d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12d6:	98 13       	cpse	r25, r24
    12d8:	1a c0       	rjmp	.+52     	; 0x130e <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    12da:	e8 89       	ldd	r30, Y+16	; 0x10
    12dc:	f9 89       	ldd	r31, Y+17	; 0x11
    12de:	80 81       	ld	r24, Z
    12e0:	85 ff       	sbrs	r24, 5
    12e2:	15 c0       	rjmp	.+42     	; 0x130e <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    12e4:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12e6:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    12e8:	ee 89       	ldd	r30, Y+22	; 0x16
    12ea:	ff 89       	ldd	r31, Y+23	; 0x17
    12ec:	60 83       	st	Z, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    12ee:	e8 89       	ldd	r30, Y+16	; 0x10
    12f0:	f9 89       	ldd	r31, Y+17	; 0x11
    12f2:	80 81       	ld	r24, Z
    12f4:	83 70       	andi	r24, 0x03	; 3
    12f6:	80 64       	ori	r24, 0x40	; 64
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    12f8:	80 83       	st	Z, r24
__iRestore():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12fa:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	ef 90       	pop	r14
    130c:	08 95       	ret
    130e:	f6 2e       	mov	r15, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1310:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	0f 5f       	subi	r16, 0xFF	; 255
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	0f 73       	andi	r16, 0x3F	; 63
    131a:	11 27       	eor	r17, r17
    131c:	e0 2e       	mov	r14, r16
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    131e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1320:	8e 11       	cpse	r24, r14
    1322:	0c c0       	rjmp	.+24     	; 0x133c <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	07 fc       	sbrc	r0, 7
    1328:	fa cf       	rjmp	.-12     	; 0x131e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    132a:	e8 89       	ldd	r30, Y+16	; 0x10
    132c:	f9 89       	ldd	r31, Y+17	; 0x11
    132e:	80 81       	ld	r24, Z
    1330:	85 ff       	sbrs	r24, 5
    1332:	f5 cf       	rjmp	.-22     	; 0x131e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 1e 09 	call	0x123c	; 0x123c <HardwareSerial::_tx_udr_empty_irq()>
    133a:	f1 cf       	rjmp	.-30     	; 0x131e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    133c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    133e:	ec 0f       	add	r30, r28
    1340:	fd 2f       	mov	r31, r29
    1342:	f1 1d       	adc	r31, r1
    1344:	e3 5a       	subi	r30, 0xA3	; 163
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	f0 82       	st	Z, r15
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    134a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    134c:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    134e:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    1350:	ea 89       	ldd	r30, Y+18	; 0x12
    1352:	fb 89       	ldd	r31, Y+19	; 0x13
    1354:	80 81       	ld	r24, Z
    1356:	80 62       	ori	r24, 0x20	; 32
    1358:	cf cf       	rjmp	.-98     	; 0x12f8 <HardwareSerial::write(unsigned char)+0x38>

0000135a <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	ec 01       	movw	r28, r24
    136a:	6a 01       	movw	r12, r20
    136c:	7b 01       	movw	r14, r22
    136e:	12 2f       	mov	r17, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1370:	60 e8       	ldi	r22, 0x80	; 128
    1372:	74 e8       	ldi	r23, 0x84	; 132
    1374:	8e e1       	ldi	r24, 0x1E	; 30
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a7 01       	movw	r20, r14
    137a:	96 01       	movw	r18, r12
    137c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__udivmodsi4>
    1380:	21 50       	subi	r18, 0x01	; 1
    1382:	31 09       	sbc	r19, r1
    1384:	41 09       	sbc	r20, r1
    1386:	51 09       	sbc	r21, r1
    1388:	56 95       	lsr	r21
    138a:	47 95       	ror	r20
    138c:	37 95       	ror	r19
    138e:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    1390:	e8 89       	ldd	r30, Y+16	; 0x10
    1392:	f9 89       	ldd	r31, Y+17	; 0x11
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1398:	21 15       	cp	r18, r1
    139a:	80 e1       	ldi	r24, 0x10	; 16
    139c:	38 07       	cpc	r19, r24
    139e:	98 f0       	brcs	.+38     	; 0x13c6 <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    13a0:	e8 89       	ldd	r30, Y+16	; 0x10
    13a2:	f9 89       	ldd	r31, Y+17	; 0x11
    13a4:	10 82       	st	Z, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    13a6:	60 e4       	ldi	r22, 0x40	; 64
    13a8:	72 e4       	ldi	r23, 0x42	; 66
    13aa:	8f e0       	ldi	r24, 0x0F	; 15
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a7 01       	movw	r20, r14
    13b0:	96 01       	movw	r18, r12
    13b2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__udivmodsi4>
    13b6:	21 50       	subi	r18, 0x01	; 1
    13b8:	31 09       	sbc	r19, r1
    13ba:	41 09       	sbc	r20, r1
    13bc:	51 09       	sbc	r21, r1
    13be:	56 95       	lsr	r21
    13c0:	47 95       	ror	r20
    13c2:	37 95       	ror	r19
    13c4:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    13c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    13c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    13ca:	30 83       	st	Z, r19
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    13cc:	ee 85       	ldd	r30, Y+14	; 0x0e
    13ce:	ff 85       	ldd	r31, Y+15	; 0x0f
    13d0:	20 83       	st	Z, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    13d2:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    13d4:	ec 89       	ldd	r30, Y+20	; 0x14
    13d6:	fd 89       	ldd	r31, Y+21	; 0x15
    13d8:	10 83       	st	Z, r17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    13da:	ea 89       	ldd	r30, Y+18	; 0x12
    13dc:	fb 89       	ldd	r31, Y+19	; 0x13
    13de:	80 81       	ld	r24, Z
    13e0:	88 69       	ori	r24, 0x98	; 152
    13e2:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    13e4:	ea 89       	ldd	r30, Y+18	; 0x12
    13e6:	fb 89       	ldd	r31, Y+19	; 0x13
    13e8:	80 81       	ld	r24, Z
    13ea:	8f 7d       	andi	r24, 0xDF	; 223
    13ec:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	08 95       	ret

000013fe <__vector_25>:
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    13fe:	1f 92       	push	r1
    1400:	0f 92       	push	r0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	0f 92       	push	r0
    1406:	11 24       	eor	r1, r1
    1408:	0b b6       	in	r0, 0x3b	; 59
    140a:	0f 92       	push	r0
    140c:	2f 93       	push	r18
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	ef 93       	push	r30
    1414:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1416:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <Serial+0x10>
    141a:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <Serial+0x11>
    141e:	80 81       	ld	r24, Z
    1420:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <Serial+0x16>
    1424:	f0 91 63 04 	lds	r31, 0x0463	; 0x800463 <Serial+0x17>
    1428:	82 fd       	sbrc	r24, 2
    142a:	1d c0       	rjmp	.+58     	; 0x1466 <__vector_25+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    142c:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    142e:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <Serial+0x19>
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1436:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <Serial+0x1a>
    143a:	82 17       	cp	r24, r18
    143c:	41 f0       	breq	.+16     	; 0x144e <__vector_25+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    143e:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <Serial+0x19>
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	e4 5b       	subi	r30, 0xB4	; 180
    1446:	fb 4f       	sbci	r31, 0xFB	; 251
    1448:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    144a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <Serial+0x19>
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0b be       	out	0x3b, r0	; 59
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1466:	80 81       	ld	r24, Z
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    1468:	f2 cf       	rjmp	.-28     	; 0x144e <__vector_25+0x50>

0000146a <__vector_26>:
__vector_26():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	0b b6       	in	r0, 0x3b	; 59
    1476:	0f 92       	push	r0
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1490:	8c e4       	ldi	r24, 0x4C	; 76
    1492:	94 e0       	ldi	r25, 0x04	; 4
    1494:	0e 94 1e 09 	call	0x123c	; 0x123c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1498:	ff 91       	pop	r31
    149a:	ef 91       	pop	r30
    149c:	bf 91       	pop	r27
    149e:	af 91       	pop	r26
    14a0:	9f 91       	pop	r25
    14a2:	8f 91       	pop	r24
    14a4:	7f 91       	pop	r23
    14a6:	6f 91       	pop	r22
    14a8:	5f 91       	pop	r21
    14aa:	4f 91       	pop	r20
    14ac:	3f 91       	pop	r19
    14ae:	2f 91       	pop	r18
    14b0:	0f 90       	pop	r0
    14b2:	0b be       	out	0x3b, r0	; 59
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	0f 90       	pop	r0
    14ba:	1f 90       	pop	r1
    14bc:	18 95       	reti

000014be <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    14be:	8c e4       	ldi	r24, 0x4C	; 76
    14c0:	94 e0       	ldi	r25, 0x04	; 4
    14c2:	0e 94 ac 08 	call	0x1158	; 0x1158 <HardwareSerial::available()>
    14c6:	21 e0       	ldi	r18, 0x01	; 1
    14c8:	89 2b       	or	r24, r25
    14ca:	09 f4       	brne	.+2      	; 0x14ce <Serial0_available()+0x10>
    14cc:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    14ce:	82 2f       	mov	r24, r18
    14d0:	08 95       	ret

000014d2 <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    14d2:	ec e4       	ldi	r30, 0x4C	; 76
    14d4:	f4 e0       	ldi	r31, 0x04	; 4
    14d6:	13 82       	std	Z+3, r1	; 0x03
    14d8:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    14da:	88 ee       	ldi	r24, 0xE8	; 232
    14dc:	93 e0       	ldi	r25, 0x03	; 3
    14de:	a0 e0       	ldi	r26, 0x00	; 0
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	84 83       	std	Z+4, r24	; 0x04
    14e4:	95 83       	std	Z+5, r25	; 0x05
    14e6:	a6 83       	std	Z+6, r26	; 0x06
    14e8:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    14ea:	84 e3       	ldi	r24, 0x34	; 52
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	85 ec       	ldi	r24, 0xC5	; 197
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	95 87       	std	Z+13, r25	; 0x0d
    14f8:	84 87       	std	Z+12, r24	; 0x0c
    14fa:	84 ec       	ldi	r24, 0xC4	; 196
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	97 87       	std	Z+15, r25	; 0x0f
    1500:	86 87       	std	Z+14, r24	; 0x0e
    1502:	80 ec       	ldi	r24, 0xC0	; 192
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	91 8b       	std	Z+17, r25	; 0x11
    1508:	80 8b       	std	Z+16, r24	; 0x10
    150a:	81 ec       	ldi	r24, 0xC1	; 193
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	93 8b       	std	Z+19, r25	; 0x13
    1510:	82 8b       	std	Z+18, r24	; 0x12
    1512:	82 ec       	ldi	r24, 0xC2	; 194
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	95 8b       	std	Z+21, r25	; 0x15
    1518:	84 8b       	std	Z+20, r24	; 0x14
    151a:	86 ec       	ldi	r24, 0xC6	; 198
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	97 8b       	std	Z+23, r25	; 0x17
    1520:	86 8b       	std	Z+22, r24	; 0x16
    1522:	11 8e       	std	Z+25, r1	; 0x19
    1524:	12 8e       	std	Z+26, r1	; 0x1a
    1526:	13 8e       	std	Z+27, r1	; 0x1b
    1528:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    152a:	08 95       	ret

0000152c <__vector_36>:
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	0b b6       	in	r0, 0x3b	; 59
    1538:	0f 92       	push	r0
    153a:	2f 93       	push	r18
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	ef 93       	push	r30
    1542:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1544:	e0 91 f9 04 	lds	r30, 0x04F9	; 0x8004f9 <Serial1+0x10>
    1548:	f0 91 fa 04 	lds	r31, 0x04FA	; 0x8004fa <Serial1+0x11>
    154c:	80 81       	ld	r24, Z
    154e:	e0 91 ff 04 	lds	r30, 0x04FF	; 0x8004ff <Serial1+0x16>
    1552:	f0 91 00 05 	lds	r31, 0x0500	; 0x800500 <Serial1+0x17>
    1556:	82 fd       	sbrc	r24, 2
    1558:	1d c0       	rjmp	.+58     	; 0x1594 <__vector_36+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    155a:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    155c:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <Serial1+0x19>
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1564:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <Serial1+0x1a>
    1568:	82 17       	cp	r24, r18
    156a:	41 f0       	breq	.+16     	; 0x157c <__vector_36+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    156c:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <Serial1+0x19>
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	e7 51       	subi	r30, 0x17	; 23
    1574:	fb 4f       	sbci	r31, 0xFB	; 251
    1576:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1578:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <Serial1+0x19>
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    157c:	ff 91       	pop	r31
    157e:	ef 91       	pop	r30
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	2f 91       	pop	r18
    1586:	0f 90       	pop	r0
    1588:	0b be       	out	0x3b, r0	; 59
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	0f 90       	pop	r0
    1590:	1f 90       	pop	r1
    1592:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1594:	80 81       	ld	r24, Z
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    1596:	f2 cf       	rjmp	.-28     	; 0x157c <__vector_36+0x50>

00001598 <__vector_37>:
__vector_37():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1598:	1f 92       	push	r1
    159a:	0f 92       	push	r0
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	0f 92       	push	r0
    15a0:	11 24       	eor	r1, r1
    15a2:	0b b6       	in	r0, 0x3b	; 59
    15a4:	0f 92       	push	r0
    15a6:	2f 93       	push	r18
    15a8:	3f 93       	push	r19
    15aa:	4f 93       	push	r20
    15ac:	5f 93       	push	r21
    15ae:	6f 93       	push	r22
    15b0:	7f 93       	push	r23
    15b2:	8f 93       	push	r24
    15b4:	9f 93       	push	r25
    15b6:	af 93       	push	r26
    15b8:	bf 93       	push	r27
    15ba:	ef 93       	push	r30
    15bc:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    15be:	89 ee       	ldi	r24, 0xE9	; 233
    15c0:	94 e0       	ldi	r25, 0x04	; 4
    15c2:	0e 94 1e 09 	call	0x123c	; 0x123c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	0f 90       	pop	r0
    15e0:	0b be       	out	0x3b, r0	; 59
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    15ec:	89 ee       	ldi	r24, 0xE9	; 233
    15ee:	94 e0       	ldi	r25, 0x04	; 4
    15f0:	0e 94 ac 08 	call	0x1158	; 0x1158 <HardwareSerial::available()>
    15f4:	21 e0       	ldi	r18, 0x01	; 1
    15f6:	89 2b       	or	r24, r25
    15f8:	09 f4       	brne	.+2      	; 0x15fc <Serial1_available()+0x10>
    15fa:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    15fc:	82 2f       	mov	r24, r18
    15fe:	08 95       	ret

00001600 <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    1600:	e9 ee       	ldi	r30, 0xE9	; 233
    1602:	f4 e0       	ldi	r31, 0x04	; 4
    1604:	13 82       	std	Z+3, r1	; 0x03
    1606:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
    1608:	88 ee       	ldi	r24, 0xE8	; 232
    160a:	93 e0       	ldi	r25, 0x03	; 3
    160c:	a0 e0       	ldi	r26, 0x00	; 0
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	84 83       	std	Z+4, r24	; 0x04
    1612:	95 83       	std	Z+5, r25	; 0x05
    1614:	a6 83       	std	Z+6, r26	; 0x06
    1616:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1618:	84 e3       	ldi	r24, 0x34	; 52
    161a:	92 e0       	ldi	r25, 0x02	; 2
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	80 83       	st	Z, r24
    1620:	8d ec       	ldi	r24, 0xCD	; 205
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	95 87       	std	Z+13, r25	; 0x0d
    1626:	84 87       	std	Z+12, r24	; 0x0c
    1628:	8c ec       	ldi	r24, 0xCC	; 204
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	97 87       	std	Z+15, r25	; 0x0f
    162e:	86 87       	std	Z+14, r24	; 0x0e
    1630:	88 ec       	ldi	r24, 0xC8	; 200
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	91 8b       	std	Z+17, r25	; 0x11
    1636:	80 8b       	std	Z+16, r24	; 0x10
    1638:	89 ec       	ldi	r24, 0xC9	; 201
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	93 8b       	std	Z+19, r25	; 0x13
    163e:	82 8b       	std	Z+18, r24	; 0x12
    1640:	8a ec       	ldi	r24, 0xCA	; 202
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	95 8b       	std	Z+21, r25	; 0x15
    1646:	84 8b       	std	Z+20, r24	; 0x14
    1648:	8e ec       	ldi	r24, 0xCE	; 206
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	97 8b       	std	Z+23, r25	; 0x17
    164e:	86 8b       	std	Z+22, r24	; 0x16
    1650:	11 8e       	std	Z+25, r1	; 0x19
    1652:	12 8e       	std	Z+26, r1	; 0x1a
    1654:	13 8e       	std	Z+27, r1	; 0x1b
    1656:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    1658:	08 95       	ret

0000165a <__vector_51>:
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:40
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    165a:	1f 92       	push	r1
    165c:	0f 92       	push	r0
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	0f 92       	push	r0
    1662:	11 24       	eor	r1, r1
    1664:	0b b6       	in	r0, 0x3b	; 59
    1666:	0f 92       	push	r0
    1668:	2f 93       	push	r18
    166a:	8f 93       	push	r24
    166c:	9f 93       	push	r25
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1672:	e0 91 96 05 	lds	r30, 0x0596	; 0x800596 <Serial2+0x10>
    1676:	f0 91 97 05 	lds	r31, 0x0597	; 0x800597 <Serial2+0x11>
    167a:	80 81       	ld	r24, Z
    167c:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <Serial2+0x16>
    1680:	f0 91 9d 05 	lds	r31, 0x059D	; 0x80059d <Serial2+0x17>
    1684:	82 fd       	sbrc	r24, 2
    1686:	1d c0       	rjmp	.+58     	; 0x16c2 <__vector_51+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1688:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    168a:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <Serial2+0x19>
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1692:	20 91 a0 05 	lds	r18, 0x05A0	; 0x8005a0 <Serial2+0x1a>
    1696:	82 17       	cp	r24, r18
    1698:	41 f0       	breq	.+16     	; 0x16aa <__vector_51+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    169a:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <Serial2+0x19>
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	ea 57       	subi	r30, 0x7A	; 122
    16a2:	fa 4f       	sbci	r31, 0xFA	; 250
    16a4:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    16a6:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <Serial2+0x19>
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
  Serial2._rx_complete_irq();
}
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0b be       	out	0x3b, r0	; 59
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    16c2:	80 81       	ld	r24, Z
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
    16c4:	f2 cf       	rjmp	.-28     	; 0x16aa <__vector_51+0x50>

000016c6 <__vector_52>:
__vector_52():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:45

ISR(USART2_UDRE_vect)
{
    16c6:	1f 92       	push	r1
    16c8:	0f 92       	push	r0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	0f 92       	push	r0
    16ce:	11 24       	eor	r1, r1
    16d0:	0b b6       	in	r0, 0x3b	; 59
    16d2:	0f 92       	push	r0
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:46
  Serial2._tx_udr_empty_irq();
    16ec:	86 e8       	ldi	r24, 0x86	; 134
    16ee:	95 e0       	ldi	r25, 0x05	; 5
    16f0:	0e 94 1e 09 	call	0x123c	; 0x123c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:47
}
    16f4:	ff 91       	pop	r31
    16f6:	ef 91       	pop	r30
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	4f 91       	pop	r20
    1708:	3f 91       	pop	r19
    170a:	2f 91       	pop	r18
    170c:	0f 90       	pop	r0
    170e:	0b be       	out	0x3b, r0	; 59
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	1f 90       	pop	r1
    1718:	18 95       	reti

0000171a <Serial2_available()>:
_Z17Serial2_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:54
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    171a:	86 e8       	ldi	r24, 0x86	; 134
    171c:	95 e0       	ldi	r25, 0x05	; 5
    171e:	0e 94 ac 08 	call	0x1158	; 0x1158 <HardwareSerial::available()>
    1722:	21 e0       	ldi	r18, 0x01	; 1
    1724:	89 2b       	or	r24, r25
    1726:	09 f4       	brne	.+2      	; 0x172a <Serial2_available()+0x10>
    1728:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
}
    172a:	82 2f       	mov	r24, r18
    172c:	08 95       	ret

0000172e <_GLOBAL__sub_I___vector_51>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    172e:	e6 e8       	ldi	r30, 0x86	; 134
    1730:	f5 e0       	ldi	r31, 0x05	; 5
    1732:	13 82       	std	Z+3, r1	; 0x03
    1734:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
    1736:	88 ee       	ldi	r24, 0xE8	; 232
    1738:	93 e0       	ldi	r25, 0x03	; 3
    173a:	a0 e0       	ldi	r26, 0x00	; 0
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	84 83       	std	Z+4, r24	; 0x04
    1740:	95 83       	std	Z+5, r25	; 0x05
    1742:	a6 83       	std	Z+6, r26	; 0x06
    1744:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1746:	84 e3       	ldi	r24, 0x34	; 52
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
    174e:	85 ed       	ldi	r24, 0xD5	; 213
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	95 87       	std	Z+13, r25	; 0x0d
    1754:	84 87       	std	Z+12, r24	; 0x0c
    1756:	84 ed       	ldi	r24, 0xD4	; 212
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	97 87       	std	Z+15, r25	; 0x0f
    175c:	86 87       	std	Z+14, r24	; 0x0e
    175e:	80 ed       	ldi	r24, 0xD0	; 208
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	91 8b       	std	Z+17, r25	; 0x11
    1764:	80 8b       	std	Z+16, r24	; 0x10
    1766:	81 ed       	ldi	r24, 0xD1	; 209
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	93 8b       	std	Z+19, r25	; 0x13
    176c:	82 8b       	std	Z+18, r24	; 0x12
    176e:	82 ed       	ldi	r24, 0xD2	; 210
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	95 8b       	std	Z+21, r25	; 0x15
    1774:	84 8b       	std	Z+20, r24	; 0x14
    1776:	86 ed       	ldi	r24, 0xD6	; 214
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	97 8b       	std	Z+23, r25	; 0x17
    177c:	86 8b       	std	Z+22, r24	; 0x16
    177e:	11 8e       	std	Z+25, r1	; 0x19
    1780:	12 8e       	std	Z+26, r1	; 0x1a
    1782:	13 8e       	std	Z+27, r1	; 0x1b
    1784:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
    1786:	08 95       	ret

00001788 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1788:	af 92       	push	r10
    178a:	bf 92       	push	r11
    178c:	cf 92       	push	r12
    178e:	df 92       	push	r13
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	6c 01       	movw	r12, r24
    179e:	7b 01       	movw	r14, r22
    17a0:	8b 01       	movw	r16, r22
    17a2:	04 0f       	add	r16, r20
    17a4:	15 1f       	adc	r17, r21
    17a6:	eb 01       	movw	r28, r22
    17a8:	5e 01       	movw	r10, r28
    17aa:	ae 18       	sub	r10, r14
    17ac:	bf 08       	sbc	r11, r15
    17ae:	c0 17       	cp	r28, r16
    17b0:	d1 07       	cpc	r29, r17
    17b2:	59 f0       	breq	.+22     	; 0x17ca <Print::write(unsigned char const*, unsigned int)+0x42>
    17b4:	69 91       	ld	r22, Y+
    17b6:	d6 01       	movw	r26, r12
    17b8:	ed 91       	ld	r30, X+
    17ba:	fc 91       	ld	r31, X
    17bc:	01 90       	ld	r0, Z+
    17be:	f0 81       	ld	r31, Z
    17c0:	e0 2d       	mov	r30, r0
    17c2:	c6 01       	movw	r24, r12
    17c4:	19 95       	eicall
    17c6:	89 2b       	or	r24, r25
    17c8:	79 f7       	brne	.-34     	; 0x17a8 <Print::write(unsigned char const*, unsigned int)+0x20>
    17ca:	c5 01       	movw	r24, r10
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	df 90       	pop	r13
    17da:	cf 90       	pop	r12
    17dc:	bf 90       	pop	r11
    17de:	af 90       	pop	r10
    17e0:	08 95       	ret

000017e2 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    17e2:	fb 01       	movw	r30, r22
    17e4:	01 90       	ld	r0, Z+
    17e6:	00 20       	and	r0, r0
    17e8:	e9 f7       	brne	.-6      	; 0x17e4 <Print::write(char const*) [clone .part.2]+0x2>
    17ea:	31 97       	sbiw	r30, 0x01	; 1
    17ec:	af 01       	movw	r20, r30
    17ee:	46 1b       	sub	r20, r22
    17f0:	57 0b       	sbc	r21, r23
    17f2:	dc 01       	movw	r26, r24
    17f4:	ed 91       	ld	r30, X+
    17f6:	fc 91       	ld	r31, X
    17f8:	02 80       	ldd	r0, Z+2	; 0x02
    17fa:	f3 81       	ldd	r31, Z+3	; 0x03
    17fc:	e0 2d       	mov	r30, r0
    17fe:	19 94       	eijmp

00001800 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	8c 01       	movw	r16, r24
    180e:	7b 01       	movw	r14, r22
    1810:	d0 e0       	ldi	r29, 0x00	; 0
    1812:	c0 e0       	ldi	r28, 0x00	; 0
    1814:	f7 01       	movw	r30, r14
    1816:	ec 0f       	add	r30, r28
    1818:	fd 1f       	adc	r31, r29
    181a:	64 91       	lpm	r22, Z
    181c:	66 23       	and	r22, r22
    181e:	61 f0       	breq	.+24     	; 0x1838 <Print::print(__FlashStringHelper const*)+0x38>
    1820:	d8 01       	movw	r26, r16
    1822:	ed 91       	ld	r30, X+
    1824:	fc 91       	ld	r31, X
    1826:	01 90       	ld	r0, Z+
    1828:	f0 81       	ld	r31, Z
    182a:	e0 2d       	mov	r30, r0
    182c:	c8 01       	movw	r24, r16
    182e:	19 95       	eicall
    1830:	89 2b       	or	r24, r25
    1832:	11 f0       	breq	.+4      	; 0x1838 <Print::print(__FlashStringHelper const*)+0x38>
    1834:	21 96       	adiw	r28, 0x01	; 1
    1836:	ee cf       	rjmp	.-36     	; 0x1814 <Print::print(__FlashStringHelper const*)+0x14>
    1838:	ce 01       	movw	r24, r28
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	08 95       	ret

00001848 <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    1848:	61 15       	cp	r22, r1
    184a:	71 05       	cpc	r23, r1
    184c:	11 f0       	breq	.+4      	; 0x1852 <Print::print(char const*)+0xa>
    184e:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	08 95       	ret

00001858 <Print::print(char)>:
_ZN5Print5printEc():
    1858:	dc 01       	movw	r26, r24
    185a:	ed 91       	ld	r30, X+
    185c:	fc 91       	ld	r31, X
    185e:	01 90       	ld	r0, Z+
    1860:	f0 81       	ld	r31, Z
    1862:	e0 2d       	mov	r30, r0
    1864:	19 94       	eijmp

00001866 <Print::println()>:
_ZN5Print5writeEPKc():
    1866:	62 e4       	ldi	r22, 0x42	; 66
    1868:	72 e0       	ldi	r23, 0x02	; 2
    186a:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <Print::write(char const*) [clone .part.2]>

0000186e <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	ec 01       	movw	r28, r24
    1878:	0e 94 00 0c 	call	0x1800	; 0x1800 <Print::print(__FlashStringHelper const*)>
    187c:	8c 01       	movw	r16, r24
    187e:	ce 01       	movw	r24, r28
    1880:	0e 94 33 0c 	call	0x1866	; 0x1866 <Print::println()>
    1884:	80 0f       	add	r24, r16
    1886:	91 1f       	adc	r25, r17
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	08 95       	ret

00001892 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    189c:	d0 e0       	ldi	r29, 0x00	; 0
    189e:	c0 e0       	ldi	r28, 0x00	; 0
    18a0:	61 15       	cp	r22, r1
    18a2:	71 05       	cpc	r23, r1
    18a4:	19 f0       	breq	.+6      	; 0x18ac <Print::println(char const*)+0x1a>
    18a6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Print::write(char const*) [clone .part.2]>
    18aa:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    18ac:	c8 01       	movw	r24, r16
    18ae:	0e 94 33 0c 	call	0x1866	; 0x1866 <Print::println()>
    18b2:	8c 0f       	add	r24, r28
    18b4:	9d 1f       	adc	r25, r29
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	08 95       	ret

000018c0 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    18c0:	8f 92       	push	r8
    18c2:	9f 92       	push	r9
    18c4:	af 92       	push	r10
    18c6:	bf 92       	push	r11
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	a1 97       	sbiw	r28, 0x21	; 33
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	7c 01       	movw	r14, r24
    18e6:	fa 01       	movw	r30, r20
    18e8:	cb 01       	movw	r24, r22
    18ea:	19 a2       	std	Y+33, r1	; 0x21
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	08 f4       	brcc	.+2      	; 0x18f2 <Print::printNumber(unsigned long, unsigned char)+0x32>
    18f0:	2a e0       	ldi	r18, 0x0A	; 10
    18f2:	8e 01       	movw	r16, r28
    18f4:	0f 5d       	subi	r16, 0xDF	; 223
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	82 2e       	mov	r8, r18
    18fa:	91 2c       	mov	r9, r1
    18fc:	b1 2c       	mov	r11, r1
    18fe:	a1 2c       	mov	r10, r1
    1900:	bf 01       	movw	r22, r30
    1902:	a5 01       	movw	r20, r10
    1904:	94 01       	movw	r18, r8
    1906:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__udivmodsi4>
    190a:	f9 01       	movw	r30, r18
    190c:	ca 01       	movw	r24, r20
    190e:	6a 30       	cpi	r22, 0x0A	; 10
    1910:	0c f5       	brge	.+66     	; 0x1954 <Print::printNumber(unsigned long, unsigned char)+0x94>
    1912:	60 5d       	subi	r22, 0xD0	; 208
    1914:	d8 01       	movw	r26, r16
    1916:	6e 93       	st	-X, r22
    1918:	8d 01       	movw	r16, r26
    191a:	23 2b       	or	r18, r19
    191c:	24 2b       	or	r18, r20
    191e:	25 2b       	or	r18, r21
    1920:	79 f7       	brne	.-34     	; 0x1900 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	10 97       	sbiw	r26, 0x00	; 0
    1928:	21 f0       	breq	.+8      	; 0x1932 <Print::printNumber(unsigned long, unsigned char)+0x72>
    192a:	bd 01       	movw	r22, r26
    192c:	c7 01       	movw	r24, r14
    192e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    1932:	a1 96       	adiw	r28, 0x21	; 33
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	bf 90       	pop	r11
    194c:	af 90       	pop	r10
    194e:	9f 90       	pop	r9
    1950:	8f 90       	pop	r8
    1952:	08 95       	ret
    1954:	69 5c       	subi	r22, 0xC9	; 201
    1956:	de cf       	rjmp	.-68     	; 0x1914 <Print::printNumber(unsigned long, unsigned char)+0x54>

00001958 <Print::print(long, int)>:
_ZN5Print5printEli():
    1958:	cf 92       	push	r12
    195a:	df 92       	push	r13
    195c:	ef 92       	push	r14
    195e:	ff 92       	push	r15
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	21 15       	cp	r18, r1
    196a:	31 05       	cpc	r19, r1
    196c:	81 f4       	brne	.+32     	; 0x198e <Print::print(long, int)+0x36>
    196e:	dc 01       	movw	r26, r24
    1970:	ed 91       	ld	r30, X+
    1972:	fc 91       	ld	r31, X
    1974:	01 90       	ld	r0, Z+
    1976:	f0 81       	ld	r31, Z
    1978:	e0 2d       	mov	r30, r0
    197a:	64 2f       	mov	r22, r20
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	19 94       	eijmp
    198e:	2a 30       	cpi	r18, 0x0A	; 10
    1990:	31 05       	cpc	r19, r1
    1992:	01 f5       	brne	.+64     	; 0x19d4 <Print::print(long, int)+0x7c>
    1994:	2a e0       	ldi	r18, 0x0A	; 10
    1996:	77 ff       	sbrs	r23, 7
    1998:	1d c0       	rjmp	.+58     	; 0x19d4 <Print::print(long, int)+0x7c>
    199a:	6a 01       	movw	r12, r20
    199c:	7b 01       	movw	r14, r22
    199e:	ec 01       	movw	r28, r24
    19a0:	6d e2       	ldi	r22, 0x2D	; 45
    19a2:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Print::print(char)>
    19a6:	8c 01       	movw	r16, r24
    19a8:	44 27       	eor	r20, r20
    19aa:	55 27       	eor	r21, r21
    19ac:	ba 01       	movw	r22, r20
    19ae:	4c 19       	sub	r20, r12
    19b0:	5d 09       	sbc	r21, r13
    19b2:	6e 09       	sbc	r22, r14
    19b4:	7f 09       	sbc	r23, r15
    19b6:	2a e0       	ldi	r18, 0x0A	; 10
    19b8:	ce 01       	movw	r24, r28
    19ba:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <Print::printNumber(unsigned long, unsigned char)>
    19be:	80 0f       	add	r24, r16
    19c0:	91 1f       	adc	r25, r17
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	08 95       	ret
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	df 90       	pop	r13
    19e2:	cf 90       	pop	r12
    19e4:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <Print::printNumber(unsigned long, unsigned char)>

000019e8 <Print::print(int, int)>:
_ZN5Print5printEii():
    19e8:	9a 01       	movw	r18, r20
    19ea:	ab 01       	movw	r20, r22
    19ec:	77 0f       	add	r23, r23
    19ee:	66 0b       	sbc	r22, r22
    19f0:	77 0b       	sbc	r23, r23
    19f2:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <Print::print(long, int)>

000019f6 <Print::println(int, int)>:
_ZN5Print7printlnEii():
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	ec 01       	movw	r28, r24
    1a00:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Print::print(int, int)>
    1a04:	8c 01       	movw	r16, r24
    1a06:	ce 01       	movw	r24, r28
    1a08:	0e 94 33 0c 	call	0x1866	; 0x1866 <Print::println()>
    1a0c:	80 0f       	add	r24, r16
    1a0e:	91 1f       	adc	r25, r17
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1a1a:	21 15       	cp	r18, r1
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	41 f4       	brne	.+16     	; 0x1a30 <Print::print(unsigned long, int)+0x16>
    1a20:	dc 01       	movw	r26, r24
    1a22:	ed 91       	ld	r30, X+
    1a24:	fc 91       	ld	r31, X
    1a26:	01 90       	ld	r0, Z+
    1a28:	f0 81       	ld	r31, Z
    1a2a:	e0 2d       	mov	r30, r0
    1a2c:	64 2f       	mov	r22, r20
    1a2e:	19 94       	eijmp
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
    1a30:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <Print::printNumber(unsigned long, unsigned char)>

00001a34 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1a34:	9a 01       	movw	r18, r20
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
    1a36:	46 2f       	mov	r20, r22
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <Print::print(unsigned long, int)>

00001a42 <initVariant>:
initVariant():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1a42:	08 95       	ret

00001a44 <main>:
main():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1a44:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <init>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1a48:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <initVariant>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1a4c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <setup>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1a50:	c9 ee       	ldi	r28, 0xE9	; 233
    1a52:	d8 e0       	ldi	r29, 0x08	; 8
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1a54:	0e 94 81 08 	call	0x1102	; 0x1102 <loop>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1a58:	20 97       	sbiw	r28, 0x00	; 0
    1a5a:	e1 f3       	breq	.-8      	; 0x1a54 <main+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1a5c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <serialEventRun()>
    1a60:	f9 cf       	rjmp	.-14     	; 0x1a54 <main+0x10>

00001a62 <__vector_23>:
__vector_23():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1a62:	1f 92       	push	r1
    1a64:	0f 92       	push	r0
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	0f 92       	push	r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	2f 93       	push	r18
    1a6e:	3f 93       	push	r19
    1a70:	8f 93       	push	r24
    1a72:	9f 93       	push	r25
    1a74:	af 93       	push	r26
    1a76:	bf 93       	push	r27
    1a78:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <timer0_millis>
    1a7c:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <timer0_millis+0x1>
    1a80:	a0 91 2a 06 	lds	r26, 0x062A	; 0x80062a <timer0_millis+0x2>
    1a84:	b0 91 2b 06 	lds	r27, 0x062B	; 0x80062b <timer0_millis+0x3>
    1a88:	30 91 27 06 	lds	r19, 0x0627	; 0x800627 <timer0_fract>
    1a8c:	26 e0       	ldi	r18, 0x06	; 6
    1a8e:	23 0f       	add	r18, r19
    1a90:	2d 37       	cpi	r18, 0x7D	; 125
    1a92:	68 f1       	brcs	.+90     	; 0x1aee <__vector_23+0x8c>
    1a94:	29 e8       	ldi	r18, 0x89	; 137
    1a96:	23 0f       	add	r18, r19
    1a98:	03 96       	adiw	r24, 0x03	; 3
    1a9a:	a1 1d       	adc	r26, r1
    1a9c:	b1 1d       	adc	r27, r1
    1a9e:	20 93 27 06 	sts	0x0627, r18	; 0x800627 <timer0_fract>
    1aa2:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <timer0_millis>
    1aa6:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <timer0_millis+0x1>
    1aaa:	a0 93 2a 06 	sts	0x062A, r26	; 0x80062a <timer0_millis+0x2>
    1aae:	b0 93 2b 06 	sts	0x062B, r27	; 0x80062b <timer0_millis+0x3>
    1ab2:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <timer0_overflow_count>
    1ab6:	90 91 24 06 	lds	r25, 0x0624	; 0x800624 <timer0_overflow_count+0x1>
    1aba:	a0 91 25 06 	lds	r26, 0x0625	; 0x800625 <timer0_overflow_count+0x2>
    1abe:	b0 91 26 06 	lds	r27, 0x0626	; 0x800626 <timer0_overflow_count+0x3>
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	a1 1d       	adc	r26, r1
    1ac6:	b1 1d       	adc	r27, r1
    1ac8:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <timer0_overflow_count>
    1acc:	90 93 24 06 	sts	0x0624, r25	; 0x800624 <timer0_overflow_count+0x1>
    1ad0:	a0 93 25 06 	sts	0x0625, r26	; 0x800625 <timer0_overflow_count+0x2>
    1ad4:	b0 93 26 06 	sts	0x0626, r27	; 0x800626 <timer0_overflow_count+0x3>
    1ad8:	bf 91       	pop	r27
    1ada:	af 91       	pop	r26
    1adc:	9f 91       	pop	r25
    1ade:	8f 91       	pop	r24
    1ae0:	3f 91       	pop	r19
    1ae2:	2f 91       	pop	r18
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti
    1aee:	02 96       	adiw	r24, 0x02	; 2
    1af0:	a1 1d       	adc	r26, r1
    1af2:	b1 1d       	adc	r27, r1
    1af4:	d4 cf       	rjmp	.-88     	; 0x1a9e <__vector_23+0x3c>

00001af6 <micros>:
micros():
    1af6:	3f b7       	in	r19, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <timer0_overflow_count>
    1afe:	90 91 24 06 	lds	r25, 0x0624	; 0x800624 <timer0_overflow_count+0x1>
    1b02:	a0 91 25 06 	lds	r26, 0x0625	; 0x800625 <timer0_overflow_count+0x2>
    1b06:	b0 91 26 06 	lds	r27, 0x0626	; 0x800626 <timer0_overflow_count+0x3>
    1b0a:	26 b5       	in	r18, 0x26	; 38
    1b0c:	a8 9b       	sbis	0x15, 0	; 21
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <micros+0x24>
    1b10:	2f 3f       	cpi	r18, 0xFF	; 255
    1b12:	19 f0       	breq	.+6      	; 0x1b1a <micros+0x24>
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	a1 1d       	adc	r26, r1
    1b18:	b1 1d       	adc	r27, r1
    1b1a:	3f bf       	out	0x3f, r19	; 63
    1b1c:	ba 2f       	mov	r27, r26
    1b1e:	a9 2f       	mov	r26, r25
    1b20:	98 2f       	mov	r25, r24
    1b22:	88 27       	eor	r24, r24
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	62 0f       	add	r22, r18
    1b2a:	71 1d       	adc	r23, r1
    1b2c:	81 1d       	adc	r24, r1
    1b2e:	91 1d       	adc	r25, r1
    1b30:	43 e0       	ldi	r20, 0x03	; 3
    1b32:	66 0f       	add	r22, r22
    1b34:	77 1f       	adc	r23, r23
    1b36:	88 1f       	adc	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	4a 95       	dec	r20
    1b3c:	d1 f7       	brne	.-12     	; 0x1b32 <micros+0x3c>
    1b3e:	08 95       	ret

00001b40 <delay>:
delay():
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	6b 01       	movw	r12, r22
    1b52:	7c 01       	movw	r14, r24
    1b54:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <micros>
    1b58:	4b 01       	movw	r8, r22
    1b5a:	5c 01       	movw	r10, r24
    1b5c:	c1 14       	cp	r12, r1
    1b5e:	d1 04       	cpc	r13, r1
    1b60:	e1 04       	cpc	r14, r1
    1b62:	f1 04       	cpc	r15, r1
    1b64:	e9 f0       	breq	.+58     	; 0x1ba0 <delay+0x60>
    1b66:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <yield>
    1b6a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <micros>
    1b6e:	68 19       	sub	r22, r8
    1b70:	79 09       	sbc	r23, r9
    1b72:	8a 09       	sbc	r24, r10
    1b74:	9b 09       	sbc	r25, r11
    1b76:	68 3e       	cpi	r22, 0xE8	; 232
    1b78:	73 40       	sbci	r23, 0x03	; 3
    1b7a:	81 05       	cpc	r24, r1
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	70 f3       	brcs	.-36     	; 0x1b5c <delay+0x1c>
    1b80:	21 e0       	ldi	r18, 0x01	; 1
    1b82:	c2 1a       	sub	r12, r18
    1b84:	d1 08       	sbc	r13, r1
    1b86:	e1 08       	sbc	r14, r1
    1b88:	f1 08       	sbc	r15, r1
    1b8a:	88 ee       	ldi	r24, 0xE8	; 232
    1b8c:	88 0e       	add	r8, r24
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	98 1e       	adc	r9, r24
    1b92:	a1 1c       	adc	r10, r1
    1b94:	b1 1c       	adc	r11, r1
    1b96:	c1 14       	cp	r12, r1
    1b98:	d1 04       	cpc	r13, r1
    1b9a:	e1 04       	cpc	r14, r1
    1b9c:	f1 04       	cpc	r15, r1
    1b9e:	29 f7       	brne	.-54     	; 0x1b6a <delay+0x2a>
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	bf 90       	pop	r11
    1baa:	af 90       	pop	r10
    1bac:	9f 90       	pop	r9
    1bae:	8f 90       	pop	r8
    1bb0:	08 95       	ret

00001bb2 <init>:
init():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1bb2:	78 94       	sei
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1bb4:	84 b5       	in	r24, 0x24	; 36
    1bb6:	83 60       	ori	r24, 0x03	; 3
    1bb8:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1bba:	85 b5       	in	r24, 0x25	; 37
    1bbc:	83 60       	ori	r24, 0x03	; 3
    1bbe:	85 bd       	out	0x25, r24	; 37
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1bc0:	ee e6       	ldi	r30, 0x6E	; 110
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	81 60       	ori	r24, 0x01	; 1
    1bc8:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1bca:	e1 e8       	ldi	r30, 0x81	; 129
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1bd2:	80 81       	ld	r24, Z
    1bd4:	81 60       	ori	r24, 0x01	; 1
    1bd6:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1bd8:	e0 e8       	ldi	r30, 0x80	; 128
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	81 60       	ori	r24, 0x01	; 1
    1be0:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1be2:	e1 eb       	ldi	r30, 0xB1	; 177
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	84 60       	ori	r24, 0x04	; 4
    1bea:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1bec:	e0 eb       	ldi	r30, 0xB0	; 176
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	81 60       	ori	r24, 0x01	; 1
    1bf4:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    1bf6:	e1 e9       	ldi	r30, 0x91	; 145
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	83 60       	ori	r24, 0x03	; 3
    1bfe:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    1c00:	e0 e9       	ldi	r30, 0x90	; 144
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	81 60       	ori	r24, 0x01	; 1
    1c08:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    1c0a:	e1 ea       	ldi	r30, 0xA1	; 161
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	83 60       	ori	r24, 0x03	; 3
    1c12:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    1c14:	e0 ea       	ldi	r30, 0xA0	; 160
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	81 60       	ori	r24, 0x01	; 1
    1c1c:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    1c1e:	e1 e2       	ldi	r30, 0x21	; 33
    1c20:	f1 e0       	ldi	r31, 0x01	; 1
    1c22:	80 81       	ld	r24, Z
    1c24:	83 60       	ori	r24, 0x03	; 3
    1c26:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    1c28:	e0 e2       	ldi	r30, 0x20	; 32
    1c2a:	f1 e0       	ldi	r31, 0x01	; 1
    1c2c:	80 81       	ld	r24, Z
    1c2e:	81 60       	ori	r24, 0x01	; 1
    1c30:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    1c32:	86 e8       	ldi	r24, 0x86	; 134
    1c34:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1c38:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    1c3c:	08 95       	ret

00001c3e <turnOffPWM>:
turnOffPWM():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    1c3e:	82 50       	subi	r24, 0x02	; 2
    1c40:	82 31       	cpi	r24, 0x12	; 18
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <turnOffPWM+0x8>
    1c44:	5f c0       	rjmp	.+190    	; 0x1d04 <turnOffPWM+0xc6>
    1c46:	e8 2f       	mov	r30, r24
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	88 27       	eor	r24, r24
    1c4c:	e5 5d       	subi	r30, 0xD5	; 213
    1c4e:	f1 4f       	sbci	r31, 0xF1	; 241
    1c50:	8f 4f       	sbci	r24, 0xFF	; 255
    1c52:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__tablejump2__>
    1c56:	7f 0e       	add	r7, r31
    1c58:	83 0e       	add	r8, r19
    1c5a:	3d 0e       	add	r3, r29
    1c5c:	43 0e       	add	r4, r19
    1c5e:	47 0e       	add	r4, r23
    1c60:	82 0e       	add	r8, r18
    1c62:	4b 0e       	add	r4, r27
    1c64:	51 0e       	add	r5, r17
    1c66:	55 0e       	add	r5, r21
    1c68:	5b 0e       	add	r5, r27
    1c6a:	5f 0e       	add	r5, r31
    1c6c:	63 0e       	add	r6, r19
    1c6e:	69 0e       	add	r6, r25
    1c70:	6d 0e       	add	r6, r29
    1c72:	82 0e       	add	r8, r18
    1c74:	71 0e       	add	r7, r17
    1c76:	77 0e       	add	r7, r23
    1c78:	7b 0e       	add	r7, r27
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1c7a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c7e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1c80:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    1c84:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1c86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c8a:	8f 7d       	andi	r24, 0xDF	; 223
    1c8c:	f9 cf       	rjmp	.-14     	; 0x1c80 <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    1c8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c92:	87 7f       	andi	r24, 0xF7	; 247
    1c94:	f5 cf       	rjmp	.-22     	; 0x1c80 <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    1c96:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1c9a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1c9c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    1ca0:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1ca2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1ca6:	8f 7d       	andi	r24, 0xDF	; 223
    1ca8:	f9 cf       	rjmp	.-14     	; 0x1c9c <turnOffPWM+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    1caa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1cae:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    1cb0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    1cb4:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    1cb6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1cba:	8f 7d       	andi	r24, 0xDF	; 223
    1cbc:	f9 cf       	rjmp	.-14     	; 0x1cb0 <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    1cbe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1cc2:	87 7f       	andi	r24, 0xF7	; 247
    1cc4:	f5 cf       	rjmp	.-22     	; 0x1cb0 <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    1cc6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1cca:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    1ccc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    1cd0:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    1cd2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1cd6:	8f 7d       	andi	r24, 0xDF	; 223
    1cd8:	f9 cf       	rjmp	.-14     	; 0x1ccc <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    1cda:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1cde:	87 7f       	andi	r24, 0xF7	; 247
    1ce0:	f5 cf       	rjmp	.-22     	; 0x1ccc <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    1ce2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1ce6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    1ce8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    1cec:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    1cee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1cf2:	8f 7d       	andi	r24, 0xDF	; 223
    1cf4:	f9 cf       	rjmp	.-14     	; 0x1ce8 <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    1cf6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1cfa:	87 7f       	andi	r24, 0xF7	; 247
    1cfc:	f5 cf       	rjmp	.-22     	; 0x1ce8 <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1cfe:	84 b5       	in	r24, 0x24	; 36
    1d00:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1d02:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1d04:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1d06:	84 b5       	in	r24, 0x24	; 36
    1d08:	8f 7d       	andi	r24, 0xDF	; 223
    1d0a:	fb cf       	rjmp	.-10     	; 0x1d02 <turnOffPWM+0xc4>

00001d0c <pinMode>:
pinMode():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	fc 01       	movw	r30, r24
    1d14:	e8 56       	subi	r30, 0x68	; 104
    1d16:	fd 4f       	sbci	r31, 0xFD	; 253
    1d18:	24 91       	lpm	r18, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1d1a:	82 51       	subi	r24, 0x12	; 18
    1d1c:	9d 4f       	sbci	r25, 0xFD	; 253
    1d1e:	fc 01       	movw	r30, r24
    1d20:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1d22:	88 23       	and	r24, r24
    1d24:	c9 f0       	breq	.+50     	; 0x1d58 <pinMode+0x4c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	e2 5a       	subi	r30, 0xA2	; 162
    1d30:	fc 4f       	sbci	r31, 0xFC	; 252
    1d32:	a5 91       	lpm	r26, Z+
    1d34:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1d36:	fc 01       	movw	r30, r24
    1d38:	ec 5b       	subi	r30, 0xBC	; 188
    1d3a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d3c:	c5 91       	lpm	r28, Z+
    1d3e:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1d40:	61 11       	cpse	r22, r1
    1d42:	0d c0       	rjmp	.+26     	; 0x1d5e <pinMode+0x52>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1d44:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1d46:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1d48:	8c 91       	ld	r24, X
    1d4a:	20 95       	com	r18
    1d4c:	82 23       	and	r24, r18
    1d4e:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1d50:	88 81       	ld	r24, Y
    1d52:	28 23       	and	r18, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1d54:	28 83       	st	Y, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1d56:	9f bf       	out	0x3f, r25	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1d5e:	62 30       	cpi	r22, 0x02	; 2
    1d60:	51 f4       	brne	.+20     	; 0x1d76 <pinMode+0x6a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1d62:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1d64:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1d66:	3c 91       	ld	r19, X
    1d68:	82 2f       	mov	r24, r18
    1d6a:	80 95       	com	r24
    1d6c:	83 23       	and	r24, r19
    1d6e:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1d70:	e8 81       	ld	r30, Y
    1d72:	2e 2b       	or	r18, r30
    1d74:	ef cf       	rjmp	.-34     	; 0x1d54 <pinMode+0x48>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1d76:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1d78:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1d7a:	ec 91       	ld	r30, X
    1d7c:	2e 2b       	or	r18, r30
    1d7e:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1d80:	8f bf       	out	0x3f, r24	; 63
    1d82:	ea cf       	rjmp	.-44     	; 0x1d58 <pinMode+0x4c>

00001d84 <digitalWrite>:
digitalWrite():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	f9 01       	movw	r30, r18
    1d90:	ee 5b       	subi	r30, 0xBE	; 190
    1d92:	fd 4f       	sbci	r31, 0xFD	; 253
    1d94:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1d96:	f9 01       	movw	r30, r18
    1d98:	e8 56       	subi	r30, 0x68	; 104
    1d9a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d9c:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    1d9e:	f9 01       	movw	r30, r18
    1da0:	e2 51       	subi	r30, 0x12	; 18
    1da2:	fd 4f       	sbci	r31, 0xFD	; 253
    1da4:	c4 91       	lpm	r28, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1da6:	cc 23       	and	r28, r28
    1da8:	a9 f0       	breq	.+42     	; 0x1dd4 <digitalWrite+0x50>
    1daa:	16 2f       	mov	r17, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1dac:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1dae:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <turnOffPWM>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1db2:	ec 2f       	mov	r30, r28
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	ec 5b       	subi	r30, 0xBC	; 188
    1dbc:	fc 4f       	sbci	r31, 0xFC	; 252
    1dbe:	a5 91       	lpm	r26, Z+
    1dc0:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1dc2:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    1dc4:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1dc6:	ec 91       	ld	r30, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1dc8:	11 11       	cpse	r17, r1
    1dca:	08 c0       	rjmp	.+16     	; 0x1ddc <digitalWrite+0x58>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1dcc:	d0 95       	com	r29
    1dce:	de 23       	and	r29, r30
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1dd0:	dc 93       	st	X, r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1dd2:	8f bf       	out	0x3f, r24	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1ddc:	de 2b       	or	r29, r30
    1dde:	f8 cf       	rjmp	.-16     	; 0x1dd0 <digitalWrite+0x4c>

00001de0 <yield>:
__empty():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    1de0:	08 95       	ret

00001de2 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1de2:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1de4:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1de6:	16 f4       	brtc	.+4      	; 0x1dec <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    1de8:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    1dea:	07 d0       	rcall	.+14     	; 0x1dfa <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    1dec:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1dee:	09 d0       	rcall	.+18     	; 0x1e02 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1df0:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1df4:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1df6:	05 d0       	rcall	.+10     	; 0x1e02 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    1df8:	3e f4       	brtc	.+14     	; 0x1e08 <__divmodhi4_exit>

00001dfa <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    1dfa:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    1dfc:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1e00:	08 95       	ret

00001e02 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1e02:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1e04:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255

00001e08 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1e08:	08 95       	ret

00001e0a <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1e0a:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1e0c:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1e0e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1e10:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1e12:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1e14:	0d c0       	rjmp	.+26     	; 0x1e30 <__udivmodsi4_ep>

00001e16 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1e16:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1e18:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1e1a:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1e1c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1e1e:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1e20:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1e22:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1e24:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1e26:	20 f0       	brcs	.+8      	; 0x1e30 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1e28:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1e2a:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1e2c:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1e2e:	f5 0b       	sbc	r31, r21

00001e30 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1e30:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1e32:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1e34:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1e36:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1e38:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1e3c:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1e3e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1e40:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1e42:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1e44:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1e46:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1e48:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1e4a:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1e4c:	08 95       	ret

00001e4e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1e4e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1e50:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    1e52:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    1e54:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    1e56:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    1e58:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    1e5a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    1e5c:	19 94       	eijmp

00001e5e <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1e5e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1e60:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1e62:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1e64:	07 c0       	rjmp	.+14     	; 0x1e74 <__udivmodhi4_ep>

00001e66 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1e66:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1e68:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1e6a:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    1e6c:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1e6e:	10 f0       	brcs	.+4      	; 0x1e74 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1e70:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1e72:	b7 0b       	sbc	r27, r23

00001e74 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1e74:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1e76:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1e78:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1e7a:	a9 f7       	brne	.-22     	; 0x1e66 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    1e7c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1e7e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1e80:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1e82:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1e84:	08 95       	ret

00001e86 <strcat>:
strcat():
    1e86:	fb 01       	movw	r30, r22
    1e88:	dc 01       	movw	r26, r24
    1e8a:	0d 90       	ld	r0, X+
    1e8c:	00 20       	and	r0, r0
    1e8e:	e9 f7       	brne	.-6      	; 0x1e8a <strcat+0x4>
    1e90:	11 97       	sbiw	r26, 0x01	; 1
    1e92:	01 90       	ld	r0, Z+
    1e94:	0d 92       	st	X+, r0
    1e96:	00 20       	and	r0, r0
    1e98:	e1 f7       	brne	.-8      	; 0x1e92 <strcat+0xc>
    1e9a:	08 95       	ret

00001e9c <strstr>:
strstr():
    1e9c:	fb 01       	movw	r30, r22
    1e9e:	51 91       	ld	r21, Z+
    1ea0:	55 23       	and	r21, r21
    1ea2:	a9 f0       	breq	.+42     	; 0x1ece <strstr+0x32>
    1ea4:	bf 01       	movw	r22, r30
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	4d 91       	ld	r20, X+
    1eaa:	45 17       	cp	r20, r21
    1eac:	41 11       	cpse	r20, r1
    1eae:	e1 f7       	brne	.-8      	; 0x1ea8 <strstr+0xc>
    1eb0:	59 f4       	brne	.+22     	; 0x1ec8 <strstr+0x2c>
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	01 90       	ld	r0, Z+
    1eb6:	00 20       	and	r0, r0
    1eb8:	49 f0       	breq	.+18     	; 0x1ecc <strstr+0x30>
    1eba:	4d 91       	ld	r20, X+
    1ebc:	40 15       	cp	r20, r0
    1ebe:	41 11       	cpse	r20, r1
    1ec0:	c9 f3       	breq	.-14     	; 0x1eb4 <strstr+0x18>
    1ec2:	fb 01       	movw	r30, r22
    1ec4:	41 11       	cpse	r20, r1
    1ec6:	ef cf       	rjmp	.-34     	; 0x1ea6 <strstr+0xa>
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	08 95       	ret

00001ed0 <sprintf>:
sprintf():
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	2e 97       	sbiw	r28, 0x0e	; 14
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	0e 89       	ldd	r16, Y+22	; 0x16
    1eea:	1f 89       	ldd	r17, Y+23	; 0x17
    1eec:	86 e0       	ldi	r24, 0x06	; 6
    1eee:	8c 83       	std	Y+4, r24	; 0x04
    1ef0:	1a 83       	std	Y+2, r17	; 0x02
    1ef2:	09 83       	std	Y+1, r16	; 0x01
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	9f e7       	ldi	r25, 0x7F	; 127
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	ae 01       	movw	r20, r28
    1efe:	46 5e       	subi	r20, 0xE6	; 230
    1f00:	5f 4f       	sbci	r21, 0xFF	; 255
    1f02:	68 8d       	ldd	r22, Y+24	; 0x18
    1f04:	79 8d       	ldd	r23, Y+25	; 0x19
    1f06:	ce 01       	movw	r24, r28
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <vfprintf>
    1f0e:	2f 81       	ldd	r18, Y+7	; 0x07
    1f10:	38 85       	ldd	r19, Y+8	; 0x08
    1f12:	02 0f       	add	r16, r18
    1f14:	13 1f       	adc	r17, r19
    1f16:	f8 01       	movw	r30, r16
    1f18:	10 82       	st	Z, r1
    1f1a:	2e 96       	adiw	r28, 0x0e	; 14
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	08 95       	ret

00001f30 <vfprintf>:
vfprintf():
    1f30:	2f 92       	push	r2
    1f32:	3f 92       	push	r3
    1f34:	4f 92       	push	r4
    1f36:	5f 92       	push	r5
    1f38:	6f 92       	push	r6
    1f3a:	7f 92       	push	r7
    1f3c:	8f 92       	push	r8
    1f3e:	9f 92       	push	r9
    1f40:	af 92       	push	r10
    1f42:	bf 92       	push	r11
    1f44:	cf 92       	push	r12
    1f46:	df 92       	push	r13
    1f48:	ef 92       	push	r14
    1f4a:	ff 92       	push	r15
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <vfprintf+0x26>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <vfprintf+0x28>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <vfprintf+0x2a>
    1f5a:	1f 92       	push	r1
    1f5c:	1f 92       	push	r1
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	7c 01       	movw	r14, r24
    1f64:	3b 01       	movw	r6, r22
    1f66:	8a 01       	movw	r16, r20
    1f68:	fc 01       	movw	r30, r24
    1f6a:	17 82       	std	Z+7, r1	; 0x07
    1f6c:	16 82       	std	Z+6, r1	; 0x06
    1f6e:	83 81       	ldd	r24, Z+3	; 0x03
    1f70:	81 ff       	sbrs	r24, 1
    1f72:	dd c1       	rjmp	.+954    	; 0x232e <__stack+0x12f>
    1f74:	ce 01       	movw	r24, r28
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	5c 01       	movw	r10, r24
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	f3 01       	movw	r30, r6
    1f80:	93 fd       	sbrc	r25, 3
    1f82:	85 91       	lpm	r24, Z+
    1f84:	93 ff       	sbrs	r25, 3
    1f86:	81 91       	ld	r24, Z+
    1f88:	3f 01       	movw	r6, r30
    1f8a:	88 23       	and	r24, r24
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <vfprintf+0x60>
    1f8e:	53 c1       	rjmp	.+678    	; 0x2236 <__stack+0x37>
    1f90:	85 32       	cpi	r24, 0x25	; 37
    1f92:	39 f4       	brne	.+14     	; 0x1fa2 <vfprintf+0x72>
    1f94:	93 fd       	sbrc	r25, 3
    1f96:	85 91       	lpm	r24, Z+
    1f98:	93 ff       	sbrs	r25, 3
    1f9a:	81 91       	ld	r24, Z+
    1f9c:	3f 01       	movw	r6, r30
    1f9e:	85 32       	cpi	r24, 0x25	; 37
    1fa0:	29 f4       	brne	.+10     	; 0x1fac <vfprintf+0x7c>
    1fa2:	b7 01       	movw	r22, r14
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 b0 11 	call	0x2360	; 0x2360 <fputc>
    1faa:	e7 cf       	rjmp	.-50     	; 0x1f7a <vfprintf+0x4a>
    1fac:	91 2c       	mov	r9, r1
    1fae:	21 2c       	mov	r2, r1
    1fb0:	31 2c       	mov	r3, r1
    1fb2:	ff e1       	ldi	r31, 0x1F	; 31
    1fb4:	f3 15       	cp	r31, r3
    1fb6:	38 f0       	brcs	.+14     	; 0x1fc6 <vfprintf+0x96>
    1fb8:	8b 32       	cpi	r24, 0x2B	; 43
    1fba:	11 f1       	breq	.+68     	; 0x2000 <vfprintf+0xd0>
    1fbc:	90 f4       	brcc	.+36     	; 0x1fe2 <vfprintf+0xb2>
    1fbe:	80 32       	cpi	r24, 0x20	; 32
    1fc0:	09 f1       	breq	.+66     	; 0x2004 <vfprintf+0xd4>
    1fc2:	83 32       	cpi	r24, 0x23	; 35
    1fc4:	29 f1       	breq	.+74     	; 0x2010 <vfprintf+0xe0>
    1fc6:	37 fc       	sbrc	r3, 7
    1fc8:	3c c0       	rjmp	.+120    	; 0x2042 <vfprintf+0x112>
    1fca:	20 ed       	ldi	r18, 0xD0	; 208
    1fcc:	28 0f       	add	r18, r24
    1fce:	2a 30       	cpi	r18, 0x0A	; 10
    1fd0:	50 f5       	brcc	.+84     	; 0x2026 <vfprintf+0xf6>
    1fd2:	36 fe       	sbrs	r3, 6
    1fd4:	20 c0       	rjmp	.+64     	; 0x2016 <vfprintf+0xe6>
    1fd6:	8a e0       	ldi	r24, 0x0A	; 10
    1fd8:	98 9e       	mul	r9, r24
    1fda:	20 0d       	add	r18, r0
    1fdc:	11 24       	eor	r1, r1
    1fde:	92 2e       	mov	r9, r18
    1fe0:	06 c0       	rjmp	.+12     	; 0x1fee <vfprintf+0xbe>
    1fe2:	8d 32       	cpi	r24, 0x2D	; 45
    1fe4:	91 f0       	breq	.+36     	; 0x200a <vfprintf+0xda>
    1fe6:	80 33       	cpi	r24, 0x30	; 48
    1fe8:	71 f7       	brne	.-36     	; 0x1fc6 <vfprintf+0x96>
    1fea:	68 94       	set
    1fec:	30 f8       	bld	r3, 0
    1fee:	f3 01       	movw	r30, r6
    1ff0:	93 fd       	sbrc	r25, 3
    1ff2:	85 91       	lpm	r24, Z+
    1ff4:	93 ff       	sbrs	r25, 3
    1ff6:	81 91       	ld	r24, Z+
    1ff8:	3f 01       	movw	r6, r30
    1ffa:	81 11       	cpse	r24, r1
    1ffc:	da cf       	rjmp	.-76     	; 0x1fb2 <vfprintf+0x82>
    1ffe:	21 c0       	rjmp	.+66     	; 0x2042 <vfprintf+0x112>
    2000:	68 94       	set
    2002:	31 f8       	bld	r3, 1
    2004:	68 94       	set
    2006:	32 f8       	bld	r3, 2
    2008:	f2 cf       	rjmp	.-28     	; 0x1fee <vfprintf+0xbe>
    200a:	68 94       	set
    200c:	33 f8       	bld	r3, 3
    200e:	ef cf       	rjmp	.-34     	; 0x1fee <vfprintf+0xbe>
    2010:	68 94       	set
    2012:	34 f8       	bld	r3, 4
    2014:	ec cf       	rjmp	.-40     	; 0x1fee <vfprintf+0xbe>
    2016:	ea e0       	ldi	r30, 0x0A	; 10
    2018:	2e 9e       	mul	r2, r30
    201a:	20 0d       	add	r18, r0
    201c:	11 24       	eor	r1, r1
    201e:	22 2e       	mov	r2, r18
    2020:	68 94       	set
    2022:	35 f8       	bld	r3, 5
    2024:	e4 cf       	rjmp	.-56     	; 0x1fee <vfprintf+0xbe>
    2026:	8e 32       	cpi	r24, 0x2E	; 46
    2028:	29 f4       	brne	.+10     	; 0x2034 <vfprintf+0x104>
    202a:	36 fc       	sbrc	r3, 6
    202c:	04 c1       	rjmp	.+520    	; 0x2236 <__stack+0x37>
    202e:	68 94       	set
    2030:	36 f8       	bld	r3, 6
    2032:	dd cf       	rjmp	.-70     	; 0x1fee <vfprintf+0xbe>
    2034:	8c 36       	cpi	r24, 0x6C	; 108
    2036:	19 f4       	brne	.+6      	; 0x203e <vfprintf+0x10e>
    2038:	68 94       	set
    203a:	37 f8       	bld	r3, 7
    203c:	d8 cf       	rjmp	.-80     	; 0x1fee <vfprintf+0xbe>
    203e:	88 36       	cpi	r24, 0x68	; 104
    2040:	b1 f2       	breq	.-84     	; 0x1fee <vfprintf+0xbe>
    2042:	98 2f       	mov	r25, r24
    2044:	9f 7d       	andi	r25, 0xDF	; 223
    2046:	95 54       	subi	r25, 0x45	; 69
    2048:	93 30       	cpi	r25, 0x03	; 3
    204a:	e0 f0       	brcs	.+56     	; 0x2084 <vfprintf+0x154>
    204c:	83 36       	cpi	r24, 0x63	; 99
    204e:	a1 f1       	breq	.+104    	; 0x20b8 <vfprintf+0x188>
    2050:	83 37       	cpi	r24, 0x73	; 115
    2052:	c1 f1       	breq	.+112    	; 0x20c4 <vfprintf+0x194>
    2054:	83 35       	cpi	r24, 0x53	; 83
    2056:	09 f0       	breq	.+2      	; 0x205a <vfprintf+0x12a>
    2058:	63 c0       	rjmp	.+198    	; 0x2120 <vfprintf+0x1f0>
    205a:	28 01       	movw	r4, r16
    205c:	f2 e0       	ldi	r31, 0x02	; 2
    205e:	4f 0e       	add	r4, r31
    2060:	51 1c       	adc	r5, r1
    2062:	f8 01       	movw	r30, r16
    2064:	c0 80       	ld	r12, Z
    2066:	d1 80       	ldd	r13, Z+1	; 0x01
    2068:	69 2d       	mov	r22, r9
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	36 fc       	sbrc	r3, 6
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <vfprintf+0x144>
    2070:	6f ef       	ldi	r22, 0xFF	; 255
    2072:	7f ef       	ldi	r23, 0xFF	; 255
    2074:	c6 01       	movw	r24, r12
    2076:	0e 94 9a 11 	call	0x2334	; 0x2334 <strnlen_P>
    207a:	4c 01       	movw	r8, r24
    207c:	68 94       	set
    207e:	37 f8       	bld	r3, 7
    2080:	82 01       	movw	r16, r4
    2082:	0a c0       	rjmp	.+20     	; 0x2098 <vfprintf+0x168>
    2084:	0c 5f       	subi	r16, 0xFC	; 252
    2086:	1f 4f       	sbci	r17, 0xFF	; 255
    2088:	ff e3       	ldi	r31, 0x3F	; 63
    208a:	f9 83       	std	Y+1, r31	; 0x01
    208c:	88 24       	eor	r8, r8
    208e:	83 94       	inc	r8
    2090:	91 2c       	mov	r9, r1
    2092:	65 01       	movw	r12, r10
    2094:	e8 94       	clt
    2096:	37 f8       	bld	r3, 7
    2098:	33 fe       	sbrs	r3, 3
    209a:	2d c0       	rjmp	.+90     	; 0x20f6 <vfprintf+0x1c6>
    209c:	52 2c       	mov	r5, r2
    209e:	81 14       	cp	r8, r1
    20a0:	91 04       	cpc	r9, r1
    20a2:	71 f5       	brne	.+92     	; 0x2100 <vfprintf+0x1d0>
    20a4:	55 20       	and	r5, r5
    20a6:	09 f4       	brne	.+2      	; 0x20aa <vfprintf+0x17a>
    20a8:	68 cf       	rjmp	.-304    	; 0x1f7a <vfprintf+0x4a>
    20aa:	b7 01       	movw	r22, r14
    20ac:	80 e2       	ldi	r24, 0x20	; 32
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 b0 11 	call	0x2360	; 0x2360 <fputc>
    20b4:	5a 94       	dec	r5
    20b6:	f6 cf       	rjmp	.-20     	; 0x20a4 <vfprintf+0x174>
    20b8:	f8 01       	movw	r30, r16
    20ba:	80 81       	ld	r24, Z
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	0e 5f       	subi	r16, 0xFE	; 254
    20c0:	1f 4f       	sbci	r17, 0xFF	; 255
    20c2:	e4 cf       	rjmp	.-56     	; 0x208c <vfprintf+0x15c>
    20c4:	28 01       	movw	r4, r16
    20c6:	f2 e0       	ldi	r31, 0x02	; 2
    20c8:	4f 0e       	add	r4, r31
    20ca:	51 1c       	adc	r5, r1
    20cc:	f8 01       	movw	r30, r16
    20ce:	c0 80       	ld	r12, Z
    20d0:	d1 80       	ldd	r13, Z+1	; 0x01
    20d2:	69 2d       	mov	r22, r9
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	36 fc       	sbrc	r3, 6
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <vfprintf+0x1ae>
    20da:	6f ef       	ldi	r22, 0xFF	; 255
    20dc:	7f ef       	ldi	r23, 0xFF	; 255
    20de:	c6 01       	movw	r24, r12
    20e0:	0e 94 a5 11 	call	0x234a	; 0x234a <strnlen>
    20e4:	4c 01       	movw	r8, r24
    20e6:	82 01       	movw	r16, r4
    20e8:	d5 cf       	rjmp	.-86     	; 0x2094 <vfprintf+0x164>
    20ea:	b7 01       	movw	r22, r14
    20ec:	80 e2       	ldi	r24, 0x20	; 32
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	0e 94 b0 11 	call	0x2360	; 0x2360 <fputc>
    20f4:	2a 94       	dec	r2
    20f6:	28 14       	cp	r2, r8
    20f8:	19 04       	cpc	r1, r9
    20fa:	09 f0       	breq	.+2      	; 0x20fe <vfprintf+0x1ce>
    20fc:	b0 f7       	brcc	.-20     	; 0x20ea <vfprintf+0x1ba>
    20fe:	ce cf       	rjmp	.-100    	; 0x209c <vfprintf+0x16c>
    2100:	f6 01       	movw	r30, r12
    2102:	37 fc       	sbrc	r3, 7
    2104:	85 91       	lpm	r24, Z+
    2106:	37 fe       	sbrs	r3, 7
    2108:	81 91       	ld	r24, Z+
    210a:	6f 01       	movw	r12, r30
    210c:	b7 01       	movw	r22, r14
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 b0 11 	call	0x2360	; 0x2360 <fputc>
    2114:	51 10       	cpse	r5, r1
    2116:	5a 94       	dec	r5
    2118:	f1 e0       	ldi	r31, 0x01	; 1
    211a:	8f 1a       	sub	r8, r31
    211c:	91 08       	sbc	r9, r1
    211e:	bf cf       	rjmp	.-130    	; 0x209e <vfprintf+0x16e>
    2120:	84 36       	cpi	r24, 0x64	; 100
    2122:	19 f0       	breq	.+6      	; 0x212a <vfprintf+0x1fa>
    2124:	89 36       	cpi	r24, 0x69	; 105
    2126:	09 f0       	breq	.+2      	; 0x212a <vfprintf+0x1fa>
    2128:	77 c0       	rjmp	.+238    	; 0x2218 <__stack+0x19>
    212a:	f8 01       	movw	r30, r16
    212c:	37 fe       	sbrs	r3, 7
    212e:	6b c0       	rjmp	.+214    	; 0x2206 <__stack+0x7>
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	0c 5f       	subi	r16, 0xFC	; 252
    213a:	1f 4f       	sbci	r17, 0xFF	; 255
    213c:	f3 2d       	mov	r31, r3
    213e:	ff 76       	andi	r31, 0x6F	; 111
    2140:	3f 2e       	mov	r3, r31
    2142:	97 ff       	sbrs	r25, 7
    2144:	09 c0       	rjmp	.+18     	; 0x2158 <vfprintf+0x228>
    2146:	90 95       	com	r25
    2148:	80 95       	com	r24
    214a:	70 95       	com	r23
    214c:	61 95       	neg	r22
    214e:	7f 4f       	sbci	r23, 0xFF	; 255
    2150:	8f 4f       	sbci	r24, 0xFF	; 255
    2152:	9f 4f       	sbci	r25, 0xFF	; 255
    2154:	68 94       	set
    2156:	37 f8       	bld	r3, 7
    2158:	2a e0       	ldi	r18, 0x0A	; 10
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	a5 01       	movw	r20, r10
    215e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__ultoa_invert>
    2162:	c8 2e       	mov	r12, r24
    2164:	ca 18       	sub	r12, r10
    2166:	8c 2c       	mov	r8, r12
    2168:	43 2c       	mov	r4, r3
    216a:	36 fe       	sbrs	r3, 6
    216c:	0c c0       	rjmp	.+24     	; 0x2186 <vfprintf+0x256>
    216e:	e8 94       	clt
    2170:	40 f8       	bld	r4, 0
    2172:	c9 14       	cp	r12, r9
    2174:	40 f4       	brcc	.+16     	; 0x2186 <vfprintf+0x256>
    2176:	34 fe       	sbrs	r3, 4
    2178:	05 c0       	rjmp	.+10     	; 0x2184 <vfprintf+0x254>
    217a:	32 fc       	sbrc	r3, 2
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <vfprintf+0x254>
    217e:	f3 2d       	mov	r31, r3
    2180:	fe 7e       	andi	r31, 0xEE	; 238
    2182:	4f 2e       	mov	r4, r31
    2184:	89 2c       	mov	r8, r9
    2186:	44 fe       	sbrs	r4, 4
    2188:	aa c0       	rjmp	.+340    	; 0x22de <__stack+0xdf>
    218a:	fe 01       	movw	r30, r28
    218c:	ec 0d       	add	r30, r12
    218e:	f1 1d       	adc	r31, r1
    2190:	80 81       	ld	r24, Z
    2192:	80 33       	cpi	r24, 0x30	; 48
    2194:	09 f0       	breq	.+2      	; 0x2198 <vfprintf+0x268>
    2196:	9c c0       	rjmp	.+312    	; 0x22d0 <__stack+0xd1>
    2198:	24 2d       	mov	r18, r4
    219a:	29 7e       	andi	r18, 0xE9	; 233
    219c:	42 2e       	mov	r4, r18
    219e:	84 2d       	mov	r24, r4
    21a0:	88 70       	andi	r24, 0x08	; 8
    21a2:	58 2e       	mov	r5, r24
    21a4:	43 fc       	sbrc	r4, 3
    21a6:	aa c0       	rjmp	.+340    	; 0x22fc <__stack+0xfd>
    21a8:	40 fe       	sbrs	r4, 0
    21aa:	a4 c0       	rjmp	.+328    	; 0x22f4 <__stack+0xf5>
    21ac:	9c 2c       	mov	r9, r12
    21ae:	82 14       	cp	r8, r2
    21b0:	18 f4       	brcc	.+6      	; 0x21b8 <vfprintf+0x288>
    21b2:	2c 0c       	add	r2, r12
    21b4:	92 2c       	mov	r9, r2
    21b6:	98 18       	sub	r9, r8
    21b8:	44 fe       	sbrs	r4, 4
    21ba:	a6 c0       	rjmp	.+332    	; 0x2308 <__stack+0x109>
    21bc:	b7 01       	movw	r22, r14
    21be:	80 e3       	ldi	r24, 0x30	; 48
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	0e 94 b0 11 	call	0x2360	; 0x2360 <fputc>
    21c6:	42 fe       	sbrs	r4, 2
    21c8:	09 c0       	rjmp	.+18     	; 0x21dc <vfprintf+0x2ac>
    21ca:	88 e7       	ldi	r24, 0x78	; 120
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	41 fe       	sbrs	r4, 1
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <vfprintf+0x2a6>
    21d2:	88 e5       	ldi	r24, 0x58	; 88
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	b7 01       	movw	r22, r14
    21d8:	0e 94 b0 11 	call	0x2360	; 0x2360 <fputc>
    21dc:	c9 14       	cp	r12, r9
    21de:	08 f4       	brcc	.+2      	; 0x21e2 <vfprintf+0x2b2>
    21e0:	9f c0       	rjmp	.+318    	; 0x2320 <__stack+0x121>
    21e2:	ca 94       	dec	r12
    21e4:	d1 2c       	mov	r13, r1
    21e6:	9f ef       	ldi	r25, 0xFF	; 255
    21e8:	c9 1a       	sub	r12, r25
    21ea:	d9 0a       	sbc	r13, r25
    21ec:	ca 0c       	add	r12, r10
    21ee:	db 1c       	adc	r13, r11
    21f0:	f6 01       	movw	r30, r12
    21f2:	82 91       	ld	r24, -Z
    21f4:	6f 01       	movw	r12, r30
    21f6:	b7 01       	movw	r22, r14
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	0e 94 b0 11 	call	0x2360	; 0x2360 <fputc>
    21fe:	ac 14       	cp	r10, r12
    2200:	bd 04       	cpc	r11, r13
    2202:	b1 f7       	brne	.-20     	; 0x21f0 <vfprintf+0x2c0>
    2204:	4f cf       	rjmp	.-354    	; 0x20a4 <vfprintf+0x174>
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	07 2e       	mov	r0, r23
    220c:	00 0c       	add	r0, r0
    220e:	88 0b       	sbc	r24, r24
    2210:	99 0b       	sbc	r25, r25
    2212:	0e 5f       	subi	r16, 0xFE	; 254
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	92 cf       	rjmp	.-220    	; 0x213c <vfprintf+0x20c>
    2218:	d3 2c       	mov	r13, r3
    221a:	e8 94       	clt
    221c:	d4 f8       	bld	r13, 4
    221e:	2a e0       	ldi	r18, 0x0A	; 10
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	85 37       	cpi	r24, 0x75	; 117
    2224:	e1 f1       	breq	.+120    	; 0x229e <__stack+0x9f>
    2226:	23 2d       	mov	r18, r3
    2228:	29 7f       	andi	r18, 0xF9	; 249
    222a:	d2 2e       	mov	r13, r18
    222c:	8f 36       	cpi	r24, 0x6F	; 111
    222e:	a9 f1       	breq	.+106    	; 0x229a <__stack+0x9b>
    2230:	f0 f4       	brcc	.+60     	; 0x226e <__stack+0x6f>
    2232:	88 35       	cpi	r24, 0x58	; 88
    2234:	51 f1       	breq	.+84     	; 0x228a <__stack+0x8b>
    2236:	f7 01       	movw	r30, r14
    2238:	86 81       	ldd	r24, Z+6	; 0x06
    223a:	97 81       	ldd	r25, Z+7	; 0x07
    223c:	2b 96       	adiw	r28, 0x0b	; 11
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	bf 90       	pop	r11
    225a:	af 90       	pop	r10
    225c:	9f 90       	pop	r9
    225e:	8f 90       	pop	r8
    2260:	7f 90       	pop	r7
    2262:	6f 90       	pop	r6
    2264:	5f 90       	pop	r5
    2266:	4f 90       	pop	r4
    2268:	3f 90       	pop	r3
    226a:	2f 90       	pop	r2
    226c:	08 95       	ret
    226e:	80 37       	cpi	r24, 0x70	; 112
    2270:	49 f0       	breq	.+18     	; 0x2284 <__stack+0x85>
    2272:	88 37       	cpi	r24, 0x78	; 120
    2274:	01 f7       	brne	.-64     	; 0x2236 <__stack+0x37>
    2276:	d4 fe       	sbrs	r13, 4
    2278:	02 c0       	rjmp	.+4      	; 0x227e <__stack+0x7f>
    227a:	68 94       	set
    227c:	d2 f8       	bld	r13, 2
    227e:	20 e1       	ldi	r18, 0x10	; 16
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	0d c0       	rjmp	.+26     	; 0x229e <__stack+0x9f>
    2284:	68 94       	set
    2286:	d4 f8       	bld	r13, 4
    2288:	f6 cf       	rjmp	.-20     	; 0x2276 <__stack+0x77>
    228a:	34 fe       	sbrs	r3, 4
    228c:	03 c0       	rjmp	.+6      	; 0x2294 <__stack+0x95>
    228e:	82 2f       	mov	r24, r18
    2290:	86 60       	ori	r24, 0x06	; 6
    2292:	d8 2e       	mov	r13, r24
    2294:	20 e1       	ldi	r18, 0x10	; 16
    2296:	32 e0       	ldi	r19, 0x02	; 2
    2298:	02 c0       	rjmp	.+4      	; 0x229e <__stack+0x9f>
    229a:	28 e0       	ldi	r18, 0x08	; 8
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	f8 01       	movw	r30, r16
    22a0:	d7 fe       	sbrs	r13, 7
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <__stack+0xc3>
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	0c 5f       	subi	r16, 0xFC	; 252
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	a5 01       	movw	r20, r10
    22b2:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__ultoa_invert>
    22b6:	c8 2e       	mov	r12, r24
    22b8:	ca 18       	sub	r12, r10
    22ba:	3d 2c       	mov	r3, r13
    22bc:	e8 94       	clt
    22be:	37 f8       	bld	r3, 7
    22c0:	52 cf       	rjmp	.-348    	; 0x2166 <vfprintf+0x236>
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	0e 5f       	subi	r16, 0xFE	; 254
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	f0 cf       	rjmp	.-32     	; 0x22b0 <__stack+0xb1>
    22d0:	42 fc       	sbrc	r4, 2
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <__stack+0xd9>
    22d4:	83 94       	inc	r8
    22d6:	63 cf       	rjmp	.-314    	; 0x219e <vfprintf+0x26e>
    22d8:	83 94       	inc	r8
    22da:	83 94       	inc	r8
    22dc:	60 cf       	rjmp	.-320    	; 0x219e <vfprintf+0x26e>
    22de:	84 2d       	mov	r24, r4
    22e0:	86 78       	andi	r24, 0x86	; 134
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <__stack+0xe7>
    22e4:	5c cf       	rjmp	.-328    	; 0x219e <vfprintf+0x26e>
    22e6:	f6 cf       	rjmp	.-20     	; 0x22d4 <__stack+0xd5>
    22e8:	b7 01       	movw	r22, r14
    22ea:	80 e2       	ldi	r24, 0x20	; 32
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 b0 11 	call	0x2360	; 0x2360 <fputc>
    22f2:	83 94       	inc	r8
    22f4:	82 14       	cp	r8, r2
    22f6:	c0 f3       	brcs	.-16     	; 0x22e8 <__stack+0xe9>
    22f8:	51 2c       	mov	r5, r1
    22fa:	5e cf       	rjmp	.-324    	; 0x21b8 <vfprintf+0x288>
    22fc:	52 2c       	mov	r5, r2
    22fe:	58 18       	sub	r5, r8
    2300:	82 14       	cp	r8, r2
    2302:	08 f4       	brcc	.+2      	; 0x2306 <__stack+0x107>
    2304:	59 cf       	rjmp	.-334    	; 0x21b8 <vfprintf+0x288>
    2306:	f8 cf       	rjmp	.-16     	; 0x22f8 <__stack+0xf9>
    2308:	84 2d       	mov	r24, r4
    230a:	86 78       	andi	r24, 0x86	; 134
    230c:	09 f4       	brne	.+2      	; 0x2310 <__stack+0x111>
    230e:	66 cf       	rjmp	.-308    	; 0x21dc <vfprintf+0x2ac>
    2310:	8b e2       	ldi	r24, 0x2B	; 43
    2312:	41 fe       	sbrs	r4, 1
    2314:	80 e2       	ldi	r24, 0x20	; 32
    2316:	47 fc       	sbrc	r4, 7
    2318:	8d e2       	ldi	r24, 0x2D	; 45
    231a:	b7 01       	movw	r22, r14
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	5c cf       	rjmp	.-328    	; 0x21d8 <vfprintf+0x2a8>
    2320:	b7 01       	movw	r22, r14
    2322:	80 e3       	ldi	r24, 0x30	; 48
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 b0 11 	call	0x2360	; 0x2360 <fputc>
    232a:	9a 94       	dec	r9
    232c:	57 cf       	rjmp	.-338    	; 0x21dc <vfprintf+0x2ac>
    232e:	8f ef       	ldi	r24, 0xFF	; 255
    2330:	9f ef       	ldi	r25, 0xFF	; 255
    2332:	84 cf       	rjmp	.-248    	; 0x223c <__stack+0x3d>

00002334 <strnlen_P>:
strnlen_P():
    2334:	fc 01       	movw	r30, r24
    2336:	05 90       	lpm	r0, Z+
    2338:	61 50       	subi	r22, 0x01	; 1
    233a:	70 40       	sbci	r23, 0x00	; 0
    233c:	01 10       	cpse	r0, r1
    233e:	d8 f7       	brcc	.-10     	; 0x2336 <strnlen_P+0x2>
    2340:	80 95       	com	r24
    2342:	90 95       	com	r25
    2344:	8e 0f       	add	r24, r30
    2346:	9f 1f       	adc	r25, r31
    2348:	08 95       	ret

0000234a <strnlen>:
strnlen():
    234a:	fc 01       	movw	r30, r24
    234c:	61 50       	subi	r22, 0x01	; 1
    234e:	70 40       	sbci	r23, 0x00	; 0
    2350:	01 90       	ld	r0, Z+
    2352:	01 10       	cpse	r0, r1
    2354:	d8 f7       	brcc	.-10     	; 0x234c <strnlen+0x2>
    2356:	80 95       	com	r24
    2358:	90 95       	com	r25
    235a:	8e 0f       	add	r24, r30
    235c:	9f 1f       	adc	r25, r31
    235e:	08 95       	ret

00002360 <fputc>:
fputc():
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	18 2f       	mov	r17, r24
    236a:	09 2f       	mov	r16, r25
    236c:	eb 01       	movw	r28, r22
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	81 fd       	sbrc	r24, 1
    2372:	09 c0       	rjmp	.+18     	; 0x2386 <fputc+0x26>
    2374:	1f ef       	ldi	r17, 0xFF	; 255
    2376:	0f ef       	ldi	r16, 0xFF	; 255
    2378:	81 2f       	mov	r24, r17
    237a:	90 2f       	mov	r25, r16
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	08 95       	ret
    2386:	82 ff       	sbrs	r24, 2
    2388:	14 c0       	rjmp	.+40     	; 0x23b2 <fputc+0x52>
    238a:	2e 81       	ldd	r18, Y+6	; 0x06
    238c:	3f 81       	ldd	r19, Y+7	; 0x07
    238e:	8c 81       	ldd	r24, Y+4	; 0x04
    2390:	9d 81       	ldd	r25, Y+5	; 0x05
    2392:	28 17       	cp	r18, r24
    2394:	39 07       	cpc	r19, r25
    2396:	3c f4       	brge	.+14     	; 0x23a6 <fputc+0x46>
    2398:	e8 81       	ld	r30, Y
    239a:	f9 81       	ldd	r31, Y+1	; 0x01
    239c:	cf 01       	movw	r24, r30
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	99 83       	std	Y+1, r25	; 0x01
    23a2:	88 83       	st	Y, r24
    23a4:	10 83       	st	Z, r17
    23a6:	8e 81       	ldd	r24, Y+6	; 0x06
    23a8:	9f 81       	ldd	r25, Y+7	; 0x07
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	9f 83       	std	Y+7, r25	; 0x07
    23ae:	8e 83       	std	Y+6, r24	; 0x06
    23b0:	e3 cf       	rjmp	.-58     	; 0x2378 <fputc+0x18>
    23b2:	e8 85       	ldd	r30, Y+8	; 0x08
    23b4:	f9 85       	ldd	r31, Y+9	; 0x09
    23b6:	81 2f       	mov	r24, r17
    23b8:	19 95       	eicall
    23ba:	89 2b       	or	r24, r25
    23bc:	a1 f3       	breq	.-24     	; 0x23a6 <fputc+0x46>
    23be:	da cf       	rjmp	.-76     	; 0x2374 <fputc+0x14>

000023c0 <__ultoa_invert>:
__ultoa_invert():
    23c0:	fa 01       	movw	r30, r20
    23c2:	aa 27       	eor	r26, r26
    23c4:	28 30       	cpi	r18, 0x08	; 8
    23c6:	51 f1       	breq	.+84     	; 0x241c <__ultoa_invert+0x5c>
    23c8:	20 31       	cpi	r18, 0x10	; 16
    23ca:	81 f1       	breq	.+96     	; 0x242c <__ultoa_invert+0x6c>
    23cc:	e8 94       	clt
    23ce:	6f 93       	push	r22
    23d0:	6e 7f       	andi	r22, 0xFE	; 254
    23d2:	6e 5f       	subi	r22, 0xFE	; 254
    23d4:	7f 4f       	sbci	r23, 0xFF	; 255
    23d6:	8f 4f       	sbci	r24, 0xFF	; 255
    23d8:	9f 4f       	sbci	r25, 0xFF	; 255
    23da:	af 4f       	sbci	r26, 0xFF	; 255
    23dc:	b1 e0       	ldi	r27, 0x01	; 1
    23de:	3e d0       	rcall	.+124    	; 0x245c <__ultoa_invert+0x9c>
    23e0:	b4 e0       	ldi	r27, 0x04	; 4
    23e2:	3c d0       	rcall	.+120    	; 0x245c <__ultoa_invert+0x9c>
    23e4:	67 0f       	add	r22, r23
    23e6:	78 1f       	adc	r23, r24
    23e8:	89 1f       	adc	r24, r25
    23ea:	9a 1f       	adc	r25, r26
    23ec:	a1 1d       	adc	r26, r1
    23ee:	68 0f       	add	r22, r24
    23f0:	79 1f       	adc	r23, r25
    23f2:	8a 1f       	adc	r24, r26
    23f4:	91 1d       	adc	r25, r1
    23f6:	a1 1d       	adc	r26, r1
    23f8:	6a 0f       	add	r22, r26
    23fa:	71 1d       	adc	r23, r1
    23fc:	81 1d       	adc	r24, r1
    23fe:	91 1d       	adc	r25, r1
    2400:	a1 1d       	adc	r26, r1
    2402:	20 d0       	rcall	.+64     	; 0x2444 <__ultoa_invert+0x84>
    2404:	09 f4       	brne	.+2      	; 0x2408 <__ultoa_invert+0x48>
    2406:	68 94       	set
    2408:	3f 91       	pop	r19
    240a:	2a e0       	ldi	r18, 0x0A	; 10
    240c:	26 9f       	mul	r18, r22
    240e:	11 24       	eor	r1, r1
    2410:	30 19       	sub	r19, r0
    2412:	30 5d       	subi	r19, 0xD0	; 208
    2414:	31 93       	st	Z+, r19
    2416:	de f6       	brtc	.-74     	; 0x23ce <__ultoa_invert+0xe>
    2418:	cf 01       	movw	r24, r30
    241a:	08 95       	ret
    241c:	46 2f       	mov	r20, r22
    241e:	47 70       	andi	r20, 0x07	; 7
    2420:	40 5d       	subi	r20, 0xD0	; 208
    2422:	41 93       	st	Z+, r20
    2424:	b3 e0       	ldi	r27, 0x03	; 3
    2426:	0f d0       	rcall	.+30     	; 0x2446 <__ultoa_invert+0x86>
    2428:	c9 f7       	brne	.-14     	; 0x241c <__ultoa_invert+0x5c>
    242a:	f6 cf       	rjmp	.-20     	; 0x2418 <__ultoa_invert+0x58>
    242c:	46 2f       	mov	r20, r22
    242e:	4f 70       	andi	r20, 0x0F	; 15
    2430:	40 5d       	subi	r20, 0xD0	; 208
    2432:	4a 33       	cpi	r20, 0x3A	; 58
    2434:	18 f0       	brcs	.+6      	; 0x243c <__ultoa_invert+0x7c>
    2436:	49 5d       	subi	r20, 0xD9	; 217
    2438:	31 fd       	sbrc	r19, 1
    243a:	40 52       	subi	r20, 0x20	; 32
    243c:	41 93       	st	Z+, r20
    243e:	02 d0       	rcall	.+4      	; 0x2444 <__ultoa_invert+0x84>
    2440:	a9 f7       	brne	.-22     	; 0x242c <__ultoa_invert+0x6c>
    2442:	ea cf       	rjmp	.-44     	; 0x2418 <__ultoa_invert+0x58>
    2444:	b4 e0       	ldi	r27, 0x04	; 4
    2446:	a6 95       	lsr	r26
    2448:	97 95       	ror	r25
    244a:	87 95       	ror	r24
    244c:	77 95       	ror	r23
    244e:	67 95       	ror	r22
    2450:	ba 95       	dec	r27
    2452:	c9 f7       	brne	.-14     	; 0x2446 <__ultoa_invert+0x86>
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	61 05       	cpc	r22, r1
    2458:	71 05       	cpc	r23, r1
    245a:	08 95       	ret
    245c:	9b 01       	movw	r18, r22
    245e:	ac 01       	movw	r20, r24
    2460:	0a 2e       	mov	r0, r26
    2462:	06 94       	lsr	r0
    2464:	57 95       	ror	r21
    2466:	47 95       	ror	r20
    2468:	37 95       	ror	r19
    246a:	27 95       	ror	r18
    246c:	ba 95       	dec	r27
    246e:	c9 f7       	brne	.-14     	; 0x2462 <__ultoa_invert+0xa2>
    2470:	62 0f       	add	r22, r18
    2472:	73 1f       	adc	r23, r19
    2474:	84 1f       	adc	r24, r20
    2476:	95 1f       	adc	r25, r21
    2478:	a0 1d       	adc	r26, r0
    247a:	08 95       	ret

0000247c <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    247c:	f8 94       	cli

0000247e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    247e:	ff cf       	rjmp	.-2      	; 0x247e <__stop_program>
