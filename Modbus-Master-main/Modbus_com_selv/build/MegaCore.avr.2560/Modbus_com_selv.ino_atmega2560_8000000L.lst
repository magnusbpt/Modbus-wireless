
C:\Users\mbt\AppData\Local\Temp\arduino\sketches\1AAE924997000C4711104FC46A471FAF/Modbus_com_selv.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__dtors_end>
       4:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_1>
       8:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_2>
       c:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_3>
      10:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_4>
      14:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_5>
      18:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__vector_6>
      1c:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_7>
      20:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_8>
      24:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_10>
      28:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_10>
      2c:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_10>
      30:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      34:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      38:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      3c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      40:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      44:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      48:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      4c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      50:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      54:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      58:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      5c:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__vector_23>
      60:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      64:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_25>
      68:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_26>
      6c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      70:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      74:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      78:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      7c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      80:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      84:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      88:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      8c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      90:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <__vector_36>
      94:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_37>
      98:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      9c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      ac:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b8:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_46>
      bc:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_47>
      c0:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__vector_48>
      c4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      cc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      dc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <turnOffPWM+0x58>
      e8:	0c 94 5d 07 	jmp	0xeba	; 0xeba <_GLOBAL__sub_I___vector_25>
      ec:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <turnOffPWM+0x48>
      f0:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <turnOffPWM+0x88>
      f4:	0c 94 c6 02 	jmp	0x58c	; 0x58c <SoftwareSerial::peek()>
      f8:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <turnOffPWM+0xa4>
      fc:	0c 94 53 07 	jmp	0xea6	; 0xea6 <Serial0_available()>
     100:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <turnOffPWM+0x6c>
     104:	0c 94 34 06 	jmp	0xc68	; 0xc68 <HardwareSerial::flush()>
     108:	0c 94 48 02 	jmp	0x490	; 0x490 <SoftwareSerial::read()>
     10c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <HardwareSerial::write(unsigned char)>
     110:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <Serial1_available()>
     114:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <SoftwareSerial::write(unsigned char)>
     118:	0c 94 45 02 	jmp	0x48a	; 0x48a <Print::availableForWrite()>
     11c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <turnOffPWM+0x64>
     120:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <turnOffPWM+0x80>
     124:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <turnOffPWM+0xb0>
     128:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <turnOffPWM+0xc0>
     12c:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <turnOffPWM+0xc6>
     130:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <turnOffPWM+0xb8>
     134:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_GLOBAL__sub_D_mySerial>
     138:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <HardwareSerial::available()>
     13c:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <HardwareSerial::availableForWrite()>
     140:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <turnOffPWM+0x50>
     144:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <SoftwareSerial::available()>
     148:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <HardwareSerial::peek()>
     14c:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <turnOffPWM+0x78>
     150:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <nothing>
     154:	0c 94 21 08 	jmp	0x1042	; 0x1042 <Print::write(unsigned char const*, unsigned int)>
     158:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <HardwareSerial::read()>
     15c:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <turnOffPWM+0xc8>
     160:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <turnOffPWM+0x94>
     164:	0c 94 c5 02 	jmp	0x58a	; 0x58a <SoftwareSerial::flush()>
     168:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <turnOffPWM+0x9c>
     16c:	0c 94 dd 05 	jmp	0xbba	; 0xbba <serialEventRun()>
     170:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <_GLOBAL__sub_I___vector_36>
     174:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_GLOBAL__sub_I_mySerial>
     178:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <turnOffPWM+0x3c>

0000017c <__trampolines_end>:
__trampolines_end():
     17c:	00 00       	nop
     17e:	00 0a       	sbc	r0, r16
     180:	0b 0c       	add	r0, r11
     182:	00 00       	nop
     184:	00 00       	nop
     186:	00 0d       	add	r16, r0
     188:	0e 0f       	add	r16, r30
     18a:	09 00       	.word	0x0009	; ????
     18c:	00 00       	nop
     18e:	00 08       	sbc	r0, r0
     190:	04 05       	cpc	r16, r4
     192:	06 00       	.word	0x0006	; ????
     194:	00 00       	nop
     196:	00 00       	nop
     198:	00 11       	cpse	r16, r0
     19a:	12 13       	cpse	r17, r18
	...
     1d0:	00 03       	mulsu	r16, r16

000001d2 <digital_pin_to_bit_mask_PGM>:
     1d2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 01     ..... @...... @.
     1e2:	02 04 08 10 20 40 80 80 08 10 01 02 04 08 10 20     .... @......... 
     1f2:	40 80 01 02 04 08 10 20 40 80 01 02 01 02 04 08     @...... @.......
     202:	10 20 40 80 01 02 04 08 10 20 40 04 80 40 20 10     . @...... @..@ .
     212:	08 04 02 01 80 01 02 04 08 10 20 40 80 01 02 04     .......... @....
     222:	08 10 20 40 80 20                                   .. @. 

00000228 <digital_pin_to_port_PGM>:
     228:	05 05 05 05 05 05 05 05 08 08 08 08 08 08 08 02     ................
     238:	02 02 02 02 02 02 02 08 07 07 0c 0c 0c 0c 0c 0c     ................
     248:	0c 0c 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     258:	03 03 03 03 0a 0a 0a 0a 0a 0a 0a 07 01 01 01 01     ................
     268:	01 01 01 01 0a 06 06 06 06 06 06 06 06 0b 0b 0b     ................
     278:	0b 0b 0b 0b 0b 07                                   ......

0000027e <port_to_input_PGM>:
     27e:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     28e:	00 01 00 00 03 01 06 01 09 01                       ..........

00000298 <port_to_output_PGM>:
     298:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2a8:	02 01 00 00 05 01 08 01 0b 01                       ..........

000002b2 <port_to_mode_PGM>:
     2b2:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     2c2:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002cc <__ctors_start>:
__ctors_start():
     2cc:	cd 01       	movw	r24, r26
     2ce:	5d 07       	cpc	r21, r29
     2d0:	f4 07       	cpc	r31, r20

000002d2 <__ctors_end>:
__dtors_start():
     2d2:	d4 01       	movw	r26, r8

000002d4 <__dtors_end>:
__dtors_end():
     2d4:	11 24       	eor	r1, r1
     2d6:	1f be       	out	0x3f, r1	; 63
     2d8:	cf ef       	ldi	r28, 0xFF	; 255
     2da:	d1 e2       	ldi	r29, 0x21	; 33
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	0c bf       	out	0x3c, r16	; 60

000002e4 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     2e4:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     2e8:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     2ea:	ec e5       	ldi	r30, 0x5C	; 92
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     2ec:	f8 e1       	ldi	r31, 0x18	; 24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     2ee:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     2f0:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     2f4:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     2f6:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     2f8:	aa 33       	cpi	r26, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     2fa:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     2fc:	d9 f7       	brne	.-10     	; 0x2f4 <__do_copy_data+0x10>

000002fe <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     2fe:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     300:	aa e3       	ldi	r26, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     302:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     304:	01 c0       	rjmp	.+2      	; 0x308 <.do_clear_bss_start>

00000306 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     306:	1d 92       	st	X+, r1

00000308 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     308:	a4 38       	cpi	r26, 0x84	; 132
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     30a:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     30c:	e1 f7       	brne	.-8      	; 0x306 <.do_clear_bss_loop>

0000030e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     30e:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     310:	c9 e6       	ldi	r28, 0x69	; 105
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     312:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     314:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     316:	06 c0       	rjmp	.+12     	; 0x324 <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     318:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     31a:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     31c:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     31e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     320:	0e 94 14 0c 	call	0x1828	; 0x1828 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     324:	c6 36       	cpi	r28, 0x66	; 102
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     326:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     328:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     32a:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     32c:	a9 f7       	brne	.-22     	; 0x318 <__do_global_ctors+0xa>
     32e:	0e 94 23 0a 	call	0x1446	; 0x1446 <main>
     332:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__do_global_dtors>

00000336 <__bad_interrupt>:
__vector_38():
     336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033a <setup>:
_ZN14HardwareSerial5beginEm():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:139
  ADU[ADUsize++] = highByte(CRC);

  Serial1.write(ADU, ADUsize);

  readmsg();
}
     33a:	26 e0       	ldi	r18, 0x06	; 6
     33c:	40 e8       	ldi	r20, 0x80	; 128
     33e:	55 e2       	ldi	r21, 0x25	; 37
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	8e ed       	ldi	r24, 0xDE	; 222
     346:	93 e0       	ldi	r25, 0x03	; 3
     348:	0e 94 a1 06 	call	0xd42	; 0xd42 <HardwareSerial::begin(unsigned long, unsigned char)>
     34c:	26 e0       	ldi	r18, 0x06	; 6
     34e:	40 e8       	ldi	r20, 0x80	; 128
     350:	55 e2       	ldi	r21, 0x25	; 37
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	81 e4       	ldi	r24, 0x41	; 65
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <HardwareSerial::begin(unsigned long, unsigned char)>

0000035e <CRC16_2(unsigned char*, int)>:
_Z7CRC16_2Phi():
     35e:	ac 01       	movw	r20, r24
     360:	fc 01       	movw	r30, r24
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	9f ef       	ldi	r25, 0xFF	; 255
     366:	9f 01       	movw	r18, r30
     368:	24 1b       	sub	r18, r20
     36a:	35 0b       	sbc	r19, r21
     36c:	26 17       	cp	r18, r22
     36e:	37 07       	cpc	r19, r23
     370:	9c f4       	brge	.+38     	; 0x398 <CRC16_2(unsigned char*, int)+0x3a>
     372:	21 91       	ld	r18, Z+
     374:	82 27       	eor	r24, r18
     376:	28 e0       	ldi	r18, 0x08	; 8
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	dc 01       	movw	r26, r24
     37c:	a1 70       	andi	r26, 0x01	; 1
     37e:	bb 27       	eor	r27, r27
     380:	96 95       	lsr	r25
     382:	87 95       	ror	r24
     384:	ab 2b       	or	r26, r27
     386:	21 f0       	breq	.+8      	; 0x390 <CRC16_2(unsigned char*, int)+0x32>
     388:	a1 e0       	ldi	r26, 0x01	; 1
     38a:	8a 27       	eor	r24, r26
     38c:	a0 ea       	ldi	r26, 0xA0	; 160
     38e:	9a 27       	eor	r25, r26
     390:	21 50       	subi	r18, 0x01	; 1
     392:	31 09       	sbc	r19, r1
     394:	91 f7       	brne	.-28     	; 0x37a <CRC16_2(unsigned char*, int)+0x1c>
     396:	e7 cf       	rjmp	.-50     	; 0x366 <CRC16_2(unsigned char*, int)+0x8>
     398:	08 95       	ret

0000039a <_GLOBAL__sub_I_mySerial>:
_GLOBAL__sub_I_mySerial():
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	49 e0       	ldi	r20, 0x09	; 9
     39e:	68 e0       	ldi	r22, 0x08	; 8
     3a0:	8a e3       	ldi	r24, 0x3A	; 58
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>

000003a8 <_GLOBAL__sub_D_mySerial>:
_GLOBAL__sub_D_mySerial():
     3a8:	8a e3       	ldi	r24, 0x3A	; 58
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	0c 94 86 03 	jmp	0x70c	; 0x70c <SoftwareSerial::~SoftwareSerial()>

000003b0 <readmsg()>:
_Z7readmsgv():
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	6c eb       	ldi	r22, 0xBC	; 188
     3ba:	72 e0       	ldi	r23, 0x02	; 2
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <delay>
     3c4:	8e ed       	ldi	r24, 0xDE	; 222
     3c6:	93 e0       	ldi	r25, 0x03	; 3
     3c8:	0e 94 a0 05 	call	0xb40	; 0xb40 <HardwareSerial::available()>
     3cc:	89 2b       	or	r24, r25
     3ce:	11 f1       	breq	.+68     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3d0:	8e ed       	ldi	r24, 0xDE	; 222
     3d2:	93 e0       	ldi	r25, 0x03	; 3
     3d4:	0e 94 a0 05 	call	0xb40	; 0xb40 <HardwareSerial::available()>
     3d8:	8c 01       	movw	r16, r24
     3da:	d0 e0       	ldi	r29, 0x00	; 0
     3dc:	c0 e0       	ldi	r28, 0x00	; 0
     3de:	c0 17       	cp	r28, r16
     3e0:	d1 07       	cpc	r29, r17
     3e2:	9c f4       	brge	.+38     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3e4:	8e ed       	ldi	r24, 0xDE	; 222
     3e6:	93 e0       	ldi	r25, 0x03	; 3
     3e8:	0e 94 ba 05 	call	0xb74	; 0xb74 <HardwareSerial::read()>
     3ec:	40 e1       	ldi	r20, 0x10	; 16
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	68 2f       	mov	r22, r24
     3f2:	81 e4       	ldi	r24, 0x41	; 65
     3f4:	93 e0       	ldi	r25, 0x03	; 3
     3f6:	0e 94 c2 08 	call	0x1184	; 0x1184 <Print::print(unsigned char, int)>
     3fa:	60 e1       	ldi	r22, 0x10	; 16
     3fc:	72 e0       	ldi	r23, 0x02	; 2
     3fe:	81 e4       	ldi	r24, 0x41	; 65
     400:	93 e0       	ldi	r25, 0x03	; 3
     402:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Print::print(char const*)>
     406:	21 96       	adiw	r28, 0x01	; 1
     408:	ea cf       	rjmp	.-44     	; 0x3de <readmsg()+0x2e>
     40a:	81 e4       	ldi	r24, 0x41	; 65
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	0e 94 65 08 	call	0x10ca	; 0x10ca <Print::println()>
     412:	d8 cf       	rjmp	.-80     	; 0x3c4 <readmsg()+0x14>
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	08 95       	ret

0000041e <writesinglecoil(unsigned char, short, bool)>:
_Z15writesinglecoilhsb():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:141

void writesinglecoil(byte slave, short adress, bool out) {
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	00 d0       	rcall	.+0      	; 0x424 <writesinglecoil(unsigned char, short, bool)+0x6>
     424:	00 d0       	rcall	.+0      	; 0x426 <writesinglecoil(unsigned char, short, bool)+0x8>
     426:	1f 92       	push	r1
     428:	1f 92       	push	r1
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:147

  byte ADU[8];
  byte ADUsize = 0;
  int CRC;

  ADU[ADUsize++] = slave;
     42e:	89 83       	std	Y+1, r24	; 0x01
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:148
  ADU[ADUsize++] = 0x05;
     430:	85 e0       	ldi	r24, 0x05	; 5
     432:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:149
  ADU[ADUsize++] = highByte(adress);
     434:	7b 83       	std	Y+3, r23	; 0x03
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:150
  ADU[ADUsize++] = lowByte(adress);
     436:	6c 83       	std	Y+4, r22	; 0x04
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:152

  if (out > 0) {
     438:	44 23       	and	r20, r20
     43a:	f9 f0       	breq	.+62     	; 0x47a <writesinglecoil(unsigned char, short, bool)+0x5c>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:153
    ADU[ADUsize++] = 0xFF;
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:157
    ADU[ADUsize++] = 0x00;
  } else {
    ADU[ADUsize++] = 0x00;
    ADU[ADUsize++] = 0x00;
     440:	1e 82       	std	Y+6, r1	; 0x06
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:160
  }

  CRC = CRC16_2(ADU, ADUsize);
     442:	66 e0       	ldi	r22, 0x06	; 6
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	0e 94 af 01 	call	0x35e	; 0x35e <CRC16_2(unsigned char*, int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:161
  ADU[ADUsize++] = lowByte(CRC);
     44e:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:162
  ADU[ADUsize++] = highByte(CRC);
     450:	98 87       	std	Y+8, r25	; 0x08
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:164

  Serial1.write(ADU, ADUsize);
     452:	48 e0       	ldi	r20, 0x08	; 8
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	be 01       	movw	r22, r28
     458:	6f 5f       	subi	r22, 0xFF	; 255
     45a:	7f 4f       	sbci	r23, 0xFF	; 255
     45c:	8e ed       	ldi	r24, 0xDE	; 222
     45e:	93 e0       	ldi	r25, 0x03	; 3
     460:	0e 94 21 08 	call	0x1042	; 0x1042 <Print::write(unsigned char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:166

  readmsg();
     464:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <readmsg()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:167
}
     468:	28 96       	adiw	r28, 0x08	; 8
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:156

  if (out > 0) {
    ADU[ADUsize++] = 0xFF;
    ADU[ADUsize++] = 0x00;
  } else {
    ADU[ADUsize++] = 0x00;
     47a:	1d 82       	std	Y+5, r1	; 0x05
     47c:	e1 cf       	rjmp	.-62     	; 0x440 <writesinglecoil(unsigned char, short, bool)+0x22>

0000047e <loop>:
loop():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Modbus_com_selv/Modbus_com_selv.ino:38
  // Serial1.write(Amsg, sizeof(Amsg));
  // readmsg();
}

void loop() {
  writesinglecoil(3, 0, 1);
     47e:	41 e0       	ldi	r20, 0x01	; 1
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	0c 94 0f 02 	jmp	0x41e	; 0x41e <writesinglecoil(unsigned char, short, bool)>

0000048a <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:214
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
}
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret

00000490 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
     490:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <SoftwareSerial::active_object>
     494:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <SoftwareSerial::active_object+0x1>
     498:	28 17       	cp	r18, r24
     49a:	39 07       	cpc	r19, r25
     49c:	b9 f4       	brne	.+46     	; 0x4cc <SoftwareSerial::read()+0x3c>
     49e:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <SoftwareSerial::_receive_buffer_head>
     4a2:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <SoftwareSerial::_receive_buffer_tail>
     4a6:	98 17       	cp	r25, r24
     4a8:	89 f0       	breq	.+34     	; 0x4cc <SoftwareSerial::read()+0x3c>
     4aa:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <SoftwareSerial::_receive_buffer_head>
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	e5 5a       	subi	r30, 0xA5	; 165
     4b2:	fd 4f       	sbci	r31, 0xFD	; 253
     4b4:	80 81       	ld	r24, Z
     4b6:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <SoftwareSerial::_receive_buffer_head>
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	2f 73       	andi	r18, 0x3F	; 63
     4c2:	33 27       	eor	r19, r19
     4c4:	20 93 59 02 	sts	0x0259, r18	; 0x800259 <SoftwareSerial::_receive_buffer_head>
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	08 95       	ret
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	9f ef       	ldi	r25, 0xFF	; 255
     4d0:	08 95       	ret

000004d2 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	dc 01       	movw	r26, r24
     4e0:	5c 96       	adiw	r26, 0x1c	; 28
     4e2:	ed 90       	ld	r14, X+
     4e4:	fc 90       	ld	r15, X
     4e6:	5d 97       	sbiw	r26, 0x1d	; 29
     4e8:	e1 14       	cp	r14, r1
     4ea:	f1 04       	cpc	r15, r1
     4ec:	79 f4       	brne	.+30     	; 0x50c <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	13 96       	adiw	r26, 0x03	; 3
     4f4:	9c 93       	st	X, r25
     4f6:	8e 93       	st	-X, r24
     4f8:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	08 95       	ret
     50c:	51 96       	adiw	r26, 0x11	; 17
     50e:	ed 91       	ld	r30, X+
     510:	fc 91       	ld	r31, X
     512:	52 97       	sbiw	r26, 0x12	; 18
     514:	50 96       	adiw	r26, 0x10	; 16
     516:	8c 91       	ld	r24, X
     518:	50 97       	sbiw	r26, 0x10	; 16
     51a:	98 2f       	mov	r25, r24
     51c:	90 95       	com	r25
     51e:	0f b7       	in	r16, 0x3f	; 63
     520:	5e 96       	adiw	r26, 0x1e	; 30
     522:	2c 91       	ld	r18, X
     524:	5e 97       	sbiw	r26, 0x1e	; 30
     526:	12 2f       	mov	r17, r18
     528:	12 70       	andi	r17, 0x02	; 2
     52a:	21 fd       	sbrc	r18, 1
     52c:	60 95       	com	r22
     52e:	f8 94       	cli
     530:	20 81       	ld	r18, Z
     532:	11 23       	and	r17, r17
     534:	19 f1       	breq	.+70     	; 0x57c <SoftwareSerial::write(unsigned char)+0xaa>
     536:	28 2b       	or	r18, r24
     538:	20 83       	st	Z, r18
_delay_loop_2():
     53a:	e7 01       	movw	r28, r14
     53c:	21 97       	sbiw	r28, 0x01	; 1
     53e:	f1 f7       	brne	.-4      	; 0x53c <SoftwareSerial::write(unsigned char)+0x6a>
     540:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
     542:	46 2f       	mov	r20, r22
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	30 81       	ld	r19, Z
     548:	60 ff       	sbrs	r22, 0
     54a:	1a c0       	rjmp	.+52     	; 0x580 <SoftwareSerial::write(unsigned char)+0xae>
     54c:	38 2b       	or	r19, r24
     54e:	30 83       	st	Z, r19
_delay_loop_2():
     550:	e7 01       	movw	r28, r14
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
     556:	ba 01       	movw	r22, r20
     558:	75 95       	asr	r23
     55a:	67 95       	ror	r22
     55c:	21 50       	subi	r18, 0x01	; 1
     55e:	89 f7       	brne	.-30     	; 0x542 <SoftwareSerial::write(unsigned char)+0x70>
     560:	11 23       	and	r17, r17
     562:	81 f0       	breq	.+32     	; 0x584 <SoftwareSerial::write(unsigned char)+0xb2>
     564:	80 81       	ld	r24, Z
     566:	89 23       	and	r24, r25
     568:	80 83       	st	Z, r24
     56a:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
     56c:	5c 96       	adiw	r26, 0x1c	; 28
     56e:	8d 91       	ld	r24, X+
     570:	9c 91       	ld	r25, X
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	c1 cf       	rjmp	.-126    	; 0x4fe <SoftwareSerial::write(unsigned char)+0x2c>
     57c:	29 23       	and	r18, r25
     57e:	dc cf       	rjmp	.-72     	; 0x538 <SoftwareSerial::write(unsigned char)+0x66>
     580:	39 23       	and	r19, r25
     582:	e5 cf       	rjmp	.-54     	; 0x54e <SoftwareSerial::write(unsigned char)+0x7c>
     584:	90 81       	ld	r25, Z
     586:	89 2b       	or	r24, r25
     588:	ef cf       	rjmp	.-34     	; 0x568 <SoftwareSerial::write(unsigned char)+0x96>

0000058a <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
     58a:	08 95       	ret

0000058c <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
     58c:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <SoftwareSerial::active_object>
     590:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <SoftwareSerial::active_object+0x1>
     594:	28 17       	cp	r18, r24
     596:	39 07       	cpc	r19, r25
     598:	71 f4       	brne	.+28     	; 0x5b6 <SoftwareSerial::peek()+0x2a>
     59a:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <SoftwareSerial::_receive_buffer_head>
     59e:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <SoftwareSerial::_receive_buffer_tail>
     5a2:	98 17       	cp	r25, r24
     5a4:	41 f0       	breq	.+16     	; 0x5b6 <SoftwareSerial::peek()+0x2a>
     5a6:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <SoftwareSerial::_receive_buffer_head>
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	e5 5a       	subi	r30, 0xA5	; 165
     5ae:	fd 4f       	sbci	r31, 0xFD	; 253
     5b0:	80 81       	ld	r24, Z
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	08 95       	ret
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	9f ef       	ldi	r25, 0xFF	; 255
     5ba:	08 95       	ret

000005bc <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
     5bc:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <SoftwareSerial::active_object>
     5c0:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <SoftwareSerial::active_object+0x1>
     5c4:	28 17       	cp	r18, r24
     5c6:	39 07       	cpc	r19, r25
     5c8:	61 f4       	brne	.+24     	; 0x5e2 <SoftwareSerial::available()+0x26>
     5ca:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <SoftwareSerial::_receive_buffer_tail>
     5ce:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <SoftwareSerial::_receive_buffer_head>
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	80 5c       	subi	r24, 0xC0	; 192
     5d6:	9f 4f       	sbci	r25, 0xFF	; 255
     5d8:	82 1b       	sub	r24, r18
     5da:	91 09       	sbc	r25, r1
     5dc:	8f 73       	andi	r24, 0x3F	; 63
     5de:	99 27       	eor	r25, r25
     5e0:	08 95       	ret
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	08 95       	ret

000005e8 <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
     5e8:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <SoftwareSerial::active_object>
     5ec:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <SoftwareSerial::active_object+0x1>
     5f0:	e8 17       	cp	r30, r24
     5f2:	f9 07       	cpc	r31, r25
     5f4:	69 f4       	brne	.+26     	; 0x610 <SoftwareSerial::stopListening()+0x28>
_ZN14SoftwareSerial11setRxIntMskEb():
     5f6:	a3 89       	ldd	r26, Z+19	; 0x13
     5f8:	b4 89       	ldd	r27, Z+20	; 0x14
     5fa:	9c 91       	ld	r25, X
     5fc:	85 89       	ldd	r24, Z+21	; 0x15
     5fe:	80 95       	com	r24
     600:	89 23       	and	r24, r25
     602:	8c 93       	st	X, r24
_ZN14SoftwareSerial13stopListeningEv():
     604:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <SoftwareSerial::active_object+0x1>
     608:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <SoftwareSerial::active_object>
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret

00000614 <__vector_10>:
__vector_11():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	0b b6       	in	r0, 0x3b	; 59
     620:	0f 92       	push	r0
     622:	2f 93       	push	r18
     624:	3f 93       	push	r19
     626:	4f 93       	push	r20
     628:	5f 93       	push	r21
     62a:	6f 93       	push	r22
     62c:	7f 93       	push	r23
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	bf 93       	push	r27
     636:	ef 93       	push	r30
     638:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     63a:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <SoftwareSerial::active_object>
     63e:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <SoftwareSerial::active_object+0x1>
     642:	30 97       	sbiw	r30, 0x00	; 0
     644:	49 f0       	breq	.+18     	; 0x658 <__vector_10+0x44>
     646:	a6 85       	ldd	r26, Z+14	; 0x0e
     648:	b7 85       	ldd	r27, Z+15	; 0x0f
     64a:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     64c:	96 8d       	ldd	r25, Z+30	; 0x1e
     64e:	91 ff       	sbrs	r25, 1
     650:	16 c0       	rjmp	.+44     	; 0x67e <__vector_10+0x6a>
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     652:	9c 91       	ld	r25, X
     654:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     656:	b1 f4       	brne	.+44     	; 0x684 <__vector_10+0x70>
__vector_11():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     658:	ff 91       	pop	r31
     65a:	ef 91       	pop	r30
     65c:	bf 91       	pop	r27
     65e:	af 91       	pop	r26
     660:	9f 91       	pop	r25
     662:	8f 91       	pop	r24
     664:	7f 91       	pop	r23
     666:	6f 91       	pop	r22
     668:	5f 91       	pop	r21
     66a:	4f 91       	pop	r20
     66c:	3f 91       	pop	r19
     66e:	2f 91       	pop	r18
     670:	0f 90       	pop	r0
     672:	0b be       	out	0x3b, r0	; 59
     674:	0f 90       	pop	r0
     676:	0f be       	out	0x3f, r0	; 63
     678:	0f 90       	pop	r0
     67a:	1f 90       	pop	r1
     67c:	18 95       	reti
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     67e:	9c 91       	ld	r25, X
     680:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     682:	51 f7       	brne	.-44     	; 0x658 <__vector_10+0x44>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     684:	a3 89       	ldd	r26, Z+19	; 0x13
     686:	b4 89       	ldd	r27, Z+20	; 0x14
     688:	9c 91       	ld	r25, X
     68a:	85 89       	ldd	r24, Z+21	; 0x15
     68c:	80 95       	com	r24
     68e:	89 23       	and	r24, r25
     690:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     692:	86 89       	ldd	r24, Z+22	; 0x16
     694:	97 89       	ldd	r25, Z+23	; 0x17
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	f1 f7       	brne	.-4      	; 0x696 <__vector_10+0x82>
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     69a:	60 8d       	ldd	r22, Z+24	; 0x18
     69c:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     69e:	a6 85       	ldd	r26, Z+14	; 0x0e
     6a0:	b7 85       	ldd	r27, Z+15	; 0x0f
     6a2:	55 85       	ldd	r21, Z+13	; 0x0d
     6a4:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif

  uint8_t d = 0;
     6a6:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     6a8:	cb 01       	movw	r24, r22
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <__vector_10+0x96>
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     6ae:	82 2f       	mov	r24, r18
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	95 95       	asr	r25
     6b4:	87 95       	ror	r24
     6b6:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     6b8:	4c 91       	ld	r20, X
     6ba:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <__vector_10+0xac>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
     6be:	20 68       	ori	r18, 0x80	; 128
     6c0:	31 50       	subi	r19, 0x01	; 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     6c2:	91 f7       	brne	.-28     	; 0x6a8 <__vector_10+0x94>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     6c4:	86 8d       	ldd	r24, Z+30	; 0x1e
     6c6:	81 fd       	sbrc	r24, 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
     6c8:	20 95       	com	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     6ca:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <SoftwareSerial::_receive_buffer_tail>
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	8f 73       	andi	r24, 0x3F	; 63
     6d4:	99 27       	eor	r25, r25
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
     6d6:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <SoftwareSerial::_receive_buffer_head>
     6da:	38 17       	cp	r19, r24
     6dc:	99 f0       	breq	.+38     	; 0x704 <__vector_10+0xf0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     6de:	a0 91 5a 02 	lds	r26, 0x025A	; 0x80025a <SoftwareSerial::_receive_buffer_tail>
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	a5 5a       	subi	r26, 0xA5	; 165
     6e6:	bd 4f       	sbci	r27, 0xFD	; 253
     6e8:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
     6ea:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     6ee:	82 8d       	ldd	r24, Z+26	; 0x1a
     6f0:	93 8d       	ldd	r25, Z+27	; 0x1b
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <__vector_10+0xde>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     6f6:	a3 89       	ldd	r26, Z+19	; 0x13
     6f8:	b4 89       	ldd	r27, Z+20	; 0x14
     6fa:	8c 91       	ld	r24, X
     6fc:	95 89       	ldd	r25, Z+21	; 0x15
     6fe:	89 2b       	or	r24, r25
     700:	8c 93       	st	X, r24
__vector_11():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     702:	aa cf       	rjmp	.-172    	; 0x658 <__vector_10+0x44>
_ZN14SoftwareSerial4recvEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    }
    else
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     704:	86 8d       	ldd	r24, Z+30	; 0x1e
     706:	81 60       	ori	r24, 0x01	; 1
     708:	86 8f       	std	Z+30, r24	; 0x1e
     70a:	f1 cf       	rjmp	.-30     	; 0x6ee <__vector_10+0xda>

0000070c <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
     70c:	26 e1       	ldi	r18, 0x16	; 22
     70e:	32 e0       	ldi	r19, 0x02	; 2
     710:	fc 01       	movw	r30, r24
     712:	31 83       	std	Z+1, r19	; 0x01
     714:	20 83       	st	Z, r18
_ZN14SoftwareSerial3endEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:447
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
     716:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <SoftwareSerial::stopListening()>

0000071a <SoftwareSerial::setTX(signed char)>:
_ZN14SoftwareSerial5setTXEa():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:280
{
  end();
}

void SoftwareSerial::setTX(int8_t tx)
{
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	ec 01       	movw	r28, r24
     722:	16 2f       	mov	r17, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:285
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output high. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
     724:	6e 8d       	ldd	r22, Y+30	; 0x1e
     726:	66 95       	lsr	r22
     728:	61 70       	andi	r22, 0x01	; 1
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	68 27       	eor	r22, r24
     72e:	81 2f       	mov	r24, r17
     730:	0e 94 c3 0b 	call	0x1786	; 0x1786 <digitalWrite>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:286
  pinMode(tx, OUTPUT);
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	81 2f       	mov	r24, r17
     738:	0e 94 87 0b 	call	0x170e	; 0x170e <pinMode>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:287
  _transmitBitMask = digitalPinToBitMask(tx);
     73c:	81 2f       	mov	r24, r17
     73e:	11 0f       	add	r17, r17
     740:	99 0b       	sbc	r25, r25
     742:	fc 01       	movw	r30, r24
     744:	ee 52       	subi	r30, 0x2E	; 46
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	e4 91       	lpm	r30, Z
     74a:	e8 8b       	std	Y+16, r30	; 0x10
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:288
  uint8_t port = digitalPinToPort(tx);
     74c:	fc 01       	movw	r30, r24
     74e:	e8 5d       	subi	r30, 0xD8	; 216
     750:	fd 4f       	sbci	r31, 0xFD	; 253
     752:	e4 91       	lpm	r30, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:289
  _transmitPortRegister = portOutputRegister(port);
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	e8 56       	subi	r30, 0x68	; 104
     75c:	fd 4f       	sbci	r31, 0xFD	; 253
     75e:	85 91       	lpm	r24, Z+
     760:	94 91       	lpm	r25, Z
     762:	9a 8b       	std	Y+18, r25	; 0x12
     764:	89 8b       	std	Y+17, r24	; 0x11
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:290
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	08 95       	ret

0000076e <SoftwareSerial::setRX(signed char)>:
_ZN14SoftwareSerial5setRXEa():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:293

void SoftwareSerial::setRX(int8_t rx)
{
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	ec 01       	movw	r28, r24
     776:	16 2f       	mov	r17, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:294
  pinMode(rx, INPUT);
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	81 2f       	mov	r24, r17
     77c:	0e 94 87 0b 	call	0x170e	; 0x170e <pinMode>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:295
  if (!_inverse_logic)
     780:	8e 8d       	ldd	r24, Y+30	; 0x1e
     782:	81 fd       	sbrc	r24, 1
     784:	04 c0       	rjmp	.+8      	; 0x78e <SoftwareSerial::setRX(signed char)+0x20>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:296
    digitalWrite(rx, HIGH);  // pullup for normal logic!
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	81 2f       	mov	r24, r17
     78a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <digitalWrite>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:297
  _receivePin = rx;
     78e:	1c 87       	std	Y+12, r17	; 0x0c
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:298
  _receiveBitMask = digitalPinToBitMask(rx);
     790:	81 2f       	mov	r24, r17
     792:	11 0f       	add	r17, r17
     794:	99 0b       	sbc	r25, r25
     796:	fc 01       	movw	r30, r24
     798:	ee 52       	subi	r30, 0x2E	; 46
     79a:	fe 4f       	sbci	r31, 0xFE	; 254
     79c:	e4 91       	lpm	r30, Z
     79e:	ed 87       	std	Y+13, r30	; 0x0d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:299
  uint8_t port = digitalPinToPort(rx);
     7a0:	fc 01       	movw	r30, r24
     7a2:	e8 5d       	subi	r30, 0xD8	; 216
     7a4:	fd 4f       	sbci	r31, 0xFD	; 253
     7a6:	e4 91       	lpm	r30, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:300
  _receivePortRegister = portInputRegister(port);
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	e2 58       	subi	r30, 0x82	; 130
     7b0:	fd 4f       	sbci	r31, 0xFD	; 253
     7b2:	85 91       	lpm	r24, Z+
     7b4:	94 91       	lpm	r25, Z
     7b6:	9f 87       	std	Y+15, r25	; 0x0f
     7b8:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:301
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	08 95       	ret

000007c2 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>:
_ZN14SoftwareSerialC2Eaab():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:259
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(int8_t receivePin, int8_t transmitPin, bool inverse_logic /* = false */) :
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ec 01       	movw	r28, r24
     7ca:	16 2f       	mov	r17, r22
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     7cc:	1b 82       	std	Y+3, r1	; 0x03
     7ce:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     7d0:	88 ee       	ldi	r24, 0xE8	; 232
     7d2:	93 e0       	ldi	r25, 0x03	; 3
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	8c 83       	std	Y+4, r24	; 0x04
     7da:	9d 83       	std	Y+5, r25	; 0x05
     7dc:	ae 83       	std	Y+6, r26	; 0x06
     7de:	bf 83       	std	Y+7, r27	; 0x07
_ZN14SoftwareSerialC2Eaab():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:265
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
     7e0:	86 e1       	ldi	r24, 0x16	; 22
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	99 83       	std	Y+1, r25	; 0x01
     7e6:	88 83       	st	Y, r24
     7e8:	1f 8a       	std	Y+23, r1	; 0x17
     7ea:	1e 8a       	std	Y+22, r1	; 0x16
     7ec:	19 8e       	std	Y+25, r1	; 0x19
     7ee:	18 8e       	std	Y+24, r1	; 0x18
     7f0:	1b 8e       	std	Y+27, r1	; 0x1b
     7f2:	1a 8e       	std	Y+26, r1	; 0x1a
     7f4:	1d 8e       	std	Y+29, r1	; 0x1d
     7f6:	1c 8e       	std	Y+28, r1	; 0x1c
     7f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7fa:	8e 7f       	andi	r24, 0xFE	; 254
     7fc:	20 fb       	bst	r18, 0
     7fe:	81 f9       	bld	r24, 1
     800:	8e 8f       	std	Y+30, r24	; 0x1e
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:267
{
  setTX(transmitPin);
     802:	64 2f       	mov	r22, r20
     804:	ce 01       	movw	r24, r28
     806:	0e 94 8d 03 	call	0x71a	; 0x71a <SoftwareSerial::setTX(signed char)>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:268
  setRX(receivePin);
     80a:	61 2f       	mov	r22, r17
     80c:	ce 01       	movw	r24, r28
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:269
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\libraries\SoftwareSerial\src/SoftwareSerial.cpp:268
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
{
  setTX(transmitPin);
  setRX(receivePin);
     814:	0c 94 b7 03 	jmp	0x76e	; 0x76e <SoftwareSerial::setRX(signed char)>

00000818 <__vector_47>:
__vector_47():
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.h:54
	int peek();
	int read();
	int available();
#if ARDUINO >= 100
	size_t write(uint8_t byte) { writeByte(byte); return 1; }
	void flush() { flushOutput(); }
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	0b b6       	in	r0, 0x3b	; 59
     824:	0f 92       	push	r0
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	ef 93       	push	r30
     838:	ff 93       	push	r31
     83a:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <tx_state>
     83e:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <tx_byte>
     842:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     846:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     84a:	40 91 3f 03 	lds	r20, 0x033F	; 0x80033f <ticks_per_bit>
     84e:	50 91 40 03 	lds	r21, 0x0340	; 0x800340 <ticks_per_bit+0x1>
     852:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <tx_bit>
     856:	2a 30       	cpi	r18, 0x0A	; 10
     858:	80 f5       	brcc	.+96     	; 0x8ba <__vector_47+0xa2>
     85a:	84 0f       	add	r24, r20
     85c:	95 1f       	adc	r25, r21
     85e:	76 2f       	mov	r23, r22
     860:	71 70       	andi	r23, 0x01	; 1
     862:	29 30       	cpi	r18, 0x09	; 9
     864:	09 f4       	brne	.+2      	; 0x868 <__vector_47+0x50>
     866:	71 e0       	ldi	r23, 0x01	; 1
     868:	66 95       	lsr	r22
     86a:	2f 5f       	subi	r18, 0xFF	; 255
     86c:	37 17       	cp	r19, r23
     86e:	99 f3       	breq	.-26     	; 0x856 <__vector_47+0x3e>
     870:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     874:	77 23       	and	r23, r23
     876:	f1 f0       	breq	.+60     	; 0x8b4 <__vector_47+0x9c>
     878:	30 6c       	ori	r19, 0xC0	; 192
     87a:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     87e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     882:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     886:	70 93 e3 02 	sts	0x02E3, r23	; 0x8002e3 <tx_bit>
     88a:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <tx_byte>
     88e:	20 93 e5 02 	sts	0x02E5, r18	; 0x8002e5 <tx_state>
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	7f 91       	pop	r23
     89c:	6f 91       	pop	r22
     89e:	5f 91       	pop	r21
     8a0:	4f 91       	pop	r20
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0b be       	out	0x3b, r0	; 59
     8aa:	0f 90       	pop	r0
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	0f 90       	pop	r0
     8b0:	1f 90       	pop	r1
     8b2:	18 95       	reti
     8b4:	3f 7b       	andi	r19, 0xBF	; 191
     8b6:	30 68       	ori	r19, 0x80	; 128
     8b8:	e0 cf       	rjmp	.-64     	; 0x87a <__vector_47+0x62>
     8ba:	30 91 e2 02 	lds	r19, 0x02E2	; 0x8002e2 <tx_buffer_head>
     8be:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <tx_buffer_tail>
     8c2:	3e 13       	cpse	r19, r30
     8c4:	19 c0       	rjmp	.+50     	; 0x8f8 <__vector_47+0xe0>
     8c6:	2a 30       	cpi	r18, 0x0A	; 10
     8c8:	51 f4       	brne	.+20     	; 0x8de <__vector_47+0xc6>
     8ca:	2b e0       	ldi	r18, 0x0B	; 11
     8cc:	20 93 e5 02 	sts	0x02E5, r18	; 0x8002e5 <tx_state>
     8d0:	84 0f       	add	r24, r20
     8d2:	95 1f       	adc	r25, r21
     8d4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     8d8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     8dc:	da cf       	rjmp	.-76     	; 0x892 <__vector_47+0x7a>
     8de:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <tx_state>
     8e2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     8e6:	8f 73       	andi	r24, 0x3F	; 63
     8e8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     8ec:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     8f0:	8d 7f       	andi	r24, 0xFD	; 253
     8f2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     8f6:	cd cf       	rjmp	.-102    	; 0x892 <__vector_47+0x7a>
     8f8:	ef 5f       	subi	r30, 0xFF	; 255
     8fa:	e4 34       	cpi	r30, 0x44	; 68
     8fc:	08 f0       	brcs	.+2      	; 0x900 <__vector_47+0xe8>
     8fe:	e0 e0       	ldi	r30, 0x00	; 0
     900:	e0 93 e1 02 	sts	0x02E1, r30	; 0x8002e1 <tx_buffer_tail>
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	e3 56       	subi	r30, 0x63	; 99
     908:	fd 4f       	sbci	r31, 0xFD	; 253
     90a:	30 81       	ld	r19, Z
     90c:	30 93 e4 02 	sts	0x02E4, r19	; 0x8002e4 <tx_byte>
     910:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <tx_bit>
     914:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     918:	3f 7b       	andi	r19, 0xBF	; 191
     91a:	30 68       	ori	r19, 0x80	; 128
     91c:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     920:	2a 30       	cpi	r18, 0x0A	; 10
     922:	71 f4       	brne	.+28     	; 0x940 <__vector_47+0x128>
     924:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <ticks_per_bit>
     928:	30 91 40 03 	lds	r19, 0x0340	; 0x800340 <ticks_per_bit+0x1>
     92c:	82 0f       	add	r24, r18
     92e:	93 1f       	adc	r25, r19
     930:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     934:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <tx_state>
     93e:	a9 cf       	rjmp	.-174    	; 0x892 <__vector_47+0x7a>
     940:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     944:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     948:	40 96       	adiw	r24, 0x10	; 16
     94a:	f2 cf       	rjmp	.-28     	; 0x930 <__vector_47+0x118>

0000094c <__vector_46>:
__vector_46():
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:223
/****************************************/
/**            Reception               **/
/****************************************/

ISR(CAPTURE_INTERRUPT)
{
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	0b b6       	in	r0, 0x3b	; 59
     958:	0f 92       	push	r0
     95a:	2f 93       	push	r18
     95c:	3f 93       	push	r19
     95e:	4f 93       	push	r20
     960:	5f 93       	push	r21
     962:	6f 93       	push	r22
     964:	7f 93       	push	r23
     966:	8f 93       	push	r24
     968:	9f 93       	push	r25
     96a:	af 93       	push	r26
     96c:	bf 93       	push	r27
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:228
	uint8_t state, bit, head;
	uint16_t capture, target;
	uint16_t offset, offset_overflow;

	capture = GET_INPUT_CAPTURE();
     972:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     976:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:229
	bit = rx_bit;
     97a:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <rx_bit>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:231
	if (bit) {
		CONFIG_CAPTURE_FALLING_EDGE();
     97e:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:230
	uint16_t capture, target;
	uint16_t offset, offset_overflow;

	capture = GET_INPUT_CAPTURE();
	bit = rx_bit;
	if (bit) {
     982:	44 23       	and	r20, r20
     984:	09 f4       	brne	.+2      	; 0x988 <__vector_46+0x3c>
     986:	40 c0       	rjmp	.+128    	; 0xa08 <__vector_46+0xbc>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:231
		CONFIG_CAPTURE_FALLING_EDGE();
     988:	2f 7b       	andi	r18, 0xBF	; 191
     98a:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:232
		rx_bit = 0;
     98e:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <rx_bit>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:237
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
		rx_bit = 0x80;
	}
	state = rx_state;
     992:	30 91 3e 03 	lds	r19, 0x033E	; 0x80033e <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:238
	if (state == 0) {
     996:	31 11       	cpse	r19, r1
     998:	3e c0       	rjmp	.+124    	; 0xa16 <__vector_46+0xca>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:239
		if (!bit) {
     99a:	41 11       	cpse	r20, r1
     99c:	22 c0       	rjmp	.+68     	; 0x9e2 <__vector_46+0x96>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:240
			uint16_t end = capture + rx_stop_ticks;
     99e:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <rx_stop_ticks>
     9a2:	30 91 39 03 	lds	r19, 0x0339	; 0x800339 <rx_stop_ticks+0x1>
     9a6:	28 0f       	add	r18, r24
     9a8:	39 1f       	adc	r19, r25
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:241
			SET_COMPARE_B(end);
     9aa:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     9ae:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:242
			ENABLE_INT_COMPARE_B();
     9b2:	24 e0       	ldi	r18, 0x04	; 4
     9b4:	2a bb       	out	0x1a, r18	; 26
     9b6:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     9ba:	24 60       	ori	r18, 0x04	; 4
     9bc:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:243
			rx_target = capture + ticks_per_bit + ticks_per_bit/2;
     9c0:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <ticks_per_bit>
     9c4:	30 91 40 03 	lds	r19, 0x0340	; 0x800340 <ticks_per_bit+0x1>
     9c8:	82 0f       	add	r24, r18
     9ca:	93 1f       	adc	r25, r19
     9cc:	36 95       	lsr	r19
     9ce:	27 95       	ror	r18
     9d0:	28 0f       	add	r18, r24
     9d2:	39 1f       	adc	r19, r25
     9d4:	30 93 3b 03 	sts	0x033B, r19	; 0x80033b <rx_target+0x1>
     9d8:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <rx_target>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:244
			rx_state = 1;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:273
		}
		rx_target = target;
		rx_state = state;
	}
	//if (GET_TIMER_COUNT() - capture > ticks_per_bit) AltSoftSerial::timing_error = true;
}
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	7f 91       	pop	r23
     9f0:	6f 91       	pop	r22
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	0f 90       	pop	r0
     9fc:	0b be       	out	0x3b, r0	; 59
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:234
	bit = rx_bit;
	if (bit) {
		CONFIG_CAPTURE_FALLING_EDGE();
		rx_bit = 0;
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
     a08:	20 64       	ori	r18, 0x40	; 64
     a0a:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:235
		rx_bit = 0x80;
     a0e:	20 e8       	ldi	r18, 0x80	; 128
     a10:	20 93 3c 03 	sts	0x033C, r18	; 0x80033c <rx_bit>
     a14:	be cf       	rjmp	.-132    	; 0x992 <__vector_46+0x46>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:247
			ENABLE_INT_COMPARE_B();
			rx_target = capture + ticks_per_bit + ticks_per_bit/2;
			rx_state = 1;
		}
	} else {
		target = rx_target;
     a16:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <rx_target>
     a1a:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <rx_target+0x1>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:248
		offset_overflow = 65535 - ticks_per_bit;
     a1e:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <ticks_per_bit>
     a22:	70 91 40 03 	lds	r23, 0x0340	; 0x800340 <ticks_per_bit+0x1>
     a26:	db 01       	movw	r26, r22
     a28:	a0 95       	com	r26
     a2a:	b0 95       	com	r27
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:252
		while (1) {
			offset = capture - target;
			if (offset > offset_overflow) break;
			rx_byte = (rx_byte >> 1) | rx_bit;
     a2c:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <rx_bit>
     a30:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <rx_byte>
     a34:	84 1b       	sub	r24, r20
     a36:	95 0b       	sbc	r25, r21
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:251
	} else {
		target = rx_target;
		offset_overflow = 65535 - ticks_per_bit;
		while (1) {
			offset = capture - target;
			if (offset > offset_overflow) break;
     a38:	a8 17       	cp	r26, r24
     a3a:	b9 07       	cpc	r27, r25
     a3c:	68 f1       	brcs	.+90     	; 0xa98 <__vector_46+0x14c>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:252
			rx_byte = (rx_byte >> 1) | rx_bit;
     a3e:	26 95       	lsr	r18
     a40:	2e 2b       	or	r18, r30
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:253
			target += ticks_per_bit;
     a42:	46 0f       	add	r20, r22
     a44:	57 1f       	adc	r21, r23
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:254
			state++;
     a46:	3f 5f       	subi	r19, 0xFF	; 255
     a48:	86 1b       	sub	r24, r22
     a4a:	97 0b       	sbc	r25, r23
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:255
			if (state >= 9) {
     a4c:	39 30       	cpi	r19, 0x09	; 9
     a4e:	a0 f3       	brcs	.-24     	; 0xa38 <__vector_46+0xec>
     a50:	20 93 3d 03 	sts	0x033D, r18	; 0x80033d <rx_byte>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:256
				DISABLE_INT_COMPARE_B();
     a54:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     a58:	8b 7f       	andi	r24, 0xFB	; 251
     a5a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:257
				head = rx_buffer_head + 1;
     a5e:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <rx_buffer_head>
     a62:	8f 5f       	subi	r24, 0xFF	; 255
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:258
				if (head >= RX_BUFFER_SIZE) head = 0;
     a64:	80 35       	cpi	r24, 0x50	; 80
     a66:	08 f0       	brcs	.+2      	; 0xa6a <__vector_46+0x11e>
     a68:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:259
				if (head != rx_buffer_tail) {
     a6a:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <rx_buffer_tail>
     a6e:	98 17       	cp	r25, r24
     a70:	49 f0       	breq	.+18     	; 0xa84 <__vector_46+0x138>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:260
					rx_buffer[head] = rx_byte;
     a72:	e8 2f       	mov	r30, r24
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <rx_byte>
     a7a:	ea 51       	subi	r30, 0x1A	; 26
     a7c:	fd 4f       	sbci	r31, 0xFD	; 253
     a7e:	90 83       	st	Z, r25
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:261
					rx_buffer_head = head;
     a80:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <rx_buffer_head>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:263
				}
				CONFIG_CAPTURE_FALLING_EDGE();
     a84:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
     a88:	8f 7b       	andi	r24, 0xBF	; 191
     a8a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:264
				rx_bit = 0;
     a8e:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <rx_bit>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:265
				rx_state = 0;
     a92:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:266
				return;
     a96:	a5 cf       	rjmp	.-182    	; 0x9e2 <__vector_46+0x96>
     a98:	20 93 3d 03 	sts	0x033D, r18	; 0x80033d <rx_byte>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:269
			}
		}
		rx_target = target;
     a9c:	50 93 3b 03 	sts	0x033B, r21	; 0x80033b <rx_target+0x1>
     aa0:	40 93 3a 03 	sts	0x033A, r20	; 0x80033a <rx_target>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:270
		rx_state = state;
     aa4:	30 93 3e 03 	sts	0x033E, r19	; 0x80033e <rx_state>
     aa8:	9c cf       	rjmp	.-200    	; 0x9e2 <__vector_46+0x96>

00000aaa <__vector_48>:
__vector_48():
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:276
	}
	//if (GET_TIMER_COUNT() - capture > ticks_per_bit) AltSoftSerial::timing_error = true;
}

ISR(COMPARE_B_INTERRUPT)
{
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	0b b6       	in	r0, 0x3b	; 59
     ab6:	0f 92       	push	r0
     ab8:	2f 93       	push	r18
     aba:	8f 93       	push	r24
     abc:	9f 93       	push	r25
     abe:	ef 93       	push	r30
     ac0:	ff 93       	push	r31
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:279
	uint8_t head, state, bit;

	DISABLE_INT_COMPARE_B();
     ac2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     ac6:	8b 7f       	andi	r24, 0xFB	; 251
     ac8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:280
	CONFIG_CAPTURE_FALLING_EDGE();
     acc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
     ad0:	8f 7b       	andi	r24, 0xBF	; 191
     ad2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:281
	state = rx_state;
     ad6:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:282
	bit = rx_bit ^ 0x80;
     ada:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <rx_bit>
     ade:	20 58       	subi	r18, 0x80	; 128
     ae0:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <rx_byte>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:283
	while (state < 9) {
     ae4:	89 30       	cpi	r24, 0x09	; 9
     ae6:	20 f4       	brcc	.+8      	; 0xaf0 <__vector_48+0x46>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:284
		rx_byte = (rx_byte >> 1) | bit;
     ae8:	96 95       	lsr	r25
     aea:	92 2b       	or	r25, r18
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:285
		state++;
     aec:	8f 5f       	subi	r24, 0xFF	; 255
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:283

	DISABLE_INT_COMPARE_B();
	CONFIG_CAPTURE_FALLING_EDGE();
	state = rx_state;
	bit = rx_bit ^ 0x80;
	while (state < 9) {
     aee:	fa cf       	rjmp	.-12     	; 0xae4 <__vector_48+0x3a>
     af0:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <rx_byte>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:287
		rx_byte = (rx_byte >> 1) | bit;
		state++;
	}
	head = rx_buffer_head + 1;
     af4:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <rx_buffer_head>
     af8:	8f 5f       	subi	r24, 0xFF	; 255
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:288
	if (head >= RX_BUFFER_SIZE) head = 0;
     afa:	80 35       	cpi	r24, 0x50	; 80
     afc:	08 f0       	brcs	.+2      	; 0xb00 <__vector_48+0x56>
     afe:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:289
	if (head != rx_buffer_tail) {
     b00:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <rx_buffer_tail>
     b04:	28 17       	cp	r18, r24
     b06:	39 f0       	breq	.+14     	; 0xb16 <__vector_48+0x6c>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:290
		rx_buffer[head] = rx_byte;
     b08:	e8 2f       	mov	r30, r24
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	ea 51       	subi	r30, 0x1A	; 26
     b0e:	fd 4f       	sbci	r31, 0xFD	; 253
     b10:	90 83       	st	Z, r25
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:291
		rx_buffer_head = head;
     b12:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <rx_buffer_head>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:293
	}
	rx_state = 0;
     b16:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <rx_state>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:294
	CONFIG_CAPTURE_FALLING_EDGE();
     b1a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
     b1e:	8f 7b       	andi	r24, 0xBF	; 191
     b20:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:295
	rx_bit = 0;
     b24:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <rx_bit>
c:\Users\mbt\Documents\Arduino\libraries\AltSoftSerial/AltSoftSerial.cpp:296
}
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	9f 91       	pop	r25
     b2e:	8f 91       	pop	r24
     b30:	2f 91       	pop	r18
     b32:	0f 90       	pop	r0
     b34:	0b be       	out	0x3b, r0	; 59
     b36:	0f 90       	pop	r0
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	0f 90       	pop	r0
     b3c:	1f 90       	pop	r1
     b3e:	18 95       	reti

00000b40 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     b40:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     b42:	91 8d       	ldd	r25, Z+25	; 0x19
     b44:	22 8d       	ldd	r18, Z+26	; 0x1a
     b46:	89 2f       	mov	r24, r25
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	80 5c       	subi	r24, 0xC0	; 192
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	82 1b       	sub	r24, r18
     b50:	91 09       	sbc	r25, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     b52:	8f 73       	andi	r24, 0x3F	; 63
     b54:	99 27       	eor	r25, r25
     b56:	08 95       	ret

00000b58 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
     b58:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     b5a:	91 8d       	ldd	r25, Z+25	; 0x19
     b5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b5e:	98 17       	cp	r25, r24
     b60:	31 f0       	breq	.+12     	; 0xb6e <HardwareSerial::peek()+0x16>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     b62:	82 8d       	ldd	r24, Z+26	; 0x1a
     b64:	e8 0f       	add	r30, r24
     b66:	f1 1d       	adc	r31, r1
     b68:	85 8d       	ldd	r24, Z+29	; 0x1d
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     b72:	08 95       	ret

00000b74 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
     b74:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     b76:	91 8d       	ldd	r25, Z+25	; 0x19
     b78:	82 8d       	ldd	r24, Z+26	; 0x1a
     b7a:	98 17       	cp	r25, r24
     b7c:	61 f0       	breq	.+24     	; 0xb96 <HardwareSerial::read()+0x22>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     b7e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     b80:	ae 0f       	add	r26, r30
     b82:	bf 2f       	mov	r27, r31
     b84:	b1 1d       	adc	r27, r1
     b86:	5d 96       	adiw	r26, 0x1d	; 29
     b88:	8c 91       	ld	r24, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     b8a:	92 8d       	ldd	r25, Z+26	; 0x1a
     b8c:	9f 5f       	subi	r25, 0xFF	; 255
     b8e:	9f 73       	andi	r25, 0x3F	; 63
     b90:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     b9a:	08 95       	ret

00000b9c <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     b9c:	fc 01       	movw	r30, r24
     b9e:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     ba0:	44 8d       	ldd	r20, Z+28	; 0x1c
     ba2:	25 2f       	mov	r18, r21
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	84 2f       	mov	r24, r20
     ba8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     baa:	82 1b       	sub	r24, r18
     bac:	93 0b       	sbc	r25, r19
     bae:	54 17       	cp	r21, r20
     bb0:	10 f0       	brcs	.+4      	; 0xbb6 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
     bb2:	cf 96       	adiw	r24, 0x3f	; 63
     bb4:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     bb6:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     bb8:	08 95       	ret

00000bba <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     bba:	83 e5       	ldi	r24, 0x53	; 83
     bbc:	97 e0       	ldi	r25, 0x07	; 7
     bbe:	89 2b       	or	r24, r25
     bc0:	49 f0       	breq	.+18     	; 0xbd4 <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	89 2b       	or	r24, r25
     bc8:	29 f0       	breq	.+10     	; 0xbd4 <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
     bca:	0e 94 53 07 	call	0xea6	; 0xea6 <Serial0_available()>
     bce:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
     bd0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     bd4:	8a ee       	ldi	r24, 0xEA	; 234
     bd6:	97 e0       	ldi	r25, 0x07	; 7
     bd8:	89 2b       	or	r24, r25
     bda:	49 f0       	breq	.+18     	; 0xbee <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	89 2b       	or	r24, r25
     be2:	29 f0       	breq	.+10     	; 0xbee <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
     be4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <Serial1_available()>
     be8:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70
     bea:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	89 2b       	or	r24, r25
     bf4:	49 f0       	breq	.+18     	; 0xc08 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 1)
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	89 2b       	or	r24, r25
     bfc:	29 f0       	breq	.+10     	; 0xc08 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 3)
     bfe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c02:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:73
     c04:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	89 2b       	or	r24, r25
     c0e:	49 f0       	breq	.+18     	; 0xc22 <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 1)
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	89 2b       	or	r24, r25
     c16:	29 f0       	breq	.+10     	; 0xc22 <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 3)
     c18:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c1c:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:76
     c1e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
     c22:	08 95       	ret

00000c24 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     c24:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     c26:	a4 8d       	ldd	r26, Z+28	; 0x1c
     c28:	a8 0f       	add	r26, r24
     c2a:	b9 2f       	mov	r27, r25
     c2c:	b1 1d       	adc	r27, r1
     c2e:	a3 5a       	subi	r26, 0xA3	; 163
     c30:	bf 4f       	sbci	r27, 0xFF	; 255
     c32:	2c 91       	ld	r18, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     c34:	84 8d       	ldd	r24, Z+28	; 0x1c
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	8f 73       	andi	r24, 0x3F	; 63
     c3c:	99 27       	eor	r25, r25
     c3e:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     c40:	a6 89       	ldd	r26, Z+22	; 0x16
     c42:	b7 89       	ldd	r27, Z+23	; 0x17
     c44:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     c46:	a0 89       	ldd	r26, Z+16	; 0x10
     c48:	b1 89       	ldd	r27, Z+17	; 0x11
     c4a:	8c 91       	ld	r24, X
     c4c:	83 70       	andi	r24, 0x03	; 3
     c4e:	80 64       	ori	r24, 0x40	; 64
     c50:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     c52:	93 8d       	ldd	r25, Z+27	; 0x1b
     c54:	84 8d       	ldd	r24, Z+28	; 0x1c
     c56:	98 13       	cpse	r25, r24
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     c5a:	02 88       	ldd	r0, Z+18	; 0x12
     c5c:	f3 89       	ldd	r31, Z+19	; 0x13
     c5e:	e0 2d       	mov	r30, r0
     c60:	80 81       	ld	r24, Z
     c62:	8f 7d       	andi	r24, 0xDF	; 223
     c64:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     c66:	08 95       	ret

00000c68 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     c6e:	88 8d       	ldd	r24, Y+24	; 0x18
     c70:	88 23       	and	r24, r24
     c72:	b9 f0       	breq	.+46     	; 0xca2 <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     c74:	aa 89       	ldd	r26, Y+18	; 0x12
     c76:	bb 89       	ldd	r27, Y+19	; 0x13
     c78:	e8 89       	ldd	r30, Y+16	; 0x10
     c7a:	f9 89       	ldd	r31, Y+17	; 0x11
     c7c:	8c 91       	ld	r24, X
     c7e:	85 fd       	sbrc	r24, 5
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <HardwareSerial::flush()+0x20>
     c82:	80 81       	ld	r24, Z
     c84:	86 fd       	sbrc	r24, 6
     c86:	0d c0       	rjmp	.+26     	; 0xca2 <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	07 fc       	sbrc	r0, 7
     c8c:	f7 cf       	rjmp	.-18     	; 0xc7c <HardwareSerial::flush()+0x14>
     c8e:	8c 91       	ld	r24, X
     c90:	85 ff       	sbrs	r24, 5
     c92:	f2 cf       	rjmp	.-28     	; 0xc78 <HardwareSerial::flush()+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     c94:	80 81       	ld	r24, Z
     c96:	85 ff       	sbrs	r24, 5
     c98:	ed cf       	rjmp	.-38     	; 0xc74 <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     c9a:	ce 01       	movw	r24, r28
     c9c:	0e 94 12 06 	call	0xc24	; 0xc24 <HardwareSerial::_tx_udr_empty_irq()>
     ca0:	e9 cf       	rjmp	.-46     	; 0xc74 <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     cba:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cbe:	98 13       	cpse	r25, r24
     cc0:	1a c0       	rjmp	.+52     	; 0xcf6 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
     cc2:	e8 89       	ldd	r30, Y+16	; 0x10
     cc4:	f9 89       	ldd	r31, Y+17	; 0x11
     cc6:	80 81       	ld	r24, Z
     cc8:	85 ff       	sbrs	r24, 5
     cca:	15 c0       	rjmp	.+42     	; 0xcf6 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ccc:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cce:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     cd0:	ee 89       	ldd	r30, Y+22	; 0x16
     cd2:	ff 89       	ldd	r31, Y+23	; 0x17
     cd4:	60 83       	st	Z, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     cd6:	e8 89       	ldd	r30, Y+16	; 0x10
     cd8:	f9 89       	ldd	r31, Y+17	; 0x11
     cda:	80 81       	ld	r24, Z
     cdc:	83 70       	andi	r24, 0x03	; 3
     cde:	80 64       	ori	r24, 0x40	; 64
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     ce0:	80 83       	st	Z, r24
__iRestore():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ce2:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	08 95       	ret
     cf6:	f6 2e       	mov	r15, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     cf8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	0f 5f       	subi	r16, 0xFF	; 255
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	0f 73       	andi	r16, 0x3F	; 63
     d02:	11 27       	eor	r17, r17
     d04:	e0 2e       	mov	r14, r16
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     d06:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d08:	8e 11       	cpse	r24, r14
     d0a:	0c c0       	rjmp	.+24     	; 0xd24 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	07 fc       	sbrc	r0, 7
     d10:	fa cf       	rjmp	.-12     	; 0xd06 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     d12:	e8 89       	ldd	r30, Y+16	; 0x10
     d14:	f9 89       	ldd	r31, Y+17	; 0x11
     d16:	80 81       	ld	r24, Z
     d18:	85 ff       	sbrs	r24, 5
     d1a:	f5 cf       	rjmp	.-22     	; 0xd06 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     d1c:	ce 01       	movw	r24, r28
     d1e:	0e 94 12 06 	call	0xc24	; 0xc24 <HardwareSerial::_tx_udr_empty_irq()>
     d22:	f1 cf       	rjmp	.-30     	; 0xd06 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     d24:	eb 8d       	ldd	r30, Y+27	; 0x1b
     d26:	ec 0f       	add	r30, r28
     d28:	fd 2f       	mov	r31, r29
     d2a:	f1 1d       	adc	r31, r1
     d2c:	e3 5a       	subi	r30, 0xA3	; 163
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	f0 82       	st	Z, r15
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     d32:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d34:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     d36:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     d38:	ea 89       	ldd	r30, Y+18	; 0x12
     d3a:	fb 89       	ldd	r31, Y+19	; 0x13
     d3c:	80 81       	ld	r24, Z
     d3e:	80 62       	ori	r24, 0x20	; 32
     d40:	cf cf       	rjmp	.-98     	; 0xce0 <HardwareSerial::write(unsigned char)+0x38>

00000d42 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ec 01       	movw	r28, r24
     d52:	6a 01       	movw	r12, r20
     d54:	7b 01       	movw	r14, r22
     d56:	12 2f       	mov	r17, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d58:	60 e8       	ldi	r22, 0x80	; 128
     d5a:	74 e8       	ldi	r23, 0x84	; 132
     d5c:	8e e1       	ldi	r24, 0x1E	; 30
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	a7 01       	movw	r20, r14
     d62:	96 01       	movw	r18, r12
     d64:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__udivmodsi4>
     d68:	21 50       	subi	r18, 0x01	; 1
     d6a:	31 09       	sbc	r19, r1
     d6c:	41 09       	sbc	r20, r1
     d6e:	51 09       	sbc	r21, r1
     d70:	56 95       	lsr	r21
     d72:	47 95       	ror	r20
     d74:	37 95       	ror	r19
     d76:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
     d78:	e8 89       	ldd	r30, Y+16	; 0x10
     d7a:	f9 89       	ldd	r31, Y+17	; 0x11
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d80:	21 15       	cp	r18, r1
     d82:	80 e1       	ldi	r24, 0x10	; 16
     d84:	38 07       	cpc	r19, r24
     d86:	98 f0       	brcs	.+38     	; 0xdae <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
     d88:	e8 89       	ldd	r30, Y+16	; 0x10
     d8a:	f9 89       	ldd	r31, Y+17	; 0x11
     d8c:	10 82       	st	Z, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d8e:	60 e4       	ldi	r22, 0x40	; 64
     d90:	72 e4       	ldi	r23, 0x42	; 66
     d92:	8f e0       	ldi	r24, 0x0F	; 15
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a7 01       	movw	r20, r14
     d98:	96 01       	movw	r18, r12
     d9a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__udivmodsi4>
     d9e:	21 50       	subi	r18, 0x01	; 1
     da0:	31 09       	sbc	r19, r1
     da2:	41 09       	sbc	r20, r1
     da4:	51 09       	sbc	r21, r1
     da6:	56 95       	lsr	r21
     da8:	47 95       	ror	r20
     daa:	37 95       	ror	r19
     dac:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     dae:	ec 85       	ldd	r30, Y+12	; 0x0c
     db0:	fd 85       	ldd	r31, Y+13	; 0x0d
     db2:	30 83       	st	Z, r19
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     db4:	ee 85       	ldd	r30, Y+14	; 0x0e
     db6:	ff 85       	ldd	r31, Y+15	; 0x0f
     db8:	20 83       	st	Z, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     dba:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     dbc:	ec 89       	ldd	r30, Y+20	; 0x14
     dbe:	fd 89       	ldd	r31, Y+21	; 0x15
     dc0:	10 83       	st	Z, r17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     dc2:	ea 89       	ldd	r30, Y+18	; 0x12
     dc4:	fb 89       	ldd	r31, Y+19	; 0x13
     dc6:	80 81       	ld	r24, Z
     dc8:	88 69       	ori	r24, 0x98	; 152
     dca:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     dcc:	ea 89       	ldd	r30, Y+18	; 0x12
     dce:	fb 89       	ldd	r31, Y+19	; 0x13
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 7d       	andi	r24, 0xDF	; 223
     dd4:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	08 95       	ret

00000de6 <__vector_25>:
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	0b b6       	in	r0, 0x3b	; 59
     df2:	0f 92       	push	r0
     df4:	2f 93       	push	r18
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     dfe:	e0 91 51 03 	lds	r30, 0x0351	; 0x800351 <Serial+0x10>
     e02:	f0 91 52 03 	lds	r31, 0x0352	; 0x800352 <Serial+0x11>
     e06:	80 81       	ld	r24, Z
     e08:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <Serial+0x16>
     e0c:	f0 91 58 03 	lds	r31, 0x0358	; 0x800358 <Serial+0x17>
     e10:	82 fd       	sbrc	r24, 2
     e12:	1d c0       	rjmp	.+58     	; 0xe4e <__vector_25+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     e14:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     e16:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <Serial+0x19>
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     e1e:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <Serial+0x1a>
     e22:	82 17       	cp	r24, r18
     e24:	41 f0       	breq	.+16     	; 0xe36 <__vector_25+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     e26:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <Serial+0x19>
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	ef 5b       	subi	r30, 0xBF	; 191
     e2e:	fc 4f       	sbci	r31, 0xFC	; 252
     e30:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     e32:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <Serial+0x19>
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0b be       	out	0x3b, r0	; 59
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     e4e:	80 81       	ld	r24, Z
__vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
     e50:	f2 cf       	rjmp	.-28     	; 0xe36 <__vector_25+0x50>

00000e52 <__vector_26>:
__vector_26():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	0b b6       	in	r0, 0x3b	; 59
     e5e:	0f 92       	push	r0
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     e78:	81 e4       	ldi	r24, 0x41	; 65
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	0e 94 12 06 	call	0xc24	; 0xc24 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     ea6:	81 e4       	ldi	r24, 0x41	; 65
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	0e 94 a0 05 	call	0xb40	; 0xb40 <HardwareSerial::available()>
     eae:	21 e0       	ldi	r18, 0x01	; 1
     eb0:	89 2b       	or	r24, r25
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <Serial0_available()+0x10>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     eb6:	82 2f       	mov	r24, r18
     eb8:	08 95       	ret

00000eba <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:46
     eba:	e1 e4       	ldi	r30, 0x41	; 65
     ebc:	f3 e0       	ldi	r31, 0x03	; 3
     ebe:	13 82       	std	Z+3, r1	; 0x03
     ec0:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Stream.h:63
     ec2:	88 ee       	ldi	r24, 0xE8	; 232
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	84 83       	std	Z+4, r24	; 0x04
     ecc:	95 83       	std	Z+5, r25	; 0x05
     ece:	a6 83       	std	Z+6, r26	; 0x06
     ed0:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     ed2:	88 e2       	ldi	r24, 0x28	; 40
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
     eda:	85 ec       	ldi	r24, 0xC5	; 197
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	95 87       	std	Z+13, r25	; 0x0d
     ee0:	84 87       	std	Z+12, r24	; 0x0c
     ee2:	84 ec       	ldi	r24, 0xC4	; 196
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	97 87       	std	Z+15, r25	; 0x0f
     ee8:	86 87       	std	Z+14, r24	; 0x0e
     eea:	80 ec       	ldi	r24, 0xC0	; 192
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	91 8b       	std	Z+17, r25	; 0x11
     ef0:	80 8b       	std	Z+16, r24	; 0x10
     ef2:	81 ec       	ldi	r24, 0xC1	; 193
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	93 8b       	std	Z+19, r25	; 0x13
     ef8:	82 8b       	std	Z+18, r24	; 0x12
     efa:	82 ec       	ldi	r24, 0xC2	; 194
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	95 8b       	std	Z+21, r25	; 0x15
     f00:	84 8b       	std	Z+20, r24	; 0x14
     f02:	86 ec       	ldi	r24, 0xC6	; 198
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	97 8b       	std	Z+23, r25	; 0x17
     f08:	86 8b       	std	Z+22, r24	; 0x16
     f0a:	11 8e       	std	Z+25, r1	; 0x19
     f0c:	12 8e       	std	Z+26, r1	; 0x1a
     f0e:	13 8e       	std	Z+27, r1	; 0x1b
     f10:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
     f12:	08 95       	ret

00000f14 <__vector_36>:
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     f14:	1f 92       	push	r1
     f16:	0f 92       	push	r0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	0f 92       	push	r0
     f1c:	11 24       	eor	r1, r1
     f1e:	0b b6       	in	r0, 0x3b	; 59
     f20:	0f 92       	push	r0
     f22:	2f 93       	push	r18
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     f2c:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <Serial1+0x10>
     f30:	f0 91 ef 03 	lds	r31, 0x03EF	; 0x8003ef <Serial1+0x11>
     f34:	80 81       	ld	r24, Z
     f36:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <Serial1+0x16>
     f3a:	f0 91 f5 03 	lds	r31, 0x03F5	; 0x8003f5 <Serial1+0x17>
     f3e:	82 fd       	sbrc	r24, 2
     f40:	1d c0       	rjmp	.+58     	; 0xf7c <__vector_36+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     f42:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     f44:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <Serial1+0x19>
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     f4c:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <Serial1+0x1a>
     f50:	82 17       	cp	r24, r18
     f52:	41 f0       	breq	.+16     	; 0xf64 <__vector_36+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     f54:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <Serial1+0x19>
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	e2 52       	subi	r30, 0x22	; 34
     f5c:	fc 4f       	sbci	r31, 0xFC	; 252
     f5e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     f60:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <Serial1+0x19>
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0b be       	out	0x3b, r0	; 59
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     f7c:	80 81       	ld	r24, Z
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
     f7e:	f2 cf       	rjmp	.-28     	; 0xf64 <__vector_36+0x50>

00000f80 <__vector_37>:
__vector_37():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	0b b6       	in	r0, 0x3b	; 59
     f8c:	0f 92       	push	r0
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
     fa6:	8e ed       	ldi	r24, 0xDE	; 222
     fa8:	93 e0       	ldi	r25, 0x03	; 3
     faa:	0e 94 12 06 	call	0xc24	; 0xc24 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	0b be       	out	0x3b, r0	; 59
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     fd4:	8e ed       	ldi	r24, 0xDE	; 222
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	0e 94 a0 05 	call	0xb40	; 0xb40 <HardwareSerial::available()>
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	89 2b       	or	r24, r25
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <Serial1_available()+0x10>
     fe2:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
     fe4:	82 2f       	mov	r24, r18
     fe6:	08 95       	ret

00000fe8 <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:46
     fe8:	ee ed       	ldi	r30, 0xDE	; 222
     fea:	f3 e0       	ldi	r31, 0x03	; 3
     fec:	13 82       	std	Z+3, r1	; 0x03
     fee:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Stream.h:63
     ff0:	88 ee       	ldi	r24, 0xE8	; 232
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	84 83       	std	Z+4, r24	; 0x04
     ffa:	95 83       	std	Z+5, r25	; 0x05
     ffc:	a6 83       	std	Z+6, r26	; 0x06
     ffe:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1000:	88 e2       	ldi	r24, 0x28	; 40
    1002:	92 e0       	ldi	r25, 0x02	; 2
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	80 83       	st	Z, r24
    1008:	8d ec       	ldi	r24, 0xCD	; 205
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	95 87       	std	Z+13, r25	; 0x0d
    100e:	84 87       	std	Z+12, r24	; 0x0c
    1010:	8c ec       	ldi	r24, 0xCC	; 204
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	97 87       	std	Z+15, r25	; 0x0f
    1016:	86 87       	std	Z+14, r24	; 0x0e
    1018:	88 ec       	ldi	r24, 0xC8	; 200
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	91 8b       	std	Z+17, r25	; 0x11
    101e:	80 8b       	std	Z+16, r24	; 0x10
    1020:	89 ec       	ldi	r24, 0xC9	; 201
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	93 8b       	std	Z+19, r25	; 0x13
    1026:	82 8b       	std	Z+18, r24	; 0x12
    1028:	8a ec       	ldi	r24, 0xCA	; 202
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	95 8b       	std	Z+21, r25	; 0x15
    102e:	84 8b       	std	Z+20, r24	; 0x14
    1030:	8e ec       	ldi	r24, 0xCE	; 206
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	97 8b       	std	Z+23, r25	; 0x17
    1036:	86 8b       	std	Z+22, r24	; 0x16
    1038:	11 8e       	std	Z+25, r1	; 0x19
    103a:	12 8e       	std	Z+26, r1	; 0x1a
    103c:	13 8e       	std	Z+27, r1	; 0x1b
    103e:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    1040:	08 95       	ret

00001042 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	6c 01       	movw	r12, r24
    1058:	7b 01       	movw	r14, r22
    105a:	8b 01       	movw	r16, r22
    105c:	04 0f       	add	r16, r20
    105e:	15 1f       	adc	r17, r21
    1060:	eb 01       	movw	r28, r22
    1062:	5e 01       	movw	r10, r28
    1064:	ae 18       	sub	r10, r14
    1066:	bf 08       	sbc	r11, r15
    1068:	c0 17       	cp	r28, r16
    106a:	d1 07       	cpc	r29, r17
    106c:	59 f0       	breq	.+22     	; 0x1084 <Print::write(unsigned char const*, unsigned int)+0x42>
    106e:	69 91       	ld	r22, Y+
    1070:	d6 01       	movw	r26, r12
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	01 90       	ld	r0, Z+
    1078:	f0 81       	ld	r31, Z
    107a:	e0 2d       	mov	r30, r0
    107c:	c6 01       	movw	r24, r12
    107e:	19 95       	eicall
    1080:	89 2b       	or	r24, r25
    1082:	79 f7       	brne	.-34     	; 0x1062 <Print::write(unsigned char const*, unsigned int)+0x20>
    1084:	c5 01       	movw	r24, r10
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	bf 90       	pop	r11
    1098:	af 90       	pop	r10
    109a:	08 95       	ret

0000109c <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    109c:	fb 01       	movw	r30, r22
    109e:	01 90       	ld	r0, Z+
    10a0:	00 20       	and	r0, r0
    10a2:	e9 f7       	brne	.-6      	; 0x109e <Print::write(char const*) [clone .part.2]+0x2>
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	af 01       	movw	r20, r30
    10a8:	46 1b       	sub	r20, r22
    10aa:	57 0b       	sbc	r21, r23
    10ac:	dc 01       	movw	r26, r24
    10ae:	ed 91       	ld	r30, X+
    10b0:	fc 91       	ld	r31, X
    10b2:	02 80       	ldd	r0, Z+2	; 0x02
    10b4:	f3 81       	ldd	r31, Z+3	; 0x03
    10b6:	e0 2d       	mov	r30, r0
    10b8:	19 94       	eijmp

000010ba <Print::print(char const*)>:
    10ba:	61 15       	cp	r22, r1
    10bc:	71 05       	cpc	r23, r1
    10be:	11 f0       	breq	.+4      	; 0x10c4 <Print::print(char const*)+0xa>
    10c0:	0c 94 4e 08 	jmp	0x109c	; 0x109c <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	08 95       	ret

000010ca <Print::println()>:
_ZN5Print5writeEPKc():
    10ca:	66 e3       	ldi	r22, 0x36	; 54
    10cc:	72 e0       	ldi	r23, 0x02	; 2
    10ce:	0c 94 4e 08 	jmp	0x109c	; 0x109c <Print::write(char const*) [clone .part.2]>

000010d2 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    10d2:	8f 92       	push	r8
    10d4:	9f 92       	push	r9
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	a1 97       	sbiw	r28, 0x21	; 33
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	7c 01       	movw	r14, r24
    10f8:	fa 01       	movw	r30, r20
    10fa:	cb 01       	movw	r24, r22
    10fc:	19 a2       	std	Y+33, r1	; 0x21
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	08 f4       	brcc	.+2      	; 0x1104 <Print::printNumber(unsigned long, unsigned char)+0x32>
    1102:	2a e0       	ldi	r18, 0x0A	; 10
    1104:	8e 01       	movw	r16, r28
    1106:	0f 5d       	subi	r16, 0xDF	; 223
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	82 2e       	mov	r8, r18
    110c:	91 2c       	mov	r9, r1
    110e:	b1 2c       	mov	r11, r1
    1110:	a1 2c       	mov	r10, r1
    1112:	bf 01       	movw	r22, r30
    1114:	a5 01       	movw	r20, r10
    1116:	94 01       	movw	r18, r8
    1118:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__udivmodsi4>
    111c:	f9 01       	movw	r30, r18
    111e:	ca 01       	movw	r24, r20
    1120:	6a 30       	cpi	r22, 0x0A	; 10
    1122:	0c f5       	brge	.+66     	; 0x1166 <Print::printNumber(unsigned long, unsigned char)+0x94>
    1124:	60 5d       	subi	r22, 0xD0	; 208
    1126:	d8 01       	movw	r26, r16
    1128:	6e 93       	st	-X, r22
    112a:	8d 01       	movw	r16, r26
    112c:	23 2b       	or	r18, r19
    112e:	24 2b       	or	r18, r20
    1130:	25 2b       	or	r18, r21
    1132:	79 f7       	brne	.-34     	; 0x1112 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	10 97       	sbiw	r26, 0x00	; 0
    113a:	21 f0       	breq	.+8      	; 0x1144 <Print::printNumber(unsigned long, unsigned char)+0x72>
    113c:	bd 01       	movw	r22, r26
    113e:	c7 01       	movw	r24, r14
    1140:	0e 94 4e 08 	call	0x109c	; 0x109c <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    1144:	a1 96       	adiw	r28, 0x21	; 33
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	bf 90       	pop	r11
    115e:	af 90       	pop	r10
    1160:	9f 90       	pop	r9
    1162:	8f 90       	pop	r8
    1164:	08 95       	ret
    1166:	69 5c       	subi	r22, 0xC9	; 201
    1168:	de cf       	rjmp	.-68     	; 0x1126 <Print::printNumber(unsigned long, unsigned char)+0x54>

0000116a <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    116a:	21 15       	cp	r18, r1
    116c:	31 05       	cpc	r19, r1
    116e:	41 f4       	brne	.+16     	; 0x1180 <Print::print(unsigned long, int)+0x16>
    1170:	dc 01       	movw	r26, r24
    1172:	ed 91       	ld	r30, X+
    1174:	fc 91       	ld	r31, X
    1176:	01 90       	ld	r0, Z+
    1178:	f0 81       	ld	r31, Z
    117a:	e0 2d       	mov	r30, r0
    117c:	64 2f       	mov	r22, r20
    117e:	19 94       	eijmp
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
    1180:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <Print::printNumber(unsigned long, unsigned char)>

00001184 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1184:	9a 01       	movw	r18, r20
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
    1186:	46 2f       	mov	r20, r22
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	0c 94 b5 08 	jmp	0x116a	; 0x116a <Print::print(unsigned long, int)>

00001192 <nothing>:
nothing():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WInterrupts.c:350
        case 6:
          EIMSK &= ~(1 << INT6);
          break;
        case 7:
          EIMSK &= ~(1 << INT7);
          break;
    1192:	08 95       	ret

00001194 <__vector_1>:
__vector_1():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WInterrupts.c:449
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

// ATmega640, ATmega1280, ATmega2560 - "AVR compatible" pinout
#elif defined(MEGACORE_100_PIN_AVR_PINOUT) && (defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__))
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	0b b6       	in	r0, 0x3b	; 59
    11a0:	0f 92       	push	r0
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    11ba:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    11be:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    11c2:	19 95       	eicall
    11c4:	ff 91       	pop	r31
    11c6:	ef 91       	pop	r30
    11c8:	bf 91       	pop	r27
    11ca:	af 91       	pop	r26
    11cc:	9f 91       	pop	r25
    11ce:	8f 91       	pop	r24
    11d0:	7f 91       	pop	r23
    11d2:	6f 91       	pop	r22
    11d4:	5f 91       	pop	r21
    11d6:	4f 91       	pop	r20
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0b be       	out	0x3b, r0	; 59
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <__vector_2>:
__vector_2():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WInterrupts.c:450
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	0b b6       	in	r0, 0x3b	; 59
    11f6:	0f 92       	push	r0
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
    1210:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1214:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1218:	19 95       	eicall
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	bf 91       	pop	r27
    1220:	af 91       	pop	r26
    1222:	9f 91       	pop	r25
    1224:	8f 91       	pop	r24
    1226:	7f 91       	pop	r23
    1228:	6f 91       	pop	r22
    122a:	5f 91       	pop	r21
    122c:	4f 91       	pop	r20
    122e:	3f 91       	pop	r19
    1230:	2f 91       	pop	r18
    1232:	0f 90       	pop	r0
    1234:	0b be       	out	0x3b, r0	; 59
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti

00001240 <__vector_3>:
__vector_3():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WInterrupts.c:451
  IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	0b b6       	in	r0, 0x3b	; 59
    124c:	0f 92       	push	r0
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
    1266:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__DATA_REGION_ORIGIN__+0x4>
    126a:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__DATA_REGION_ORIGIN__+0x5>
    126e:	19 95       	eicall
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <__vector_4>:
__vector_4():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WInterrupts.c:452
  IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	0b b6       	in	r0, 0x3b	; 59
    12a2:	0f 92       	push	r0
    12a4:	2f 93       	push	r18
    12a6:	3f 93       	push	r19
    12a8:	4f 93       	push	r20
    12aa:	5f 93       	push	r21
    12ac:	6f 93       	push	r22
    12ae:	7f 93       	push	r23
    12b0:	8f 93       	push	r24
    12b2:	9f 93       	push	r25
    12b4:	af 93       	push	r26
    12b6:	bf 93       	push	r27
    12b8:	ef 93       	push	r30
    12ba:	ff 93       	push	r31
    12bc:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
    12c0:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
    12c4:	19 95       	eicall
    12c6:	ff 91       	pop	r31
    12c8:	ef 91       	pop	r30
    12ca:	bf 91       	pop	r27
    12cc:	af 91       	pop	r26
    12ce:	9f 91       	pop	r25
    12d0:	8f 91       	pop	r24
    12d2:	7f 91       	pop	r23
    12d4:	6f 91       	pop	r22
    12d6:	5f 91       	pop	r21
    12d8:	4f 91       	pop	r20
    12da:	3f 91       	pop	r19
    12dc:	2f 91       	pop	r18
    12de:	0f 90       	pop	r0
    12e0:	0b be       	out	0x3b, r0	; 59
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_5>:
__vector_5():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WInterrupts.c:453
  IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_4)
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	0b b6       	in	r0, 0x3b	; 59
    12f8:	0f 92       	push	r0
    12fa:	2f 93       	push	r18
    12fc:	3f 93       	push	r19
    12fe:	4f 93       	push	r20
    1300:	5f 93       	push	r21
    1302:	6f 93       	push	r22
    1304:	7f 93       	push	r23
    1306:	8f 93       	push	r24
    1308:	9f 93       	push	r25
    130a:	af 93       	push	r26
    130c:	bf 93       	push	r27
    130e:	ef 93       	push	r30
    1310:	ff 93       	push	r31
    1312:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
    1316:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__DATA_REGION_ORIGIN__+0x9>
    131a:	19 95       	eicall
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	0f 90       	pop	r0
    1336:	0b be       	out	0x3b, r0	; 59
    1338:	0f 90       	pop	r0
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	0f 90       	pop	r0
    133e:	1f 90       	pop	r1
    1340:	18 95       	reti

00001342 <__vector_6>:
__vector_6():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WInterrupts.c:454
  IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_5)
    1342:	1f 92       	push	r1
    1344:	0f 92       	push	r0
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	0b b6       	in	r0, 0x3b	; 59
    134e:	0f 92       	push	r0
    1350:	2f 93       	push	r18
    1352:	3f 93       	push	r19
    1354:	4f 93       	push	r20
    1356:	5f 93       	push	r21
    1358:	6f 93       	push	r22
    135a:	7f 93       	push	r23
    135c:	8f 93       	push	r24
    135e:	9f 93       	push	r25
    1360:	af 93       	push	r26
    1362:	bf 93       	push	r27
    1364:	ef 93       	push	r30
    1366:	ff 93       	push	r31
    1368:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__DATA_REGION_ORIGIN__+0xa>
    136c:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__DATA_REGION_ORIGIN__+0xb>
    1370:	19 95       	eicall
    1372:	ff 91       	pop	r31
    1374:	ef 91       	pop	r30
    1376:	bf 91       	pop	r27
    1378:	af 91       	pop	r26
    137a:	9f 91       	pop	r25
    137c:	8f 91       	pop	r24
    137e:	7f 91       	pop	r23
    1380:	6f 91       	pop	r22
    1382:	5f 91       	pop	r21
    1384:	4f 91       	pop	r20
    1386:	3f 91       	pop	r19
    1388:	2f 91       	pop	r18
    138a:	0f 90       	pop	r0
    138c:	0b be       	out	0x3b, r0	; 59
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <__vector_7>:
__vector_7():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WInterrupts.c:455
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	0b b6       	in	r0, 0x3b	; 59
    13a4:	0f 92       	push	r0
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
    13be:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__DATA_REGION_ORIGIN__+0xc>
    13c2:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__DATA_REGION_ORIGIN__+0xd>
    13c6:	19 95       	eicall
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0b be       	out	0x3b, r0	; 59
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_8>:
__vector_8():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WInterrupts.c:456
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	0b b6       	in	r0, 0x3b	; 59
    13fa:	0f 92       	push	r0
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
    1414:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__DATA_REGION_ORIGIN__+0xe>
    1418:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__DATA_REGION_ORIGIN__+0xf>
    141c:	19 95       	eicall
    141e:	ff 91       	pop	r31
    1420:	ef 91       	pop	r30
    1422:	bf 91       	pop	r27
    1424:	af 91       	pop	r26
    1426:	9f 91       	pop	r25
    1428:	8f 91       	pop	r24
    142a:	7f 91       	pop	r23
    142c:	6f 91       	pop	r22
    142e:	5f 91       	pop	r21
    1430:	4f 91       	pop	r20
    1432:	3f 91       	pop	r19
    1434:	2f 91       	pop	r18
    1436:	0f 90       	pop	r0
    1438:	0b be       	out	0x3b, r0	; 59
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti

00001444 <initVariant>:
initVariant():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1444:	08 95       	ret

00001446 <main>:
main():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1446:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <init>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    144a:	0e 94 22 0a 	call	0x1444	; 0x1444 <initVariant>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    144e:	0e 94 9d 01 	call	0x33a	; 0x33a <setup>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1452:	cd ed       	ldi	r28, 0xDD	; 221
    1454:	d5 e0       	ldi	r29, 0x05	; 5
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1456:	0e 94 3f 02 	call	0x47e	; 0x47e <loop>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    145a:	20 97       	sbiw	r28, 0x00	; 0
    145c:	e1 f3       	breq	.-8      	; 0x1456 <main+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    145e:	0e 94 dd 05 	call	0xbba	; 0xbba <serialEventRun()>
    1462:	f9 cf       	rjmp	.-14     	; 0x1456 <main+0x10>

00001464 <__vector_23>:
__vector_23():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1464:	1f 92       	push	r1
    1466:	0f 92       	push	r0
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	0f 92       	push	r0
    146c:	11 24       	eor	r1, r1
    146e:	2f 93       	push	r18
    1470:	3f 93       	push	r19
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <timer0_millis>
    147e:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <timer0_millis+0x1>
    1482:	a0 91 82 04 	lds	r26, 0x0482	; 0x800482 <timer0_millis+0x2>
    1486:	b0 91 83 04 	lds	r27, 0x0483	; 0x800483 <timer0_millis+0x3>
    148a:	30 91 7f 04 	lds	r19, 0x047F	; 0x80047f <timer0_fract>
    148e:	26 e0       	ldi	r18, 0x06	; 6
    1490:	23 0f       	add	r18, r19
    1492:	2d 37       	cpi	r18, 0x7D	; 125
    1494:	68 f1       	brcs	.+90     	; 0x14f0 <__vector_23+0x8c>
    1496:	29 e8       	ldi	r18, 0x89	; 137
    1498:	23 0f       	add	r18, r19
    149a:	03 96       	adiw	r24, 0x03	; 3
    149c:	a1 1d       	adc	r26, r1
    149e:	b1 1d       	adc	r27, r1
    14a0:	20 93 7f 04 	sts	0x047F, r18	; 0x80047f <timer0_fract>
    14a4:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <timer0_millis>
    14a8:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <timer0_millis+0x1>
    14ac:	a0 93 82 04 	sts	0x0482, r26	; 0x800482 <timer0_millis+0x2>
    14b0:	b0 93 83 04 	sts	0x0483, r27	; 0x800483 <timer0_millis+0x3>
    14b4:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <timer0_overflow_count>
    14b8:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <timer0_overflow_count+0x1>
    14bc:	a0 91 7d 04 	lds	r26, 0x047D	; 0x80047d <timer0_overflow_count+0x2>
    14c0:	b0 91 7e 04 	lds	r27, 0x047E	; 0x80047e <timer0_overflow_count+0x3>
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	a1 1d       	adc	r26, r1
    14c8:	b1 1d       	adc	r27, r1
    14ca:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <timer0_overflow_count>
    14ce:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <timer0_overflow_count+0x1>
    14d2:	a0 93 7d 04 	sts	0x047D, r26	; 0x80047d <timer0_overflow_count+0x2>
    14d6:	b0 93 7e 04 	sts	0x047E, r27	; 0x80047e <timer0_overflow_count+0x3>
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	3f 91       	pop	r19
    14e4:	2f 91       	pop	r18
    14e6:	0f 90       	pop	r0
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	0f 90       	pop	r0
    14ec:	1f 90       	pop	r1
    14ee:	18 95       	reti
    14f0:	02 96       	adiw	r24, 0x02	; 2
    14f2:	a1 1d       	adc	r26, r1
    14f4:	b1 1d       	adc	r27, r1
    14f6:	d4 cf       	rjmp	.-88     	; 0x14a0 <__vector_23+0x3c>

000014f8 <micros>:
micros():
    14f8:	3f b7       	in	r19, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <timer0_overflow_count>
    1500:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <timer0_overflow_count+0x1>
    1504:	a0 91 7d 04 	lds	r26, 0x047D	; 0x80047d <timer0_overflow_count+0x2>
    1508:	b0 91 7e 04 	lds	r27, 0x047E	; 0x80047e <timer0_overflow_count+0x3>
    150c:	26 b5       	in	r18, 0x26	; 38
    150e:	a8 9b       	sbis	0x15, 0	; 21
    1510:	05 c0       	rjmp	.+10     	; 0x151c <micros+0x24>
    1512:	2f 3f       	cpi	r18, 0xFF	; 255
    1514:	19 f0       	breq	.+6      	; 0x151c <micros+0x24>
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	a1 1d       	adc	r26, r1
    151a:	b1 1d       	adc	r27, r1
    151c:	3f bf       	out	0x3f, r19	; 63
    151e:	ba 2f       	mov	r27, r26
    1520:	a9 2f       	mov	r26, r25
    1522:	98 2f       	mov	r25, r24
    1524:	88 27       	eor	r24, r24
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	62 0f       	add	r22, r18
    152c:	71 1d       	adc	r23, r1
    152e:	81 1d       	adc	r24, r1
    1530:	91 1d       	adc	r25, r1
    1532:	43 e0       	ldi	r20, 0x03	; 3
    1534:	66 0f       	add	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	4a 95       	dec	r20
    153e:	d1 f7       	brne	.-12     	; 0x1534 <micros+0x3c>
    1540:	08 95       	ret

00001542 <delay>:
delay():
    1542:	8f 92       	push	r8
    1544:	9f 92       	push	r9
    1546:	af 92       	push	r10
    1548:	bf 92       	push	r11
    154a:	cf 92       	push	r12
    154c:	df 92       	push	r13
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	6b 01       	movw	r12, r22
    1554:	7c 01       	movw	r14, r24
    1556:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <micros>
    155a:	4b 01       	movw	r8, r22
    155c:	5c 01       	movw	r10, r24
    155e:	c1 14       	cp	r12, r1
    1560:	d1 04       	cpc	r13, r1
    1562:	e1 04       	cpc	r14, r1
    1564:	f1 04       	cpc	r15, r1
    1566:	e9 f0       	breq	.+58     	; 0x15a2 <delay+0x60>
    1568:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <yield>
    156c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <micros>
    1570:	68 19       	sub	r22, r8
    1572:	79 09       	sbc	r23, r9
    1574:	8a 09       	sbc	r24, r10
    1576:	9b 09       	sbc	r25, r11
    1578:	68 3e       	cpi	r22, 0xE8	; 232
    157a:	73 40       	sbci	r23, 0x03	; 3
    157c:	81 05       	cpc	r24, r1
    157e:	91 05       	cpc	r25, r1
    1580:	70 f3       	brcs	.-36     	; 0x155e <delay+0x1c>
    1582:	21 e0       	ldi	r18, 0x01	; 1
    1584:	c2 1a       	sub	r12, r18
    1586:	d1 08       	sbc	r13, r1
    1588:	e1 08       	sbc	r14, r1
    158a:	f1 08       	sbc	r15, r1
    158c:	88 ee       	ldi	r24, 0xE8	; 232
    158e:	88 0e       	add	r8, r24
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	98 1e       	adc	r9, r24
    1594:	a1 1c       	adc	r10, r1
    1596:	b1 1c       	adc	r11, r1
    1598:	c1 14       	cp	r12, r1
    159a:	d1 04       	cpc	r13, r1
    159c:	e1 04       	cpc	r14, r1
    159e:	f1 04       	cpc	r15, r1
    15a0:	29 f7       	brne	.-54     	; 0x156c <delay+0x2a>
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	cf 90       	pop	r12
    15aa:	bf 90       	pop	r11
    15ac:	af 90       	pop	r10
    15ae:	9f 90       	pop	r9
    15b0:	8f 90       	pop	r8
    15b2:	08 95       	ret

000015b4 <init>:
init():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    15b4:	78 94       	sei
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    15b6:	84 b5       	in	r24, 0x24	; 36
    15b8:	83 60       	ori	r24, 0x03	; 3
    15ba:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    15bc:	85 b5       	in	r24, 0x25	; 37
    15be:	83 60       	ori	r24, 0x03	; 3
    15c0:	85 bd       	out	0x25, r24	; 37
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    15c2:	ee e6       	ldi	r30, 0x6E	; 110
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	81 60       	ori	r24, 0x01	; 1
    15ca:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    15cc:	e1 e8       	ldi	r30, 0x81	; 129
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    15d4:	80 81       	ld	r24, Z
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    15da:	e0 e8       	ldi	r30, 0x80	; 128
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	81 60       	ori	r24, 0x01	; 1
    15e2:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    15e4:	e1 eb       	ldi	r30, 0xB1	; 177
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	84 60       	ori	r24, 0x04	; 4
    15ec:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    15ee:	e0 eb       	ldi	r30, 0xB0	; 176
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	81 60       	ori	r24, 0x01	; 1
    15f6:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    15f8:	e1 e9       	ldi	r30, 0x91	; 145
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	83 60       	ori	r24, 0x03	; 3
    1600:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    1602:	e0 e9       	ldi	r30, 0x90	; 144
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	81 60       	ori	r24, 0x01	; 1
    160a:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    160c:	e1 ea       	ldi	r30, 0xA1	; 161
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	83 60       	ori	r24, 0x03	; 3
    1614:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    1616:	e0 ea       	ldi	r30, 0xA0	; 160
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	81 60       	ori	r24, 0x01	; 1
    161e:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    1620:	e1 e2       	ldi	r30, 0x21	; 33
    1622:	f1 e0       	ldi	r31, 0x01	; 1
    1624:	80 81       	ld	r24, Z
    1626:	83 60       	ori	r24, 0x03	; 3
    1628:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    162a:	e0 e2       	ldi	r30, 0x20	; 32
    162c:	f1 e0       	ldi	r31, 0x01	; 1
    162e:	80 81       	ld	r24, Z
    1630:	81 60       	ori	r24, 0x01	; 1
    1632:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    1634:	86 e8       	ldi	r24, 0x86	; 134
    1636:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    163a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    163e:	08 95       	ret

00001640 <turnOffPWM>:
turnOffPWM():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    1640:	82 50       	subi	r24, 0x02	; 2
    1642:	82 31       	cpi	r24, 0x12	; 18
    1644:	08 f0       	brcs	.+2      	; 0x1648 <turnOffPWM+0x8>
    1646:	5f c0       	rjmp	.+190    	; 0x1706 <turnOffPWM+0xc6>
    1648:	e8 2f       	mov	r30, r24
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	88 27       	eor	r24, r24
    164e:	e4 5d       	subi	r30, 0xD4	; 212
    1650:	f4 4f       	sbci	r31, 0xF4	; 244
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__tablejump2__>
    1658:	80 0b       	sbc	r24, r16
    165a:	84 0b       	sbc	r24, r20
    165c:	3e 0b       	sbc	r19, r30
    165e:	44 0b       	sbc	r20, r20
    1660:	48 0b       	sbc	r20, r24
    1662:	83 0b       	sbc	r24, r19
    1664:	4c 0b       	sbc	r20, r28
    1666:	52 0b       	sbc	r21, r18
    1668:	56 0b       	sbc	r21, r22
    166a:	5c 0b       	sbc	r21, r28
    166c:	60 0b       	sbc	r22, r16
    166e:	64 0b       	sbc	r22, r20
    1670:	6a 0b       	sbc	r22, r26
    1672:	6e 0b       	sbc	r22, r30
    1674:	83 0b       	sbc	r24, r19
    1676:	72 0b       	sbc	r23, r18
    1678:	78 0b       	sbc	r23, r24
    167a:	7c 0b       	sbc	r23, r28
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    167c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1680:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1682:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    1686:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1688:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    168c:	8f 7d       	andi	r24, 0xDF	; 223
    168e:	f9 cf       	rjmp	.-14     	; 0x1682 <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    1690:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1694:	87 7f       	andi	r24, 0xF7	; 247
    1696:	f5 cf       	rjmp	.-22     	; 0x1682 <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    1698:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    169c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    169e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    16a2:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    16a4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    16a8:	8f 7d       	andi	r24, 0xDF	; 223
    16aa:	f9 cf       	rjmp	.-14     	; 0x169e <turnOffPWM+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    16ac:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    16b0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    16b2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    16b6:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    16b8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    16bc:	8f 7d       	andi	r24, 0xDF	; 223
    16be:	f9 cf       	rjmp	.-14     	; 0x16b2 <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    16c0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    16c4:	87 7f       	andi	r24, 0xF7	; 247
    16c6:	f5 cf       	rjmp	.-22     	; 0x16b2 <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    16c8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    16cc:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    16ce:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    16d2:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    16d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    16d8:	8f 7d       	andi	r24, 0xDF	; 223
    16da:	f9 cf       	rjmp	.-14     	; 0x16ce <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    16dc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    16e0:	87 7f       	andi	r24, 0xF7	; 247
    16e2:	f5 cf       	rjmp	.-22     	; 0x16ce <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    16e4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    16e8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    16ea:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    16ee:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    16f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    16f4:	8f 7d       	andi	r24, 0xDF	; 223
    16f6:	f9 cf       	rjmp	.-14     	; 0x16ea <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    16f8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    16fc:	87 7f       	andi	r24, 0xF7	; 247
    16fe:	f5 cf       	rjmp	.-22     	; 0x16ea <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1700:	84 b5       	in	r24, 0x24	; 36
    1702:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1704:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1706:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1708:	84 b5       	in	r24, 0x24	; 36
    170a:	8f 7d       	andi	r24, 0xDF	; 223
    170c:	fb cf       	rjmp	.-10     	; 0x1704 <turnOffPWM+0xc4>

0000170e <pinMode>:
pinMode():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	fc 01       	movw	r30, r24
    1716:	ee 52       	subi	r30, 0x2E	; 46
    1718:	fe 4f       	sbci	r31, 0xFE	; 254
    171a:	24 91       	lpm	r18, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    171c:	88 5d       	subi	r24, 0xD8	; 216
    171e:	9d 4f       	sbci	r25, 0xFD	; 253
    1720:	fc 01       	movw	r30, r24
    1722:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1724:	88 23       	and	r24, r24
    1726:	c9 f0       	breq	.+50     	; 0x175a <pinMode+0x4c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	fc 01       	movw	r30, r24
    1730:	ee 54       	subi	r30, 0x4E	; 78
    1732:	fd 4f       	sbci	r31, 0xFD	; 253
    1734:	a5 91       	lpm	r26, Z+
    1736:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1738:	fc 01       	movw	r30, r24
    173a:	e8 56       	subi	r30, 0x68	; 104
    173c:	fd 4f       	sbci	r31, 0xFD	; 253
    173e:	c5 91       	lpm	r28, Z+
    1740:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1742:	61 11       	cpse	r22, r1
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <pinMode+0x52>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1746:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1748:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    174a:	8c 91       	ld	r24, X
    174c:	20 95       	com	r18
    174e:	82 23       	and	r24, r18
    1750:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1752:	88 81       	ld	r24, Y
    1754:	28 23       	and	r18, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1756:	28 83       	st	Y, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1758:	9f bf       	out	0x3f, r25	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1760:	62 30       	cpi	r22, 0x02	; 2
    1762:	51 f4       	brne	.+20     	; 0x1778 <pinMode+0x6a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1764:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1766:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1768:	3c 91       	ld	r19, X
    176a:	82 2f       	mov	r24, r18
    176c:	80 95       	com	r24
    176e:	83 23       	and	r24, r19
    1770:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1772:	e8 81       	ld	r30, Y
    1774:	2e 2b       	or	r18, r30
    1776:	ef cf       	rjmp	.-34     	; 0x1756 <pinMode+0x48>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1778:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    177a:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    177c:	ec 91       	ld	r30, X
    177e:	2e 2b       	or	r18, r30
    1780:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1782:	8f bf       	out	0x3f, r24	; 63
    1784:	ea cf       	rjmp	.-44     	; 0x175a <pinMode+0x4c>

00001786 <digitalWrite>:
digitalWrite():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	f9 01       	movw	r30, r18
    1792:	e4 58       	subi	r30, 0x84	; 132
    1794:	fe 4f       	sbci	r31, 0xFE	; 254
    1796:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1798:	f9 01       	movw	r30, r18
    179a:	ee 52       	subi	r30, 0x2E	; 46
    179c:	fe 4f       	sbci	r31, 0xFE	; 254
    179e:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    17a0:	f9 01       	movw	r30, r18
    17a2:	e8 5d       	subi	r30, 0xD8	; 216
    17a4:	fd 4f       	sbci	r31, 0xFD	; 253
    17a6:	c4 91       	lpm	r28, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    17a8:	cc 23       	and	r28, r28
    17aa:	a9 f0       	breq	.+42     	; 0x17d6 <digitalWrite+0x50>
    17ac:	16 2f       	mov	r17, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    17ae:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    17b0:	0e 94 20 0b 	call	0x1640	; 0x1640 <turnOffPWM>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    17b4:	ec 2f       	mov	r30, r28
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	ee 0f       	add	r30, r30
    17ba:	ff 1f       	adc	r31, r31
    17bc:	e8 56       	subi	r30, 0x68	; 104
    17be:	fd 4f       	sbci	r31, 0xFD	; 253
    17c0:	a5 91       	lpm	r26, Z+
    17c2:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    17c4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    17c6:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    17c8:	ec 91       	ld	r30, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    17ca:	11 11       	cpse	r17, r1
    17cc:	08 c0       	rjmp	.+16     	; 0x17de <digitalWrite+0x58>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    17ce:	d0 95       	com	r29
    17d0:	de 23       	and	r29, r30
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    17d2:	dc 93       	st	X, r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    17d4:	8f bf       	out	0x3f, r24	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    17de:	de 2b       	or	r29, r30
    17e0:	f8 cf       	rjmp	.-16     	; 0x17d2 <digitalWrite+0x4c>

000017e2 <yield>:
__empty():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    17e2:	08 95       	ret

000017e4 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    17e4:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    17e6:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    17e8:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    17ea:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    17ec:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    17ee:	0d c0       	rjmp	.+26     	; 0x180a <__udivmodsi4_ep>

000017f0 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    17f0:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    17f2:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    17f4:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    17f6:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    17f8:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    17fa:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    17fc:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    17fe:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1800:	20 f0       	brcs	.+8      	; 0x180a <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1802:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1804:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1806:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1808:	f5 0b       	sbc	r31, r21

0000180a <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    180a:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    180c:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    180e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1810:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1812:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1814:	69 f7       	brne	.-38     	; 0x17f0 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1816:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1818:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    181a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    181c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    181e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1820:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1822:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1824:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1826:	08 95       	ret

00001828 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1828:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    182a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    182c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    182e:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    1830:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    1832:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    1834:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    1836:	19 94       	eijmp

00001838 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1838:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    183a:	c9 e6       	ldi	r28, 0x69	; 105
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    183c:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2500
    183e:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1840:	06 c0       	rjmp	.+12     	; 0x184e <__do_global_dtors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2505
    1842:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1844:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1846:	0e 94 14 0c 	call	0x1828	; 0x1828 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    184a:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2512
    184c:	01 1d       	adc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    184e:	ca 36       	cpi	r28, 0x6A	; 106
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1850:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2518
    1852:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2519
    1854:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1856:	a9 f7       	brne	.-22     	; 0x1842 <__do_global_dtors+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1858:	f8 94       	cli

0000185a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    185a:	ff cf       	rjmp	.-2      	; 0x185a <__stop_program>
