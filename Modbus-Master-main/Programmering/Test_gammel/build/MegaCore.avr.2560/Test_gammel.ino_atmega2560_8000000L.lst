
C:\Users\mbt\AppData\Local\Temp\arduino\sketches\5C5545993164DFB5E2179011D4133899/Test_gammel.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__ctors_end>
       4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
       8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
       c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      10:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      14:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      18:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      1c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      20:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      24:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      28:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      2c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      30:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      34:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      38:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      3c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      40:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      44:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      48:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      4c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      50:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      54:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      58:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      5c:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__vector_23>
      60:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      64:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      68:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      6c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      70:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      74:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      78:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      7c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      80:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      84:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      88:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      8c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      90:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_36>
      94:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_37>
      98:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      9c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      a0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      a4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      a8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      ac:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      b0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      b4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      b8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      bc:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      c0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      c4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      c8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      cc:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__vector_51>
      d0:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__vector_52>
      d4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      d8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      dc:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      e0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <turnOffPWM+0x6c>
      e8:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <turnOffPWM+0xa4>
      ec:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <turnOffPWM+0x80>
      f0:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <turnOffPWM+0x94>
      f4:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <turnOffPWM+0x58>
      f8:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <_GLOBAL__sub_I___vector_51>
      fc:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <turnOffPWM+0x3c>
     100:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <Print::write(unsigned char const*, unsigned int)>
     104:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <turnOffPWM+0x78>
     108:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <turnOffPWM+0xb8>
     10c:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <HardwareSerial::available()>
     110:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <turnOffPWM+0xc8>
     114:	0c 94 97 0b 	jmp	0x172e	; 0x172e <HardwareSerial::peek()>
     118:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <Serial1_available()>
     11c:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <serialEventRun()>
     120:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <HardwareSerial::read()>
     124:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <turnOffPWM+0x50>
     128:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <turnOffPWM+0xc6>
     12c:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <turnOffPWM+0x64>
     130:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <HardwareSerial::write(unsigned char)>
     134:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <HardwareSerial::flush()>
     138:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <turnOffPWM+0x88>
     13c:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <turnOffPWM+0xc0>
     140:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <_GLOBAL__sub_I___vector_36>
     144:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <turnOffPWM+0x9c>
     148:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <HardwareSerial::availableForWrite()>
     14c:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <Serial2_available()>
     150:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <turnOffPWM+0x48>
     154:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_GLOBAL__sub_I_simBuffer>
     158:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <turnOffPWM+0xb0>

0000015c <__trampolines_end>:
__trampolines_end():
     15c:	41 54       	subi	r20, 0x41	; 65
     15e:	2b 43       	sbci	r18, 0x3B	; 59
     160:	41 4f       	sbci	r20, 0xF1	; 241
     162:	50 45       	sbci	r21, 0x50	; 80
     164:	4e 3d       	cpi	r20, 0xDE	; 222
     166:	30 2c       	mov	r3, r0
     168:	30 2c       	mov	r3, r0
     16a:	22 55       	subi	r18, 0x52	; 82
     16c:	44 50       	subi	r20, 0x04	; 4
     16e:	22 2c       	mov	r2, r2
     170:	22 31       	cpi	r18, 0x12	; 18
     172:	36 34       	cpi	r19, 0x46	; 70
     174:	2e 39       	cpi	r18, 0x9E	; 158
     176:	32 2e       	mov	r3, r18
     178:	31 36       	cpi	r19, 0x61	; 97
     17a:	34 2e       	mov	r3, r20
     17c:	31 36       	cpi	r19, 0x61	; 97
     17e:	38 22       	and	r3, r24
     180:	2c 38       	cpi	r18, 0x8C	; 140
     182:	30 38       	cpi	r19, 0x80	; 128
     184:	30 00       	.word	0x0030	; ????

00000186 <_ZZ8simSetupvE3__c__10_>:
     186:	41 54 2b 43 4e 41 43 54 3f 00                       AT+CNACT?.

00000190 <simSetup()::__c>:
     190:	41 54 2b 43 4e 41 43 54 3d 30 2c 31 00              AT+CNACT=0,1.

0000019d <simSetup()::__c>:
     19d:	41 54 2b 43 53 51 00                                AT+CSQ.

000001a4 <simSetup()::__c>:
     1a4:	41 54 2b 43 47 4e 41 50 4e 00                       AT+CGNAPN.

000001ae <simSetup()::__c>:
     1ae:	41 54 2b 43 4f 50 53 3f 00                          AT+COPS?.

000001b7 <simSetup()::__c>:
     1b7:	41 54 2b 43 46 55 4e 3d 31 00                       AT+CFUN=1.

000001c1 <simSetup()::__c>:
     1c1:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     1d1:	22 2c 22 69 6f 74 2e 31 6e 63 65 2e 6e 65 74 22     ","iot.1nce.net"
	...

000001e2 <simSetup()::__c>:
     1e2:	41 54 2b 43 46 55 4e 3d 30 00                       AT+CFUN=0.

000001ec <simSetup()::__c>:
     1ec:	41 54 2b 43 4e 43 46 47 3d 30 2c 31 2c 22 69 6f     AT+CNCFG=0,1,"io
     1fc:	74 2e 31 6e 63 65 2e 6e 65 74 22 00                 t.1nce.net".

00000208 <simSetup()::__c>:
     208:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

00000212 <simSetup()::__c>:
     212:	41 54 2b 47 53 4e 00                                AT+GSN.

00000219 <simSetup()::__c>:
     219:	41 54 00                                            AT.

0000021c <loop::__c>:
     21c:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

0000022d <setup::__c>:
     22d:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

0000023e <setup::__c>:
     23e:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 32 00        AT+CASEND=0,12.

0000024d <setup::__c>:
     24d:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

0000025e <setup::__c>:
     25e:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 36 00        AT+CASEND=0,16.

0000026d <digital_pin_to_timer_PGM>:
     26d:	00 00 00 0a 0b 0c 00 00 00 00 00 0d 0e 0f 09 00     ................
     27d:	00 00 00 08 04 05 06 00 00 00 00 00 00 11 12 13     ................
	...
     2c1:	00 03                                               ..

000002c3 <digital_pin_to_bit_mask_PGM>:
     2c3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 01     ..... @...... @.
     2d3:	02 04 08 10 20 40 80 80 08 10 01 02 04 08 10 20     .... @......... 
     2e3:	40 80 01 02 04 08 10 20 40 80 01 02 01 02 04 08     @...... @.......
     2f3:	10 20 40 80 01 02 04 08 10 20 40 04 80 40 20 10     . @...... @..@ .
     303:	08 04 02 01 80 01 02 04 08 10 20 40 80 01 02 04     .......... @....
     313:	08 10 20 40 80 20                                   .. @. 

00000319 <digital_pin_to_port_PGM>:
     319:	05 05 05 05 05 05 05 05 08 08 08 08 08 08 08 02     ................
     329:	02 02 02 02 02 02 02 08 07 07 0c 0c 0c 0c 0c 0c     ................
     339:	0c 0c 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     349:	03 03 03 03 0a 0a 0a 0a 0a 0a 0a 07 01 01 01 01     ................
     359:	01 01 01 01 0a 06 06 06 06 06 06 06 06 0b 0b 0b     ................
     369:	0b 0b 0b 0b 0b 07                                   ......

0000036f <port_to_output_PGM>:
     36f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     37f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000389 <port_to_mode_PGM>:
     389:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     399:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

000003a4 <__ctors_start>:
__ctors_start():
     3a4:	e5 02       	muls	r30, r21
     3a6:	48 0d       	add	r20, r8
     3a8:	df 0d       	add	r29, r15

000003aa <__ctors_end>:
__dtors_end():
     3aa:	11 24       	eor	r1, r1
     3ac:	1f be       	out	0x3f, r1	; 63
     3ae:	cf ef       	ldi	r28, 0xFF	; 255
     3b0:	d1 e2       	ldi	r29, 0x21	; 33
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	00 e0       	ldi	r16, 0x00	; 0
     3b8:	0c bf       	out	0x3c, r16	; 60

000003ba <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     3ba:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     3be:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     3c0:	e8 ed       	ldi	r30, 0xD8	; 216
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     3c2:	f8 e2       	ldi	r31, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     3c4:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     3c6:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     3ca:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     3cc:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     3ce:	a2 37       	cpi	r26, 0x72	; 114
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     3d0:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     3d2:	d9 f7       	brne	.-10     	; 0x3ca <__do_copy_data+0x10>

000003d4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     3d4:	2c e1       	ldi	r18, 0x1C	; 28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     3d6:	a2 e7       	ldi	r26, 0x72	; 114
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     3d8:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     3da:	01 c0       	rjmp	.+2      	; 0x3de <.do_clear_bss_start>

000003dc <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     3dc:	1d 92       	st	X+, r1

000003de <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     3de:	ad 32       	cpi	r26, 0x2D	; 45
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     3e0:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     3e2:	e1 f7       	brne	.-8      	; 0x3dc <.do_clear_bss_loop>

000003e4 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     3e4:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     3e6:	c5 ed       	ldi	r28, 0xD5	; 213
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     3e8:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     3ea:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     3ee:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     3f0:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     3f2:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     3f4:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     3f6:	0e 94 21 10 	call	0x2042	; 0x2042 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     3fa:	c2 3d       	cpi	r28, 0xD2	; 210
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     3fc:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     3fe:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     400:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     402:	a9 f7       	brne	.-22     	; 0x3ee <__do_global_ctors+0xa>
     404:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <main>
     408:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <_exit>

0000040c <__bad_interrupt>:
__vector_38():
     40c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000410 <Print::write(char const*, unsigned int)>:
_ZN5Print5writeEPKcj():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:864
  simSerial.write(msg, strlen(msg));  // Check if network is active to adress
  responseCheck("OK", 10000);

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
  responseCheck("00", 10000);
}
     410:	dc 01       	movw	r26, r24
     412:	ed 91       	ld	r30, X+
     414:	fc 91       	ld	r31, X
     416:	02 80       	ldd	r0, Z+2	; 0x02
     418:	f3 81       	ldd	r31, Z+3	; 0x03
     41a:	e0 2d       	mov	r30, r0
     41c:	19 94       	eijmp

0000041e <millisDelay(int)>:
_Z11millisDelayi():
     41e:	8f 92       	push	r8
     420:	9f 92       	push	r9
     422:	af 92       	push	r10
     424:	bf 92       	push	r11
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	6c 01       	movw	r12, r24
     430:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <millis>
     434:	4b 01       	movw	r8, r22
     436:	5c 01       	movw	r10, r24
     438:	0d 2c       	mov	r0, r13
     43a:	00 0c       	add	r0, r0
     43c:	ee 08       	sbc	r14, r14
     43e:	ff 08       	sbc	r15, r15
     440:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <millis>
     444:	68 19       	sub	r22, r8
     446:	79 09       	sbc	r23, r9
     448:	8a 09       	sbc	r24, r10
     44a:	9b 09       	sbc	r25, r11
     44c:	6c 15       	cp	r22, r12
     44e:	7d 05       	cpc	r23, r13
     450:	8e 05       	cpc	r24, r14
     452:	9f 05       	cpc	r25, r15
     454:	a8 f3       	brcs	.-22     	; 0x440 <millisDelay(int)+0x22>
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	9f 90       	pop	r9
     464:	8f 90       	pop	r8
     466:	08 95       	ret

00000468 <sendToServer()>:
_Z12sendToServerv():
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	a8 97       	sbiw	r28, 0x28	; 40
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	8d e0       	ldi	r24, 0x0D	; 13
     482:	e7 e0       	ldi	r30, 0x07	; 7
     484:	f2 e0       	ldi	r31, 0x02	; 2
     486:	de 01       	movw	r26, r28
     488:	55 96       	adiw	r26, 0x15	; 21
     48a:	01 90       	ld	r0, Z+
     48c:	0d 92       	st	X+, r0
     48e:	8a 95       	dec	r24
     490:	e1 f7       	brne	.-8      	; 0x48a <sendToServer()+0x22>
     492:	fe 01       	movw	r30, r28
     494:	b2 96       	adiw	r30, 0x22	; 34
     496:	87 e0       	ldi	r24, 0x07	; 7
     498:	df 01       	movw	r26, r30
     49a:	1d 92       	st	X+, r1
     49c:	8a 95       	dec	r24
     49e:	e9 f7       	brne	.-6      	; 0x49a <sendToServer()+0x32>
     4a0:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <msgPos>
     4a4:	90 91 9b 16 	lds	r25, 0x169B	; 0x80169b <msgPos+0x1>
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	9f 93       	push	r25
     4ac:	8f 93       	push	r24
     4ae:	8d e2       	ldi	r24, 0x2D	; 45
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	9f 93       	push	r25
     4b4:	8f 93       	push	r24
     4b6:	8e 01       	movw	r16, r28
     4b8:	0f 5f       	subi	r16, 0xFF	; 255
     4ba:	1f 4f       	sbci	r17, 0xFF	; 255
     4bc:	1f 93       	push	r17
     4be:	0f 93       	push	r16
     4c0:	0e 94 7e 11 	call	0x22fc	; 0x22fc <sprintf>
     4c4:	b8 01       	movw	r22, r16
     4c6:	ce 01       	movw	r24, r28
     4c8:	45 96       	adiw	r24, 0x15	; 21
     4ca:	0e 94 4e 11 	call	0x229c	; 0x229c <strcat>
     4ce:	44 e1       	ldi	r20, 0x14	; 20
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	be 01       	movw	r22, r28
     4d4:	6b 5e       	subi	r22, 0xEB	; 235
     4d6:	7f 4f       	sbci	r23, 0xFF	; 255
     4d8:	86 ee       	ldi	r24, 0xE6	; 230
     4da:	9a e1       	ldi	r25, 0x1A	; 26
     4dc:	0e 94 08 02 	call	0x410	; 0x410 <Print::write(char const*, unsigned int)>
     4e0:	86 ee       	ldi	r24, 0xE6	; 230
     4e2:	9a e1       	ldi	r25, 0x1A	; 26
     4e4:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <Print::println()>
     4e8:	8c e2       	ldi	r24, 0x2C	; 44
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
     4f0:	40 91 9a 16 	lds	r20, 0x169A	; 0x80169a <msgPos>
     4f4:	50 91 9b 16 	lds	r21, 0x169B	; 0x80169b <msgPos+0x1>
     4f8:	4f 5f       	subi	r20, 0xFF	; 255
     4fa:	5f 4f       	sbci	r21, 0xFF	; 255
     4fc:	6c ef       	ldi	r22, 0xFC	; 252
     4fe:	76 e1       	ldi	r23, 0x16	; 22
     500:	86 ee       	ldi	r24, 0xE6	; 230
     502:	9a e1       	ldi	r25, 0x1A	; 26
     504:	0e 94 08 02 	call	0x410	; 0x410 <Print::write(char const*, unsigned int)>
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	a8 96       	adiw	r28, 0x28	; 40
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	08 95       	ret

0000052a <simpow()>:
_Z6simpowv():
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	8b e2       	ldi	r24, 0x2B	; 43
     52e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
     532:	88 ee       	ldi	r24, 0xE8	; 232
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	8b e2       	ldi	r24, 0x2B	; 43
     53e:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <digitalWrite>

00000542 <clrsimBuffer()>:
_Z12clrsimBufferv():
     542:	e0 91 e4 1a 	lds	r30, 0x1AE4	; 0x801ae4 <simBuffer>
     546:	f0 91 e5 1a 	lds	r31, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
     54a:	11 82       	std	Z+1, r1	; 0x01
     54c:	10 82       	st	Z, r1
     54e:	08 95       	ret

00000550 <clrmodBuffer()>:
_Z12clrmodBufferv():
     550:	ea ec       	ldi	r30, 0xCA	; 202
     552:	f6 e1       	ldi	r31, 0x16	; 22
     554:	82 e3       	ldi	r24, 0x32	; 50
     556:	df 01       	movw	r26, r30
     558:	1d 92       	st	X+, r1
     55a:	8a 95       	dec	r24
     55c:	e9 f7       	brne	.-6      	; 0x558 <clrmodBuffer()+0x8>
     55e:	08 95       	ret

00000560 <CRC16_modbus(char*, int)>:
_Z12CRC16_modbusPci():
     560:	ac 01       	movw	r20, r24
     562:	fc 01       	movw	r30, r24
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	9f ef       	ldi	r25, 0xFF	; 255
     568:	9f 01       	movw	r18, r30
     56a:	24 1b       	sub	r18, r20
     56c:	35 0b       	sbc	r19, r21
     56e:	26 17       	cp	r18, r22
     570:	37 07       	cpc	r19, r23
     572:	bc f4       	brge	.+46     	; 0x5a2 <CRC16_modbus(char*, int)+0x42>
     574:	21 91       	ld	r18, Z+
     576:	02 2e       	mov	r0, r18
     578:	00 0c       	add	r0, r0
     57a:	33 0b       	sbc	r19, r19
     57c:	82 27       	eor	r24, r18
     57e:	93 27       	eor	r25, r19
     580:	28 e0       	ldi	r18, 0x08	; 8
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	dc 01       	movw	r26, r24
     586:	a1 70       	andi	r26, 0x01	; 1
     588:	bb 27       	eor	r27, r27
     58a:	96 95       	lsr	r25
     58c:	87 95       	ror	r24
     58e:	ab 2b       	or	r26, r27
     590:	21 f0       	breq	.+8      	; 0x59a <CRC16_modbus(char*, int)+0x3a>
     592:	a1 e0       	ldi	r26, 0x01	; 1
     594:	8a 27       	eor	r24, r26
     596:	a0 ea       	ldi	r26, 0xA0	; 160
     598:	9a 27       	eor	r25, r26
     59a:	21 50       	subi	r18, 0x01	; 1
     59c:	31 09       	sbc	r19, r1
     59e:	91 f7       	brne	.-28     	; 0x584 <CRC16_modbus(char*, int)+0x24>
     5a0:	e3 cf       	rjmp	.-58     	; 0x568 <CRC16_modbus(char*, int)+0x8>
     5a2:	08 95       	ret

000005a4 <arraycheck(unsigned short*, short, int)>:
_Z10arraycheckPtsi():
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	24 17       	cp	r18, r20
     5aa:	35 07       	cpc	r19, r21
     5ac:	54 f4       	brge	.+20     	; 0x5c2 <arraycheck(unsigned short*, short, int)+0x1e>
     5ae:	dc 01       	movw	r26, r24
     5b0:	ed 91       	ld	r30, X+
     5b2:	fd 91       	ld	r31, X+
     5b4:	cd 01       	movw	r24, r26
     5b6:	e6 17       	cp	r30, r22
     5b8:	f7 07       	cpc	r31, r23
     5ba:	29 f0       	breq	.+10     	; 0x5c6 <arraycheck(unsigned short*, short, int)+0x22>
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	f3 cf       	rjmp	.-26     	; 0x5a8 <arraycheck(unsigned short*, short, int)+0x4>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	08 95       	ret
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	08 95       	ret

000005ca <_GLOBAL__sub_I_simBuffer>:
_GLOBAL__sub_I_simBuffer():
     5ca:	88 ee       	ldi	r24, 0xE8	; 232
     5cc:	93 e0       	ldi	r25, 0x03	; 3
     5ce:	0e 94 29 10 	call	0x2052	; 0x2052 <malloc>
     5d2:	90 93 e5 1a 	sts	0x1AE5, r25	; 0x801ae5 <simBuffer+0x1>
     5d6:	80 93 e4 1a 	sts	0x1AE4, r24	; 0x801ae4 <simBuffer>
     5da:	08 95       	ret

000005dc <slaveRead()>:
_Z9slaveReadv():
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	8c e2       	ldi	r24, 0x2C	; 44
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
     5ec:	83 e8       	ldi	r24, 0x83	; 131
     5ee:	9b e1       	ldi	r25, 0x1B	; 27
     5f0:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
     5f4:	89 2b       	or	r24, r25
     5f6:	99 f0       	breq	.+38     	; 0x61e <slaveRead()+0x42>
     5f8:	83 e8       	ldi	r24, 0x83	; 131
     5fa:	9b e1       	ldi	r25, 0x1B	; 27
     5fc:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
     600:	8c 01       	movw	r16, r24
     602:	ca ec       	ldi	r28, 0xCA	; 202
     604:	d6 e1       	ldi	r29, 0x16	; 22
     606:	ce 01       	movw	r24, r28
     608:	8a 5c       	subi	r24, 0xCA	; 202
     60a:	96 41       	sbci	r25, 0x16	; 22
     60c:	80 17       	cp	r24, r16
     60e:	91 07       	cpc	r25, r17
     610:	6c f7       	brge	.-38     	; 0x5ec <slaveRead()+0x10>
     612:	83 e8       	ldi	r24, 0x83	; 131
     614:	9b e1       	ldi	r25, 0x1B	; 27
     616:	0e 94 a5 0b 	call	0x174a	; 0x174a <HardwareSerial::read()>
     61a:	89 93       	st	Y+, r24
     61c:	f4 cf       	rjmp	.-24     	; 0x606 <slaveRead()+0x2a>
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <modbusRead()>:
_Z10modbusReadv():
     628:	2f 92       	push	r2
     62a:	3f 92       	push	r3
     62c:	4f 92       	push	r4
     62e:	5f 92       	push	r5
     630:	6f 92       	push	r6
     632:	7f 92       	push	r7
     634:	8f 92       	push	r8
     636:	9f 92       	push	r9
     638:	af 92       	push	r10
     63a:	bf 92       	push	r11
     63c:	cf 92       	push	r12
     63e:	df 92       	push	r13
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	cc 5a       	subi	r28, 0xAC	; 172
     652:	d5 40       	sbci	r29, 0x05	; 5
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <slaveSetupCheck>
     662:	81 11       	cpse	r24, r1
     664:	6e c1       	rjmp	.+732    	; 0x942 <modbusRead()+0x31a>
     666:	ef e9       	ldi	r30, 0x9F	; 159
     668:	f6 e1       	ldi	r31, 0x16	; 22
     66a:	8e e1       	ldi	r24, 0x1E	; 30
     66c:	df 01       	movw	r26, r30
     66e:	1d 92       	st	X+, r1
     670:	8a 95       	dec	r24
     672:	e9 f7       	brne	.-6      	; 0x66e <modbusRead()+0x46>
     674:	e0 91 e4 1a 	lds	r30, 0x1AE4	; 0x801ae4 <simBuffer>
     678:	f0 91 e5 1a 	lds	r31, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
     67c:	82 81       	ldd	r24, Z+2	; 0x02
     67e:	93 81       	ldd	r25, Z+3	; 0x03
     680:	f8 2f       	mov	r31, r24
     682:	e9 2f       	mov	r30, r25
     684:	c5 55       	subi	r28, 0x55	; 85
     686:	da 4f       	sbci	r29, 0xFA	; 250
     688:	f9 83       	std	Y+1, r31	; 0x01
     68a:	e8 83       	st	Y, r30
     68c:	cb 5a       	subi	r28, 0xAB	; 171
     68e:	d5 40       	sbci	r29, 0x05	; 5
     690:	04 e0       	ldi	r16, 0x04	; 4
     692:	e0 2e       	mov	r14, r16
     694:	f1 2c       	mov	r15, r1
     696:	d1 2c       	mov	r13, r1
     698:	c1 2c       	mov	r12, r1
     69a:	b1 2c       	mov	r11, r1
     69c:	a1 2c       	mov	r10, r1
     69e:	8c ea       	ldi	r24, 0xAC	; 172
     6a0:	28 2e       	mov	r2, r24
     6a2:	c5 55       	subi	r28, 0x55	; 85
     6a4:	da 4f       	sbci	r29, 0xFA	; 250
     6a6:	28 81       	ld	r18, Y
     6a8:	39 81       	ldd	r19, Y+1	; 0x01
     6aa:	cb 5a       	subi	r28, 0xAB	; 171
     6ac:	d5 40       	sbci	r29, 0x05	; 5
     6ae:	c2 16       	cp	r12, r18
     6b0:	d3 06       	cpc	r13, r19
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <modbusRead()+0x8e>
     6b4:	ab c0       	rjmp	.+342    	; 0x80c <modbusRead()+0x1e4>
     6b6:	e0 91 e4 1a 	lds	r30, 0x1AE4	; 0x801ae4 <simBuffer>
     6ba:	f0 91 e5 1a 	lds	r31, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
     6be:	ee 0d       	add	r30, r14
     6c0:	ff 1d       	adc	r31, r15
     6c2:	30 80       	ld	r3, Z
     6c4:	81 81       	ldd	r24, Z+1	; 0x01
     6c6:	42 80       	ldd	r4, Z+2	; 0x02
     6c8:	58 2e       	mov	r5, r24
     6ca:	33 81       	ldd	r19, Z+3	; 0x03
     6cc:	c7 55       	subi	r28, 0x57	; 87
     6ce:	da 4f       	sbci	r29, 0xFA	; 250
     6d0:	38 83       	st	Y, r19
     6d2:	c9 5a       	subi	r28, 0xA9	; 169
     6d4:	d5 40       	sbci	r29, 0x05	; 5
     6d6:	84 81       	ldd	r24, Z+4	; 0x04
     6d8:	65 80       	ldd	r6, Z+5	; 0x05
     6da:	78 2e       	mov	r7, r24
     6dc:	03 2d       	mov	r16, r3
     6de:	03 2c       	mov	r0, r3
     6e0:	00 0c       	add	r0, r0
     6e2:	11 0b       	sbc	r17, r17
_ZNK5EERefdeEv():
     6e4:	c8 01       	movw	r24, r16
     6e6:	0e 94 54 14 	call	0x28a8	; 0x28a8 <eeprom_read_byte>
_ZN5EERef6updateEh():
     6ea:	68 16       	cp	r6, r24
     6ec:	21 f0       	breq	.+8      	; 0x6f6 <modbusRead()+0xce>
_ZN5EERefaSEh():
     6ee:	66 2d       	mov	r22, r6
     6f0:	c8 01       	movw	r24, r16
     6f2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <eeprom_write_byte>
_ZN5EEPtrppEv():
     6f6:	48 01       	movw	r8, r16
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	84 1a       	sub	r8, r20
     6fc:	94 0a       	sbc	r9, r20
_ZNK5EERefdeEv():
     6fe:	c4 01       	movw	r24, r8
     700:	0e 94 54 14 	call	0x28a8	; 0x28a8 <eeprom_read_byte>
_ZN5EERef6updateEh():
     704:	78 16       	cp	r7, r24
     706:	21 f0       	breq	.+8      	; 0x710 <modbusRead()+0xe8>
_ZN5EERefaSEh():
     708:	67 2d       	mov	r22, r7
     70a:	c4 01       	movw	r24, r8
     70c:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <eeprom_write_byte>
_Z10modbusReadv():
     710:	b8 01       	movw	r22, r16
     712:	8f e9       	ldi	r24, 0x9F	; 159
     714:	96 e1       	ldi	r25, 0x16	; 22
     716:	0e 94 59 11 	call	0x22b2	; 0x22b2 <strchr>
     71a:	89 2b       	or	r24, r25
     71c:	a9 f5       	brne	.+106    	; 0x788 <modbusRead()+0x160>
     71e:	f5 01       	movw	r30, r10
     720:	e1 56       	subi	r30, 0x61	; 97
     722:	f9 4e       	sbci	r31, 0xE9	; 233
     724:	30 82       	st	Z, r3
     726:	20 9e       	mul	r2, r16
     728:	c0 01       	movw	r24, r0
     72a:	21 9e       	mul	r2, r17
     72c:	90 0d       	add	r25, r0
     72e:	11 24       	eor	r1, r1
     730:	8e 58       	subi	r24, 0x8E	; 142
     732:	9d 4f       	sbci	r25, 0xFD	; 253
     734:	fc 01       	movw	r30, r24
     736:	e8 58       	subi	r30, 0x88	; 136
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	11 82       	std	Z+1, r1	; 0x01
     73c:	10 82       	st	Z, r1
     73e:	86 58       	subi	r24, 0x86	; 134
     740:	9f 4f       	sbci	r25, 0xFF	; 255
     742:	dc 01       	movw	r26, r24
     744:	1d 92       	st	X+, r1
     746:	1c 92       	st	X, r1
     748:	b3 2d       	mov	r27, r3
     74a:	e0 e3       	ldi	r30, 0x30	; 48
     74c:	be 02       	muls	r27, r30
     74e:	c0 01       	movw	r24, r0
     750:	11 24       	eor	r1, r1
_ZN11slaves_info5resetEv():
     752:	e1 e0       	ldi	r30, 0x01	; 1
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	ec 0f       	add	r30, r28
     758:	fd 1f       	adc	r31, r29
     75a:	e8 0f       	add	r30, r24
     75c:	f9 1f       	adc	r31, r25
     75e:	df 01       	movw	r26, r30
     760:	20 e2       	ldi	r18, 0x20	; 32
     762:	1d 92       	st	X+, r1
     764:	2a 95       	dec	r18
     766:	e9 f7       	brne	.-6      	; 0x762 <modbusRead()+0x13a>
     768:	80 96       	adiw	r24, 0x20	; 32
     76a:	e1 e0       	ldi	r30, 0x01	; 1
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	ec 0f       	add	r30, r28
     770:	fd 1f       	adc	r31, r29
     772:	e8 0f       	add	r30, r24
     774:	f9 1f       	adc	r31, r25
     776:	df 01       	movw	r26, r30
     778:	20 e1       	ldi	r18, 0x10	; 16
     77a:	1d 92       	st	X+, r1
     77c:	2a 95       	dec	r18
     77e:	e9 f7       	brne	.-6      	; 0x77a <modbusRead()+0x152>
_Z10modbusReadv():
     780:	a5 01       	movw	r20, r10
     782:	4f 5f       	subi	r20, 0xFF	; 255
     784:	5f 4f       	sbci	r21, 0xFF	; 255
     786:	5a 01       	movw	r10, r20
     788:	c7 55       	subi	r28, 0x57	; 87
     78a:	da 4f       	sbci	r29, 0xFA	; 250
     78c:	58 81       	ld	r21, Y
     78e:	c9 5a       	subi	r28, 0xA9	; 169
     790:	d5 40       	sbci	r29, 0x05	; 5
     792:	20 9e       	mul	r2, r16
     794:	d0 01       	movw	r26, r0
     796:	21 9e       	mul	r2, r17
     798:	b0 0d       	add	r27, r0
     79a:	11 24       	eor	r1, r1
     79c:	51 30       	cpi	r21, 0x01	; 1
     79e:	f9 f4       	brne	.+62     	; 0x7de <modbusRead()+0x1b6>
     7a0:	a6 51       	subi	r26, 0x16	; 22
     7a2:	bd 4f       	sbci	r27, 0xFD	; 253
     7a4:	8d 91       	ld	r24, X+
     7a6:	9c 91       	ld	r25, X
     7a8:	11 97       	sbiw	r26, 0x01	; 1
     7aa:	9c 01       	movw	r18, r24
     7ac:	2f 5f       	subi	r18, 0xFF	; 255
     7ae:	3f 4f       	sbci	r19, 0xFF	; 255
     7b0:	2d 93       	st	X+, r18
     7b2:	3c 93       	st	X, r19
     7b4:	a6 e5       	ldi	r26, 0x56	; 86
     7b6:	a0 9f       	mul	r26, r16
     7b8:	f0 01       	movw	r30, r0
     7ba:	a1 9f       	mul	r26, r17
     7bc:	f0 0d       	add	r31, r0
     7be:	11 24       	eor	r1, r1
     7c0:	e8 0f       	add	r30, r24
     7c2:	f9 1f       	adc	r31, r25
     7c4:	ee 0f       	add	r30, r30
     7c6:	ff 1f       	adc	r31, r31
     7c8:	ee 56       	subi	r30, 0x6E	; 110
     7ca:	fd 4f       	sbci	r31, 0xFD	; 253
     7cc:	51 82       	std	Z+1, r5	; 0x01
     7ce:	40 82       	st	Z, r4
     7d0:	ef ef       	ldi	r30, 0xFF	; 255
     7d2:	ce 1a       	sub	r12, r30
     7d4:	de 0a       	sbc	r13, r30
     7d6:	f6 e0       	ldi	r31, 0x06	; 6
     7d8:	ef 0e       	add	r14, r31
     7da:	f1 1c       	adc	r15, r1
     7dc:	62 cf       	rjmp	.-316    	; 0x6a2 <modbusRead()+0x7a>
     7de:	a4 51       	subi	r26, 0x14	; 20
     7e0:	bd 4f       	sbci	r27, 0xFD	; 253
     7e2:	8d 91       	ld	r24, X+
     7e4:	9c 91       	ld	r25, X
     7e6:	11 97       	sbiw	r26, 0x01	; 1
     7e8:	9c 01       	movw	r18, r24
     7ea:	2f 5f       	subi	r18, 0xFF	; 255
     7ec:	3f 4f       	sbci	r19, 0xFF	; 255
     7ee:	2d 93       	st	X+, r18
     7f0:	3c 93       	st	X, r19
     7f2:	b6 e5       	ldi	r27, 0x56	; 86
     7f4:	b0 9f       	mul	r27, r16
     7f6:	f0 01       	movw	r30, r0
     7f8:	b1 9f       	mul	r27, r17
     7fa:	f0 0d       	add	r31, r0
     7fc:	11 24       	eor	r1, r1
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	ee 58       	subi	r30, 0x8E	; 142
     808:	fd 4f       	sbci	r31, 0xFD	; 253
     80a:	e0 cf       	rjmp	.-64     	; 0x7cc <modbusRead()+0x1a4>
     80c:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
     810:	6f e9       	ldi	r22, 0x9F	; 159
     812:	76 e1       	ldi	r23, 0x16	; 22
     814:	5b 01       	movw	r10, r22
     816:	ac ea       	ldi	r26, 0xAC	; 172
     818:	9a 2e       	mov	r9, r26
     81a:	d5 01       	movw	r26, r10
     81c:	0d 90       	ld	r0, X+
     81e:	00 20       	and	r0, r0
     820:	e9 f7       	brne	.-6      	; 0x81c <modbusRead()+0x1f4>
     822:	cd 01       	movw	r24, r26
     824:	80 5a       	subi	r24, 0xA0	; 160
     826:	96 41       	sbci	r25, 0x16	; 22
     828:	9b 01       	movw	r18, r22
     82a:	2f 59       	subi	r18, 0x9F	; 159
     82c:	36 41       	sbci	r19, 0x16	; 22
     82e:	28 17       	cp	r18, r24
     830:	39 07       	cpc	r19, r25
     832:	08 f0       	brcs	.+2      	; 0x836 <modbusRead()+0x20e>
     834:	86 c0       	rjmp	.+268    	; 0x942 <modbusRead()+0x31a>
     836:	fb 01       	movw	r30, r22
     838:	81 91       	ld	r24, Z+
     83a:	bf 01       	movw	r22, r30
     83c:	08 2e       	mov	r0, r24
     83e:	00 0c       	add	r0, r0
     840:	99 0b       	sbc	r25, r25
     842:	98 9e       	mul	r9, r24
     844:	70 01       	movw	r14, r0
     846:	99 9e       	mul	r9, r25
     848:	f0 0c       	add	r15, r0
     84a:	11 24       	eor	r1, r1
     84c:	f7 01       	movw	r30, r14
     84e:	ee 58       	subi	r30, 0x8E	; 142
     850:	fd 4f       	sbci	r31, 0xFD	; 253
     852:	df 01       	movw	r26, r30
     854:	a8 58       	subi	r26, 0x88	; 136
     856:	bf 4f       	sbci	r27, 0xFF	; 255
     858:	0d 91       	ld	r16, X+
     85a:	1c 91       	ld	r17, X
     85c:	11 97       	sbiw	r26, 0x01	; 1
     85e:	10 16       	cp	r1, r16
     860:	11 06       	cpc	r1, r17
     862:	74 f5       	brge	.+92     	; 0x8c0 <modbusRead()+0x298>
     864:	20 a1       	ldd	r18, Z+32	; 0x20
     866:	31 a1       	ldd	r19, Z+33	; 0x21
     868:	d4 97       	sbiw	r26, 0x34	; 52
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	3c 93       	st	X, r19
     86e:	2e 93       	st	-X, r18
     870:	ea 5b       	subi	r30, 0xBA	; 186
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	31 83       	std	Z+1, r19	; 0x01
     876:	20 83       	st	Z, r18
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	3f 01       	movw	r6, r30
     87e:	02 17       	cp	r16, r18
     880:	13 07       	cpc	r17, r19
     882:	f1 f0       	breq	.+60     	; 0x8c0 <modbusRead()+0x298>
     884:	a9 01       	movw	r20, r18
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	4e 0d       	add	r20, r14
     88c:	5f 1d       	adc	r21, r15
     88e:	4e 58       	subi	r20, 0x8E	; 142
     890:	5d 4f       	sbci	r21, 0xFD	; 253
     892:	fa 01       	movw	r30, r20
     894:	40 a1       	ldd	r20, Z+32	; 0x20
     896:	51 a1       	ldd	r21, Z+33	; 0x21
     898:	cd 90       	ld	r12, X+
     89a:	dc 90       	ld	r13, X
     89c:	11 97       	sbiw	r26, 0x01	; 1
     89e:	4c 15       	cp	r20, r12
     8a0:	5d 05       	cpc	r21, r13
     8a2:	18 f4       	brcc	.+6      	; 0x8aa <modbusRead()+0x282>
     8a4:	11 96       	adiw	r26, 0x01	; 1
     8a6:	5c 93       	st	X, r21
     8a8:	4e 93       	st	-X, r20
     8aa:	f3 01       	movw	r30, r6
     8ac:	c0 80       	ld	r12, Z
     8ae:	d1 80       	ldd	r13, Z+1	; 0x01
     8b0:	c4 16       	cp	r12, r20
     8b2:	d5 06       	cpc	r13, r21
     8b4:	10 f4       	brcc	.+4      	; 0x8ba <modbusRead()+0x292>
     8b6:	51 83       	std	Z+1, r21	; 0x01
     8b8:	40 83       	st	Z, r20
     8ba:	2f 5f       	subi	r18, 0xFF	; 255
     8bc:	3f 4f       	sbci	r19, 0xFF	; 255
     8be:	df cf       	rjmp	.-66     	; 0x87e <modbusRead()+0x256>
     8c0:	98 9e       	mul	r9, r24
     8c2:	a0 01       	movw	r20, r0
     8c4:	99 9e       	mul	r9, r25
     8c6:	50 0d       	add	r21, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	fa 01       	movw	r30, r20
     8cc:	ee 58       	subi	r30, 0x8E	; 142
     8ce:	fd 4f       	sbci	r31, 0xFD	; 253
     8d0:	df 01       	movw	r26, r30
     8d2:	a6 58       	subi	r26, 0x86	; 134
     8d4:	bf 4f       	sbci	r27, 0xFF	; 255
     8d6:	0d 91       	ld	r16, X+
     8d8:	1c 91       	ld	r17, X
     8da:	11 97       	sbiw	r26, 0x01	; 1
     8dc:	10 16       	cp	r1, r16
     8de:	11 06       	cpc	r1, r17
     8e0:	0c f0       	brlt	.+2      	; 0x8e4 <modbusRead()+0x2bc>
     8e2:	9b cf       	rjmp	.-202    	; 0x81a <modbusRead()+0x1f2>
     8e4:	80 81       	ld	r24, Z
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	da 97       	sbiw	r26, 0x3a	; 58
     8ea:	11 96       	adiw	r26, 0x01	; 1
     8ec:	9c 93       	st	X, r25
     8ee:	8e 93       	st	-X, r24
     8f0:	ee 5b       	subi	r30, 0xBE	; 190
     8f2:	ff 4f       	sbci	r31, 0xFF	; 255
     8f4:	91 83       	std	Z+1, r25	; 0x01
     8f6:	80 83       	st	Z, r24
     8f8:	21 e0       	ldi	r18, 0x01	; 1
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	6f 01       	movw	r12, r30
     8fe:	02 17       	cp	r16, r18
     900:	13 07       	cpc	r17, r19
     902:	09 f4       	brne	.+2      	; 0x906 <modbusRead()+0x2de>
     904:	8a cf       	rjmp	.-236    	; 0x81a <modbusRead()+0x1f2>
     906:	c9 01       	movw	r24, r18
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	84 0f       	add	r24, r20
     90e:	95 1f       	adc	r25, r21
     910:	8e 58       	subi	r24, 0x8E	; 142
     912:	9d 4f       	sbci	r25, 0xFD	; 253
     914:	fc 01       	movw	r30, r24
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	ed 90       	ld	r14, X+
     91c:	fc 90       	ld	r15, X
     91e:	11 97       	sbiw	r26, 0x01	; 1
     920:	8e 15       	cp	r24, r14
     922:	9f 05       	cpc	r25, r15
     924:	18 f4       	brcc	.+6      	; 0x92c <modbusRead()+0x304>
     926:	11 96       	adiw	r26, 0x01	; 1
     928:	9c 93       	st	X, r25
     92a:	8e 93       	st	-X, r24
     92c:	f6 01       	movw	r30, r12
     92e:	e0 80       	ld	r14, Z
     930:	f1 80       	ldd	r15, Z+1	; 0x01
     932:	e8 16       	cp	r14, r24
     934:	f9 06       	cpc	r15, r25
     936:	10 f4       	brcc	.+4      	; 0x93c <modbusRead()+0x314>
     938:	91 83       	std	Z+1, r25	; 0x01
     93a:	80 83       	st	Z, r24
     93c:	2f 5f       	subi	r18, 0xFF	; 255
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
     940:	de cf       	rjmp	.-68     	; 0x8fe <modbusRead()+0x2d6>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <slaveSetupCheck>
     948:	0f e9       	ldi	r16, 0x9F	; 159
     94a:	16 e1       	ldi	r17, 0x16	; 22
     94c:	28 01       	movw	r4, r16
     94e:	6c ea       	ldi	r22, 0xAC	; 172
     950:	76 2e       	mov	r7, r22
     952:	71 ea       	ldi	r23, 0xA1	; 161
     954:	87 2e       	mov	r8, r23
     956:	75 e0       	ldi	r23, 0x05	; 5
     958:	97 2e       	mov	r9, r23
     95a:	8c 0e       	add	r8, r28
     95c:	9d 1e       	adc	r9, r29
     95e:	f6 e0       	ldi	r31, 0x06	; 6
     960:	8f 0e       	add	r8, r31
     962:	91 1c       	adc	r9, r1
     964:	e0 e3       	ldi	r30, 0x30	; 48
     966:	6e 2e       	mov	r6, r30
     968:	aa 24       	eor	r10, r10
     96a:	a3 94       	inc	r10
     96c:	b1 2c       	mov	r11, r1
     96e:	d2 01       	movw	r26, r4
     970:	0d 90       	ld	r0, X+
     972:	00 20       	and	r0, r0
     974:	e9 f7       	brne	.-6      	; 0x970 <modbusRead()+0x348>
     976:	cd 01       	movw	r24, r26
     978:	80 5a       	subi	r24, 0xA0	; 160
     97a:	96 41       	sbci	r25, 0x16	; 22
     97c:	98 01       	movw	r18, r16
     97e:	2f 59       	subi	r18, 0x9F	; 159
     980:	36 41       	sbci	r19, 0x16	; 22
     982:	28 17       	cp	r18, r24
     984:	39 07       	cpc	r19, r25
     986:	08 f0       	brcs	.+2      	; 0x98a <modbusRead()+0x362>
     988:	29 c1       	rjmp	.+594    	; 0xbdc <modbusRead()+0x5b4>
     98a:	f8 01       	movw	r30, r16
     98c:	20 81       	ld	r18, Z
     98e:	37 2d       	mov	r19, r7
     990:	23 03       	mulsu	r18, r19
     992:	c0 01       	movw	r24, r0
     994:	11 24       	eor	r1, r1
     996:	8e 58       	subi	r24, 0x8E	; 142
     998:	9d 4f       	sbci	r25, 0xFD	; 253
     99a:	fc 01       	movw	r30, r24
     99c:	e8 58       	subi	r30, 0x88	; 136
     99e:	ff 4f       	sbci	r31, 0xFF	; 255
     9a0:	40 81       	ld	r20, Z
     9a2:	51 81       	ldd	r21, Z+1	; 0x01
     9a4:	14 16       	cp	r1, r20
     9a6:	15 06       	cpc	r1, r21
     9a8:	0c f0       	brlt	.+2      	; 0x9ac <modbusRead()+0x384>
     9aa:	8c c0       	rjmp	.+280    	; 0xac4 <modbusRead()+0x49c>
     9ac:	d4 01       	movw	r26, r8
     9ae:	1d 92       	st	X+, r1
     9b0:	1c 92       	st	X, r1
     9b2:	cf 55       	subi	r28, 0x5F	; 95
     9b4:	da 4f       	sbci	r29, 0xFA	; 250
     9b6:	28 83       	st	Y, r18
     9b8:	c1 5a       	subi	r28, 0xA1	; 161
     9ba:	d5 40       	sbci	r29, 0x05	; 5
     9bc:	22 e0       	ldi	r18, 0x02	; 2
     9be:	ce 55       	subi	r28, 0x5E	; 94
     9c0:	da 4f       	sbci	r29, 0xFA	; 250
     9c2:	28 83       	st	Y, r18
     9c4:	c2 5a       	subi	r28, 0xA2	; 162
     9c6:	d5 40       	sbci	r29, 0x05	; 5
     9c8:	f4 97       	sbiw	r30, 0x34	; 52
     9ca:	20 81       	ld	r18, Z
     9cc:	31 81       	ldd	r19, Z+1	; 0x01
     9ce:	cd 55       	subi	r28, 0x5D	; 93
     9d0:	da 4f       	sbci	r29, 0xFA	; 250
     9d2:	38 83       	st	Y, r19
     9d4:	c3 5a       	subi	r28, 0xA3	; 163
     9d6:	d5 40       	sbci	r29, 0x05	; 5
     9d8:	cc 55       	subi	r28, 0x5C	; 92
     9da:	da 4f       	sbci	r29, 0xFA	; 250
     9dc:	28 83       	st	Y, r18
     9de:	c4 5a       	subi	r28, 0xA4	; 164
     9e0:	d5 40       	sbci	r29, 0x05	; 5
     9e2:	8a 5b       	subi	r24, 0xBA	; 186
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	fc 01       	movw	r30, r24
     9e8:	80 81       	ld	r24, Z
     9ea:	91 81       	ldd	r25, Z+1	; 0x01
     9ec:	ac 01       	movw	r20, r24
     9ee:	4f 5f       	subi	r20, 0xFF	; 255
     9f0:	5f 4f       	sbci	r21, 0xFF	; 255
     9f2:	42 1b       	sub	r20, r18
     9f4:	53 0b       	sbc	r21, r19
     9f6:	cb 55       	subi	r28, 0x5B	; 91
     9f8:	da 4f       	sbci	r29, 0xFA	; 250
     9fa:	58 83       	st	Y, r21
     9fc:	c5 5a       	subi	r28, 0xA5	; 165
     9fe:	d5 40       	sbci	r29, 0x05	; 5
     a00:	8f 5f       	subi	r24, 0xFF	; 255
     a02:	82 1b       	sub	r24, r18
     a04:	ca 55       	subi	r28, 0x5A	; 90
     a06:	da 4f       	sbci	r29, 0xFA	; 250
     a08:	88 83       	st	Y, r24
     a0a:	c6 5a       	subi	r28, 0xA6	; 166
     a0c:	d5 40       	sbci	r29, 0x05	; 5
     a0e:	66 e0       	ldi	r22, 0x06	; 6
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	ce 01       	movw	r24, r28
     a14:	8f 55       	subi	r24, 0x5F	; 95
     a16:	9a 4f       	sbci	r25, 0xFA	; 250
     a18:	0e 94 b0 02 	call	0x560	; 0x560 <CRC16_modbus(char*, int)>
     a1c:	c9 55       	subi	r28, 0x59	; 89
     a1e:	da 4f       	sbci	r29, 0xFA	; 250
     a20:	88 83       	st	Y, r24
     a22:	c7 5a       	subi	r28, 0xA7	; 167
     a24:	d5 40       	sbci	r29, 0x05	; 5
     a26:	c8 55       	subi	r28, 0x58	; 88
     a28:	da 4f       	sbci	r29, 0xFA	; 250
     a2a:	98 83       	st	Y, r25
     a2c:	c8 5a       	subi	r28, 0xA8	; 168
     a2e:	d5 40       	sbci	r29, 0x05	; 5
     a30:	48 e0       	ldi	r20, 0x08	; 8
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	be 01       	movw	r22, r28
     a36:	6f 55       	subi	r22, 0x5F	; 95
     a38:	7a 4f       	sbci	r23, 0xFA	; 250
     a3a:	83 e8       	ldi	r24, 0x83	; 131
     a3c:	9b e1       	ldi	r25, 0x1B	; 27
     a3e:	0e 94 08 02 	call	0x410	; 0x410 <Print::write(char const*, unsigned int)>
     a42:	0e 94 ee 02 	call	0x5dc	; 0x5dc <slaveRead()>
     a46:	60 91 cc 16 	lds	r22, 0x16CC	; 0x8016cc <modBuffer+0x2>
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	7b 01       	movw	r14, r22
     a4e:	53 e0       	ldi	r21, 0x03	; 3
     a50:	ee 0c       	add	r14, r14
     a52:	ff 1c       	adc	r15, r15
     a54:	5a 95       	dec	r21
     a56:	e1 f7       	brne	.-8      	; 0xa50 <modbusRead()+0x428>
     a58:	ea ec       	ldi	r30, 0xCA	; 202
     a5a:	f6 e1       	ldi	r31, 0x16	; 22
     a5c:	cf 01       	movw	r24, r30
     a5e:	8a 5c       	subi	r24, 0xCA	; 202
     a60:	96 41       	sbci	r25, 0x16	; 22
     a62:	86 17       	cp	r24, r22
     a64:	97 07       	cpc	r25, r23
     a66:	74 f5       	brge	.+92     	; 0xac4 <modbusRead()+0x49c>
     a68:	d3 80       	ldd	r13, Z+3	; 0x03
     a6a:	d8 01       	movw	r26, r16
     a6c:	4c 91       	ld	r20, X
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	26 2d       	mov	r18, r6
     a74:	42 03       	mulsu	r20, r18
     a76:	a0 01       	movw	r20, r0
     a78:	11 24       	eor	r1, r1
     a7a:	a1 e0       	ldi	r26, 0x01	; 1
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	ac 0f       	add	r26, r28
     a80:	bd 1f       	adc	r27, r29
     a82:	4a 0f       	add	r20, r26
     a84:	5b 1f       	adc	r21, r27
     a86:	2d 2c       	mov	r2, r13
     a88:	dd 0c       	add	r13, r13
     a8a:	33 08       	sbc	r3, r3
     a8c:	8e 15       	cp	r24, r14
     a8e:	9f 05       	cpc	r25, r15
     a90:	bc f4       	brge	.+46     	; 0xac0 <modbusRead()+0x498>
     a92:	6a 01       	movw	r12, r20
     a94:	c8 0e       	add	r12, r24
     a96:	d9 1e       	adc	r13, r25
     a98:	95 01       	movw	r18, r10
     a9a:	08 2e       	mov	r0, r24
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <modbusRead()+0x47a>
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	0a 94       	dec	r0
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <modbusRead()+0x476>
     aa6:	22 21       	and	r18, r2
     aa8:	33 21       	and	r19, r3
     aaa:	08 2e       	mov	r0, r24
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <modbusRead()+0x48a>
     aae:	35 95       	asr	r19
     ab0:	27 95       	ror	r18
     ab2:	0a 94       	dec	r0
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <modbusRead()+0x486>
     ab6:	d6 01       	movw	r26, r12
     ab8:	90 96       	adiw	r26, 0x20	; 32
     aba:	2c 93       	st	X, r18
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	e6 cf       	rjmp	.-52     	; 0xa8c <modbusRead()+0x464>
     ac0:	31 96       	adiw	r30, 0x01	; 1
     ac2:	cc cf       	rjmp	.-104    	; 0xa5c <modbusRead()+0x434>
     ac4:	f8 01       	movw	r30, r16
     ac6:	20 81       	ld	r18, Z
     ac8:	37 2d       	mov	r19, r7
     aca:	23 03       	mulsu	r18, r19
     acc:	c0 01       	movw	r24, r0
     ace:	11 24       	eor	r1, r1
     ad0:	8e 58       	subi	r24, 0x8E	; 142
     ad2:	9d 4f       	sbci	r25, 0xFD	; 253
     ad4:	fc 01       	movw	r30, r24
     ad6:	e6 58       	subi	r30, 0x86	; 134
     ad8:	ff 4f       	sbci	r31, 0xFF	; 255
     ada:	40 81       	ld	r20, Z
     adc:	51 81       	ldd	r21, Z+1	; 0x01
     ade:	14 16       	cp	r1, r20
     ae0:	15 06       	cpc	r1, r21
     ae2:	0c f0       	brlt	.+2      	; 0xae6 <modbusRead()+0x4be>
     ae4:	74 c0       	rjmp	.+232    	; 0xbce <modbusRead()+0x5a6>
     ae6:	d4 01       	movw	r26, r8
     ae8:	1d 92       	st	X+, r1
     aea:	1c 92       	st	X, r1
     aec:	cf 55       	subi	r28, 0x5F	; 95
     aee:	da 4f       	sbci	r29, 0xFA	; 250
     af0:	28 83       	st	Y, r18
     af2:	c1 5a       	subi	r28, 0xA1	; 161
     af4:	d5 40       	sbci	r29, 0x05	; 5
     af6:	23 e0       	ldi	r18, 0x03	; 3
     af8:	ce 55       	subi	r28, 0x5E	; 94
     afa:	da 4f       	sbci	r29, 0xFA	; 250
     afc:	28 83       	st	Y, r18
     afe:	c2 5a       	subi	r28, 0xA2	; 162
     b00:	d5 40       	sbci	r29, 0x05	; 5
     b02:	fa 97       	sbiw	r30, 0x3a	; 58
     b04:	20 81       	ld	r18, Z
     b06:	31 81       	ldd	r19, Z+1	; 0x01
     b08:	cd 55       	subi	r28, 0x5D	; 93
     b0a:	da 4f       	sbci	r29, 0xFA	; 250
     b0c:	38 83       	st	Y, r19
     b0e:	c3 5a       	subi	r28, 0xA3	; 163
     b10:	d5 40       	sbci	r29, 0x05	; 5
     b12:	cc 55       	subi	r28, 0x5C	; 92
     b14:	da 4f       	sbci	r29, 0xFA	; 250
     b16:	28 83       	st	Y, r18
     b18:	c4 5a       	subi	r28, 0xA4	; 164
     b1a:	d5 40       	sbci	r29, 0x05	; 5
     b1c:	8e 5b       	subi	r24, 0xBE	; 190
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	fc 01       	movw	r30, r24
     b22:	80 81       	ld	r24, Z
     b24:	91 81       	ldd	r25, Z+1	; 0x01
     b26:	ac 01       	movw	r20, r24
     b28:	4f 5f       	subi	r20, 0xFF	; 255
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	42 1b       	sub	r20, r18
     b2e:	53 0b       	sbc	r21, r19
     b30:	cb 55       	subi	r28, 0x5B	; 91
     b32:	da 4f       	sbci	r29, 0xFA	; 250
     b34:	58 83       	st	Y, r21
     b36:	c5 5a       	subi	r28, 0xA5	; 165
     b38:	d5 40       	sbci	r29, 0x05	; 5
     b3a:	8f 5f       	subi	r24, 0xFF	; 255
     b3c:	82 1b       	sub	r24, r18
     b3e:	ca 55       	subi	r28, 0x5A	; 90
     b40:	da 4f       	sbci	r29, 0xFA	; 250
     b42:	88 83       	st	Y, r24
     b44:	c6 5a       	subi	r28, 0xA6	; 166
     b46:	d5 40       	sbci	r29, 0x05	; 5
     b48:	66 e0       	ldi	r22, 0x06	; 6
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	ce 01       	movw	r24, r28
     b4e:	8f 55       	subi	r24, 0x5F	; 95
     b50:	9a 4f       	sbci	r25, 0xFA	; 250
     b52:	0e 94 b0 02 	call	0x560	; 0x560 <CRC16_modbus(char*, int)>
     b56:	c9 55       	subi	r28, 0x59	; 89
     b58:	da 4f       	sbci	r29, 0xFA	; 250
     b5a:	88 83       	st	Y, r24
     b5c:	c7 5a       	subi	r28, 0xA7	; 167
     b5e:	d5 40       	sbci	r29, 0x05	; 5
     b60:	c8 55       	subi	r28, 0x58	; 88
     b62:	da 4f       	sbci	r29, 0xFA	; 250
     b64:	98 83       	st	Y, r25
     b66:	c8 5a       	subi	r28, 0xA8	; 168
     b68:	d5 40       	sbci	r29, 0x05	; 5
     b6a:	48 e0       	ldi	r20, 0x08	; 8
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	be 01       	movw	r22, r28
     b70:	6f 55       	subi	r22, 0x5F	; 95
     b72:	7a 4f       	sbci	r23, 0xFA	; 250
     b74:	83 e8       	ldi	r24, 0x83	; 131
     b76:	9b e1       	ldi	r25, 0x1B	; 27
     b78:	0e 94 08 02 	call	0x410	; 0x410 <Print::write(char const*, unsigned int)>
     b7c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <slaveRead()>
     b80:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <modBuffer+0x2>
     b84:	86 95       	lsr	r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	aa ec       	ldi	r26, 0xCA	; 202
     b8a:	b6 e1       	ldi	r27, 0x16	; 22
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	68 e1       	ldi	r22, 0x18	; 24
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	28 17       	cp	r18, r24
     b96:	39 07       	cpc	r19, r25
     b98:	d4 f4       	brge	.+52     	; 0xbce <modbusRead()+0x5a6>
     b9a:	f8 01       	movw	r30, r16
     b9c:	40 81       	ld	r20, Z
     b9e:	46 03       	mulsu	r20, r22
     ba0:	f0 01       	movw	r30, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	e2 0f       	add	r30, r18
     ba6:	f3 1f       	adc	r31, r19
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	41 e0       	ldi	r20, 0x01	; 1
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	4c 0f       	add	r20, r28
     bb2:	5d 1f       	adc	r21, r29
     bb4:	e4 0f       	add	r30, r20
     bb6:	f5 1f       	adc	r31, r21
     bb8:	11 96       	adiw	r26, 0x01	; 1
     bba:	5c 91       	ld	r21, X
     bbc:	11 97       	sbiw	r26, 0x01	; 1
     bbe:	12 96       	adiw	r26, 0x02	; 2
     bc0:	4c 91       	ld	r20, X
     bc2:	12 97       	sbiw	r26, 0x02	; 2
     bc4:	51 83       	std	Z+1, r21	; 0x01
     bc6:	40 83       	st	Z, r20
     bc8:	2f 5f       	subi	r18, 0xFF	; 255
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	e2 cf       	rjmp	.-60     	; 0xb92 <modbusRead()+0x56a>
     bce:	8c e2       	ldi	r24, 0x2C	; 44
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
     bd6:	0f 5f       	subi	r16, 0xFF	; 255
     bd8:	1f 4f       	sbci	r17, 0xFF	; 255
     bda:	c9 ce       	rjmp	.-622    	; 0x96e <modbusRead()+0x346>
     bdc:	0e 94 a8 02 	call	0x550	; 0x550 <clrmodBuffer()>
     be0:	8c e0       	ldi	r24, 0x0C	; 12
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	90 93 9b 16 	sts	0x169B, r25	; 0x80169b <msgPos+0x1>
     be8:	80 93 9a 16 	sts	0x169A, r24	; 0x80169a <msgPos>
     bec:	10 91 06 02 	lds	r17, 0x0206	; 0x800206 <transactionID>
     bf0:	1f 5f       	subi	r17, 0xFF	; 255
     bf2:	10 93 06 02 	sts	0x0206, r17	; 0x800206 <transactionID>
     bf6:	8c ef       	ldi	r24, 0xFC	; 252
     bf8:	96 e1       	ldi	r25, 0x16	; 22
     bfa:	0e 94 c5 10 	call	0x218a	; 0x218a <free>
     bfe:	ec ef       	ldi	r30, 0xFC	; 252
     c00:	f6 e1       	ldi	r31, 0x16	; 22
     c02:	88 ee       	ldi	r24, 0xE8	; 232
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	df 01       	movw	r26, r30
     c08:	9c 01       	movw	r18, r24
     c0a:	1d 92       	st	X+, r1
     c0c:	21 50       	subi	r18, 0x01	; 1
     c0e:	30 40       	sbci	r19, 0x00	; 0
     c10:	e1 f7       	brne	.-8      	; 0xc0a <modbusRead()+0x5e2>
     c12:	bf 01       	movw	r22, r30
     c14:	e0 ec       	ldi	r30, 0xC0	; 192
     c16:	f6 e1       	ldi	r31, 0x16	; 22
     c18:	9f 01       	movw	r18, r30
     c1a:	d9 01       	movw	r26, r18
     c1c:	0d 90       	ld	r0, X+
     c1e:	00 20       	and	r0, r0
     c20:	e9 f7       	brne	.-6      	; 0xc1c <modbusRead()+0x5f4>
     c22:	cd 01       	movw	r24, r26
     c24:	81 5c       	subi	r24, 0xC1	; 193
     c26:	96 41       	sbci	r25, 0x16	; 22
     c28:	af 01       	movw	r20, r30
     c2a:	40 5c       	subi	r20, 0xC0	; 192
     c2c:	56 41       	sbci	r21, 0x16	; 22
     c2e:	48 17       	cp	r20, r24
     c30:	59 07       	cpc	r21, r25
     c32:	28 f4       	brcc	.+10     	; 0xc3e <modbusRead()+0x616>
     c34:	81 91       	ld	r24, Z+
     c36:	db 01       	movw	r26, r22
     c38:	8d 93       	st	X+, r24
     c3a:	bd 01       	movw	r22, r26
     c3c:	ee cf       	rjmp	.-36     	; 0xc1a <modbusRead()+0x5f2>
     c3e:	10 93 04 17 	sts	0x1704, r17	; 0x801704 <serverMessage+0x8>
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 05 17 	sts	0x1705, r24	; 0x801705 <serverMessage+0x9>
     c48:	8f e9       	ldi	r24, 0x9F	; 159
     c4a:	88 2e       	mov	r8, r24
     c4c:	86 e1       	ldi	r24, 0x16	; 22
     c4e:	98 2e       	mov	r9, r24
     c50:	f1 2c       	mov	r15, r1
     c52:	e1 2c       	mov	r14, r1
     c54:	51 2c       	mov	r5, r1
     c56:	ef e9       	ldi	r30, 0x9F	; 159
     c58:	f6 e1       	ldi	r31, 0x16	; 22
     c5a:	01 90       	ld	r0, Z+
     c5c:	00 20       	and	r0, r0
     c5e:	e9 f7       	brne	.-6      	; 0xc5a <modbusRead()+0x632>
     c60:	cf 01       	movw	r24, r30
     c62:	80 5a       	subi	r24, 0xA0	; 160
     c64:	96 41       	sbci	r25, 0x16	; 22
     c66:	94 01       	movw	r18, r8
     c68:	2f 59       	subi	r18, 0x9F	; 159
     c6a:	36 41       	sbci	r19, 0x16	; 22
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	08 f0       	brcs	.+2      	; 0xc74 <modbusRead()+0x64c>
     c72:	ef c0       	rjmp	.+478    	; 0xe52 <modbusRead()+0x82a>
     c74:	d4 01       	movw	r26, r8
     c76:	4d 90       	ld	r4, X+
     c78:	4d 01       	movw	r8, r26
     c7a:	c4 2c       	mov	r12, r4
     c7c:	04 2c       	mov	r0, r4
     c7e:	00 0c       	add	r0, r0
     c80:	dd 08       	sbc	r13, r13
     c82:	bc ea       	ldi	r27, 0xAC	; 172
     c84:	bc 9d       	mul	r27, r12
     c86:	90 01       	movw	r18, r0
     c88:	bd 9d       	mul	r27, r13
     c8a:	30 0d       	add	r19, r0
     c8c:	11 24       	eor	r1, r1
     c8e:	c9 01       	movw	r24, r18
     c90:	8e 58       	subi	r24, 0x8E	; 142
     c92:	9d 4f       	sbci	r25, 0xFD	; 253
     c94:	fc 01       	movw	r30, r24
     c96:	e8 58       	subi	r30, 0x88	; 136
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	a0 80       	ld	r10, Z
     c9c:	b1 80       	ldd	r11, Z+1	; 0x01
     c9e:	1a 14       	cp	r1, r10
     ca0:	1b 04       	cpc	r1, r11
     ca2:	0c f0       	brlt	.+2      	; 0xca6 <modbusRead()+0x67e>
     ca4:	67 c0       	rjmp	.+206    	; 0xd74 <modbusRead()+0x74c>
     ca6:	f4 97       	sbiw	r30, 0x34	; 52
     ca8:	00 81       	ld	r16, Z
     caa:	11 81       	ldd	r17, Z+1	; 0x01
     cac:	f9 01       	movw	r30, r18
     cae:	ee 56       	subi	r30, 0x6E	; 110
     cb0:	fd 4f       	sbci	r31, 0xFD	; 253
     cb2:	c7 55       	subi	r28, 0x57	; 87
     cb4:	da 4f       	sbci	r29, 0xFA	; 250
     cb6:	f9 83       	std	Y+1, r31	; 0x01
     cb8:	e8 83       	st	Y, r30
     cba:	c9 5a       	subi	r28, 0xA9	; 169
     cbc:	d5 40       	sbci	r29, 0x05	; 5
     cbe:	8a 5b       	subi	r24, 0xBA	; 186
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	dc 01       	movw	r26, r24
     cc4:	8d 91       	ld	r24, X+
     cc6:	9c 91       	ld	r25, X
     cc8:	fc 01       	movw	r30, r24
     cca:	31 96       	adiw	r30, 0x01	; 1
     ccc:	c5 55       	subi	r28, 0x55	; 85
     cce:	da 4f       	sbci	r29, 0xFA	; 250
     cd0:	f9 83       	std	Y+1, r31	; 0x01
     cd2:	e8 83       	st	Y, r30
     cd4:	cb 5a       	subi	r28, 0xAB	; 171
     cd6:	d5 40       	sbci	r29, 0x05	; 5
     cd8:	f4 2d       	mov	r31, r4
     cda:	40 e3       	ldi	r20, 0x30	; 48
     cdc:	f4 02       	muls	r31, r20
     cde:	30 01       	movw	r6, r0
     ce0:	11 24       	eor	r1, r1
     ce2:	60 1a       	sub	r6, r16
     ce4:	71 0a       	sbc	r7, r17
     ce6:	19 01       	movw	r2, r18
     ce8:	20 1a       	sub	r2, r16
     cea:	31 0a       	sbc	r3, r17
     cec:	c5 55       	subi	r28, 0x55	; 85
     cee:	da 4f       	sbci	r29, 0xFA	; 250
     cf0:	88 81       	ld	r24, Y
     cf2:	99 81       	ldd	r25, Y+1	; 0x01
     cf4:	cb 5a       	subi	r28, 0xAB	; 171
     cf6:	d5 40       	sbci	r29, 0x05	; 5
     cf8:	80 17       	cp	r24, r16
     cfa:	91 07       	cpc	r25, r17
     cfc:	d9 f1       	breq	.+118    	; 0xd74 <modbusRead()+0x74c>
     cfe:	a5 01       	movw	r20, r10
     d00:	b8 01       	movw	r22, r16
     d02:	c7 55       	subi	r28, 0x57	; 87
     d04:	da 4f       	sbci	r29, 0xFA	; 250
     d06:	88 81       	ld	r24, Y
     d08:	99 81       	ldd	r25, Y+1	; 0x01
     d0a:	c9 5a       	subi	r28, 0xA9	; 169
     d0c:	d5 40       	sbci	r29, 0x05	; 5
     d0e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <arraycheck(unsigned short*, short, int)>
     d12:	88 23       	and	r24, r24
     d14:	51 f1       	breq	.+84     	; 0xd6a <modbusRead()+0x742>
     d16:	f8 01       	movw	r30, r16
     d18:	e6 0d       	add	r30, r6
     d1a:	f7 1d       	adc	r31, r7
     d1c:	a1 e0       	ldi	r26, 0x01	; 1
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ac 0f       	add	r26, r28
     d22:	bd 1f       	adc	r27, r29
     d24:	ea 0f       	add	r30, r26
     d26:	fb 1f       	adc	r31, r27
     d28:	20 a1       	ldd	r18, Z+32	; 0x20
     d2a:	d1 01       	movw	r26, r2
     d2c:	a0 0f       	add	r26, r16
     d2e:	b1 1f       	adc	r27, r17
     d30:	a6 54       	subi	r26, 0x46	; 70
     d32:	bd 4f       	sbci	r27, 0xFD	; 253
     d34:	9c 91       	ld	r25, X
     d36:	58 2e       	mov	r5, r24
     d38:	29 17       	cp	r18, r25
     d3a:	c9 f0       	breq	.+50     	; 0xd6e <modbusRead()+0x746>
     d3c:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <msgPos>
     d40:	90 91 9b 16 	lds	r25, 0x169B	; 0x80169b <msgPos+0x1>
     d44:	fc 01       	movw	r30, r24
     d46:	e4 50       	subi	r30, 0x04	; 4
     d48:	f9 4e       	sbci	r31, 0xE9	; 233
     d4a:	40 82       	st	Z, r4
     d4c:	11 83       	std	Z+1, r17	; 0x01
     d4e:	02 83       	std	Z+2, r16	; 0x02
     d50:	13 82       	std	Z+3, r1	; 0x03
     d52:	05 96       	adiw	r24, 0x05	; 5
     d54:	90 93 9b 16 	sts	0x169B, r25	; 0x80169b <msgPos+0x1>
     d58:	80 93 9a 16 	sts	0x169A, r24	; 0x80169a <msgPos>
     d5c:	24 83       	std	Z+4, r18	; 0x04
     d5e:	2c 93       	st	X, r18
     d60:	bf ef       	ldi	r27, 0xFF	; 255
     d62:	eb 1a       	sub	r14, r27
     d64:	fb 0a       	sbc	r15, r27
     d66:	51 2c       	mov	r5, r1
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <modbusRead()+0x746>
     d6a:	55 20       	and	r5, r5
     d6c:	c9 f3       	breq	.-14     	; 0xd60 <modbusRead()+0x738>
     d6e:	0f 5f       	subi	r16, 0xFF	; 255
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	bc cf       	rjmp	.-136    	; 0xcec <modbusRead()+0x6c4>
     d74:	ec ea       	ldi	r30, 0xAC	; 172
     d76:	ec 9d       	mul	r30, r12
     d78:	80 01       	movw	r16, r0
     d7a:	ed 9d       	mul	r30, r13
     d7c:	10 0d       	add	r17, r0
     d7e:	11 24       	eor	r1, r1
     d80:	0e 58       	subi	r16, 0x8E	; 142
     d82:	1d 4f       	sbci	r17, 0xFD	; 253
     d84:	f8 01       	movw	r30, r16
     d86:	e6 58       	subi	r30, 0x86	; 134
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	60 80       	ld	r6, Z
     d8c:	71 80       	ldd	r7, Z+1	; 0x01
     d8e:	16 14       	cp	r1, r6
     d90:	17 04       	cpc	r1, r7
     d92:	0c f0       	brlt	.+2      	; 0xd96 <modbusRead()+0x76e>
     d94:	60 cf       	rjmp	.-320    	; 0xc56 <modbusRead()+0x62e>
     d96:	fa 97       	sbiw	r30, 0x3a	; 58
     d98:	c0 80       	ld	r12, Z
     d9a:	d1 80       	ldd	r13, Z+1	; 0x01
     d9c:	32 96       	adiw	r30, 0x02	; 2
     d9e:	20 80       	ld	r2, Z
     da0:	31 80       	ldd	r3, Z+1	; 0x01
     da2:	ff ef       	ldi	r31, 0xFF	; 255
     da4:	2f 1a       	sub	r2, r31
     da6:	3f 0a       	sbc	r3, r31
     da8:	34 2d       	mov	r19, r4
     daa:	20 e3       	ldi	r18, 0x30	; 48
     dac:	32 02       	muls	r19, r18
     dae:	90 01       	movw	r18, r0
     db0:	11 24       	eor	r1, r1
     db2:	c7 55       	subi	r28, 0x57	; 87
     db4:	da 4f       	sbci	r29, 0xFA	; 250
     db6:	39 83       	std	Y+1, r19	; 0x01
     db8:	28 83       	st	Y, r18
     dba:	c9 5a       	subi	r28, 0xA9	; 169
     dbc:	d5 40       	sbci	r29, 0x05	; 5
     dbe:	b1 2c       	mov	r11, r1
     dc0:	a1 2c       	mov	r10, r1
     dc2:	c2 14       	cp	r12, r2
     dc4:	d3 04       	cpc	r13, r3
     dc6:	09 f4       	brne	.+2      	; 0xdca <modbusRead()+0x7a2>
     dc8:	46 cf       	rjmp	.-372    	; 0xc56 <modbusRead()+0x62e>
     dca:	a3 01       	movw	r20, r6
     dcc:	b6 01       	movw	r22, r12
     dce:	c8 01       	movw	r24, r16
     dd0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <arraycheck(unsigned short*, short, int)>
     dd4:	88 23       	and	r24, r24
     dd6:	a1 f1       	breq	.+104    	; 0xe40 <modbusRead()+0x818>
     dd8:	c7 55       	subi	r28, 0x57	; 87
     dda:	da 4f       	sbci	r29, 0xFA	; 250
     ddc:	e8 81       	ld	r30, Y
     dde:	f9 81       	ldd	r31, Y+1	; 0x01
     de0:	c9 5a       	subi	r28, 0xA9	; 169
     de2:	d5 40       	sbci	r29, 0x05	; 5
     de4:	ea 0d       	add	r30, r10
     de6:	fb 1d       	adc	r31, r11
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	4c 0f       	add	r20, r28
     dee:	5d 1f       	adc	r21, r29
     df0:	e4 0f       	add	r30, r20
     df2:	f5 1f       	adc	r31, r21
     df4:	20 81       	ld	r18, Z
     df6:	31 81       	ldd	r19, Z+1	; 0x01
     df8:	d5 01       	movw	r26, r10
     dfa:	a8 5a       	subi	r26, 0xA8	; 168
     dfc:	bf 4f       	sbci	r27, 0xFF	; 255
     dfe:	a0 0f       	add	r26, r16
     e00:	b1 1f       	adc	r27, r17
     e02:	4d 91       	ld	r20, X+
     e04:	5c 91       	ld	r21, X
     e06:	11 97       	sbiw	r26, 0x01	; 1
     e08:	58 2e       	mov	r5, r24
     e0a:	24 17       	cp	r18, r20
     e0c:	35 07       	cpc	r19, r21
     e0e:	d1 f0       	breq	.+52     	; 0xe44 <modbusRead()+0x81c>
     e10:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <msgPos>
     e14:	90 91 9b 16 	lds	r25, 0x169B	; 0x80169b <msgPos+0x1>
     e18:	fc 01       	movw	r30, r24
     e1a:	e4 50       	subi	r30, 0x04	; 4
     e1c:	f9 4e       	sbci	r31, 0xE9	; 233
     e1e:	40 82       	st	Z, r4
     e20:	d1 82       	std	Z+1, r13	; 0x01
     e22:	c2 82       	std	Z+2, r12	; 0x02
     e24:	33 83       	std	Z+3, r19	; 0x03
     e26:	05 96       	adiw	r24, 0x05	; 5
     e28:	90 93 9b 16 	sts	0x169B, r25	; 0x80169b <msgPos+0x1>
     e2c:	80 93 9a 16 	sts	0x169A, r24	; 0x80169a <msgPos>
     e30:	24 83       	std	Z+4, r18	; 0x04
     e32:	2d 93       	st	X+, r18
     e34:	3c 93       	st	X, r19
     e36:	5f ef       	ldi	r21, 0xFF	; 255
     e38:	e5 1a       	sub	r14, r21
     e3a:	f5 0a       	sbc	r15, r21
     e3c:	51 2c       	mov	r5, r1
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <modbusRead()+0x81c>
     e40:	55 20       	and	r5, r5
     e42:	c9 f3       	breq	.-14     	; 0xe36 <modbusRead()+0x80e>
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	c8 1a       	sub	r12, r24
     e48:	d8 0a       	sbc	r13, r24
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	a9 0e       	add	r10, r25
     e4e:	b1 1c       	adc	r11, r1
     e50:	b8 cf       	rjmp	.-144    	; 0xdc2 <modbusRead()+0x79a>
     e52:	1e 14       	cp	r1, r14
     e54:	1f 04       	cpc	r1, r15
     e56:	0c f0       	brlt	.+2      	; 0xe5a <modbusRead()+0x832>
     e58:	48 c0       	rjmp	.+144    	; 0xeea <modbusRead()+0x8c2>
     e5a:	f0 92 06 17 	sts	0x1706, r15	; 0x801706 <serverMessage+0xa>
     e5e:	e0 92 07 17 	sts	0x1707, r14	; 0x801707 <serverMessage+0xb>
     e62:	00 91 9a 16 	lds	r16, 0x169A	; 0x80169a <msgPos>
     e66:	10 91 9b 16 	lds	r17, 0x169B	; 0x80169b <msgPos+0x1>
     e6a:	b8 01       	movw	r22, r16
     e6c:	8c ef       	ldi	r24, 0xFC	; 252
     e6e:	96 e1       	ldi	r25, 0x16	; 22
     e70:	0e 94 b0 02 	call	0x560	; 0x560 <CRC16_modbus(char*, int)>
     e74:	78 01       	movw	r14, r16
     e76:	af ef       	ldi	r26, 0xFF	; 255
     e78:	ea 1a       	sub	r14, r26
     e7a:	fa 0a       	sbc	r15, r26
     e7c:	f0 92 9b 16 	sts	0x169B, r15	; 0x80169b <msgPos+0x1>
     e80:	e0 92 9a 16 	sts	0x169A, r14	; 0x80169a <msgPos>
     e84:	f8 01       	movw	r30, r16
     e86:	e4 50       	subi	r30, 0x04	; 4
     e88:	f9 4e       	sbci	r31, 0xE9	; 233
     e8a:	90 83       	st	Z, r25
     e8c:	b8 01       	movw	r22, r16
     e8e:	8c ef       	ldi	r24, 0xFC	; 252
     e90:	96 e1       	ldi	r25, 0x16	; 22
     e92:	0e 94 b0 02 	call	0x560	; 0x560 <CRC16_modbus(char*, int)>
     e96:	0e 5f       	subi	r16, 0xFE	; 254
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	10 93 9b 16 	sts	0x169B, r17	; 0x80169b <msgPos+0x1>
     e9e:	00 93 9a 16 	sts	0x169A, r16	; 0x80169a <msgPos>
     ea2:	f7 01       	movw	r30, r14
     ea4:	e4 50       	subi	r30, 0x04	; 4
     ea6:	f9 4e       	sbci	r31, 0xE9	; 233
     ea8:	80 83       	st	Z, r24
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	90 93 9d 16 	sts	0x169D, r25	; 0x80169d <state+0x1>
     eb2:	80 93 9c 16 	sts	0x169C, r24	; 0x80169c <state>
     eb6:	c4 55       	subi	r28, 0x54	; 84
     eb8:	da 4f       	sbci	r29, 0xFA	; 250
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	bf 90       	pop	r11
     ed6:	af 90       	pop	r10
     ed8:	9f 90       	pop	r9
     eda:	8f 90       	pop	r8
     edc:	7f 90       	pop	r7
     ede:	6f 90       	pop	r6
     ee0:	5f 90       	pop	r5
     ee2:	4f 90       	pop	r4
     ee4:	3f 90       	pop	r3
     ee6:	2f 90       	pop	r2
     ee8:	08 95       	ret
     eea:	10 92 9d 16 	sts	0x169D, r1	; 0x80169d <state+0x1>
     eee:	10 92 9c 16 	sts	0x169C, r1	; 0x80169c <state>
     ef2:	e1 cf       	rjmp	.-62     	; 0xeb6 <modbusRead()+0x88e>

00000ef4 <OKcomcheck(int)>:
_Z10OKcomchecki():
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
     f00:	86 ee       	ldi	r24, 0xE6	; 230
     f02:	9a e1       	ldi	r25, 0x1A	; 26
     f04:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
     f08:	89 2b       	or	r24, r25
     f0a:	b9 f0       	breq	.+46     	; 0xf3a <OKcomcheck(int)+0x46>
     f0c:	86 ee       	ldi	r24, 0xE6	; 230
     f0e:	9a e1       	ldi	r25, 0x1A	; 26
     f10:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
     f14:	8c 01       	movw	r16, r24
     f16:	d0 e0       	ldi	r29, 0x00	; 0
     f18:	c0 e0       	ldi	r28, 0x00	; 0
     f1a:	c0 17       	cp	r28, r16
     f1c:	d1 07       	cpc	r29, r17
     f1e:	6c f4       	brge	.+26     	; 0xf3a <OKcomcheck(int)+0x46>
     f20:	86 ee       	ldi	r24, 0xE6	; 230
     f22:	9a e1       	ldi	r25, 0x1A	; 26
     f24:	0e 94 a5 0b 	call	0x174a	; 0x174a <HardwareSerial::read()>
     f28:	e0 91 e4 1a 	lds	r30, 0x1AE4	; 0x801ae4 <simBuffer>
     f2c:	f0 91 e5 1a 	lds	r31, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
     f30:	ec 0f       	add	r30, r28
     f32:	fd 1f       	adc	r31, r29
     f34:	80 83       	st	Z, r24
     f36:	21 96       	adiw	r28, 0x01	; 1
     f38:	f0 cf       	rjmp	.-32     	; 0xf1a <OKcomcheck(int)+0x26>
     f3a:	60 e3       	ldi	r22, 0x30	; 48
     f3c:	72 e0       	ldi	r23, 0x02	; 2
     f3e:	80 91 e4 1a 	lds	r24, 0x1AE4	; 0x801ae4 <simBuffer>
     f42:	90 91 e5 1a 	lds	r25, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
     f46:	0e 94 64 11 	call	0x22c8	; 0x22c8 <strstr>
     f4a:	ec 01       	movw	r28, r24
     f4c:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	cd 2b       	or	r28, r29
     f54:	09 f4       	brne	.+2      	; 0xf58 <OKcomcheck(int)+0x64>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <simRead()>:
_Z7simReadv():
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	88 ee       	ldi	r24, 0xE8	; 232
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
     f72:	86 ee       	ldi	r24, 0xE6	; 230
     f74:	9a e1       	ldi	r25, 0x1A	; 26
     f76:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
     f7a:	89 2b       	or	r24, r25
     f7c:	b9 f0       	breq	.+46     	; 0xfac <simRead()+0x4a>
     f7e:	86 ee       	ldi	r24, 0xE6	; 230
     f80:	9a e1       	ldi	r25, 0x1A	; 26
     f82:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
     f86:	8c 01       	movw	r16, r24
     f88:	d0 e0       	ldi	r29, 0x00	; 0
     f8a:	c0 e0       	ldi	r28, 0x00	; 0
     f8c:	c0 17       	cp	r28, r16
     f8e:	d1 07       	cpc	r29, r17
     f90:	84 f7       	brge	.-32     	; 0xf72 <simRead()+0x10>
     f92:	86 ee       	ldi	r24, 0xE6	; 230
     f94:	9a e1       	ldi	r25, 0x1A	; 26
     f96:	0e 94 a5 0b 	call	0x174a	; 0x174a <HardwareSerial::read()>
     f9a:	e0 91 e4 1a 	lds	r30, 0x1AE4	; 0x801ae4 <simBuffer>
     f9e:	f0 91 e5 1a 	lds	r31, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
     fa2:	ec 0f       	add	r30, r28
     fa4:	fd 1f       	adc	r31, r29
     fa6:	80 83       	st	Z, r24
     fa8:	21 96       	adiw	r28, 0x01	; 1
     faa:	f0 cf       	rjmp	.-32     	; 0xf8c <simRead()+0x2a>
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <responseCheck(char*, unsigned int)>:
_Z13responseCheckPcj():
     fb6:	6f 92       	push	r6
     fb8:	7f 92       	push	r7
     fba:	8f 92       	push	r8
     fbc:	9f 92       	push	r9
     fbe:	af 92       	push	r10
     fc0:	bf 92       	push	r11
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	3c 01       	movw	r6, r24
     fd4:	6b 01       	movw	r12, r22
     fd6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <millis>
     fda:	4b 01       	movw	r8, r22
     fdc:	5c 01       	movw	r10, r24
     fde:	d0 e0       	ldi	r29, 0x00	; 0
     fe0:	c0 e0       	ldi	r28, 0x00	; 0
     fe2:	f1 2c       	mov	r15, r1
     fe4:	e1 2c       	mov	r14, r1
     fe6:	0e 94 b1 07 	call	0xf62	; 0xf62 <simRead()>
     fea:	00 91 e4 1a 	lds	r16, 0x1AE4	; 0x801ae4 <simBuffer>
     fee:	10 91 e5 1a 	lds	r17, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
     ff2:	b3 01       	movw	r22, r6
     ff4:	c8 01       	movw	r24, r16
     ff6:	0e 94 64 11 	call	0x22c8	; 0x22c8 <strstr>
     ffa:	89 2b       	or	r24, r25
     ffc:	09 f4       	brne	.+2      	; 0x1000 <responseCheck(char*, unsigned int)+0x4a>
     ffe:	64 c0       	rjmp	.+200    	; 0x10c8 <responseCheck(char*, unsigned int)+0x112>
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	81 e4       	ldi	r24, 0x41	; 65
    1004:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1008:	8d e7       	ldi	r24, 0x7D	; 125
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	81 e4       	ldi	r24, 0x41	; 65
    1014:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1018:	8d e7       	ldi	r24, 0x7D	; 125
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	81 e4       	ldi	r24, 0x41	; 65
    1024:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1028:	8d e7       	ldi	r24, 0x7D	; 125
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	81 e4       	ldi	r24, 0x41	; 65
    1034:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1038:	8d e7       	ldi	r24, 0x7D	; 125
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    1040:	11 e0       	ldi	r17, 0x01	; 1
    1042:	c1 e0       	ldi	r28, 0x01	; 1
    1044:	d0 e0       	ldi	r29, 0x00	; 0
    1046:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <millis>
    104a:	68 19       	sub	r22, r8
    104c:	79 09       	sbc	r23, r9
    104e:	8a 09       	sbc	r24, r10
    1050:	9b 09       	sbc	r25, r11
    1052:	c6 16       	cp	r12, r22
    1054:	d7 06       	cpc	r13, r23
    1056:	e8 06       	cpc	r14, r24
    1058:	f9 06       	cpc	r15, r25
    105a:	18 f5       	brcc	.+70     	; 0x10a2 <responseCheck(char*, unsigned int)+0xec>
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	82 e4       	ldi	r24, 0x42	; 66
    1060:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1064:	8d e7       	ldi	r24, 0x7D	; 125
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	82 e4       	ldi	r24, 0x42	; 66
    1070:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1074:	8d e7       	ldi	r24, 0x7D	; 125
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	82 e4       	ldi	r24, 0x42	; 66
    1080:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1084:	8d e7       	ldi	r24, 0x7D	; 125
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	82 e4       	ldi	r24, 0x42	; 66
    1090:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1094:	8d e7       	ldi	r24, 0x7D	; 125
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    109c:	d0 e0       	ldi	r29, 0x00	; 0
    109e:	c0 e0       	ldi	r28, 0x00	; 0
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <responseCheck(char*, unsigned int)+0xf2>
    10a2:	11 23       	and	r17, r17
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <responseCheck(char*, unsigned int)+0xf2>
    10a6:	9f cf       	rjmp	.-194    	; 0xfe6 <responseCheck(char*, unsigned int)+0x30>
    10a8:	ce 01       	movw	r24, r28
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	ff 90       	pop	r15
    10b4:	ef 90       	pop	r14
    10b6:	df 90       	pop	r13
    10b8:	cf 90       	pop	r12
    10ba:	bf 90       	pop	r11
    10bc:	af 90       	pop	r10
    10be:	9f 90       	pop	r9
    10c0:	8f 90       	pop	r8
    10c2:	7f 90       	pop	r7
    10c4:	6f 90       	pop	r6
    10c6:	08 95       	ret
    10c8:	63 e3       	ldi	r22, 0x33	; 51
    10ca:	72 e0       	ldi	r23, 0x02	; 2
    10cc:	c8 01       	movw	r24, r16
    10ce:	0e 94 64 11 	call	0x22c8	; 0x22c8 <strstr>
    10d2:	10 e0       	ldi	r17, 0x00	; 0
    10d4:	89 2b       	or	r24, r25
    10d6:	09 f4       	brne	.+2      	; 0x10da <responseCheck(char*, unsigned int)+0x124>
    10d8:	b6 cf       	rjmp	.-148    	; 0x1046 <responseCheck(char*, unsigned int)+0x90>
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	80 e4       	ldi	r24, 0x40	; 64
    10de:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    10e2:	8d e7       	ldi	r24, 0x7D	; 125
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	80 e4       	ldi	r24, 0x40	; 64
    10ee:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    10f2:	8d e7       	ldi	r24, 0x7D	; 125
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	80 e4       	ldi	r24, 0x40	; 64
    10fe:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1102:	8d e7       	ldi	r24, 0x7D	; 125
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	80 e4       	ldi	r24, 0x40	; 64
    110e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
    1112:	8d e7       	ldi	r24, 0x7D	; 125
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    111a:	11 e0       	ldi	r17, 0x01	; 1
    111c:	c2 e0       	ldi	r28, 0x02	; 2
    111e:	d0 e0       	ldi	r29, 0x00	; 0
    1120:	92 cf       	rjmp	.-220    	; 0x1046 <responseCheck(char*, unsigned int)+0x90>

00001122 <simSetup()>:
_Z8simSetupv():
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	c5 e0       	ldi	r28, 0x05	; 5
    112a:	d0 e0       	ldi	r29, 0x00	; 0
    112c:	11 e0       	ldi	r17, 0x01	; 1
    112e:	69 e1       	ldi	r22, 0x19	; 25
    1130:	72 e0       	ldi	r23, 0x02	; 2
    1132:	86 ee       	ldi	r24, 0xE6	; 230
    1134:	9a e1       	ldi	r25, 0x1A	; 26
    1136:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    113a:	88 ec       	ldi	r24, 0xC8	; 200
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 7a 07 	call	0xef4	; 0xef4 <OKcomcheck(int)>
    1142:	81 11       	cpse	r24, r1
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	21 97       	sbiw	r28, 0x01	; 1
    1148:	91 f7       	brne	.-28     	; 0x112e <simSetup()+0xc>
    114a:	81 11       	cpse	r24, r1
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <simSetup()+0x30>
    114e:	0e 94 95 02 	call	0x52a	; 0x52a <simpow()>
    1152:	11 11       	cpse	r17, r1
    1154:	e9 cf       	rjmp	.-46     	; 0x1128 <simSetup()+0x6>
    1156:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    115a:	62 e1       	ldi	r22, 0x12	; 18
    115c:	72 e0       	ldi	r23, 0x02	; 2
    115e:	86 ee       	ldi	r24, 0xE6	; 230
    1160:	9a e1       	ldi	r25, 0x1A	; 26
    1162:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    1166:	60 e1       	ldi	r22, 0x10	; 16
    1168:	77 e2       	ldi	r23, 0x27	; 39
    116a:	80 e3       	ldi	r24, 0x30	; 48
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    1172:	c0 91 e4 1a 	lds	r28, 0x1AE4	; 0x801ae4 <simBuffer>
    1176:	d0 91 e5 1a 	lds	r29, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
    117a:	fe 01       	movw	r30, r28
    117c:	a1 ec       	ldi	r26, 0xC1	; 193
    117e:	b6 e1       	ldi	r27, 0x16	; 22
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	21 15       	cp	r18, r1
    1186:	31 05       	cpc	r19, r1
    1188:	21 f4       	brne	.+8      	; 0x1192 <simSetup()+0x70>
    118a:	89 85       	ldd	r24, Y+9	; 0x09
    118c:	80 53       	subi	r24, 0x30	; 48
    118e:	80 93 c0 16 	sts	0x16C0, r24	; 0x8016c0 <IMEI>
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	82 85       	ldd	r24, Z+10	; 0x0a
    1198:	82 95       	swap	r24
    119a:	80 7f       	andi	r24, 0xF0	; 240
    119c:	93 85       	ldd	r25, Z+11	; 0x0b
    119e:	90 53       	subi	r25, 0x30	; 48
    11a0:	89 2b       	or	r24, r25
    11a2:	8d 93       	st	X+, r24
    11a4:	32 96       	adiw	r30, 0x02	; 2
    11a6:	27 30       	cpi	r18, 0x07	; 7
    11a8:	31 05       	cpc	r19, r1
    11aa:	61 f7       	brne	.-40     	; 0x1184 <simSetup()+0x62>
    11ac:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    11b0:	68 e0       	ldi	r22, 0x08	; 8
    11b2:	72 e0       	ldi	r23, 0x02	; 2
    11b4:	86 ee       	ldi	r24, 0xE6	; 230
    11b6:	9a e1       	ldi	r25, 0x1A	; 26
    11b8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    11bc:	60 e1       	ldi	r22, 0x10	; 16
    11be:	77 e2       	ldi	r23, 0x27	; 39
    11c0:	89 e3       	ldi	r24, 0x39	; 57
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    11c8:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    11cc:	6c ee       	ldi	r22, 0xEC	; 236
    11ce:	71 e0       	ldi	r23, 0x01	; 1
    11d0:	86 ee       	ldi	r24, 0xE6	; 230
    11d2:	9a e1       	ldi	r25, 0x1A	; 26
    11d4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    11d8:	60 e1       	ldi	r22, 0x10	; 16
    11da:	77 e2       	ldi	r23, 0x27	; 39
    11dc:	80 e3       	ldi	r24, 0x30	; 48
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	51 f1       	breq	.+84     	; 0x123c <simSetup()+0x11a>
    11e8:	62 ee       	ldi	r22, 0xE2	; 226
    11ea:	71 e0       	ldi	r23, 0x01	; 1
    11ec:	86 ee       	ldi	r24, 0xE6	; 230
    11ee:	9a e1       	ldi	r25, 0x1A	; 26
    11f0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    11f4:	60 e1       	ldi	r22, 0x10	; 16
    11f6:	77 e2       	ldi	r23, 0x27	; 39
    11f8:	80 e3       	ldi	r24, 0x30	; 48
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    1200:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    1204:	61 ec       	ldi	r22, 0xC1	; 193
    1206:	71 e0       	ldi	r23, 0x01	; 1
    1208:	86 ee       	ldi	r24, 0xE6	; 230
    120a:	9a e1       	ldi	r25, 0x1A	; 26
    120c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    1210:	60 e1       	ldi	r22, 0x10	; 16
    1212:	77 e2       	ldi	r23, 0x27	; 39
    1214:	80 e3       	ldi	r24, 0x30	; 48
    1216:	92 e0       	ldi	r25, 0x02	; 2
    1218:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    121c:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    1220:	67 eb       	ldi	r22, 0xB7	; 183
    1222:	71 e0       	ldi	r23, 0x01	; 1
    1224:	86 ee       	ldi	r24, 0xE6	; 230
    1226:	9a e1       	ldi	r25, 0x1A	; 26
    1228:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    122c:	60 e1       	ldi	r22, 0x10	; 16
    122e:	77 e2       	ldi	r23, 0x27	; 39
    1230:	80 e3       	ldi	r24, 0x30	; 48
    1232:	92 e0       	ldi	r25, 0x02	; 2
    1234:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    1238:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    123c:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    1240:	6e ea       	ldi	r22, 0xAE	; 174
    1242:	71 e0       	ldi	r23, 0x01	; 1
    1244:	86 ee       	ldi	r24, 0xE6	; 230
    1246:	9a e1       	ldi	r25, 0x1A	; 26
    1248:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    124c:	68 e8       	ldi	r22, 0x88	; 136
    124e:	73 e1       	ldi	r23, 0x13	; 19
    1250:	8a e5       	ldi	r24, 0x5A	; 90
    1252:	92 e0       	ldi	r25, 0x02	; 2
    1254:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	31 f0       	breq	.+12     	; 0x1268 <simSetup()+0x146>
    125c:	68 e8       	ldi	r22, 0x88	; 136
    125e:	73 e1       	ldi	r23, 0x13	; 19
    1260:	8b e3       	ldi	r24, 0x3B	; 59
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    1268:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    126c:	64 ea       	ldi	r22, 0xA4	; 164
    126e:	71 e0       	ldi	r23, 0x01	; 1
    1270:	86 ee       	ldi	r24, 0xE6	; 230
    1272:	9a e1       	ldi	r25, 0x1A	; 26
    1274:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    1278:	60 e1       	ldi	r22, 0x10	; 16
    127a:	77 e2       	ldi	r23, 0x27	; 39
    127c:	8d e3       	ldi	r24, 0x3D	; 61
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    1284:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    1288:	6d e9       	ldi	r22, 0x9D	; 157
    128a:	71 e0       	ldi	r23, 0x01	; 1
    128c:	86 ee       	ldi	r24, 0xE6	; 230
    128e:	9a e1       	ldi	r25, 0x1A	; 26
    1290:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    1294:	60 e1       	ldi	r22, 0x10	; 16
    1296:	77 e2       	ldi	r23, 0x27	; 39
    1298:	80 e3       	ldi	r24, 0x30	; 48
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    12a0:	e0 91 e4 1a 	lds	r30, 0x1AE4	; 0x801ae4 <simBuffer>
    12a4:	f0 91 e5 1a 	lds	r31, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
    12a8:	87 81       	ldd	r24, Z+7	; 0x07
    12aa:	80 93 bd 16 	sts	0x16BD, r24	; 0x8016bd <CSQ>
    12ae:	80 85       	ldd	r24, Z+8	; 0x08
    12b0:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <CSQ+0x1>
    12b4:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    12b8:	60 e9       	ldi	r22, 0x90	; 144
    12ba:	71 e0       	ldi	r23, 0x01	; 1
    12bc:	86 ee       	ldi	r24, 0xE6	; 230
    12be:	9a e1       	ldi	r25, 0x1A	; 26
    12c0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    12c4:	60 e1       	ldi	r22, 0x10	; 16
    12c6:	77 e2       	ldi	r23, 0x27	; 39
    12c8:	8c e4       	ldi	r24, 0x4C	; 76
    12ca:	92 e0       	ldi	r25, 0x02	; 2
    12cc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    12d0:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    12d4:	66 e8       	ldi	r22, 0x86	; 134
    12d6:	71 e0       	ldi	r23, 0x01	; 1
    12d8:	86 ee       	ldi	r24, 0xE6	; 230
    12da:	9a e1       	ldi	r25, 0x1A	; 26
    12dc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    12e0:	60 e1       	ldi	r22, 0x10	; 16
    12e2:	77 e2       	ldi	r23, 0x27	; 39
    12e4:	80 e3       	ldi	r24, 0x30	; 48
    12e6:	92 e0       	ldi	r25, 0x02	; 2
    12e8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    12ec:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
    12f0:	6c e5       	ldi	r22, 0x5C	; 92
    12f2:	71 e0       	ldi	r23, 0x01	; 1
    12f4:	86 ee       	ldi	r24, 0xE6	; 230
    12f6:	9a e1       	ldi	r25, 0x1A	; 26
    12f8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
    12fc:	60 e1       	ldi	r22, 0x10	; 16
    12fe:	77 e2       	ldi	r23, 0x27	; 39
    1300:	85 e5       	ldi	r24, 0x55	; 85
    1302:	92 e0       	ldi	r25, 0x02	; 2
    1304:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0c 94 a1 02 	jmp	0x542	; 0x542 <clrsimBuffer()>

00001312 <serverRead()>:
_Z10serverReadv():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:933
      simBuffer[i] = simSerial.read();
    }
  }
}

void serverRead() {
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	c8 5e       	subi	r28, 0xE8	; 232
    1328:	d3 40       	sbci	r29, 0x03	; 3
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:939
  unsigned char buftemp[1000];
  int len;
  int start;
  int count = 0;

  millisDelay(300);
    1334:	8c e2       	ldi	r24, 0x2C	; 44
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
    133c:	8e 01       	movw	r16, r28
    133e:	0f 5f       	subi	r16, 0xFF	; 255
    1340:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:940
  while (simSerial.available()) {  // While data incomming: Read into buffer
    1342:	86 ee       	ldi	r24, 0xE6	; 230
    1344:	9a e1       	ldi	r25, 0x1A	; 26
    1346:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	09 f0       	breq	.+2      	; 0x1350 <serverRead()+0x3e>
    134e:	42 c0       	rjmp	.+132    	; 0x13d4 <serverRead()+0xc2>
    1350:	f8 01       	movw	r30, r16
    1352:	af 01       	movw	r20, r30
    1354:	40 1b       	sub	r20, r16
    1356:	51 0b       	sbc	r21, r17
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:947
    for (int i = 0; i < numBytes; i++) {
      buftemp[i] = simSerial.read();
    }
  }

  while (buftemp[count] != 44) {
    1358:	21 91       	ld	r18, Z+
    135a:	2c 32       	cpi	r18, 0x2C	; 44
    135c:	d1 f7       	brne	.-12     	; 0x1352 <serverRead()+0x40>
    135e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1360:	20 53       	subi	r18, 0x30	; 48
    1362:	33 0b       	sbc	r19, r19
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:951
    count++;
  }

  if (count == 4) {
    1364:	44 30       	cpi	r20, 0x04	; 4
    1366:	51 05       	cpc	r21, r1
    1368:	09 f0       	breq	.+2      	; 0x136c <serverRead()+0x5a>
    136a:	49 c0       	rjmp	.+146    	; 0x13fe <serverRead()+0xec>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:952
    len = ((buftemp[9] - 48) * 1000) + ((buftemp[10] - 48) * 100) + ((buftemp[11] - 48) * 10) + buftemp[12] - 48;
    136c:	6b 85       	ldd	r22, Y+11	; 0x0b
    136e:	60 53       	subi	r22, 0x30	; 48
    1370:	77 0b       	sbc	r23, r23
    1372:	e4 e6       	ldi	r30, 0x64	; 100
    1374:	e6 9f       	mul	r30, r22
    1376:	a0 01       	movw	r20, r0
    1378:	e7 9f       	mul	r30, r23
    137a:	50 0d       	add	r21, r0
    137c:	11 24       	eor	r1, r1
    137e:	e8 ee       	ldi	r30, 0xE8	; 232
    1380:	f3 e0       	ldi	r31, 0x03	; 3
    1382:	2e 9f       	mul	r18, r30
    1384:	b0 01       	movw	r22, r0
    1386:	2f 9f       	mul	r18, r31
    1388:	70 0d       	add	r23, r0
    138a:	3e 9f       	mul	r19, r30
    138c:	70 0d       	add	r23, r0
    138e:	11 24       	eor	r1, r1
    1390:	9a 01       	movw	r18, r20
    1392:	26 0f       	add	r18, r22
    1394:	37 1f       	adc	r19, r23
    1396:	4c 85       	ldd	r20, Y+12	; 0x0c
    1398:	fa e0       	ldi	r31, 0x0A	; 10
    139a:	4f 9f       	mul	r20, r31
    139c:	20 0d       	add	r18, r0
    139e:	31 1d       	adc	r19, r1
    13a0:	11 24       	eor	r1, r1
    13a2:	20 5e       	subi	r18, 0xE0	; 224
    13a4:	31 40       	sbci	r19, 0x01	; 1
    13a6:	4d 85       	ldd	r20, Y+13	; 0x0d
    13a8:	24 0f       	add	r18, r20
    13aa:	31 1d       	adc	r19, r1
    13ac:	20 53       	subi	r18, 0x30	; 48
    13ae:	31 09       	sbc	r19, r1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:953
    start = 14;
    13b0:	ee e0       	ldi	r30, 0x0E	; 14
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	e0 0f       	add	r30, r16
    13b6:	f1 1f       	adc	r31, r17
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:966 (discriminator 3)
    len = buftemp[9] - 48;
    start = 11;
  }

/********Rigtig kode**********/
  for (int i = 0; i < len; i++) {
    13b8:	82 17       	cp	r24, r18
    13ba:	93 07       	cpc	r25, r19
    13bc:	0c f0       	brlt	.+2      	; 0x13c0 <serverRead()+0xae>
    13be:	51 c0       	rjmp	.+162    	; 0x1462 <serverRead()+0x150>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:967 (discriminator 2)
    simBuffer[i] = buftemp[start + i];
    13c0:	41 91       	ld	r20, Z+
    13c2:	a0 91 e4 1a 	lds	r26, 0x1AE4	; 0x801ae4 <simBuffer>
    13c6:	b0 91 e5 1a 	lds	r27, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
    13ca:	a8 0f       	add	r26, r24
    13cc:	b9 1f       	adc	r27, r25
    13ce:	4c 93       	st	X, r20
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:966 (discriminator 2)
    len = buftemp[9] - 48;
    start = 11;
  }

/********Rigtig kode**********/
  for (int i = 0; i < len; i++) {
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	f2 cf       	rjmp	.-28     	; 0x13b8 <serverRead()+0xa6>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:941
  int start;
  int count = 0;

  millisDelay(300);
  while (simSerial.available()) {  // While data incomming: Read into buffer
    int numBytes = simSerial.available();
    13d4:	86 ee       	ldi	r24, 0xE6	; 230
    13d6:	9a e1       	ldi	r25, 0x1A	; 26
    13d8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
    13dc:	6c 01       	movw	r12, r24
    13de:	78 01       	movw	r14, r16
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:942 (discriminator 3)
    for (int i = 0; i < numBytes; i++) {
    13e0:	c7 01       	movw	r24, r14
    13e2:	80 1b       	sub	r24, r16
    13e4:	91 0b       	sbc	r25, r17
    13e6:	8c 15       	cp	r24, r12
    13e8:	9d 05       	cpc	r25, r13
    13ea:	0c f0       	brlt	.+2      	; 0x13ee <serverRead()+0xdc>
    13ec:	aa cf       	rjmp	.-172    	; 0x1342 <serverRead()+0x30>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:943 (discriminator 2)
      buftemp[i] = simSerial.read();
    13ee:	86 ee       	ldi	r24, 0xE6	; 230
    13f0:	9a e1       	ldi	r25, 0x1A	; 26
    13f2:	0e 94 a5 0b 	call	0x174a	; 0x174a <HardwareSerial::read()>
    13f6:	f7 01       	movw	r30, r14
    13f8:	81 93       	st	Z+, r24
    13fa:	7f 01       	movw	r14, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:942 (discriminator 2)
  int count = 0;

  millisDelay(300);
  while (simSerial.available()) {  // While data incomming: Read into buffer
    int numBytes = simSerial.available();
    for (int i = 0; i < numBytes; i++) {
    13fc:	f1 cf       	rjmp	.-30     	; 0x13e0 <serverRead()+0xce>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:954
  }

  if (count == 4) {
    len = ((buftemp[9] - 48) * 1000) + ((buftemp[10] - 48) * 100) + ((buftemp[11] - 48) * 10) + buftemp[12] - 48;
    start = 14;
  } else if (count == 3) {
    13fe:	43 30       	cpi	r20, 0x03	; 3
    1400:	51 05       	cpc	r21, r1
    1402:	d1 f4       	brne	.+52     	; 0x1438 <serverRead()+0x126>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:955
    len = ((buftemp[9] - 48) * 100) + ((buftemp[10] - 48) * 10) + buftemp[11] - 48;
    1404:	6b 85       	ldd	r22, Y+11	; 0x0b
    1406:	60 53       	subi	r22, 0x30	; 48
    1408:	77 0b       	sbc	r23, r23
    140a:	ea e0       	ldi	r30, 0x0A	; 10
    140c:	e6 9f       	mul	r30, r22
    140e:	a0 01       	movw	r20, r0
    1410:	e7 9f       	mul	r30, r23
    1412:	50 0d       	add	r21, r0
    1414:	11 24       	eor	r1, r1
    1416:	e4 e6       	ldi	r30, 0x64	; 100
    1418:	e2 9f       	mul	r30, r18
    141a:	b0 01       	movw	r22, r0
    141c:	e3 9f       	mul	r30, r19
    141e:	70 0d       	add	r23, r0
    1420:	11 24       	eor	r1, r1
    1422:	46 0f       	add	r20, r22
    1424:	57 1f       	adc	r21, r23
    1426:	2c 85       	ldd	r18, Y+12	; 0x0c
    1428:	24 0f       	add	r18, r20
    142a:	35 2f       	mov	r19, r21
    142c:	31 1d       	adc	r19, r1
    142e:	20 53       	subi	r18, 0x30	; 48
    1430:	31 09       	sbc	r19, r1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:956
    start = 13;
    1432:	ed e0       	ldi	r30, 0x0D	; 13
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	be cf       	rjmp	.-132    	; 0x13b4 <serverRead()+0xa2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:962
  } else if (count == 2) {
    len = ((buftemp[9] - 48) * 10) + buftemp[10] - 48;
    start = 12;
  } else {
    len = buftemp[9] - 48;
    start = 11;
    1438:	eb e0       	ldi	r30, 0x0B	; 11
    143a:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:957
    len = ((buftemp[9] - 48) * 1000) + ((buftemp[10] - 48) * 100) + ((buftemp[11] - 48) * 10) + buftemp[12] - 48;
    start = 14;
  } else if (count == 3) {
    len = ((buftemp[9] - 48) * 100) + ((buftemp[10] - 48) * 10) + buftemp[11] - 48;
    start = 13;
  } else if (count == 2) {
    143c:	42 30       	cpi	r20, 0x02	; 2
    143e:	51 05       	cpc	r21, r1
    1440:	09 f0       	breq	.+2      	; 0x1444 <serverRead()+0x132>
    1442:	b8 cf       	rjmp	.-144    	; 0x13b4 <serverRead()+0xa2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:958
    len = ((buftemp[9] - 48) * 10) + buftemp[10] - 48;
    1444:	6a e0       	ldi	r22, 0x0A	; 10
    1446:	62 9f       	mul	r22, r18
    1448:	a0 01       	movw	r20, r0
    144a:	63 9f       	mul	r22, r19
    144c:	50 0d       	add	r21, r0
    144e:	11 24       	eor	r1, r1
    1450:	2b 85       	ldd	r18, Y+11	; 0x0b
    1452:	24 0f       	add	r18, r20
    1454:	35 2f       	mov	r19, r21
    1456:	31 1d       	adc	r19, r1
    1458:	20 53       	subi	r18, 0x30	; 48
    145a:	31 09       	sbc	r19, r1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:959
    start = 12;
    145c:	ec e0       	ldi	r30, 0x0C	; 12
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	a9 cf       	rjmp	.-174    	; 0x13b4 <serverRead()+0xa2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:970
/********Rigtig kode**********/
  for (int i = 0; i < len; i++) {
    simBuffer[i] = buftemp[start + i];
  }

}
    1462:	c8 51       	subi	r28, 0x18	; 24
    1464:	dc 4f       	sbci	r29, 0xFC	; 252
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	df 90       	pop	r13
    147e:	cf 90       	pop	r12
    1480:	08 95       	ret

00001482 <setup>:
setup():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:102
  }
};

struct saved_data slaveSaved[30];  //Make struct for 30 slaves

void setup() {
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	e5 97       	sbiw	r28, 0x35	; 53
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:104

  CLKPR = 1 << CLKPCE;  // Clock Prescaler Change Enable
    149e:	80 e8       	ldi	r24, 0x80	; 128
    14a0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:105
  CLKPR = 0;            // Change clock division factor to 1.
    14a4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
_ZN14HardwareSerial5beginEm():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    14a8:	26 e0       	ldi	r18, 0x06	; 6
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	55 e2       	ldi	r21, 0x25	; 37
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	86 ee       	ldi	r24, 0xE6	; 230
    14b4:	9a e1       	ldi	r25, 0x1A	; 26
    14b6:	0e 94 8c 0c 	call	0x1918	; 0x1918 <HardwareSerial::begin(unsigned long, unsigned char)>
    14ba:	26 e0       	ldi	r18, 0x06	; 6
    14bc:	40 e8       	ldi	r20, 0x80	; 128
    14be:	55 e2       	ldi	r21, 0x25	; 37
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	83 e8       	ldi	r24, 0x83	; 131
    14c6:	9b e1       	ldi	r25, 0x1B	; 27
    14c8:	0e 94 8c 0c 	call	0x1918	; 0x1918 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:112
  //Begin serial communication
  simSerial.begin(9600);
  modbusSerial.begin(9600);

  //Setup mode of pins on master
  pinMode(DTR_E, OUTPUT);
    14cc:	61 e0       	ldi	r22, 0x01	; 1
    14ce:	8a e2       	ldi	r24, 0x2A	; 42
    14d0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:113
  pinMode(PWRKEY, OUTPUT);
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	8b e2       	ldi	r24, 0x2B	; 43
    14d8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:114
  pinMode(BLUE_LED, OUTPUT);
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	82 e4       	ldi	r24, 0x42	; 66
    14e0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:115
  pinMode(GREEN_LED, OUTPUT);
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	81 e4       	ldi	r24, 0x41	; 65
    14e8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:116
  pinMode(RED_LED, OUTPUT);
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	80 e4       	ldi	r24, 0x40	; 64
    14f0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:117
  pinMode(Button, INPUT);
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	83 e4       	ldi	r24, 0x43	; 67
    14f8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:119

  digitalWrite(BLUE_LED, LOW);
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	82 e4       	ldi	r24, 0x42	; 66
    1500:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:120
  digitalWrite(GREEN_LED, LOW);
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	81 e4       	ldi	r24, 0x41	; 65
    1508:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:121
  digitalWrite(RED_LED, LOW);
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	80 e4       	ldi	r24, 0x40	; 64
    1510:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:123

  digitalWrite(PWRKEY, HIGH);  // Set powerkey high so sim module stay on/off
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	8b e2       	ldi	r24, 0x2B	; 43
    1518:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:124
  digitalWrite(DTR_E, LOW);    // Maybe not used?
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	8a e2       	ldi	r24, 0x2A	; 42
    1520:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:126

  millisDelay(2000);  //Start delay
    1524:	80 ed       	ldi	r24, 0xD0	; 208
    1526:	97 e0       	ldi	r25, 0x07	; 7
    1528:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:128

  simSetup();  //Sim module setup
    152c:	0e 94 91 08 	call	0x1122	; 0x1122 <simSetup()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:135
  /**********Send model and firmware***************/

  char modelAndFirmware[20];  //Create message array
  short model = 0x0001;       //Model nr.
  short firmware = 0x0001;    //Firmware nr.
  transactionID++;
    1530:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <transactionID>
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <transactionID>
    153a:	9e 01       	movw	r18, r28
    153c:	2f 5f       	subi	r18, 0xFF	; 255
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	79 01       	movw	r14, r18
    1542:	a0 ec       	ldi	r26, 0xC0	; 192
    1544:	b6 e1       	ldi	r27, 0x16	; 22
    1546:	89 01       	movw	r16, r18
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:137

  for (int i = 0; i < strlen(IMEI); i++) {  //Put IMEI into message
    1548:	ad 01       	movw	r20, r26
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:137 (discriminator 3)
    154a:	fa 01       	movw	r30, r20
    154c:	01 90       	ld	r0, Z+
    154e:	00 20       	and	r0, r0
    1550:	e9 f7       	brne	.-6      	; 0x154c <setup+0xca>
    1552:	9f 01       	movw	r18, r30
    1554:	21 5c       	subi	r18, 0xC1	; 193
    1556:	36 41       	sbci	r19, 0x16	; 22
    1558:	bd 01       	movw	r22, r26
    155a:	60 5c       	subi	r22, 0xC0	; 192
    155c:	76 41       	sbci	r23, 0x16	; 22
    155e:	62 17       	cp	r22, r18
    1560:	73 07       	cpc	r23, r19
    1562:	28 f4       	brcc	.+10     	; 0x156e <setup+0xec>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:138 (discriminator 2)
    modelAndFirmware[i] = IMEI[i];
    1564:	9d 91       	ld	r25, X+
    1566:	f7 01       	movw	r30, r14
    1568:	91 93       	st	Z+, r25
    156a:	7f 01       	movw	r14, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:137 (discriminator 2)
  char modelAndFirmware[20];  //Create message array
  short model = 0x0001;       //Model nr.
  short firmware = 0x0001;    //Firmware nr.
  transactionID++;

  for (int i = 0; i < strlen(IMEI); i++) {  //Put IMEI into message
    156c:	ee cf       	rjmp	.-36     	; 0x154a <setup+0xc8>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:141
    modelAndFirmware[i] = IMEI[i];
  }

  modelAndFirmware[8] = transactionID;  //Put transactionID into message
    156e:	89 87       	std	Y+9, r24	; 0x09
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:143

  modelAndFirmware[9] = 0x02;  //Put command 02 into message
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	8a 87       	std	Y+10, r24	; 0x0a
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:145

  modelAndFirmware[10] = highByte(model);  //Put model nr. into message
    1574:	1b 86       	std	Y+11, r1	; 0x0b
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:146
  modelAndFirmware[11] = lowByte(model);
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	8c 87       	std	Y+12, r24	; 0x0c
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:148

  modelAndFirmware[12] = highByte(firmware);  //Put firmware nr. into massage
    157a:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:149
  modelAndFirmware[13] = lowByte(firmware);
    157c:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:151

  modelAndFirmware[14] = highByte(CRC16_modbus(modelAndFirmware, 14));  //Put CRC into message
    157e:	6e e0       	ldi	r22, 0x0E	; 14
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	c8 01       	movw	r24, r16
    1584:	0e 94 b0 02 	call	0x560	; 0x560 <CRC16_modbus(char*, int)>
    1588:	9f 87       	std	Y+15, r25	; 0x0f
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:152
  modelAndFirmware[15] = lowByte(CRC16_modbus(modelAndFirmware, 14));
    158a:	6e e0       	ldi	r22, 0x0E	; 14
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	c8 01       	movw	r24, r16
    1590:	0e 94 b0 02 	call	0x560	; 0x560 <CRC16_modbus(char*, int)>
    1594:	88 8b       	std	Y+16, r24	; 0x10
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:154

  simSerial.println(F("AT+CASEND=0,16"));  //Write to send message 16 bytes long
    1596:	6e e5       	ldi	r22, 0x5E	; 94
    1598:	72 e0       	ldi	r23, 0x02	; 2
    159a:	86 ee       	ldi	r24, 0xE6	; 230
    159c:	9a e1       	ldi	r25, 0x1A	; 26
    159e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:155
  millisDelay(500);
    15a2:	84 ef       	ldi	r24, 0xF4	; 244
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:156
  clrsimBuffer();
    15aa:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:158

  simSerial.write(modelAndFirmware, sizeof(modelAndFirmware));  // Send model and firmware
    15ae:	44 e1       	ldi	r20, 0x14	; 20
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	b8 01       	movw	r22, r16
    15b4:	86 ee       	ldi	r24, 0xE6	; 230
    15b6:	9a e1       	ldi	r25, 0x1A	; 26
    15b8:	0e 94 08 02 	call	0x410	; 0x410 <Print::write(char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:159
  responseCheck("OK", 10000);
    15bc:	60 e1       	ldi	r22, 0x10	; 16
    15be:	77 e2       	ldi	r23, 0x27	; 39
    15c0:	80 e3       	ldi	r24, 0x30	; 48
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:160
  clrsimBuffer();
    15c8:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:162

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    15cc:	6d e4       	ldi	r22, 0x4D	; 77
    15ce:	72 e0       	ldi	r23, 0x02	; 2
    15d0:	86 ee       	ldi	r24, 0xE6	; 230
    15d2:	9a e1       	ldi	r25, 0x1A	; 26
    15d4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:163
  responseCheck("49", 10000);
    15d8:	60 e1       	ldi	r22, 0x10	; 16
    15da:	77 e2       	ldi	r23, 0x27	; 39
    15dc:	89 e5       	ldi	r24, 0x59	; 89
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:164
  clrsimBuffer();
    15e4:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:169


  /**********Ask for slave setup on startup********/
  char msg[15];     // Create message array
  transactionID++;  // Change transactionID for new message
    15e8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <transactionID>
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <transactionID>
    15f2:	7e 01       	movw	r14, r28
    15f4:	f7 e2       	ldi	r31, 0x27	; 39
    15f6:	ef 0e       	add	r14, r31
    15f8:	f1 1c       	adc	r15, r1
    15fa:	a0 ec       	ldi	r26, 0xC0	; 192
    15fc:	b6 e1       	ldi	r27, 0x16	; 22
    15fe:	87 01       	movw	r16, r14
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:171

  for (int i = 0; i < strlen(IMEI); i++) {  //Add IMEI to message
    1600:	ad 01       	movw	r20, r26
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:171 (discriminator 3)
    1602:	fa 01       	movw	r30, r20
    1604:	01 90       	ld	r0, Z+
    1606:	00 20       	and	r0, r0
    1608:	e9 f7       	brne	.-6      	; 0x1604 <setup+0x182>
    160a:	9f 01       	movw	r18, r30
    160c:	21 5c       	subi	r18, 0xC1	; 193
    160e:	36 41       	sbci	r19, 0x16	; 22
    1610:	bd 01       	movw	r22, r26
    1612:	60 5c       	subi	r22, 0xC0	; 192
    1614:	76 41       	sbci	r23, 0x16	; 22
    1616:	62 17       	cp	r22, r18
    1618:	73 07       	cpc	r23, r19
    161a:	28 f4       	brcc	.+10     	; 0x1626 <setup+0x1a4>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:172 (discriminator 2)
    msg[i] = IMEI[i];
    161c:	9d 91       	ld	r25, X+
    161e:	f7 01       	movw	r30, r14
    1620:	91 93       	st	Z+, r25
    1622:	7f 01       	movw	r14, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:171 (discriminator 2)

  /**********Ask for slave setup on startup********/
  char msg[15];     // Create message array
  transactionID++;  // Change transactionID for new message

  for (int i = 0; i < strlen(IMEI); i++) {  //Add IMEI to message
    1624:	ee cf       	rjmp	.-36     	; 0x1602 <setup+0x180>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:175
    msg[i] = IMEI[i];
  }

  msg[8] = transactionID;  //Add transactionID
    1626:	8f a7       	std	Y+47, r24	; 0x2f
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:177

  msg[9] = 0x03;  //Add command 03
    1628:	83 e0       	ldi	r24, 0x03	; 3
    162a:	88 ab       	std	Y+48, r24	; 0x30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:179

  msg[10] = highByte(CRC16_modbus(msg, 10));  //Add CRC
    162c:	6a e0       	ldi	r22, 0x0A	; 10
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	c8 01       	movw	r24, r16
    1632:	0e 94 b0 02 	call	0x560	; 0x560 <CRC16_modbus(char*, int)>
    1636:	99 ab       	std	Y+49, r25	; 0x31
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:180
  msg[11] = lowByte(CRC16_modbus(msg, 10));
    1638:	6a e0       	ldi	r22, 0x0A	; 10
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	c8 01       	movw	r24, r16
    163e:	0e 94 b0 02 	call	0x560	; 0x560 <CRC16_modbus(char*, int)>
    1642:	8a ab       	std	Y+50, r24	; 0x32
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:182

  simSerial.println(F("AT+CASEND=0,12"));  //Write to send message 12 bytes long
    1644:	6e e3       	ldi	r22, 0x3E	; 62
    1646:	72 e0       	ldi	r23, 0x02	; 2
    1648:	86 ee       	ldi	r24, 0xE6	; 230
    164a:	9a e1       	ldi	r25, 0x1A	; 26
    164c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:183
  millisDelay(500);
    1650:	84 ef       	ldi	r24, 0xF4	; 244
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:184
  clrsimBuffer();
    1658:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:186

  simSerial.write(msg, sizeof(msg));  // Send message
    165c:	4f e0       	ldi	r20, 0x0F	; 15
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	b8 01       	movw	r22, r16
    1662:	86 ee       	ldi	r24, 0xE6	; 230
    1664:	9a e1       	ldi	r25, 0x1A	; 26
    1666:	0e 94 08 02 	call	0x410	; 0x410 <Print::write(char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:187
  responseCheck("OK", 10000);
    166a:	60 e1       	ldi	r22, 0x10	; 16
    166c:	77 e2       	ldi	r23, 0x27	; 39
    166e:	80 e3       	ldi	r24, 0x30	; 48
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	0e 94 db 07 	call	0xfb6	; 0xfb6 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:188
  clrsimBuffer();
    1676:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:190

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    167a:	6d e2       	ldi	r22, 0x2D	; 45
    167c:	72 e0       	ldi	r23, 0x02	; 2
    167e:	86 ee       	ldi	r24, 0xE6	; 230
    1680:	9a e1       	ldi	r25, 0x1A	; 26
    1682:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:192

  serverRead();  //Read message from server into simBuffer
    1686:	0e 94 89 09 	call	0x1312	; 0x1312 <serverRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:193
  clrsimBuffer();
    168a:	0e 94 a1 02 	call	0x542	; 0x542 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:196

  /********Test kode**********/
  char testbuf[18] = {0x01, 0x03, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x65, 0x6F};
    168e:	82 e1       	ldi	r24, 0x12	; 18
    1690:	eb e1       	ldi	r30, 0x1B	; 27
    1692:	f2 e0       	ldi	r31, 0x02	; 2
    1694:	de 01       	movw	r26, r28
    1696:	55 96       	adiw	r26, 0x15	; 21
    1698:	01 90       	ld	r0, Z+
    169a:	0d 92       	st	X+, r0
    169c:	8a 95       	dec	r24
    169e:	e1 f7       	brne	.-8      	; 0x1698 <setup+0x216>
    16a0:	de 01       	movw	r26, r28
    16a2:	55 96       	adiw	r26, 0x15	; 21
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:198

  for (int i = 0; i < 18; i++) {
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:199 (discriminator 2)
    simBuffer[i] = testbuf[i];
    16a8:	2d 91       	ld	r18, X+
    16aa:	e0 91 e4 1a 	lds	r30, 0x1AE4	; 0x801ae4 <simBuffer>
    16ae:	f0 91 e5 1a 	lds	r31, 0x1AE5	; 0x801ae5 <simBuffer+0x1>
    16b2:	e8 0f       	add	r30, r24
    16b4:	f9 1f       	adc	r31, r25
    16b6:	20 83       	st	Z, r18
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:198 (discriminator 2)
  clrsimBuffer();

  /********Test kode**********/
  char testbuf[18] = {0x01, 0x03, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x65, 0x6F};

  for (int i = 0; i < 18; i++) {
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	82 31       	cpi	r24, 0x12	; 18
    16bc:	91 05       	cpc	r25, r1
    16be:	a1 f7       	brne	.-24     	; 0x16a8 <setup+0x226>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:202
    simBuffer[i] = testbuf[i];
  }

}
    16c0:	e5 96       	adiw	r28, 0x35	; 53
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	ff 90       	pop	r15
    16d6:	ef 90       	pop	r14
    16d8:	08 95       	ret

000016da <loop>:
loop():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:206

void loop() {

  switch (state) {
    16da:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <state>
    16de:	90 91 9d 16 	lds	r25, 0x169D	; 0x80169d <state+0x1>
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	19 f0       	breq	.+6      	; 0x16ec <loop+0x12>
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <loop+0x16>
    16ea:	08 95       	ret
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:208
    case slaveread:  //Slavesetup and read data from slaves. Also check for change in data.
      modbusRead();
    16ec:	0c 94 14 03 	jmp	0x628	; 0x628 <modbusRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:213
      break;

    case serversend:

      millisDelay(1000);
    16f0:	88 ee       	ldi	r24, 0xE8	; 232
    16f2:	93 e0       	ldi	r25, 0x03	; 3
    16f4:	0e 94 0f 02 	call	0x41e	; 0x41e <millisDelay(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:215

      sendToServer();  //Send message to server
    16f8:	0e 94 34 02 	call	0x468	; 0x468 <sendToServer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:217

      simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    16fc:	6c e1       	ldi	r22, 0x1C	; 28
    16fe:	72 e0       	ldi	r23, 0x02	; 2
    1700:	86 ee       	ldi	r24, 0xE6	; 230
    1702:	9a e1       	ldi	r25, 0x1A	; 26
    1704:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:219

      serverRead();  //Read server message
    1708:	0e 94 89 09 	call	0x1312	; 0x1312 <serverRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:221

      state = slaveread;
    170c:	10 92 9d 16 	sts	0x169D, r1	; 0x80169d <state+0x1>
    1710:	10 92 9c 16 	sts	0x169C, r1	; 0x80169c <state>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Test_gammel/Test_gammel.ino:286
  }

  // if (powerStatus() == 0) {  //If power is still on
  //   state = poweroff;
  // }
}
    1714:	08 95       	ret

00001716 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1716:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1718:	91 8d       	ldd	r25, Z+25	; 0x19
    171a:	22 8d       	ldd	r18, Z+26	; 0x1a
    171c:	89 2f       	mov	r24, r25
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	80 5c       	subi	r24, 0xC0	; 192
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	82 1b       	sub	r24, r18
    1726:	91 09       	sbc	r25, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
    1728:	8f 73       	andi	r24, 0x3F	; 63
    172a:	99 27       	eor	r25, r25
    172c:	08 95       	ret

0000172e <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    172e:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    1730:	91 8d       	ldd	r25, Z+25	; 0x19
    1732:	82 8d       	ldd	r24, Z+26	; 0x1a
    1734:	98 17       	cp	r25, r24
    1736:	31 f0       	breq	.+12     	; 0x1744 <HardwareSerial::peek()+0x16>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1738:	82 8d       	ldd	r24, Z+26	; 0x1a
    173a:	e8 0f       	add	r30, r24
    173c:	f1 1d       	adc	r31, r1
    173e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1748:	08 95       	ret

0000174a <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    174a:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    174c:	91 8d       	ldd	r25, Z+25	; 0x19
    174e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1750:	98 17       	cp	r25, r24
    1752:	61 f0       	breq	.+24     	; 0x176c <HardwareSerial::read()+0x22>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1754:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1756:	ae 0f       	add	r26, r30
    1758:	bf 2f       	mov	r27, r31
    175a:	b1 1d       	adc	r27, r1
    175c:	5d 96       	adiw	r26, 0x1d	; 29
    175e:	8c 91       	ld	r24, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1760:	92 8d       	ldd	r25, Z+26	; 0x1a
    1762:	9f 5f       	subi	r25, 0xFF	; 255
    1764:	9f 73       	andi	r25, 0x3F	; 63
    1766:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1770:	08 95       	ret

00001772 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1772:	fc 01       	movw	r30, r24
    1774:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    1776:	44 8d       	ldd	r20, Z+28	; 0x1c
    1778:	25 2f       	mov	r18, r21
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	84 2f       	mov	r24, r20
    177e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1780:	82 1b       	sub	r24, r18
    1782:	93 0b       	sbc	r25, r19
    1784:	54 17       	cp	r21, r20
    1786:	10 f0       	brcs	.+4      	; 0x178c <HardwareSerial::availableForWrite()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    1788:	cf 96       	adiw	r24, 0x3f	; 63
    178a:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    178c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
    178e:	08 95       	ret

00001790 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	89 2b       	or	r24, r25
    1796:	49 f0       	breq	.+18     	; 0x17aa <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	89 2b       	or	r24, r25
    179e:	29 f0       	breq	.+10     	; 0x17aa <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    17a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    17a4:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    17a6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    17aa:	8e e3       	ldi	r24, 0x3E	; 62
    17ac:	9d e0       	ldi	r25, 0x0D	; 13
    17ae:	89 2b       	or	r24, r25
    17b0:	49 f0       	breq	.+18     	; 0x17c4 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	89 2b       	or	r24, r25
    17b8:	29 f0       	breq	.+10     	; 0x17c4 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    17ba:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <Serial1_available()>
    17be:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
    17c0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    17c4:	85 ed       	ldi	r24, 0xD5	; 213
    17c6:	9d e0       	ldi	r25, 0x0D	; 13
    17c8:	89 2b       	or	r24, r25
    17ca:	49 f0       	breq	.+18     	; 0x17de <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 1)
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	89 2b       	or	r24, r25
    17d2:	29 f0       	breq	.+10     	; 0x17de <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 3)
    17d4:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <Serial2_available()>
    17d8:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
    17da:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	89 2b       	or	r24, r25
    17e4:	49 f0       	breq	.+18     	; 0x17f8 <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 1)
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	89 2b       	or	r24, r25
    17ec:	29 f0       	breq	.+10     	; 0x17f8 <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 3)
    17ee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    17f2:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
    17f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
    17f8:	08 95       	ret

000017fa <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    17fa:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    17fc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    17fe:	a8 0f       	add	r26, r24
    1800:	b9 2f       	mov	r27, r25
    1802:	b1 1d       	adc	r27, r1
    1804:	a3 5a       	subi	r26, 0xA3	; 163
    1806:	bf 4f       	sbci	r27, 0xFF	; 255
    1808:	2c 91       	ld	r18, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    180a:	84 8d       	ldd	r24, Z+28	; 0x1c
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	8f 73       	andi	r24, 0x3F	; 63
    1812:	99 27       	eor	r25, r25
    1814:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1816:	a6 89       	ldd	r26, Z+22	; 0x16
    1818:	b7 89       	ldd	r27, Z+23	; 0x17
    181a:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    181c:	a0 89       	ldd	r26, Z+16	; 0x10
    181e:	b1 89       	ldd	r27, Z+17	; 0x11
    1820:	8c 91       	ld	r24, X
    1822:	83 70       	andi	r24, 0x03	; 3
    1824:	80 64       	ori	r24, 0x40	; 64
    1826:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1828:	93 8d       	ldd	r25, Z+27	; 0x1b
    182a:	84 8d       	ldd	r24, Z+28	; 0x1c
    182c:	98 13       	cpse	r25, r24
    182e:	06 c0       	rjmp	.+12     	; 0x183c <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1830:	02 88       	ldd	r0, Z+18	; 0x12
    1832:	f3 89       	ldd	r31, Z+19	; 0x13
    1834:	e0 2d       	mov	r30, r0
    1836:	80 81       	ld	r24, Z
    1838:	8f 7d       	andi	r24, 0xDF	; 223
    183a:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    183c:	08 95       	ret

0000183e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1844:	88 8d       	ldd	r24, Y+24	; 0x18
    1846:	88 23       	and	r24, r24
    1848:	b9 f0       	breq	.+46     	; 0x1878 <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    184a:	aa 89       	ldd	r26, Y+18	; 0x12
    184c:	bb 89       	ldd	r27, Y+19	; 0x13
    184e:	e8 89       	ldd	r30, Y+16	; 0x10
    1850:	f9 89       	ldd	r31, Y+17	; 0x11
    1852:	8c 91       	ld	r24, X
    1854:	85 fd       	sbrc	r24, 5
    1856:	03 c0       	rjmp	.+6      	; 0x185e <HardwareSerial::flush()+0x20>
    1858:	80 81       	ld	r24, Z
    185a:	86 fd       	sbrc	r24, 6
    185c:	0d c0       	rjmp	.+26     	; 0x1878 <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	07 fc       	sbrc	r0, 7
    1862:	f7 cf       	rjmp	.-18     	; 0x1852 <HardwareSerial::flush()+0x14>
    1864:	8c 91       	ld	r24, X
    1866:	85 ff       	sbrs	r24, 5
    1868:	f2 cf       	rjmp	.-28     	; 0x184e <HardwareSerial::flush()+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    186a:	80 81       	ld	r24, Z
    186c:	85 ff       	sbrs	r24, 5
    186e:	ed cf       	rjmp	.-38     	; 0x184a <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    1870:	ce 01       	movw	r24, r28
    1872:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <HardwareSerial::_tx_udr_empty_irq()>
    1876:	e9 cf       	rjmp	.-46     	; 0x184a <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1890:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1892:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1894:	98 13       	cpse	r25, r24
    1896:	1a c0       	rjmp	.+52     	; 0x18cc <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    1898:	e8 89       	ldd	r30, Y+16	; 0x10
    189a:	f9 89       	ldd	r31, Y+17	; 0x11
    189c:	80 81       	ld	r24, Z
    189e:	85 ff       	sbrs	r24, 5
    18a0:	15 c0       	rjmp	.+42     	; 0x18cc <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    18a2:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18a4:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    18a6:	ee 89       	ldd	r30, Y+22	; 0x16
    18a8:	ff 89       	ldd	r31, Y+23	; 0x17
    18aa:	60 83       	st	Z, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    18ac:	e8 89       	ldd	r30, Y+16	; 0x10
    18ae:	f9 89       	ldd	r31, Y+17	; 0x11
    18b0:	80 81       	ld	r24, Z
    18b2:	83 70       	andi	r24, 0x03	; 3
    18b4:	80 64       	ori	r24, 0x40	; 64
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    18b6:	80 83       	st	Z, r24
__iRestore():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18b8:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	08 95       	ret
    18cc:	f6 2e       	mov	r15, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    18ce:	0b 8d       	ldd	r16, Y+27	; 0x1b
    18d0:	10 e0       	ldi	r17, 0x00	; 0
    18d2:	0f 5f       	subi	r16, 0xFF	; 255
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	0f 73       	andi	r16, 0x3F	; 63
    18d8:	11 27       	eor	r17, r17
    18da:	e0 2e       	mov	r14, r16
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    18dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18de:	8e 11       	cpse	r24, r14
    18e0:	0c c0       	rjmp	.+24     	; 0x18fa <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	07 fc       	sbrc	r0, 7
    18e6:	fa cf       	rjmp	.-12     	; 0x18dc <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    18e8:	e8 89       	ldd	r30, Y+16	; 0x10
    18ea:	f9 89       	ldd	r31, Y+17	; 0x11
    18ec:	80 81       	ld	r24, Z
    18ee:	85 ff       	sbrs	r24, 5
    18f0:	f5 cf       	rjmp	.-22     	; 0x18dc <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    18f2:	ce 01       	movw	r24, r28
    18f4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <HardwareSerial::_tx_udr_empty_irq()>
    18f8:	f1 cf       	rjmp	.-30     	; 0x18dc <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    18fa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    18fc:	ec 0f       	add	r30, r28
    18fe:	fd 2f       	mov	r31, r29
    1900:	f1 1d       	adc	r31, r1
    1902:	e3 5a       	subi	r30, 0xA3	; 163
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	f0 82       	st	Z, r15
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1908:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    190a:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    190c:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    190e:	ea 89       	ldd	r30, Y+18	; 0x12
    1910:	fb 89       	ldd	r31, Y+19	; 0x13
    1912:	80 81       	ld	r24, Z
    1914:	80 62       	ori	r24, 0x20	; 32
    1916:	cf cf       	rjmp	.-98     	; 0x18b6 <HardwareSerial::write(unsigned char)+0x38>

00001918 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	ec 01       	movw	r28, r24
    1928:	6a 01       	movw	r12, r20
    192a:	7b 01       	movw	r14, r22
    192c:	12 2f       	mov	r17, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    192e:	60 e8       	ldi	r22, 0x80	; 128
    1930:	74 e8       	ldi	r23, 0x84	; 132
    1932:	8e e1       	ldi	r24, 0x1E	; 30
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a7 01       	movw	r20, r14
    1938:	96 01       	movw	r18, r12
    193a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__udivmodsi4>
    193e:	21 50       	subi	r18, 0x01	; 1
    1940:	31 09       	sbc	r19, r1
    1942:	41 09       	sbc	r20, r1
    1944:	51 09       	sbc	r21, r1
    1946:	56 95       	lsr	r21
    1948:	47 95       	ror	r20
    194a:	37 95       	ror	r19
    194c:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    194e:	e8 89       	ldd	r30, Y+16	; 0x10
    1950:	f9 89       	ldd	r31, Y+17	; 0x11
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1956:	21 15       	cp	r18, r1
    1958:	80 e1       	ldi	r24, 0x10	; 16
    195a:	38 07       	cpc	r19, r24
    195c:	98 f0       	brcs	.+38     	; 0x1984 <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    195e:	e8 89       	ldd	r30, Y+16	; 0x10
    1960:	f9 89       	ldd	r31, Y+17	; 0x11
    1962:	10 82       	st	Z, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1964:	60 e4       	ldi	r22, 0x40	; 64
    1966:	72 e4       	ldi	r23, 0x42	; 66
    1968:	8f e0       	ldi	r24, 0x0F	; 15
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a7 01       	movw	r20, r14
    196e:	96 01       	movw	r18, r12
    1970:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__udivmodsi4>
    1974:	21 50       	subi	r18, 0x01	; 1
    1976:	31 09       	sbc	r19, r1
    1978:	41 09       	sbc	r20, r1
    197a:	51 09       	sbc	r21, r1
    197c:	56 95       	lsr	r21
    197e:	47 95       	ror	r20
    1980:	37 95       	ror	r19
    1982:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1984:	ec 85       	ldd	r30, Y+12	; 0x0c
    1986:	fd 85       	ldd	r31, Y+13	; 0x0d
    1988:	30 83       	st	Z, r19
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    198a:	ee 85       	ldd	r30, Y+14	; 0x0e
    198c:	ff 85       	ldd	r31, Y+15	; 0x0f
    198e:	20 83       	st	Z, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    1990:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1992:	ec 89       	ldd	r30, Y+20	; 0x14
    1994:	fd 89       	ldd	r31, Y+21	; 0x15
    1996:	10 83       	st	Z, r17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1998:	ea 89       	ldd	r30, Y+18	; 0x12
    199a:	fb 89       	ldd	r31, Y+19	; 0x13
    199c:	80 81       	ld	r24, Z
    199e:	88 69       	ori	r24, 0x98	; 152
    19a0:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    19a2:	ea 89       	ldd	r30, Y+18	; 0x12
    19a4:	fb 89       	ldd	r31, Y+19	; 0x13
    19a6:	80 81       	ld	r24, Z
    19a8:	8f 7d       	andi	r24, 0xDF	; 223
    19aa:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	df 90       	pop	r13
    19b8:	cf 90       	pop	r12
    19ba:	08 95       	ret

000019bc <__vector_36>:
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	0b b6       	in	r0, 0x3b	; 59
    19c8:	0f 92       	push	r0
    19ca:	2f 93       	push	r18
    19cc:	8f 93       	push	r24
    19ce:	9f 93       	push	r25
    19d0:	ef 93       	push	r30
    19d2:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    19d4:	e0 91 f6 1a 	lds	r30, 0x1AF6	; 0x801af6 <Serial1+0x10>
    19d8:	f0 91 f7 1a 	lds	r31, 0x1AF7	; 0x801af7 <Serial1+0x11>
    19dc:	80 81       	ld	r24, Z
    19de:	e0 91 fc 1a 	lds	r30, 0x1AFC	; 0x801afc <Serial1+0x16>
    19e2:	f0 91 fd 1a 	lds	r31, 0x1AFD	; 0x801afd <Serial1+0x17>
    19e6:	82 fd       	sbrc	r24, 2
    19e8:	1d c0       	rjmp	.+58     	; 0x1a24 <__vector_36+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    19ea:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    19ec:	80 91 ff 1a 	lds	r24, 0x1AFF	; 0x801aff <Serial1+0x19>
    19f0:	8f 5f       	subi	r24, 0xFF	; 255
    19f2:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    19f4:	20 91 00 1b 	lds	r18, 0x1B00	; 0x801b00 <Serial1+0x1a>
    19f8:	82 17       	cp	r24, r18
    19fa:	41 f0       	breq	.+16     	; 0x1a0c <__vector_36+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    19fc:	e0 91 ff 1a 	lds	r30, 0x1AFF	; 0x801aff <Serial1+0x19>
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	ea 51       	subi	r30, 0x1A	; 26
    1a04:	f5 4e       	sbci	r31, 0xE5	; 229
    1a06:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1a08:	80 93 ff 1a 	sts	0x1AFF, r24	; 0x801aff <Serial1+0x19>
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	9f 91       	pop	r25
    1a12:	8f 91       	pop	r24
    1a14:	2f 91       	pop	r18
    1a16:	0f 90       	pop	r0
    1a18:	0b be       	out	0x3b, r0	; 59
    1a1a:	0f 90       	pop	r0
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	0f 90       	pop	r0
    1a20:	1f 90       	pop	r1
    1a22:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1a24:	80 81       	ld	r24, Z
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    1a26:	f2 cf       	rjmp	.-28     	; 0x1a0c <__vector_36+0x50>

00001a28 <__vector_37>:
__vector_37():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	0b b6       	in	r0, 0x3b	; 59
    1a34:	0f 92       	push	r0
    1a36:	2f 93       	push	r18
    1a38:	3f 93       	push	r19
    1a3a:	4f 93       	push	r20
    1a3c:	5f 93       	push	r21
    1a3e:	6f 93       	push	r22
    1a40:	7f 93       	push	r23
    1a42:	8f 93       	push	r24
    1a44:	9f 93       	push	r25
    1a46:	af 93       	push	r26
    1a48:	bf 93       	push	r27
    1a4a:	ef 93       	push	r30
    1a4c:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    1a4e:	86 ee       	ldi	r24, 0xE6	; 230
    1a50:	9a e1       	ldi	r25, 0x1A	; 26
    1a52:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	bf 91       	pop	r27
    1a5c:	af 91       	pop	r26
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	7f 91       	pop	r23
    1a64:	6f 91       	pop	r22
    1a66:	5f 91       	pop	r21
    1a68:	4f 91       	pop	r20
    1a6a:	3f 91       	pop	r19
    1a6c:	2f 91       	pop	r18
    1a6e:	0f 90       	pop	r0
    1a70:	0b be       	out	0x3b, r0	; 59
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	0f 90       	pop	r0
    1a78:	1f 90       	pop	r1
    1a7a:	18 95       	reti

00001a7c <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1a7c:	86 ee       	ldi	r24, 0xE6	; 230
    1a7e:	9a e1       	ldi	r25, 0x1A	; 26
    1a80:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
    1a84:	21 e0       	ldi	r18, 0x01	; 1
    1a86:	89 2b       	or	r24, r25
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <Serial1_available()+0x10>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    1a8c:	82 2f       	mov	r24, r18
    1a8e:	08 95       	ret

00001a90 <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1a90:	e6 ee       	ldi	r30, 0xE6	; 230
    1a92:	fa e1       	ldi	r31, 0x1A	; 26
    1a94:	13 82       	std	Z+3, r1	; 0x03
    1a96:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1a98:	88 ee       	ldi	r24, 0xE8	; 232
    1a9a:	93 e0       	ldi	r25, 0x03	; 3
    1a9c:	a0 e0       	ldi	r26, 0x00	; 0
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	84 83       	std	Z+4, r24	; 0x04
    1aa2:	95 83       	std	Z+5, r25	; 0x05
    1aa4:	a6 83       	std	Z+6, r26	; 0x06
    1aa6:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1aa8:	80 e6       	ldi	r24, 0x60	; 96
    1aaa:	92 e0       	ldi	r25, 0x02	; 2
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
    1ab0:	8d ec       	ldi	r24, 0xCD	; 205
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	95 87       	std	Z+13, r25	; 0x0d
    1ab6:	84 87       	std	Z+12, r24	; 0x0c
    1ab8:	8c ec       	ldi	r24, 0xCC	; 204
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	97 87       	std	Z+15, r25	; 0x0f
    1abe:	86 87       	std	Z+14, r24	; 0x0e
    1ac0:	88 ec       	ldi	r24, 0xC8	; 200
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	91 8b       	std	Z+17, r25	; 0x11
    1ac6:	80 8b       	std	Z+16, r24	; 0x10
    1ac8:	89 ec       	ldi	r24, 0xC9	; 201
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	93 8b       	std	Z+19, r25	; 0x13
    1ace:	82 8b       	std	Z+18, r24	; 0x12
    1ad0:	8a ec       	ldi	r24, 0xCA	; 202
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	95 8b       	std	Z+21, r25	; 0x15
    1ad6:	84 8b       	std	Z+20, r24	; 0x14
    1ad8:	8e ec       	ldi	r24, 0xCE	; 206
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	97 8b       	std	Z+23, r25	; 0x17
    1ade:	86 8b       	std	Z+22, r24	; 0x16
    1ae0:	11 8e       	std	Z+25, r1	; 0x19
    1ae2:	12 8e       	std	Z+26, r1	; 0x1a
    1ae4:	13 8e       	std	Z+27, r1	; 0x1b
    1ae6:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    1ae8:	08 95       	ret

00001aea <__vector_51>:
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:40
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    1aea:	1f 92       	push	r1
    1aec:	0f 92       	push	r0
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	0f 92       	push	r0
    1af2:	11 24       	eor	r1, r1
    1af4:	0b b6       	in	r0, 0x3b	; 59
    1af6:	0f 92       	push	r0
    1af8:	2f 93       	push	r18
    1afa:	8f 93       	push	r24
    1afc:	9f 93       	push	r25
    1afe:	ef 93       	push	r30
    1b00:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1b02:	e0 91 93 1b 	lds	r30, 0x1B93	; 0x801b93 <Serial2+0x10>
    1b06:	f0 91 94 1b 	lds	r31, 0x1B94	; 0x801b94 <Serial2+0x11>
    1b0a:	80 81       	ld	r24, Z
    1b0c:	e0 91 99 1b 	lds	r30, 0x1B99	; 0x801b99 <Serial2+0x16>
    1b10:	f0 91 9a 1b 	lds	r31, 0x1B9A	; 0x801b9a <Serial2+0x17>
    1b14:	82 fd       	sbrc	r24, 2
    1b16:	1d c0       	rjmp	.+58     	; 0x1b52 <__vector_51+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1b18:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1b1a:	80 91 9c 1b 	lds	r24, 0x1B9C	; 0x801b9c <Serial2+0x19>
    1b1e:	8f 5f       	subi	r24, 0xFF	; 255
    1b20:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1b22:	20 91 9d 1b 	lds	r18, 0x1B9D	; 0x801b9d <Serial2+0x1a>
    1b26:	82 17       	cp	r24, r18
    1b28:	41 f0       	breq	.+16     	; 0x1b3a <__vector_51+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1b2a:	e0 91 9c 1b 	lds	r30, 0x1B9C	; 0x801b9c <Serial2+0x19>
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	ed 57       	subi	r30, 0x7D	; 125
    1b32:	f4 4e       	sbci	r31, 0xE4	; 228
    1b34:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1b36:	80 93 9c 1b 	sts	0x1B9C, r24	; 0x801b9c <Serial2+0x19>
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
  Serial2._rx_complete_irq();
}
    1b3a:	ff 91       	pop	r31
    1b3c:	ef 91       	pop	r30
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	2f 91       	pop	r18
    1b44:	0f 90       	pop	r0
    1b46:	0b be       	out	0x3b, r0	; 59
    1b48:	0f 90       	pop	r0
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	0f 90       	pop	r0
    1b4e:	1f 90       	pop	r1
    1b50:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1b52:	80 81       	ld	r24, Z
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
    1b54:	f2 cf       	rjmp	.-28     	; 0x1b3a <__vector_51+0x50>

00001b56 <__vector_52>:
__vector_52():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:45

ISR(USART2_UDRE_vect)
{
    1b56:	1f 92       	push	r1
    1b58:	0f 92       	push	r0
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	0f 92       	push	r0
    1b5e:	11 24       	eor	r1, r1
    1b60:	0b b6       	in	r0, 0x3b	; 59
    1b62:	0f 92       	push	r0
    1b64:	2f 93       	push	r18
    1b66:	3f 93       	push	r19
    1b68:	4f 93       	push	r20
    1b6a:	5f 93       	push	r21
    1b6c:	6f 93       	push	r22
    1b6e:	7f 93       	push	r23
    1b70:	8f 93       	push	r24
    1b72:	9f 93       	push	r25
    1b74:	af 93       	push	r26
    1b76:	bf 93       	push	r27
    1b78:	ef 93       	push	r30
    1b7a:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:46
  Serial2._tx_udr_empty_irq();
    1b7c:	83 e8       	ldi	r24, 0x83	; 131
    1b7e:	9b e1       	ldi	r25, 0x1B	; 27
    1b80:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:47
}
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	7f 91       	pop	r23
    1b92:	6f 91       	pop	r22
    1b94:	5f 91       	pop	r21
    1b96:	4f 91       	pop	r20
    1b98:	3f 91       	pop	r19
    1b9a:	2f 91       	pop	r18
    1b9c:	0f 90       	pop	r0
    1b9e:	0b be       	out	0x3b, r0	; 59
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	0f 90       	pop	r0
    1ba6:	1f 90       	pop	r1
    1ba8:	18 95       	reti

00001baa <Serial2_available()>:
_Z17Serial2_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:54
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    1baa:	83 e8       	ldi	r24, 0x83	; 131
    1bac:	9b e1       	ldi	r25, 0x1B	; 27
    1bae:	0e 94 8b 0b 	call	0x1716	; 0x1716 <HardwareSerial::available()>
    1bb2:	21 e0       	ldi	r18, 0x01	; 1
    1bb4:	89 2b       	or	r24, r25
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <Serial2_available()+0x10>
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
}
    1bba:	82 2f       	mov	r24, r18
    1bbc:	08 95       	ret

00001bbe <_GLOBAL__sub_I___vector_51>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    1bbe:	e3 e8       	ldi	r30, 0x83	; 131
    1bc0:	fb e1       	ldi	r31, 0x1B	; 27
    1bc2:	13 82       	std	Z+3, r1	; 0x03
    1bc4:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
    1bc6:	88 ee       	ldi	r24, 0xE8	; 232
    1bc8:	93 e0       	ldi	r25, 0x03	; 3
    1bca:	a0 e0       	ldi	r26, 0x00	; 0
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	84 83       	std	Z+4, r24	; 0x04
    1bd0:	95 83       	std	Z+5, r25	; 0x05
    1bd2:	a6 83       	std	Z+6, r26	; 0x06
    1bd4:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1bd6:	80 e6       	ldi	r24, 0x60	; 96
    1bd8:	92 e0       	ldi	r25, 0x02	; 2
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
    1bde:	85 ed       	ldi	r24, 0xD5	; 213
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	95 87       	std	Z+13, r25	; 0x0d
    1be4:	84 87       	std	Z+12, r24	; 0x0c
    1be6:	84 ed       	ldi	r24, 0xD4	; 212
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	97 87       	std	Z+15, r25	; 0x0f
    1bec:	86 87       	std	Z+14, r24	; 0x0e
    1bee:	80 ed       	ldi	r24, 0xD0	; 208
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	91 8b       	std	Z+17, r25	; 0x11
    1bf4:	80 8b       	std	Z+16, r24	; 0x10
    1bf6:	81 ed       	ldi	r24, 0xD1	; 209
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	93 8b       	std	Z+19, r25	; 0x13
    1bfc:	82 8b       	std	Z+18, r24	; 0x12
    1bfe:	82 ed       	ldi	r24, 0xD2	; 210
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	95 8b       	std	Z+21, r25	; 0x15
    1c04:	84 8b       	std	Z+20, r24	; 0x14
    1c06:	86 ed       	ldi	r24, 0xD6	; 214
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	97 8b       	std	Z+23, r25	; 0x17
    1c0c:	86 8b       	std	Z+22, r24	; 0x16
    1c0e:	11 8e       	std	Z+25, r1	; 0x19
    1c10:	12 8e       	std	Z+26, r1	; 0x1a
    1c12:	13 8e       	std	Z+27, r1	; 0x1b
    1c14:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
    1c16:	08 95       	ret

00001c18 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:123
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	6c 01       	movw	r12, r24
    1c2e:	7b 01       	movw	r14, r22
    1c30:	8b 01       	movw	r16, r22
    1c32:	04 0f       	add	r16, r20
    1c34:	15 1f       	adc	r17, r21
    1c36:	eb 01       	movw	r28, r22
    1c38:	5e 01       	movw	r10, r28
    1c3a:	ae 18       	sub	r10, r14
    1c3c:	bf 08       	sbc	r11, r15
    1c3e:	c0 17       	cp	r28, r16
    1c40:	d1 07       	cpc	r29, r17
    1c42:	59 f0       	breq	.+22     	; 0x1c5a <Print::write(unsigned char const*, unsigned int)+0x42>
    1c44:	69 91       	ld	r22, Y+
    1c46:	d6 01       	movw	r26, r12
    1c48:	ed 91       	ld	r30, X+
    1c4a:	fc 91       	ld	r31, X
    1c4c:	01 90       	ld	r0, Z+
    1c4e:	f0 81       	ld	r31, Z
    1c50:	e0 2d       	mov	r30, r0
    1c52:	c6 01       	movw	r24, r12
    1c54:	19 95       	eicall
    1c56:	89 2b       	or	r24, r25
    1c58:	79 f7       	brne	.-34     	; 0x1c38 <Print::write(unsigned char const*, unsigned int)+0x20>
    1c5a:	c5 01       	movw	r24, r10
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	08 95       	ret

00001c72 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1c72:	fb 01       	movw	r30, r22
    1c74:	01 90       	ld	r0, Z+
    1c76:	00 20       	and	r0, r0
    1c78:	e9 f7       	brne	.-6      	; 0x1c74 <Print::write(char const*) [clone .part.2]+0x2>
    1c7a:	31 97       	sbiw	r30, 0x01	; 1
    1c7c:	af 01       	movw	r20, r30
    1c7e:	46 1b       	sub	r20, r22
    1c80:	57 0b       	sbc	r21, r23
    1c82:	dc 01       	movw	r26, r24
    1c84:	ed 91       	ld	r30, X+
    1c86:	fc 91       	ld	r31, X
    1c88:	02 80       	ldd	r0, Z+2	; 0x02
    1c8a:	f3 81       	ldd	r31, Z+3	; 0x03
    1c8c:	e0 2d       	mov	r30, r0
    1c8e:	19 94       	eijmp

00001c90 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    1c90:	ef 92       	push	r14
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	8c 01       	movw	r16, r24
    1c9e:	7b 01       	movw	r14, r22
    1ca0:	d0 e0       	ldi	r29, 0x00	; 0
    1ca2:	c0 e0       	ldi	r28, 0x00	; 0
    1ca4:	f7 01       	movw	r30, r14
    1ca6:	ec 0f       	add	r30, r28
    1ca8:	fd 1f       	adc	r31, r29
    1caa:	64 91       	lpm	r22, Z
    1cac:	66 23       	and	r22, r22
    1cae:	61 f0       	breq	.+24     	; 0x1cc8 <Print::print(__FlashStringHelper const*)+0x38>
    1cb0:	d8 01       	movw	r26, r16
    1cb2:	ed 91       	ld	r30, X+
    1cb4:	fc 91       	ld	r31, X
    1cb6:	01 90       	ld	r0, Z+
    1cb8:	f0 81       	ld	r31, Z
    1cba:	e0 2d       	mov	r30, r0
    1cbc:	c8 01       	movw	r24, r16
    1cbe:	19 95       	eicall
    1cc0:	89 2b       	or	r24, r25
    1cc2:	11 f0       	breq	.+4      	; 0x1cc8 <Print::print(__FlashStringHelper const*)+0x38>
    1cc4:	21 96       	adiw	r28, 0x01	; 1
    1cc6:	ee cf       	rjmp	.-36     	; 0x1ca4 <Print::print(__FlashStringHelper const*)+0x14>
    1cc8:	ce 01       	movw	r24, r28
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	08 95       	ret

00001cd8 <Print::println()>:
_ZN5Print5writeEPKc():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:127
}

size_t Print::println(void)
{
    1cd8:	6e e6       	ldi	r22, 0x6E	; 110
    1cda:	72 e0       	ldi	r23, 0x02	; 2
    1cdc:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <Print::write(char const*) [clone .part.2]>

00001ce0 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:115
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:116
  size_t n = print(ifsh);
    1cea:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <Print::print(__FlashStringHelper const*)>
    1cee:	8c 01       	movw	r16, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:117
  n += println();
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <Print::println()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:119
  return n;
}
    1cf6:	80 0f       	add	r24, r16
    1cf8:	91 1f       	adc	r25, r17
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	08 95       	ret

00001d04 <initVariant>:
initVariant():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1d04:	08 95       	ret

00001d06 <main>:
main():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1d06:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <init>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1d0a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <initVariant>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1d0e:	0e 94 41 0a 	call	0x1482	; 0x1482 <setup>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1d12:	c8 ec       	ldi	r28, 0xC8	; 200
    1d14:	db e0       	ldi	r29, 0x0B	; 11
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1d16:	0e 94 6d 0b 	call	0x16da	; 0x16da <loop>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1d1a:	20 97       	sbiw	r28, 0x00	; 0
    1d1c:	e1 f3       	breq	.-8      	; 0x1d16 <main+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1d1e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <serialEventRun()>
    1d22:	f9 cf       	rjmp	.-14     	; 0x1d16 <main+0x10>

00001d24 <__vector_23>:
__vector_23():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1d24:	1f 92       	push	r1
    1d26:	0f 92       	push	r0
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	8f 93       	push	r24
    1d34:	9f 93       	push	r25
    1d36:	af 93       	push	r26
    1d38:	bf 93       	push	r27
    1d3a:	80 91 25 1c 	lds	r24, 0x1C25	; 0x801c25 <timer0_millis>
    1d3e:	90 91 26 1c 	lds	r25, 0x1C26	; 0x801c26 <timer0_millis+0x1>
    1d42:	a0 91 27 1c 	lds	r26, 0x1C27	; 0x801c27 <timer0_millis+0x2>
    1d46:	b0 91 28 1c 	lds	r27, 0x1C28	; 0x801c28 <timer0_millis+0x3>
    1d4a:	30 91 24 1c 	lds	r19, 0x1C24	; 0x801c24 <timer0_fract>
    1d4e:	26 e0       	ldi	r18, 0x06	; 6
    1d50:	23 0f       	add	r18, r19
    1d52:	2d 37       	cpi	r18, 0x7D	; 125
    1d54:	68 f1       	brcs	.+90     	; 0x1db0 <__vector_23+0x8c>
    1d56:	29 e8       	ldi	r18, 0x89	; 137
    1d58:	23 0f       	add	r18, r19
    1d5a:	03 96       	adiw	r24, 0x03	; 3
    1d5c:	a1 1d       	adc	r26, r1
    1d5e:	b1 1d       	adc	r27, r1
    1d60:	20 93 24 1c 	sts	0x1C24, r18	; 0x801c24 <timer0_fract>
    1d64:	80 93 25 1c 	sts	0x1C25, r24	; 0x801c25 <timer0_millis>
    1d68:	90 93 26 1c 	sts	0x1C26, r25	; 0x801c26 <timer0_millis+0x1>
    1d6c:	a0 93 27 1c 	sts	0x1C27, r26	; 0x801c27 <timer0_millis+0x2>
    1d70:	b0 93 28 1c 	sts	0x1C28, r27	; 0x801c28 <timer0_millis+0x3>
    1d74:	80 91 20 1c 	lds	r24, 0x1C20	; 0x801c20 <timer0_overflow_count>
    1d78:	90 91 21 1c 	lds	r25, 0x1C21	; 0x801c21 <timer0_overflow_count+0x1>
    1d7c:	a0 91 22 1c 	lds	r26, 0x1C22	; 0x801c22 <timer0_overflow_count+0x2>
    1d80:	b0 91 23 1c 	lds	r27, 0x1C23	; 0x801c23 <timer0_overflow_count+0x3>
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	a1 1d       	adc	r26, r1
    1d88:	b1 1d       	adc	r27, r1
    1d8a:	80 93 20 1c 	sts	0x1C20, r24	; 0x801c20 <timer0_overflow_count>
    1d8e:	90 93 21 1c 	sts	0x1C21, r25	; 0x801c21 <timer0_overflow_count+0x1>
    1d92:	a0 93 22 1c 	sts	0x1C22, r26	; 0x801c22 <timer0_overflow_count+0x2>
    1d96:	b0 93 23 1c 	sts	0x1C23, r27	; 0x801c23 <timer0_overflow_count+0x3>
    1d9a:	bf 91       	pop	r27
    1d9c:	af 91       	pop	r26
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	3f 91       	pop	r19
    1da4:	2f 91       	pop	r18
    1da6:	0f 90       	pop	r0
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	0f 90       	pop	r0
    1dac:	1f 90       	pop	r1
    1dae:	18 95       	reti
    1db0:	02 96       	adiw	r24, 0x02	; 2
    1db2:	a1 1d       	adc	r26, r1
    1db4:	b1 1d       	adc	r27, r1
    1db6:	d4 cf       	rjmp	.-88     	; 0x1d60 <__vector_23+0x3c>

00001db8 <millis>:
millis():
    1db8:	2f b7       	in	r18, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	60 91 25 1c 	lds	r22, 0x1C25	; 0x801c25 <timer0_millis>
    1dc0:	70 91 26 1c 	lds	r23, 0x1C26	; 0x801c26 <timer0_millis+0x1>
    1dc4:	80 91 27 1c 	lds	r24, 0x1C27	; 0x801c27 <timer0_millis+0x2>
    1dc8:	90 91 28 1c 	lds	r25, 0x1C28	; 0x801c28 <timer0_millis+0x3>
    1dcc:	2f bf       	out	0x3f, r18	; 63
    1dce:	08 95       	ret

00001dd0 <init>:
init():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1dd0:	78 94       	sei
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1dd2:	84 b5       	in	r24, 0x24	; 36
    1dd4:	83 60       	ori	r24, 0x03	; 3
    1dd6:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1dd8:	85 b5       	in	r24, 0x25	; 37
    1dda:	83 60       	ori	r24, 0x03	; 3
    1ddc:	85 bd       	out	0x25, r24	; 37
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1dde:	ee e6       	ldi	r30, 0x6E	; 110
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	81 60       	ori	r24, 0x01	; 1
    1de6:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1de8:	e1 e8       	ldi	r30, 0x81	; 129
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1df0:	80 81       	ld	r24, Z
    1df2:	81 60       	ori	r24, 0x01	; 1
    1df4:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1df6:	e0 e8       	ldi	r30, 0x80	; 128
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	81 60       	ori	r24, 0x01	; 1
    1dfe:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1e00:	e1 eb       	ldi	r30, 0xB1	; 177
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	84 60       	ori	r24, 0x04	; 4
    1e08:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1e0a:	e0 eb       	ldi	r30, 0xB0	; 176
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	81 60       	ori	r24, 0x01	; 1
    1e12:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    1e14:	e1 e9       	ldi	r30, 0x91	; 145
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	83 60       	ori	r24, 0x03	; 3
    1e1c:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    1e1e:	e0 e9       	ldi	r30, 0x90	; 144
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	81 60       	ori	r24, 0x01	; 1
    1e26:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    1e28:	e1 ea       	ldi	r30, 0xA1	; 161
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	83 60       	ori	r24, 0x03	; 3
    1e30:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    1e32:	e0 ea       	ldi	r30, 0xA0	; 160
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	81 60       	ori	r24, 0x01	; 1
    1e3a:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    1e3c:	e1 e2       	ldi	r30, 0x21	; 33
    1e3e:	f1 e0       	ldi	r31, 0x01	; 1
    1e40:	80 81       	ld	r24, Z
    1e42:	83 60       	ori	r24, 0x03	; 3
    1e44:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    1e46:	e0 e2       	ldi	r30, 0x20	; 32
    1e48:	f1 e0       	ldi	r31, 0x01	; 1
    1e4a:	80 81       	ld	r24, Z
    1e4c:	81 60       	ori	r24, 0x01	; 1
    1e4e:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    1e50:	86 e8       	ldi	r24, 0x86	; 134
    1e52:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1e56:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    1e5a:	08 95       	ret

00001e5c <turnOffPWM>:
turnOffPWM():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    1e5c:	82 50       	subi	r24, 0x02	; 2
    1e5e:	82 31       	cpi	r24, 0x12	; 18
    1e60:	08 f0       	brcs	.+2      	; 0x1e64 <turnOffPWM+0x8>
    1e62:	5f c0       	rjmp	.+190    	; 0x1f22 <turnOffPWM+0xc6>
    1e64:	e8 2f       	mov	r30, r24
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	88 27       	eor	r24, r24
    1e6a:	e6 5c       	subi	r30, 0xC6	; 198
    1e6c:	f0 4f       	sbci	r31, 0xF0	; 240
    1e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e70:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__tablejump2__>
    1e74:	8e 0f       	add	r24, r30
    1e76:	92 0f       	add	r25, r18
    1e78:	4c 0f       	add	r20, r28
    1e7a:	52 0f       	add	r21, r18
    1e7c:	56 0f       	add	r21, r22
    1e7e:	91 0f       	add	r25, r17
    1e80:	5a 0f       	add	r21, r26
    1e82:	60 0f       	add	r22, r16
    1e84:	64 0f       	add	r22, r20
    1e86:	6a 0f       	add	r22, r26
    1e88:	6e 0f       	add	r22, r30
    1e8a:	72 0f       	add	r23, r18
    1e8c:	78 0f       	add	r23, r24
    1e8e:	7c 0f       	add	r23, r28
    1e90:	91 0f       	add	r25, r17
    1e92:	80 0f       	add	r24, r16
    1e94:	86 0f       	add	r24, r22
    1e96:	8a 0f       	add	r24, r26
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1e98:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1e9c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1e9e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    1ea2:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1ea4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1ea8:	8f 7d       	andi	r24, 0xDF	; 223
    1eaa:	f9 cf       	rjmp	.-14     	; 0x1e9e <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    1eac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1eb0:	87 7f       	andi	r24, 0xF7	; 247
    1eb2:	f5 cf       	rjmp	.-22     	; 0x1e9e <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    1eb4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1eb8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1eba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    1ebe:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1ec0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1ec4:	8f 7d       	andi	r24, 0xDF	; 223
    1ec6:	f9 cf       	rjmp	.-14     	; 0x1eba <turnOffPWM+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    1ec8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1ecc:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    1ece:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    1ed2:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    1ed4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1ed8:	8f 7d       	andi	r24, 0xDF	; 223
    1eda:	f9 cf       	rjmp	.-14     	; 0x1ece <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    1edc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1ee0:	87 7f       	andi	r24, 0xF7	; 247
    1ee2:	f5 cf       	rjmp	.-22     	; 0x1ece <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    1ee4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1ee8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    1eea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    1eee:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    1ef0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1ef4:	8f 7d       	andi	r24, 0xDF	; 223
    1ef6:	f9 cf       	rjmp	.-14     	; 0x1eea <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    1ef8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1efc:	87 7f       	andi	r24, 0xF7	; 247
    1efe:	f5 cf       	rjmp	.-22     	; 0x1eea <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    1f00:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1f04:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    1f06:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    1f0a:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    1f0c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1f10:	8f 7d       	andi	r24, 0xDF	; 223
    1f12:	f9 cf       	rjmp	.-14     	; 0x1f06 <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    1f14:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1f18:	87 7f       	andi	r24, 0xF7	; 247
    1f1a:	f5 cf       	rjmp	.-22     	; 0x1f06 <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1f1c:	84 b5       	in	r24, 0x24	; 36
    1f1e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1f20:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1f22:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1f24:	84 b5       	in	r24, 0x24	; 36
    1f26:	8f 7d       	andi	r24, 0xDF	; 223
    1f28:	fb cf       	rjmp	.-10     	; 0x1f20 <turnOffPWM+0xc4>

00001f2a <pinMode>:
pinMode():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	fc 01       	movw	r30, r24
    1f32:	ed 53       	subi	r30, 0x3D	; 61
    1f34:	fd 4f       	sbci	r31, 0xFD	; 253
    1f36:	24 91       	lpm	r18, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1f38:	87 5e       	subi	r24, 0xE7	; 231
    1f3a:	9c 4f       	sbci	r25, 0xFC	; 252
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1f40:	88 23       	and	r24, r24
    1f42:	c9 f0       	breq	.+50     	; 0x1f76 <pinMode+0x4c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e7 57       	subi	r30, 0x77	; 119
    1f4e:	fc 4f       	sbci	r31, 0xFC	; 252
    1f50:	a5 91       	lpm	r26, Z+
    1f52:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1f54:	fc 01       	movw	r30, r24
    1f56:	e1 59       	subi	r30, 0x91	; 145
    1f58:	fc 4f       	sbci	r31, 0xFC	; 252
    1f5a:	c5 91       	lpm	r28, Z+
    1f5c:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1f5e:	61 11       	cpse	r22, r1
    1f60:	0d c0       	rjmp	.+26     	; 0x1f7c <pinMode+0x52>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1f62:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1f64:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1f66:	8c 91       	ld	r24, X
    1f68:	20 95       	com	r18
    1f6a:	82 23       	and	r24, r18
    1f6c:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1f6e:	88 81       	ld	r24, Y
    1f70:	28 23       	and	r18, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1f72:	28 83       	st	Y, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1f74:	9f bf       	out	0x3f, r25	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1f7c:	62 30       	cpi	r22, 0x02	; 2
    1f7e:	51 f4       	brne	.+20     	; 0x1f94 <pinMode+0x6a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1f80:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1f82:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1f84:	3c 91       	ld	r19, X
    1f86:	82 2f       	mov	r24, r18
    1f88:	80 95       	com	r24
    1f8a:	83 23       	and	r24, r19
    1f8c:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1f8e:	e8 81       	ld	r30, Y
    1f90:	2e 2b       	or	r18, r30
    1f92:	ef cf       	rjmp	.-34     	; 0x1f72 <pinMode+0x48>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1f94:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1f96:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1f98:	ec 91       	ld	r30, X
    1f9a:	2e 2b       	or	r18, r30
    1f9c:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1f9e:	8f bf       	out	0x3f, r24	; 63
    1fa0:	ea cf       	rjmp	.-44     	; 0x1f76 <pinMode+0x4c>

00001fa2 <digitalWrite>:
digitalWrite():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	f9 01       	movw	r30, r18
    1fae:	e3 59       	subi	r30, 0x93	; 147
    1fb0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fb2:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1fb4:	f9 01       	movw	r30, r18
    1fb6:	ed 53       	subi	r30, 0x3D	; 61
    1fb8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fba:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	e7 5e       	subi	r30, 0xE7	; 231
    1fc0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc2:	c4 91       	lpm	r28, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1fc4:	cc 23       	and	r28, r28
    1fc6:	a9 f0       	breq	.+42     	; 0x1ff2 <digitalWrite+0x50>
    1fc8:	16 2f       	mov	r17, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1fca:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1fcc:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <turnOffPWM>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1fd0:	ec 2f       	mov	r30, r28
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	ee 0f       	add	r30, r30
    1fd6:	ff 1f       	adc	r31, r31
    1fd8:	e1 59       	subi	r30, 0x91	; 145
    1fda:	fc 4f       	sbci	r31, 0xFC	; 252
    1fdc:	a5 91       	lpm	r26, Z+
    1fde:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1fe0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    1fe2:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1fe4:	ec 91       	ld	r30, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1fe6:	11 11       	cpse	r17, r1
    1fe8:	08 c0       	rjmp	.+16     	; 0x1ffa <digitalWrite+0x58>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1fea:	d0 95       	com	r29
    1fec:	de 23       	and	r29, r30
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1fee:	dc 93       	st	X, r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1ff0:	8f bf       	out	0x3f, r24	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1ffa:	de 2b       	or	r29, r30
    1ffc:	f8 cf       	rjmp	.-16     	; 0x1fee <digitalWrite+0x4c>

00001ffe <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1ffe:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2000:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2002:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2004:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2006:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2008:	0d c0       	rjmp	.+26     	; 0x2024 <__udivmodsi4_ep>

0000200a <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    200a:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    200c:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    200e:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2010:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2012:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2014:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2016:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2018:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    201a:	20 f0       	brcs	.+8      	; 0x2024 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    201c:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    201e:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2020:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2022:	f5 0b       	sbc	r31, r21

00002024 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2024:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2026:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2028:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    202a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    202c:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    202e:	69 f7       	brne	.-38     	; 0x200a <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    2030:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2032:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2034:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2036:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    2038:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    203a:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    203c:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    203e:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    2040:	08 95       	ret

00002042 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2042:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2044:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    2046:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    2048:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    204a:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    204c:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    204e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2050:	19 94       	eijmp

00002052 <malloc>:
malloc():
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	82 30       	cpi	r24, 0x02	; 2
    205c:	91 05       	cpc	r25, r1
    205e:	10 f4       	brcc	.+4      	; 0x2064 <malloc+0x12>
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	e0 91 2b 1c 	lds	r30, 0x1C2B	; 0x801c2b <__flp>
    2068:	f0 91 2c 1c 	lds	r31, 0x1C2C	; 0x801c2c <__flp+0x1>
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	30 97       	sbiw	r30, 0x00	; 0
    2076:	99 f4       	brne	.+38     	; 0x209e <malloc+0x4c>
    2078:	21 15       	cp	r18, r1
    207a:	31 05       	cpc	r19, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <malloc+0x2e>
    207e:	4a c0       	rjmp	.+148    	; 0x2114 <malloc+0xc2>
    2080:	28 1b       	sub	r18, r24
    2082:	39 0b       	sbc	r19, r25
    2084:	24 30       	cpi	r18, 0x04	; 4
    2086:	31 05       	cpc	r19, r1
    2088:	d8 f5       	brcc	.+118    	; 0x2100 <malloc+0xae>
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	9b 81       	ldd	r25, Y+3	; 0x03
    208e:	61 15       	cp	r22, r1
    2090:	71 05       	cpc	r23, r1
    2092:	89 f1       	breq	.+98     	; 0x20f6 <malloc+0xa4>
    2094:	fb 01       	movw	r30, r22
    2096:	93 83       	std	Z+3, r25	; 0x03
    2098:	82 83       	std	Z+2, r24	; 0x02
    209a:	fe 01       	movw	r30, r28
    209c:	11 c0       	rjmp	.+34     	; 0x20c0 <malloc+0x6e>
    209e:	40 81       	ld	r20, Z
    20a0:	51 81       	ldd	r21, Z+1	; 0x01
    20a2:	02 81       	ldd	r16, Z+2	; 0x02
    20a4:	13 81       	ldd	r17, Z+3	; 0x03
    20a6:	48 17       	cp	r20, r24
    20a8:	59 07       	cpc	r21, r25
    20aa:	e0 f0       	brcs	.+56     	; 0x20e4 <malloc+0x92>
    20ac:	48 17       	cp	r20, r24
    20ae:	59 07       	cpc	r21, r25
    20b0:	99 f4       	brne	.+38     	; 0x20d8 <malloc+0x86>
    20b2:	10 97       	sbiw	r26, 0x00	; 0
    20b4:	61 f0       	breq	.+24     	; 0x20ce <malloc+0x7c>
    20b6:	12 96       	adiw	r26, 0x02	; 2
    20b8:	0c 93       	st	X, r16
    20ba:	12 97       	sbiw	r26, 0x02	; 2
    20bc:	13 96       	adiw	r26, 0x03	; 3
    20be:	1c 93       	st	X, r17
    20c0:	32 96       	adiw	r30, 0x02	; 2
    20c2:	cf 01       	movw	r24, r30
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	08 95       	ret
    20ce:	00 93 2b 1c 	sts	0x1C2B, r16	; 0x801c2b <__flp>
    20d2:	10 93 2c 1c 	sts	0x1C2C, r17	; 0x801c2c <__flp+0x1>
    20d6:	f4 cf       	rjmp	.-24     	; 0x20c0 <malloc+0x6e>
    20d8:	21 15       	cp	r18, r1
    20da:	31 05       	cpc	r19, r1
    20dc:	51 f0       	breq	.+20     	; 0x20f2 <malloc+0xa0>
    20de:	42 17       	cp	r20, r18
    20e0:	53 07       	cpc	r21, r19
    20e2:	38 f0       	brcs	.+14     	; 0x20f2 <malloc+0xa0>
    20e4:	a9 01       	movw	r20, r18
    20e6:	db 01       	movw	r26, r22
    20e8:	9a 01       	movw	r18, r20
    20ea:	bd 01       	movw	r22, r26
    20ec:	df 01       	movw	r26, r30
    20ee:	f8 01       	movw	r30, r16
    20f0:	c1 cf       	rjmp	.-126    	; 0x2074 <malloc+0x22>
    20f2:	ef 01       	movw	r28, r30
    20f4:	f9 cf       	rjmp	.-14     	; 0x20e8 <malloc+0x96>
    20f6:	90 93 2c 1c 	sts	0x1C2C, r25	; 0x801c2c <__flp+0x1>
    20fa:	80 93 2b 1c 	sts	0x1C2B, r24	; 0x801c2b <__flp>
    20fe:	cd cf       	rjmp	.-102    	; 0x209a <malloc+0x48>
    2100:	fe 01       	movw	r30, r28
    2102:	e2 0f       	add	r30, r18
    2104:	f3 1f       	adc	r31, r19
    2106:	81 93       	st	Z+, r24
    2108:	91 93       	st	Z+, r25
    210a:	22 50       	subi	r18, 0x02	; 2
    210c:	31 09       	sbc	r19, r1
    210e:	39 83       	std	Y+1, r19	; 0x01
    2110:	28 83       	st	Y, r18
    2112:	d7 cf       	rjmp	.-82     	; 0x20c2 <malloc+0x70>
    2114:	20 91 29 1c 	lds	r18, 0x1C29	; 0x801c29 <__brkval>
    2118:	30 91 2a 1c 	lds	r19, 0x1C2A	; 0x801c2a <__brkval+0x1>
    211c:	23 2b       	or	r18, r19
    211e:	41 f4       	brne	.+16     	; 0x2130 <malloc+0xde>
    2120:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2124:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2128:	30 93 2a 1c 	sts	0x1C2A, r19	; 0x801c2a <__brkval+0x1>
    212c:	20 93 29 1c 	sts	0x1C29, r18	; 0x801c29 <__brkval>
    2130:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2134:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2138:	21 15       	cp	r18, r1
    213a:	31 05       	cpc	r19, r1
    213c:	41 f4       	brne	.+16     	; 0x214e <malloc+0xfc>
    213e:	2d b7       	in	r18, 0x3d	; 61
    2140:	3e b7       	in	r19, 0x3e	; 62
    2142:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2146:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    214a:	24 1b       	sub	r18, r20
    214c:	35 0b       	sbc	r19, r21
    214e:	e0 91 29 1c 	lds	r30, 0x1C29	; 0x801c29 <__brkval>
    2152:	f0 91 2a 1c 	lds	r31, 0x1C2A	; 0x801c2a <__brkval+0x1>
    2156:	e2 17       	cp	r30, r18
    2158:	f3 07       	cpc	r31, r19
    215a:	a0 f4       	brcc	.+40     	; 0x2184 <malloc+0x132>
    215c:	2e 1b       	sub	r18, r30
    215e:	3f 0b       	sbc	r19, r31
    2160:	28 17       	cp	r18, r24
    2162:	39 07       	cpc	r19, r25
    2164:	78 f0       	brcs	.+30     	; 0x2184 <malloc+0x132>
    2166:	ac 01       	movw	r20, r24
    2168:	4e 5f       	subi	r20, 0xFE	; 254
    216a:	5f 4f       	sbci	r21, 0xFF	; 255
    216c:	24 17       	cp	r18, r20
    216e:	35 07       	cpc	r19, r21
    2170:	48 f0       	brcs	.+18     	; 0x2184 <malloc+0x132>
    2172:	4e 0f       	add	r20, r30
    2174:	5f 1f       	adc	r21, r31
    2176:	50 93 2a 1c 	sts	0x1C2A, r21	; 0x801c2a <__brkval+0x1>
    217a:	40 93 29 1c 	sts	0x1C29, r20	; 0x801c29 <__brkval>
    217e:	81 93       	st	Z+, r24
    2180:	91 93       	st	Z+, r25
    2182:	9f cf       	rjmp	.-194    	; 0x20c2 <malloc+0x70>
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	e0 e0       	ldi	r30, 0x00	; 0
    2188:	9c cf       	rjmp	.-200    	; 0x20c2 <malloc+0x70>

0000218a <free>:
free():
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	e9 f0       	breq	.+58     	; 0x21cc <free+0x42>
    2192:	fc 01       	movw	r30, r24
    2194:	32 97       	sbiw	r30, 0x02	; 2
    2196:	13 82       	std	Z+3, r1	; 0x03
    2198:	12 82       	std	Z+2, r1	; 0x02
    219a:	a0 91 2b 1c 	lds	r26, 0x1C2B	; 0x801c2b <__flp>
    219e:	b0 91 2c 1c 	lds	r27, 0x1C2C	; 0x801c2c <__flp+0x1>
    21a2:	ed 01       	movw	r28, r26
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	10 97       	sbiw	r26, 0x00	; 0
    21aa:	a1 f4       	brne	.+40     	; 0x21d4 <free+0x4a>
    21ac:	20 81       	ld	r18, Z
    21ae:	31 81       	ldd	r19, Z+1	; 0x01
    21b0:	82 0f       	add	r24, r18
    21b2:	93 1f       	adc	r25, r19
    21b4:	20 91 29 1c 	lds	r18, 0x1C29	; 0x801c29 <__brkval>
    21b8:	30 91 2a 1c 	lds	r19, 0x1C2A	; 0x801c2a <__brkval+0x1>
    21bc:	28 17       	cp	r18, r24
    21be:	39 07       	cpc	r19, r25
    21c0:	09 f0       	breq	.+2      	; 0x21c4 <free+0x3a>
    21c2:	61 c0       	rjmp	.+194    	; 0x2286 <__stack+0x87>
    21c4:	f0 93 2a 1c 	sts	0x1C2A, r31	; 0x801c2a <__brkval+0x1>
    21c8:	e0 93 29 1c 	sts	0x1C29, r30	; 0x801c29 <__brkval>
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	08 95       	ret
    21d2:	ea 01       	movw	r28, r20
    21d4:	ce 17       	cp	r28, r30
    21d6:	df 07       	cpc	r29, r31
    21d8:	e8 f5       	brcc	.+122    	; 0x2254 <__stack+0x55>
    21da:	4a 81       	ldd	r20, Y+2	; 0x02
    21dc:	5b 81       	ldd	r21, Y+3	; 0x03
    21de:	9e 01       	movw	r18, r28
    21e0:	41 15       	cp	r20, r1
    21e2:	51 05       	cpc	r21, r1
    21e4:	b1 f7       	brne	.-20     	; 0x21d2 <free+0x48>
    21e6:	e9 01       	movw	r28, r18
    21e8:	fb 83       	std	Y+3, r31	; 0x03
    21ea:	ea 83       	std	Y+2, r30	; 0x02
    21ec:	49 91       	ld	r20, Y+
    21ee:	59 91       	ld	r21, Y+
    21f0:	c4 0f       	add	r28, r20
    21f2:	d5 1f       	adc	r29, r21
    21f4:	ec 17       	cp	r30, r28
    21f6:	fd 07       	cpc	r31, r29
    21f8:	61 f4       	brne	.+24     	; 0x2212 <__stack+0x13>
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	02 96       	adiw	r24, 0x02	; 2
    2200:	84 0f       	add	r24, r20
    2202:	95 1f       	adc	r25, r21
    2204:	e9 01       	movw	r28, r18
    2206:	99 83       	std	Y+1, r25	; 0x01
    2208:	88 83       	st	Y, r24
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	9b 83       	std	Y+3, r25	; 0x03
    2210:	8a 83       	std	Y+2, r24	; 0x02
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	e0 e0       	ldi	r30, 0x00	; 0
    2216:	12 96       	adiw	r26, 0x02	; 2
    2218:	8d 91       	ld	r24, X+
    221a:	9c 91       	ld	r25, X
    221c:	13 97       	sbiw	r26, 0x03	; 3
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	b9 f5       	brne	.+110    	; 0x2290 <__stack+0x91>
    2222:	2d 91       	ld	r18, X+
    2224:	3c 91       	ld	r19, X
    2226:	11 97       	sbiw	r26, 0x01	; 1
    2228:	cd 01       	movw	r24, r26
    222a:	02 96       	adiw	r24, 0x02	; 2
    222c:	82 0f       	add	r24, r18
    222e:	93 1f       	adc	r25, r19
    2230:	20 91 29 1c 	lds	r18, 0x1C29	; 0x801c29 <__brkval>
    2234:	30 91 2a 1c 	lds	r19, 0x1C2A	; 0x801c2a <__brkval+0x1>
    2238:	28 17       	cp	r18, r24
    223a:	39 07       	cpc	r19, r25
    223c:	39 f6       	brne	.-114    	; 0x21cc <free+0x42>
    223e:	30 97       	sbiw	r30, 0x00	; 0
    2240:	51 f5       	brne	.+84     	; 0x2296 <__stack+0x97>
    2242:	10 92 2c 1c 	sts	0x1C2C, r1	; 0x801c2c <__flp+0x1>
    2246:	10 92 2b 1c 	sts	0x1C2B, r1	; 0x801c2b <__flp>
    224a:	b0 93 2a 1c 	sts	0x1C2A, r27	; 0x801c2a <__brkval+0x1>
    224e:	a0 93 29 1c 	sts	0x1C29, r26	; 0x801c29 <__brkval>
    2252:	bc cf       	rjmp	.-136    	; 0x21cc <free+0x42>
    2254:	d3 83       	std	Z+3, r29	; 0x03
    2256:	c2 83       	std	Z+2, r28	; 0x02
    2258:	40 81       	ld	r20, Z
    225a:	51 81       	ldd	r21, Z+1	; 0x01
    225c:	84 0f       	add	r24, r20
    225e:	95 1f       	adc	r25, r21
    2260:	c8 17       	cp	r28, r24
    2262:	d9 07       	cpc	r29, r25
    2264:	61 f4       	brne	.+24     	; 0x227e <__stack+0x7f>
    2266:	4e 5f       	subi	r20, 0xFE	; 254
    2268:	5f 4f       	sbci	r21, 0xFF	; 255
    226a:	88 81       	ld	r24, Y
    226c:	99 81       	ldd	r25, Y+1	; 0x01
    226e:	48 0f       	add	r20, r24
    2270:	59 1f       	adc	r21, r25
    2272:	51 83       	std	Z+1, r21	; 0x01
    2274:	40 83       	st	Z, r20
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	9b 81       	ldd	r25, Y+3	; 0x03
    227a:	93 83       	std	Z+3, r25	; 0x03
    227c:	82 83       	std	Z+2, r24	; 0x02
    227e:	21 15       	cp	r18, r1
    2280:	31 05       	cpc	r19, r1
    2282:	09 f0       	breq	.+2      	; 0x2286 <__stack+0x87>
    2284:	b0 cf       	rjmp	.-160    	; 0x21e6 <free+0x5c>
    2286:	f0 93 2c 1c 	sts	0x1C2C, r31	; 0x801c2c <__flp+0x1>
    228a:	e0 93 2b 1c 	sts	0x1C2B, r30	; 0x801c2b <__flp>
    228e:	9e cf       	rjmp	.-196    	; 0x21cc <free+0x42>
    2290:	fd 01       	movw	r30, r26
    2292:	dc 01       	movw	r26, r24
    2294:	c0 cf       	rjmp	.-128    	; 0x2216 <__stack+0x17>
    2296:	13 82       	std	Z+3, r1	; 0x03
    2298:	12 82       	std	Z+2, r1	; 0x02
    229a:	d7 cf       	rjmp	.-82     	; 0x224a <__stack+0x4b>

0000229c <strcat>:
strcat():
    229c:	fb 01       	movw	r30, r22
    229e:	dc 01       	movw	r26, r24
    22a0:	0d 90       	ld	r0, X+
    22a2:	00 20       	and	r0, r0
    22a4:	e9 f7       	brne	.-6      	; 0x22a0 <strcat+0x4>
    22a6:	11 97       	sbiw	r26, 0x01	; 1
    22a8:	01 90       	ld	r0, Z+
    22aa:	0d 92       	st	X+, r0
    22ac:	00 20       	and	r0, r0
    22ae:	e1 f7       	brne	.-8      	; 0x22a8 <strcat+0xc>
    22b0:	08 95       	ret

000022b2 <strchr>:
strchr():
    22b2:	fc 01       	movw	r30, r24
    22b4:	81 91       	ld	r24, Z+
    22b6:	86 17       	cp	r24, r22
    22b8:	21 f0       	breq	.+8      	; 0x22c2 <strchr+0x10>
    22ba:	88 23       	and	r24, r24
    22bc:	d9 f7       	brne	.-10     	; 0x22b4 <strchr+0x2>
    22be:	99 27       	eor	r25, r25
    22c0:	08 95       	ret
    22c2:	31 97       	sbiw	r30, 0x01	; 1
    22c4:	cf 01       	movw	r24, r30
    22c6:	08 95       	ret

000022c8 <strstr>:
strstr():
    22c8:	fb 01       	movw	r30, r22
    22ca:	51 91       	ld	r21, Z+
    22cc:	55 23       	and	r21, r21
    22ce:	a9 f0       	breq	.+42     	; 0x22fa <strstr+0x32>
    22d0:	bf 01       	movw	r22, r30
    22d2:	dc 01       	movw	r26, r24
    22d4:	4d 91       	ld	r20, X+
    22d6:	45 17       	cp	r20, r21
    22d8:	41 11       	cpse	r20, r1
    22da:	e1 f7       	brne	.-8      	; 0x22d4 <strstr+0xc>
    22dc:	59 f4       	brne	.+22     	; 0x22f4 <strstr+0x2c>
    22de:	cd 01       	movw	r24, r26
    22e0:	01 90       	ld	r0, Z+
    22e2:	00 20       	and	r0, r0
    22e4:	49 f0       	breq	.+18     	; 0x22f8 <strstr+0x30>
    22e6:	4d 91       	ld	r20, X+
    22e8:	40 15       	cp	r20, r0
    22ea:	41 11       	cpse	r20, r1
    22ec:	c9 f3       	breq	.-14     	; 0x22e0 <strstr+0x18>
    22ee:	fb 01       	movw	r30, r22
    22f0:	41 11       	cpse	r20, r1
    22f2:	ef cf       	rjmp	.-34     	; 0x22d2 <strstr+0xa>
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	08 95       	ret

000022fc <sprintf>:
sprintf():
    22fc:	0f 93       	push	r16
    22fe:	1f 93       	push	r17
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	2e 97       	sbiw	r28, 0x0e	; 14
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	0e 89       	ldd	r16, Y+22	; 0x16
    2316:	1f 89       	ldd	r17, Y+23	; 0x17
    2318:	86 e0       	ldi	r24, 0x06	; 6
    231a:	8c 83       	std	Y+4, r24	; 0x04
    231c:	1a 83       	std	Y+2, r17	; 0x02
    231e:	09 83       	std	Y+1, r16	; 0x01
    2320:	8f ef       	ldi	r24, 0xFF	; 255
    2322:	9f e7       	ldi	r25, 0x7F	; 127
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	ae 01       	movw	r20, r28
    232a:	46 5e       	subi	r20, 0xE6	; 230
    232c:	5f 4f       	sbci	r21, 0xFF	; 255
    232e:	68 8d       	ldd	r22, Y+24	; 0x18
    2330:	79 8d       	ldd	r23, Y+25	; 0x19
    2332:	ce 01       	movw	r24, r28
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	0e 94 ae 11 	call	0x235c	; 0x235c <vfprintf>
    233a:	2f 81       	ldd	r18, Y+7	; 0x07
    233c:	38 85       	ldd	r19, Y+8	; 0x08
    233e:	02 0f       	add	r16, r18
    2340:	13 1f       	adc	r17, r19
    2342:	f8 01       	movw	r30, r16
    2344:	10 82       	st	Z, r1
    2346:	2e 96       	adiw	r28, 0x0e	; 14
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

0000235c <vfprintf>:
vfprintf():
    235c:	2f 92       	push	r2
    235e:	3f 92       	push	r3
    2360:	4f 92       	push	r4
    2362:	5f 92       	push	r5
    2364:	6f 92       	push	r6
    2366:	7f 92       	push	r7
    2368:	8f 92       	push	r8
    236a:	9f 92       	push	r9
    236c:	af 92       	push	r10
    236e:	bf 92       	push	r11
    2370:	cf 92       	push	r12
    2372:	df 92       	push	r13
    2374:	ef 92       	push	r14
    2376:	ff 92       	push	r15
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	00 d0       	rcall	.+0      	; 0x2382 <vfprintf+0x26>
    2382:	00 d0       	rcall	.+0      	; 0x2384 <vfprintf+0x28>
    2384:	00 d0       	rcall	.+0      	; 0x2386 <vfprintf+0x2a>
    2386:	1f 92       	push	r1
    2388:	1f 92       	push	r1
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	7c 01       	movw	r14, r24
    2390:	3b 01       	movw	r6, r22
    2392:	8a 01       	movw	r16, r20
    2394:	fc 01       	movw	r30, r24
    2396:	17 82       	std	Z+7, r1	; 0x07
    2398:	16 82       	std	Z+6, r1	; 0x06
    239a:	83 81       	ldd	r24, Z+3	; 0x03
    239c:	81 ff       	sbrs	r24, 1
    239e:	dd c1       	rjmp	.+954    	; 0x275a <vfprintf+0x3fe>
    23a0:	ce 01       	movw	r24, r28
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	5c 01       	movw	r10, r24
    23a6:	f7 01       	movw	r30, r14
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	f3 01       	movw	r30, r6
    23ac:	93 fd       	sbrc	r25, 3
    23ae:	85 91       	lpm	r24, Z+
    23b0:	93 ff       	sbrs	r25, 3
    23b2:	81 91       	ld	r24, Z+
    23b4:	3f 01       	movw	r6, r30
    23b6:	88 23       	and	r24, r24
    23b8:	09 f4       	brne	.+2      	; 0x23bc <vfprintf+0x60>
    23ba:	53 c1       	rjmp	.+678    	; 0x2662 <vfprintf+0x306>
    23bc:	85 32       	cpi	r24, 0x25	; 37
    23be:	39 f4       	brne	.+14     	; 0x23ce <vfprintf+0x72>
    23c0:	93 fd       	sbrc	r25, 3
    23c2:	85 91       	lpm	r24, Z+
    23c4:	93 ff       	sbrs	r25, 3
    23c6:	81 91       	ld	r24, Z+
    23c8:	3f 01       	movw	r6, r30
    23ca:	85 32       	cpi	r24, 0x25	; 37
    23cc:	29 f4       	brne	.+10     	; 0x23d8 <vfprintf+0x7c>
    23ce:	b7 01       	movw	r22, r14
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    23d6:	e7 cf       	rjmp	.-50     	; 0x23a6 <vfprintf+0x4a>
    23d8:	91 2c       	mov	r9, r1
    23da:	21 2c       	mov	r2, r1
    23dc:	31 2c       	mov	r3, r1
    23de:	ff e1       	ldi	r31, 0x1F	; 31
    23e0:	f3 15       	cp	r31, r3
    23e2:	38 f0       	brcs	.+14     	; 0x23f2 <vfprintf+0x96>
    23e4:	8b 32       	cpi	r24, 0x2B	; 43
    23e6:	11 f1       	breq	.+68     	; 0x242c <vfprintf+0xd0>
    23e8:	90 f4       	brcc	.+36     	; 0x240e <vfprintf+0xb2>
    23ea:	80 32       	cpi	r24, 0x20	; 32
    23ec:	09 f1       	breq	.+66     	; 0x2430 <vfprintf+0xd4>
    23ee:	83 32       	cpi	r24, 0x23	; 35
    23f0:	29 f1       	breq	.+74     	; 0x243c <vfprintf+0xe0>
    23f2:	37 fc       	sbrc	r3, 7
    23f4:	3c c0       	rjmp	.+120    	; 0x246e <vfprintf+0x112>
    23f6:	20 ed       	ldi	r18, 0xD0	; 208
    23f8:	28 0f       	add	r18, r24
    23fa:	2a 30       	cpi	r18, 0x0A	; 10
    23fc:	50 f5       	brcc	.+84     	; 0x2452 <vfprintf+0xf6>
    23fe:	36 fe       	sbrs	r3, 6
    2400:	20 c0       	rjmp	.+64     	; 0x2442 <vfprintf+0xe6>
    2402:	8a e0       	ldi	r24, 0x0A	; 10
    2404:	98 9e       	mul	r9, r24
    2406:	20 0d       	add	r18, r0
    2408:	11 24       	eor	r1, r1
    240a:	92 2e       	mov	r9, r18
    240c:	06 c0       	rjmp	.+12     	; 0x241a <vfprintf+0xbe>
    240e:	8d 32       	cpi	r24, 0x2D	; 45
    2410:	91 f0       	breq	.+36     	; 0x2436 <vfprintf+0xda>
    2412:	80 33       	cpi	r24, 0x30	; 48
    2414:	71 f7       	brne	.-36     	; 0x23f2 <vfprintf+0x96>
    2416:	68 94       	set
    2418:	30 f8       	bld	r3, 0
    241a:	f3 01       	movw	r30, r6
    241c:	93 fd       	sbrc	r25, 3
    241e:	85 91       	lpm	r24, Z+
    2420:	93 ff       	sbrs	r25, 3
    2422:	81 91       	ld	r24, Z+
    2424:	3f 01       	movw	r6, r30
    2426:	81 11       	cpse	r24, r1
    2428:	da cf       	rjmp	.-76     	; 0x23de <vfprintf+0x82>
    242a:	21 c0       	rjmp	.+66     	; 0x246e <vfprintf+0x112>
    242c:	68 94       	set
    242e:	31 f8       	bld	r3, 1
    2430:	68 94       	set
    2432:	32 f8       	bld	r3, 2
    2434:	f2 cf       	rjmp	.-28     	; 0x241a <vfprintf+0xbe>
    2436:	68 94       	set
    2438:	33 f8       	bld	r3, 3
    243a:	ef cf       	rjmp	.-34     	; 0x241a <vfprintf+0xbe>
    243c:	68 94       	set
    243e:	34 f8       	bld	r3, 4
    2440:	ec cf       	rjmp	.-40     	; 0x241a <vfprintf+0xbe>
    2442:	ea e0       	ldi	r30, 0x0A	; 10
    2444:	2e 9e       	mul	r2, r30
    2446:	20 0d       	add	r18, r0
    2448:	11 24       	eor	r1, r1
    244a:	22 2e       	mov	r2, r18
    244c:	68 94       	set
    244e:	35 f8       	bld	r3, 5
    2450:	e4 cf       	rjmp	.-56     	; 0x241a <vfprintf+0xbe>
    2452:	8e 32       	cpi	r24, 0x2E	; 46
    2454:	29 f4       	brne	.+10     	; 0x2460 <vfprintf+0x104>
    2456:	36 fc       	sbrc	r3, 6
    2458:	04 c1       	rjmp	.+520    	; 0x2662 <vfprintf+0x306>
    245a:	68 94       	set
    245c:	36 f8       	bld	r3, 6
    245e:	dd cf       	rjmp	.-70     	; 0x241a <vfprintf+0xbe>
    2460:	8c 36       	cpi	r24, 0x6C	; 108
    2462:	19 f4       	brne	.+6      	; 0x246a <vfprintf+0x10e>
    2464:	68 94       	set
    2466:	37 f8       	bld	r3, 7
    2468:	d8 cf       	rjmp	.-80     	; 0x241a <vfprintf+0xbe>
    246a:	88 36       	cpi	r24, 0x68	; 104
    246c:	b1 f2       	breq	.-84     	; 0x241a <vfprintf+0xbe>
    246e:	98 2f       	mov	r25, r24
    2470:	9f 7d       	andi	r25, 0xDF	; 223
    2472:	95 54       	subi	r25, 0x45	; 69
    2474:	93 30       	cpi	r25, 0x03	; 3
    2476:	e0 f0       	brcs	.+56     	; 0x24b0 <vfprintf+0x154>
    2478:	83 36       	cpi	r24, 0x63	; 99
    247a:	a1 f1       	breq	.+104    	; 0x24e4 <vfprintf+0x188>
    247c:	83 37       	cpi	r24, 0x73	; 115
    247e:	c1 f1       	breq	.+112    	; 0x24f0 <vfprintf+0x194>
    2480:	83 35       	cpi	r24, 0x53	; 83
    2482:	09 f0       	breq	.+2      	; 0x2486 <vfprintf+0x12a>
    2484:	63 c0       	rjmp	.+198    	; 0x254c <vfprintf+0x1f0>
    2486:	28 01       	movw	r4, r16
    2488:	f2 e0       	ldi	r31, 0x02	; 2
    248a:	4f 0e       	add	r4, r31
    248c:	51 1c       	adc	r5, r1
    248e:	f8 01       	movw	r30, r16
    2490:	c0 80       	ld	r12, Z
    2492:	d1 80       	ldd	r13, Z+1	; 0x01
    2494:	69 2d       	mov	r22, r9
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	36 fc       	sbrc	r3, 6
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <vfprintf+0x144>
    249c:	6f ef       	ldi	r22, 0xFF	; 255
    249e:	7f ef       	ldi	r23, 0xFF	; 255
    24a0:	c6 01       	movw	r24, r12
    24a2:	0e 94 b0 13 	call	0x2760	; 0x2760 <strnlen_P>
    24a6:	4c 01       	movw	r8, r24
    24a8:	68 94       	set
    24aa:	37 f8       	bld	r3, 7
    24ac:	82 01       	movw	r16, r4
    24ae:	0a c0       	rjmp	.+20     	; 0x24c4 <vfprintf+0x168>
    24b0:	0c 5f       	subi	r16, 0xFC	; 252
    24b2:	1f 4f       	sbci	r17, 0xFF	; 255
    24b4:	ff e3       	ldi	r31, 0x3F	; 63
    24b6:	f9 83       	std	Y+1, r31	; 0x01
    24b8:	88 24       	eor	r8, r8
    24ba:	83 94       	inc	r8
    24bc:	91 2c       	mov	r9, r1
    24be:	65 01       	movw	r12, r10
    24c0:	e8 94       	clt
    24c2:	37 f8       	bld	r3, 7
    24c4:	33 fe       	sbrs	r3, 3
    24c6:	2d c0       	rjmp	.+90     	; 0x2522 <vfprintf+0x1c6>
    24c8:	52 2c       	mov	r5, r2
    24ca:	81 14       	cp	r8, r1
    24cc:	91 04       	cpc	r9, r1
    24ce:	71 f5       	brne	.+92     	; 0x252c <vfprintf+0x1d0>
    24d0:	55 20       	and	r5, r5
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <vfprintf+0x17a>
    24d4:	68 cf       	rjmp	.-304    	; 0x23a6 <vfprintf+0x4a>
    24d6:	b7 01       	movw	r22, r14
    24d8:	80 e2       	ldi	r24, 0x20	; 32
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    24e0:	5a 94       	dec	r5
    24e2:	f6 cf       	rjmp	.-20     	; 0x24d0 <vfprintf+0x174>
    24e4:	f8 01       	movw	r30, r16
    24e6:	80 81       	ld	r24, Z
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	0e 5f       	subi	r16, 0xFE	; 254
    24ec:	1f 4f       	sbci	r17, 0xFF	; 255
    24ee:	e4 cf       	rjmp	.-56     	; 0x24b8 <vfprintf+0x15c>
    24f0:	28 01       	movw	r4, r16
    24f2:	f2 e0       	ldi	r31, 0x02	; 2
    24f4:	4f 0e       	add	r4, r31
    24f6:	51 1c       	adc	r5, r1
    24f8:	f8 01       	movw	r30, r16
    24fa:	c0 80       	ld	r12, Z
    24fc:	d1 80       	ldd	r13, Z+1	; 0x01
    24fe:	69 2d       	mov	r22, r9
    2500:	70 e0       	ldi	r23, 0x00	; 0
    2502:	36 fc       	sbrc	r3, 6
    2504:	02 c0       	rjmp	.+4      	; 0x250a <vfprintf+0x1ae>
    2506:	6f ef       	ldi	r22, 0xFF	; 255
    2508:	7f ef       	ldi	r23, 0xFF	; 255
    250a:	c6 01       	movw	r24, r12
    250c:	0e 94 bb 13 	call	0x2776	; 0x2776 <strnlen>
    2510:	4c 01       	movw	r8, r24
    2512:	82 01       	movw	r16, r4
    2514:	d5 cf       	rjmp	.-86     	; 0x24c0 <vfprintf+0x164>
    2516:	b7 01       	movw	r22, r14
    2518:	80 e2       	ldi	r24, 0x20	; 32
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    2520:	2a 94       	dec	r2
    2522:	28 14       	cp	r2, r8
    2524:	19 04       	cpc	r1, r9
    2526:	09 f0       	breq	.+2      	; 0x252a <vfprintf+0x1ce>
    2528:	b0 f7       	brcc	.-20     	; 0x2516 <vfprintf+0x1ba>
    252a:	ce cf       	rjmp	.-100    	; 0x24c8 <vfprintf+0x16c>
    252c:	f6 01       	movw	r30, r12
    252e:	37 fc       	sbrc	r3, 7
    2530:	85 91       	lpm	r24, Z+
    2532:	37 fe       	sbrs	r3, 7
    2534:	81 91       	ld	r24, Z+
    2536:	6f 01       	movw	r12, r30
    2538:	b7 01       	movw	r22, r14
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    2540:	51 10       	cpse	r5, r1
    2542:	5a 94       	dec	r5
    2544:	f1 e0       	ldi	r31, 0x01	; 1
    2546:	8f 1a       	sub	r8, r31
    2548:	91 08       	sbc	r9, r1
    254a:	bf cf       	rjmp	.-130    	; 0x24ca <vfprintf+0x16e>
    254c:	84 36       	cpi	r24, 0x64	; 100
    254e:	19 f0       	breq	.+6      	; 0x2556 <vfprintf+0x1fa>
    2550:	89 36       	cpi	r24, 0x69	; 105
    2552:	09 f0       	breq	.+2      	; 0x2556 <vfprintf+0x1fa>
    2554:	77 c0       	rjmp	.+238    	; 0x2644 <vfprintf+0x2e8>
    2556:	f8 01       	movw	r30, r16
    2558:	37 fe       	sbrs	r3, 7
    255a:	6b c0       	rjmp	.+214    	; 0x2632 <vfprintf+0x2d6>
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	0c 5f       	subi	r16, 0xFC	; 252
    2566:	1f 4f       	sbci	r17, 0xFF	; 255
    2568:	f3 2d       	mov	r31, r3
    256a:	ff 76       	andi	r31, 0x6F	; 111
    256c:	3f 2e       	mov	r3, r31
    256e:	97 ff       	sbrs	r25, 7
    2570:	09 c0       	rjmp	.+18     	; 0x2584 <vfprintf+0x228>
    2572:	90 95       	com	r25
    2574:	80 95       	com	r24
    2576:	70 95       	com	r23
    2578:	61 95       	neg	r22
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	8f 4f       	sbci	r24, 0xFF	; 255
    257e:	9f 4f       	sbci	r25, 0xFF	; 255
    2580:	68 94       	set
    2582:	37 f8       	bld	r3, 7
    2584:	2a e0       	ldi	r18, 0x0A	; 10
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	a5 01       	movw	r20, r10
    258a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__ultoa_invert>
    258e:	c8 2e       	mov	r12, r24
    2590:	ca 18       	sub	r12, r10
    2592:	8c 2c       	mov	r8, r12
    2594:	43 2c       	mov	r4, r3
    2596:	36 fe       	sbrs	r3, 6
    2598:	0c c0       	rjmp	.+24     	; 0x25b2 <vfprintf+0x256>
    259a:	e8 94       	clt
    259c:	40 f8       	bld	r4, 0
    259e:	c9 14       	cp	r12, r9
    25a0:	40 f4       	brcc	.+16     	; 0x25b2 <vfprintf+0x256>
    25a2:	34 fe       	sbrs	r3, 4
    25a4:	05 c0       	rjmp	.+10     	; 0x25b0 <vfprintf+0x254>
    25a6:	32 fc       	sbrc	r3, 2
    25a8:	03 c0       	rjmp	.+6      	; 0x25b0 <vfprintf+0x254>
    25aa:	f3 2d       	mov	r31, r3
    25ac:	fe 7e       	andi	r31, 0xEE	; 238
    25ae:	4f 2e       	mov	r4, r31
    25b0:	89 2c       	mov	r8, r9
    25b2:	44 fe       	sbrs	r4, 4
    25b4:	aa c0       	rjmp	.+340    	; 0x270a <vfprintf+0x3ae>
    25b6:	fe 01       	movw	r30, r28
    25b8:	ec 0d       	add	r30, r12
    25ba:	f1 1d       	adc	r31, r1
    25bc:	80 81       	ld	r24, Z
    25be:	80 33       	cpi	r24, 0x30	; 48
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <vfprintf+0x268>
    25c2:	9c c0       	rjmp	.+312    	; 0x26fc <vfprintf+0x3a0>
    25c4:	24 2d       	mov	r18, r4
    25c6:	29 7e       	andi	r18, 0xE9	; 233
    25c8:	42 2e       	mov	r4, r18
    25ca:	84 2d       	mov	r24, r4
    25cc:	88 70       	andi	r24, 0x08	; 8
    25ce:	58 2e       	mov	r5, r24
    25d0:	43 fc       	sbrc	r4, 3
    25d2:	aa c0       	rjmp	.+340    	; 0x2728 <vfprintf+0x3cc>
    25d4:	40 fe       	sbrs	r4, 0
    25d6:	a4 c0       	rjmp	.+328    	; 0x2720 <vfprintf+0x3c4>
    25d8:	9c 2c       	mov	r9, r12
    25da:	82 14       	cp	r8, r2
    25dc:	18 f4       	brcc	.+6      	; 0x25e4 <vfprintf+0x288>
    25de:	2c 0c       	add	r2, r12
    25e0:	92 2c       	mov	r9, r2
    25e2:	98 18       	sub	r9, r8
    25e4:	44 fe       	sbrs	r4, 4
    25e6:	a6 c0       	rjmp	.+332    	; 0x2734 <vfprintf+0x3d8>
    25e8:	b7 01       	movw	r22, r14
    25ea:	80 e3       	ldi	r24, 0x30	; 48
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    25f2:	42 fe       	sbrs	r4, 2
    25f4:	09 c0       	rjmp	.+18     	; 0x2608 <vfprintf+0x2ac>
    25f6:	88 e7       	ldi	r24, 0x78	; 120
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	41 fe       	sbrs	r4, 1
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <vfprintf+0x2a6>
    25fe:	88 e5       	ldi	r24, 0x58	; 88
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	b7 01       	movw	r22, r14
    2604:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    2608:	c9 14       	cp	r12, r9
    260a:	08 f4       	brcc	.+2      	; 0x260e <vfprintf+0x2b2>
    260c:	9f c0       	rjmp	.+318    	; 0x274c <vfprintf+0x3f0>
    260e:	ca 94       	dec	r12
    2610:	d1 2c       	mov	r13, r1
    2612:	9f ef       	ldi	r25, 0xFF	; 255
    2614:	c9 1a       	sub	r12, r25
    2616:	d9 0a       	sbc	r13, r25
    2618:	ca 0c       	add	r12, r10
    261a:	db 1c       	adc	r13, r11
    261c:	f6 01       	movw	r30, r12
    261e:	82 91       	ld	r24, -Z
    2620:	6f 01       	movw	r12, r30
    2622:	b7 01       	movw	r22, r14
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    262a:	ac 14       	cp	r10, r12
    262c:	bd 04       	cpc	r11, r13
    262e:	b1 f7       	brne	.-20     	; 0x261c <vfprintf+0x2c0>
    2630:	4f cf       	rjmp	.-354    	; 0x24d0 <vfprintf+0x174>
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	07 2e       	mov	r0, r23
    2638:	00 0c       	add	r0, r0
    263a:	88 0b       	sbc	r24, r24
    263c:	99 0b       	sbc	r25, r25
    263e:	0e 5f       	subi	r16, 0xFE	; 254
    2640:	1f 4f       	sbci	r17, 0xFF	; 255
    2642:	92 cf       	rjmp	.-220    	; 0x2568 <vfprintf+0x20c>
    2644:	d3 2c       	mov	r13, r3
    2646:	e8 94       	clt
    2648:	d4 f8       	bld	r13, 4
    264a:	2a e0       	ldi	r18, 0x0A	; 10
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	85 37       	cpi	r24, 0x75	; 117
    2650:	e1 f1       	breq	.+120    	; 0x26ca <vfprintf+0x36e>
    2652:	23 2d       	mov	r18, r3
    2654:	29 7f       	andi	r18, 0xF9	; 249
    2656:	d2 2e       	mov	r13, r18
    2658:	8f 36       	cpi	r24, 0x6F	; 111
    265a:	a9 f1       	breq	.+106    	; 0x26c6 <vfprintf+0x36a>
    265c:	f0 f4       	brcc	.+60     	; 0x269a <vfprintf+0x33e>
    265e:	88 35       	cpi	r24, 0x58	; 88
    2660:	51 f1       	breq	.+84     	; 0x26b6 <vfprintf+0x35a>
    2662:	f7 01       	movw	r30, r14
    2664:	86 81       	ldd	r24, Z+6	; 0x06
    2666:	97 81       	ldd	r25, Z+7	; 0x07
    2668:	2b 96       	adiw	r28, 0x0b	; 11
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	1f 91       	pop	r17
    267a:	0f 91       	pop	r16
    267c:	ff 90       	pop	r15
    267e:	ef 90       	pop	r14
    2680:	df 90       	pop	r13
    2682:	cf 90       	pop	r12
    2684:	bf 90       	pop	r11
    2686:	af 90       	pop	r10
    2688:	9f 90       	pop	r9
    268a:	8f 90       	pop	r8
    268c:	7f 90       	pop	r7
    268e:	6f 90       	pop	r6
    2690:	5f 90       	pop	r5
    2692:	4f 90       	pop	r4
    2694:	3f 90       	pop	r3
    2696:	2f 90       	pop	r2
    2698:	08 95       	ret
    269a:	80 37       	cpi	r24, 0x70	; 112
    269c:	49 f0       	breq	.+18     	; 0x26b0 <vfprintf+0x354>
    269e:	88 37       	cpi	r24, 0x78	; 120
    26a0:	01 f7       	brne	.-64     	; 0x2662 <vfprintf+0x306>
    26a2:	d4 fe       	sbrs	r13, 4
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <vfprintf+0x34e>
    26a6:	68 94       	set
    26a8:	d2 f8       	bld	r13, 2
    26aa:	20 e1       	ldi	r18, 0x10	; 16
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	0d c0       	rjmp	.+26     	; 0x26ca <vfprintf+0x36e>
    26b0:	68 94       	set
    26b2:	d4 f8       	bld	r13, 4
    26b4:	f6 cf       	rjmp	.-20     	; 0x26a2 <vfprintf+0x346>
    26b6:	34 fe       	sbrs	r3, 4
    26b8:	03 c0       	rjmp	.+6      	; 0x26c0 <vfprintf+0x364>
    26ba:	82 2f       	mov	r24, r18
    26bc:	86 60       	ori	r24, 0x06	; 6
    26be:	d8 2e       	mov	r13, r24
    26c0:	20 e1       	ldi	r18, 0x10	; 16
    26c2:	32 e0       	ldi	r19, 0x02	; 2
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <vfprintf+0x36e>
    26c6:	28 e0       	ldi	r18, 0x08	; 8
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	f8 01       	movw	r30, r16
    26cc:	d7 fe       	sbrs	r13, 7
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <vfprintf+0x392>
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	0c 5f       	subi	r16, 0xFC	; 252
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	a5 01       	movw	r20, r10
    26de:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__ultoa_invert>
    26e2:	c8 2e       	mov	r12, r24
    26e4:	ca 18       	sub	r12, r10
    26e6:	3d 2c       	mov	r3, r13
    26e8:	e8 94       	clt
    26ea:	37 f8       	bld	r3, 7
    26ec:	52 cf       	rjmp	.-348    	; 0x2592 <vfprintf+0x236>
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	0e 5f       	subi	r16, 0xFE	; 254
    26f8:	1f 4f       	sbci	r17, 0xFF	; 255
    26fa:	f0 cf       	rjmp	.-32     	; 0x26dc <vfprintf+0x380>
    26fc:	42 fc       	sbrc	r4, 2
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <vfprintf+0x3a8>
    2700:	83 94       	inc	r8
    2702:	63 cf       	rjmp	.-314    	; 0x25ca <vfprintf+0x26e>
    2704:	83 94       	inc	r8
    2706:	83 94       	inc	r8
    2708:	60 cf       	rjmp	.-320    	; 0x25ca <vfprintf+0x26e>
    270a:	84 2d       	mov	r24, r4
    270c:	86 78       	andi	r24, 0x86	; 134
    270e:	09 f4       	brne	.+2      	; 0x2712 <vfprintf+0x3b6>
    2710:	5c cf       	rjmp	.-328    	; 0x25ca <vfprintf+0x26e>
    2712:	f6 cf       	rjmp	.-20     	; 0x2700 <vfprintf+0x3a4>
    2714:	b7 01       	movw	r22, r14
    2716:	80 e2       	ldi	r24, 0x20	; 32
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    271e:	83 94       	inc	r8
    2720:	82 14       	cp	r8, r2
    2722:	c0 f3       	brcs	.-16     	; 0x2714 <vfprintf+0x3b8>
    2724:	51 2c       	mov	r5, r1
    2726:	5e cf       	rjmp	.-324    	; 0x25e4 <vfprintf+0x288>
    2728:	52 2c       	mov	r5, r2
    272a:	58 18       	sub	r5, r8
    272c:	82 14       	cp	r8, r2
    272e:	08 f4       	brcc	.+2      	; 0x2732 <vfprintf+0x3d6>
    2730:	59 cf       	rjmp	.-334    	; 0x25e4 <vfprintf+0x288>
    2732:	f8 cf       	rjmp	.-16     	; 0x2724 <vfprintf+0x3c8>
    2734:	84 2d       	mov	r24, r4
    2736:	86 78       	andi	r24, 0x86	; 134
    2738:	09 f4       	brne	.+2      	; 0x273c <vfprintf+0x3e0>
    273a:	66 cf       	rjmp	.-308    	; 0x2608 <vfprintf+0x2ac>
    273c:	8b e2       	ldi	r24, 0x2B	; 43
    273e:	41 fe       	sbrs	r4, 1
    2740:	80 e2       	ldi	r24, 0x20	; 32
    2742:	47 fc       	sbrc	r4, 7
    2744:	8d e2       	ldi	r24, 0x2D	; 45
    2746:	b7 01       	movw	r22, r14
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	5c cf       	rjmp	.-328    	; 0x2604 <vfprintf+0x2a8>
    274c:	b7 01       	movw	r22, r14
    274e:	80 e3       	ldi	r24, 0x30	; 48
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    2756:	9a 94       	dec	r9
    2758:	57 cf       	rjmp	.-338    	; 0x2608 <vfprintf+0x2ac>
    275a:	8f ef       	ldi	r24, 0xFF	; 255
    275c:	9f ef       	ldi	r25, 0xFF	; 255
    275e:	84 cf       	rjmp	.-248    	; 0x2668 <vfprintf+0x30c>

00002760 <strnlen_P>:
strnlen_P():
    2760:	fc 01       	movw	r30, r24
    2762:	05 90       	lpm	r0, Z+
    2764:	61 50       	subi	r22, 0x01	; 1
    2766:	70 40       	sbci	r23, 0x00	; 0
    2768:	01 10       	cpse	r0, r1
    276a:	d8 f7       	brcc	.-10     	; 0x2762 <strnlen_P+0x2>
    276c:	80 95       	com	r24
    276e:	90 95       	com	r25
    2770:	8e 0f       	add	r24, r30
    2772:	9f 1f       	adc	r25, r31
    2774:	08 95       	ret

00002776 <strnlen>:
strnlen():
    2776:	fc 01       	movw	r30, r24
    2778:	61 50       	subi	r22, 0x01	; 1
    277a:	70 40       	sbci	r23, 0x00	; 0
    277c:	01 90       	ld	r0, Z+
    277e:	01 10       	cpse	r0, r1
    2780:	d8 f7       	brcc	.-10     	; 0x2778 <strnlen+0x2>
    2782:	80 95       	com	r24
    2784:	90 95       	com	r25
    2786:	8e 0f       	add	r24, r30
    2788:	9f 1f       	adc	r25, r31
    278a:	08 95       	ret

0000278c <fputc>:
fputc():
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	18 2f       	mov	r17, r24
    2796:	09 2f       	mov	r16, r25
    2798:	eb 01       	movw	r28, r22
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	81 fd       	sbrc	r24, 1
    279e:	09 c0       	rjmp	.+18     	; 0x27b2 <fputc+0x26>
    27a0:	1f ef       	ldi	r17, 0xFF	; 255
    27a2:	0f ef       	ldi	r16, 0xFF	; 255
    27a4:	81 2f       	mov	r24, r17
    27a6:	90 2f       	mov	r25, r16
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	08 95       	ret
    27b2:	82 ff       	sbrs	r24, 2
    27b4:	14 c0       	rjmp	.+40     	; 0x27de <fputc+0x52>
    27b6:	2e 81       	ldd	r18, Y+6	; 0x06
    27b8:	3f 81       	ldd	r19, Y+7	; 0x07
    27ba:	8c 81       	ldd	r24, Y+4	; 0x04
    27bc:	9d 81       	ldd	r25, Y+5	; 0x05
    27be:	28 17       	cp	r18, r24
    27c0:	39 07       	cpc	r19, r25
    27c2:	3c f4       	brge	.+14     	; 0x27d2 <fputc+0x46>
    27c4:	e8 81       	ld	r30, Y
    27c6:	f9 81       	ldd	r31, Y+1	; 0x01
    27c8:	cf 01       	movw	r24, r30
    27ca:	01 96       	adiw	r24, 0x01	; 1
    27cc:	99 83       	std	Y+1, r25	; 0x01
    27ce:	88 83       	st	Y, r24
    27d0:	10 83       	st	Z, r17
    27d2:	8e 81       	ldd	r24, Y+6	; 0x06
    27d4:	9f 81       	ldd	r25, Y+7	; 0x07
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	9f 83       	std	Y+7, r25	; 0x07
    27da:	8e 83       	std	Y+6, r24	; 0x06
    27dc:	e3 cf       	rjmp	.-58     	; 0x27a4 <fputc+0x18>
    27de:	e8 85       	ldd	r30, Y+8	; 0x08
    27e0:	f9 85       	ldd	r31, Y+9	; 0x09
    27e2:	81 2f       	mov	r24, r17
    27e4:	19 95       	eicall
    27e6:	89 2b       	or	r24, r25
    27e8:	a1 f3       	breq	.-24     	; 0x27d2 <fputc+0x46>
    27ea:	da cf       	rjmp	.-76     	; 0x27a0 <fputc+0x14>

000027ec <__ultoa_invert>:
__ultoa_invert():
    27ec:	fa 01       	movw	r30, r20
    27ee:	aa 27       	eor	r26, r26
    27f0:	28 30       	cpi	r18, 0x08	; 8
    27f2:	51 f1       	breq	.+84     	; 0x2848 <__ultoa_invert+0x5c>
    27f4:	20 31       	cpi	r18, 0x10	; 16
    27f6:	81 f1       	breq	.+96     	; 0x2858 <__ultoa_invert+0x6c>
    27f8:	e8 94       	clt
    27fa:	6f 93       	push	r22
    27fc:	6e 7f       	andi	r22, 0xFE	; 254
    27fe:	6e 5f       	subi	r22, 0xFE	; 254
    2800:	7f 4f       	sbci	r23, 0xFF	; 255
    2802:	8f 4f       	sbci	r24, 0xFF	; 255
    2804:	9f 4f       	sbci	r25, 0xFF	; 255
    2806:	af 4f       	sbci	r26, 0xFF	; 255
    2808:	b1 e0       	ldi	r27, 0x01	; 1
    280a:	3e d0       	rcall	.+124    	; 0x2888 <__ultoa_invert+0x9c>
    280c:	b4 e0       	ldi	r27, 0x04	; 4
    280e:	3c d0       	rcall	.+120    	; 0x2888 <__ultoa_invert+0x9c>
    2810:	67 0f       	add	r22, r23
    2812:	78 1f       	adc	r23, r24
    2814:	89 1f       	adc	r24, r25
    2816:	9a 1f       	adc	r25, r26
    2818:	a1 1d       	adc	r26, r1
    281a:	68 0f       	add	r22, r24
    281c:	79 1f       	adc	r23, r25
    281e:	8a 1f       	adc	r24, r26
    2820:	91 1d       	adc	r25, r1
    2822:	a1 1d       	adc	r26, r1
    2824:	6a 0f       	add	r22, r26
    2826:	71 1d       	adc	r23, r1
    2828:	81 1d       	adc	r24, r1
    282a:	91 1d       	adc	r25, r1
    282c:	a1 1d       	adc	r26, r1
    282e:	20 d0       	rcall	.+64     	; 0x2870 <__ultoa_invert+0x84>
    2830:	09 f4       	brne	.+2      	; 0x2834 <__ultoa_invert+0x48>
    2832:	68 94       	set
    2834:	3f 91       	pop	r19
    2836:	2a e0       	ldi	r18, 0x0A	; 10
    2838:	26 9f       	mul	r18, r22
    283a:	11 24       	eor	r1, r1
    283c:	30 19       	sub	r19, r0
    283e:	30 5d       	subi	r19, 0xD0	; 208
    2840:	31 93       	st	Z+, r19
    2842:	de f6       	brtc	.-74     	; 0x27fa <__ultoa_invert+0xe>
    2844:	cf 01       	movw	r24, r30
    2846:	08 95       	ret
    2848:	46 2f       	mov	r20, r22
    284a:	47 70       	andi	r20, 0x07	; 7
    284c:	40 5d       	subi	r20, 0xD0	; 208
    284e:	41 93       	st	Z+, r20
    2850:	b3 e0       	ldi	r27, 0x03	; 3
    2852:	0f d0       	rcall	.+30     	; 0x2872 <__ultoa_invert+0x86>
    2854:	c9 f7       	brne	.-14     	; 0x2848 <__ultoa_invert+0x5c>
    2856:	f6 cf       	rjmp	.-20     	; 0x2844 <__ultoa_invert+0x58>
    2858:	46 2f       	mov	r20, r22
    285a:	4f 70       	andi	r20, 0x0F	; 15
    285c:	40 5d       	subi	r20, 0xD0	; 208
    285e:	4a 33       	cpi	r20, 0x3A	; 58
    2860:	18 f0       	brcs	.+6      	; 0x2868 <__ultoa_invert+0x7c>
    2862:	49 5d       	subi	r20, 0xD9	; 217
    2864:	31 fd       	sbrc	r19, 1
    2866:	40 52       	subi	r20, 0x20	; 32
    2868:	41 93       	st	Z+, r20
    286a:	02 d0       	rcall	.+4      	; 0x2870 <__ultoa_invert+0x84>
    286c:	a9 f7       	brne	.-22     	; 0x2858 <__ultoa_invert+0x6c>
    286e:	ea cf       	rjmp	.-44     	; 0x2844 <__ultoa_invert+0x58>
    2870:	b4 e0       	ldi	r27, 0x04	; 4
    2872:	a6 95       	lsr	r26
    2874:	97 95       	ror	r25
    2876:	87 95       	ror	r24
    2878:	77 95       	ror	r23
    287a:	67 95       	ror	r22
    287c:	ba 95       	dec	r27
    287e:	c9 f7       	brne	.-14     	; 0x2872 <__ultoa_invert+0x86>
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	61 05       	cpc	r22, r1
    2884:	71 05       	cpc	r23, r1
    2886:	08 95       	ret
    2888:	9b 01       	movw	r18, r22
    288a:	ac 01       	movw	r20, r24
    288c:	0a 2e       	mov	r0, r26
    288e:	06 94       	lsr	r0
    2890:	57 95       	ror	r21
    2892:	47 95       	ror	r20
    2894:	37 95       	ror	r19
    2896:	27 95       	ror	r18
    2898:	ba 95       	dec	r27
    289a:	c9 f7       	brne	.-14     	; 0x288e <__ultoa_invert+0xa2>
    289c:	62 0f       	add	r22, r18
    289e:	73 1f       	adc	r23, r19
    28a0:	84 1f       	adc	r24, r20
    28a2:	95 1f       	adc	r25, r21
    28a4:	a0 1d       	adc	r26, r0
    28a6:	08 95       	ret

000028a8 <eeprom_read_byte>:
eeprom_read_byte():
    28a8:	f9 99       	sbic	0x1f, 1	; 31
    28aa:	fe cf       	rjmp	.-4      	; 0x28a8 <eeprom_read_byte>
    28ac:	92 bd       	out	0x22, r25	; 34
    28ae:	81 bd       	out	0x21, r24	; 33
    28b0:	f8 9a       	sbi	0x1f, 0	; 31
    28b2:	99 27       	eor	r25, r25
    28b4:	80 b5       	in	r24, 0x20	; 32
    28b6:	08 95       	ret

000028b8 <eeprom_write_byte>:
eeprom_write_byte():
    28b8:	26 2f       	mov	r18, r22

000028ba <eeprom_write_r18>:
    28ba:	f9 99       	sbic	0x1f, 1	; 31
    28bc:	fe cf       	rjmp	.-4      	; 0x28ba <eeprom_write_r18>
    28be:	1f ba       	out	0x1f, r1	; 31
    28c0:	92 bd       	out	0x22, r25	; 34
    28c2:	81 bd       	out	0x21, r24	; 33
    28c4:	20 bd       	out	0x20, r18	; 32
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	fa 9a       	sbi	0x1f, 2	; 31
    28cc:	f9 9a       	sbi	0x1f, 1	; 31
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	08 95       	ret

000028d4 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    28d4:	f8 94       	cli

000028d6 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    28d6:	ff cf       	rjmp	.-2      	; 0x28d6 <__stop_program>
