
C:\Users\owner\AppData\Local\Temp\arduino\sketches\06CE0ABD6B1C10931AE5AEE75B56D147/Modbus_Master_kode.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__ctors_end>
       4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
       8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
       c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      10:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      14:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      18:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      1c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      20:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      24:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      28:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      2c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      30:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      34:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      38:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      3c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      40:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      44:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      48:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      4c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      50:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      54:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      58:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      5c:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__vector_23>
      60:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      64:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      68:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      6c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      70:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      74:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      78:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      7c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      80:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      84:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      88:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      8c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      90:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__vector_36>
      94:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_37>
      98:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      9c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      a0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      a4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      a8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      ac:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      b0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      b4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      b8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      bc:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      c0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      c4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      c8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      cc:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__vector_51>
      d0:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__vector_52>
      d4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      d8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      dc:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      e0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <HardwareSerial::read()>
      e8:	0c 94 4b 02 	jmp	0x496	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
      ec:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
      f0:	0c 94 47 02 	jmp	0x48e	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
      f4:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
      f8:	0c 94 17 03 	jmp	0x62e	; 0x62e <HardwareSerial::available()>
      fc:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     100:	0c 94 c4 03 	jmp	0x788	; 0x788 <HardwareSerial::flush()>
     104:	0c 94 22 02 	jmp	0x444	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     108:	0c 94 39 02 	jmp	0x472	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     10c:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     110:	0c 94 41 02 	jmp	0x482	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     114:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <HardwareSerial::availableForWrite()>
     118:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     11c:	0c 94 af 02 	jmp	0x55e	; 0x55e <Print::write(unsigned char const*, unsigned int)>
     120:	0c 94 27 02 	jmp	0x44e	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     124:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     128:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     12c:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <HardwareSerial::write(unsigned char)>
     130:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     134:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     138:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <global constructors keyed to 65535_0_Modbus_Master_kode.ino.cpp.o.1992>
     13c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     140:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     144:	0c 94 09 03 	jmp	0x612	; 0x612 <HardwareSerial::peek()>

00000148 <__trampolines_end>:
__trampolines_end():
     148:	41 54       	subi	r20, 0x41	; 65
     14a:	2b 43       	sbci	r18, 0x3B	; 59
     14c:	41 4f       	sbci	r20, 0xF1	; 241
     14e:	50 45       	sbci	r21, 0x50	; 80
     150:	4e 3d       	cpi	r20, 0xDE	; 222
     152:	30 2c       	mov	r3, r0
     154:	30 2c       	mov	r3, r0
     156:	22 55       	subi	r18, 0x52	; 82
     158:	44 50       	subi	r20, 0x04	; 4
     15a:	22 2c       	mov	r2, r2
     15c:	22 32       	cpi	r18, 0x22	; 34
     15e:	30 37       	cpi	r19, 0x70	; 112
     160:	2e 31       	cpi	r18, 0x1E	; 30
     162:	35 34       	cpi	r19, 0x45	; 69
     164:	2e 32       	cpi	r18, 0x2E	; 46
     166:	35 31       	cpi	r19, 0x15	; 21
     168:	2e 31       	cpi	r18, 0x1E	; 30
     16a:	37 31       	cpi	r19, 0x17	; 23
     16c:	22 2c       	mov	r2, r2
     16e:	38 30       	cpi	r19, 0x08	; 8
     170:	38 30       	cpi	r19, 0x08	; 8
	...

00000173 <simSetup()::__c>:
     173:	41 54 2b 43 4e 41 43 54 3f 00                       AT+CNACT?.

0000017d <simSetup()::__c>:
     17d:	41 54 2b 43 4e 41 43 54 3d 30 2c 31 00              AT+CNACT=0,1.

0000018a <simSetup()::__c>:
     18a:	41 54 2b 43 4e 43 46 47 3d 30 2c 31 2c 22 69 6f     AT+CNCFG=0,1,"io
     19a:	74 2e 31 6e 63 65 2e 6e 65 74 22 00                 t.1nce.net".

000001a6 <simSetup()::__c>:
     1a6:	41 54 2b 43 53 51 00                                AT+CSQ.

000001ad <simSetup()::__c>:
     1ad:	41 54 2b 43 47 4e 41 50 4e 00                       AT+CGNAPN.

000001b7 <simSetup()::__c>:
     1b7:	41 54 2b 43 4f 50 53 3f 00                          AT+COPS?.

000001c0 <simSetup()::__c>:
     1c0:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

000001ca <simSetup()::__c>:
     1ca:	41 54 2b 47 53 4e 00                                AT+GSN.

000001d1 <simSetup()::__c>:
     1d1:	41 54 00                                            AT.

000001d4 <setup::__c>:
     1d4:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

000001e5 <setup::__c>:
     1e5:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 31 00        AT+CASEND=0,11.

000001f4 <setup::__c>:
     1f4:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

00000205 <setup::__c>:
     205:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 35 00        AT+CASEND=0,15.

00000214 <loop::__c>:
     214:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

00000225 <loop::__c>:
     225:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 38 00        AT+CASEND=0,18.

00000234 <loop::__c>:
     234:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

00000245 <port_to_mode_PGM>:
     245:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     255:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000025f <port_to_output_PGM>:
     25f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000279 <digital_pin_to_port_PGM>:
     279:	05 05 05 05 05 05 05 05 08 08 08 08 08 08 08 02     ................
     289:	02 02 02 02 02 02 02 08 07 07 0c 0c 0c 0c 0c 0c     ................
     299:	0c 0c 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     2a9:	03 03 03 03 0a 0a 0a 0a 0a 0a 0a 07 01 01 01 01     ................
     2b9:	01 01 01 01 0a 06 06 06 06 06 06 06 06 0b 0b 0b     ................
     2c9:	0b 0b 0b 0b 0b 07                                   ......

000002cf <digital_pin_to_bit_mask_PGM>:
     2cf:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 01     ..... @...... @.
     2df:	02 04 08 10 20 40 80 80 08 10 01 02 04 08 10 20     .... @......... 
     2ef:	40 80 01 02 04 08 10 20 40 80 01 02 01 02 04 08     @...... @.......
     2ff:	10 20 40 80 01 02 04 08 10 20 40 04 80 40 20 10     . @...... @..@ .
     30f:	08 04 02 01 80 01 02 04 08 10 20 40 80 01 02 04     .......... @....
     31f:	08 10 20 40 80 20                                   .. @. 

00000325 <digital_pin_to_timer_PGM>:
     325:	00 00 00 0a 0b 0c 00 00 00 00 00 0d 0e 0f 09 00     ................
     335:	00 00 00 08 04 05 06 00 00 00 00 00 00 11 12 13     ................
	...
     379:	00 03 00                                            ...

0000037c <__ctors_start>:
__ctors_start():
     37c:	eb 10       	cpse	r14, r11

0000037e <__ctors_end>:
__dtors_end():
     37e:	11 24       	eor	r1, r1
     380:	1f be       	out	0x3f, r1	; 63
     382:	cf ef       	ldi	r28, 0xFF	; 255
     384:	d1 e2       	ldi	r29, 0x21	; 33
     386:	de bf       	out	0x3e, r29	; 62
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	0c bf       	out	0x3c, r16	; 60

0000038e <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     38e:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     390:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     392:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     394:	e2 e8       	ldi	r30, 0x82	; 130
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     396:	f4 e3       	ldi	r31, 0x34	; 52
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     398:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     39a:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     39e:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     3a0:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     3a2:	a0 36       	cpi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     3a4:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0x10>

000003a8 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     3a8:	28 e1       	ldi	r18, 0x18	; 24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     3aa:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     3ac:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     3b2:	aa 33       	cpi	r26, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     3b4:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>

000003b8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     3b8:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     3ba:	cf eb       	ldi	r28, 0xBF	; 191
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     3bc:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     3be:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     3c0:	06 c0       	rjmp	.+12     	; 0x3ce <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     3c2:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     3c4:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     3c6:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     3c8:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     3ca:	0e 94 b2 18 	call	0x3164	; 0x3164 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     3ce:	ce 3b       	cpi	r28, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     3d0:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     3d2:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     3d4:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     3d6:	a9 f7       	brne	.-22     	; 0x3c2 <__do_global_ctors+0xa>
     3d8:	0e 94 4e 11 	call	0x229c	; 0x229c <main>
     3dc:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <_exit>

000003e0 <__bad_interrupt>:
__vector_38():
     3e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e4 <digitalWrite>:
digitalWrite():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     3e4:	28 2f       	mov	r18, r24
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	f9 01       	movw	r30, r18
     3ea:	eb 5d       	subi	r30, 0xDB	; 219
     3ec:	fc 4f       	sbci	r31, 0xFC	; 252
     3ee:	94 91       	lpm	r25, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     3f0:	f9 01       	movw	r30, r18
     3f2:	e1 53       	subi	r30, 0x31	; 49
     3f4:	fd 4f       	sbci	r31, 0xFD	; 253
     3f6:	44 91       	lpm	r20, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     3f8:	27 58       	subi	r18, 0x87	; 135
     3fa:	3d 4f       	sbci	r19, 0xFD	; 253
     3fc:	f9 01       	movw	r30, r18
     3fe:	24 91       	lpm	r18, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     400:	22 23       	and	r18, r18
     402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	35 c0       	rjmp	.+106    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     406:	99 23       	and	r25, r25
     408:	11 f1       	breq	.+68     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
turnOffPWM():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     40a:	92 50       	subi	r25, 0x02	; 2
     40c:	92 31       	cpi	r25, 0x12	; 18
     40e:	f8 f4       	brcc	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     410:	e9 2f       	mov	r30, r25
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	88 27       	eor	r24, r24
     416:	e0 5f       	subi	r30, 0xF0	; 240
     418:	fd 4f       	sbci	r31, 0xFD	; 253
     41a:	8f 4f       	sbci	r24, 0xFF	; 255
     41c:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__tablejump2__>
     420:	75 02       	muls	r23, r21
     422:	79 02       	muls	r23, r25
     424:	22 02       	muls	r18, r18
     426:	39 02       	muls	r19, r25
     428:	3d 02       	muls	r19, r29
     42a:	27 02       	muls	r18, r23
     42c:	41 02       	muls	r20, r17
     42e:	47 02       	muls	r20, r23
     430:	4b 02       	muls	r20, r27
     432:	51 02       	muls	r21, r17
     434:	55 02       	muls	r21, r21
     436:	59 02       	muls	r21, r25
     438:	5f 02       	muls	r21, r31
     43a:	63 02       	muls	r22, r19
     43c:	27 02       	muls	r18, r23
     43e:	67 02       	muls	r22, r23
     440:	6d 02       	muls	r22, r29
     442:	71 02       	muls	r23, r17
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     444:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     448:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:92
        TCCR1A &= ~_BV(COM1B1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     44a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
digitalWrite():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     44e:	e2 2f       	mov	r30, r18
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	ee 0f       	add	r30, r30
     454:	ff 1f       	adc	r31, r31
     456:	e1 5a       	subi	r30, 0xA1	; 161
     458:	fd 4f       	sbci	r31, 0xFD	; 253
     45a:	a5 91       	lpm	r26, Z+
     45c:	b4 91       	lpm	r27, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     45e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     460:	f8 94       	cli
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     462:	ec 91       	ld	r30, X
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     464:	61 11       	cpse	r22, r1
     466:	48 c0       	rjmp	.+144    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     468:	40 95       	com	r20
     46a:	4e 23       	and	r20, r30
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     46c:	4c 93       	st	X, r20
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     46e:	8f bf       	out	0x3f, r24	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:212
}
     470:	08 95       	ret
turnOffPWM():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     472:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     476:	8f 7d       	andi	r24, 0xDF	; 223
     478:	e8 cf       	rjmp	.-48     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     47a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     47e:	87 7f       	andi	r24, 0xF7	; 247
     480:	e4 cf       	rjmp	.-56     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     482:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     486:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     488:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     48c:	e0 cf       	rjmp	.-64     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     48e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     492:	8f 7d       	andi	r24, 0xDF	; 223
     494:	f9 cf       	rjmp	.-14     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     496:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     49a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     49c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     4a0:	d6 cf       	rjmp	.-84     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     4a2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     4a6:	8f 7d       	andi	r24, 0xDF	; 223
     4a8:	f9 cf       	rjmp	.-14     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     4aa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     4ae:	87 7f       	andi	r24, 0xF7	; 247
     4b0:	f5 cf       	rjmp	.-22     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
     4b2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     4b6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
     4b8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     4bc:	c8 cf       	rjmp	.-112    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
     4be:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     4c2:	8f 7d       	andi	r24, 0xDF	; 223
     4c4:	f9 cf       	rjmp	.-14     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
     4c6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     4ca:	87 7f       	andi	r24, 0xF7	; 247
     4cc:	f5 cf       	rjmp	.-22     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
     4ce:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     4d2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
     4d4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     4d8:	ba cf       	rjmp	.-140    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
     4da:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     4de:	8f 7d       	andi	r24, 0xDF	; 223
     4e0:	f9 cf       	rjmp	.-14     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
     4e2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     4e6:	87 7f       	andi	r24, 0xF7	; 247
     4e8:	f5 cf       	rjmp	.-22     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     4ea:	84 b5       	in	r24, 0x24	; 36
     4ec:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     4ee:	84 bd       	out	0x24, r24	; 36
     4f0:	ae cf       	rjmp	.-164    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     4f2:	84 b5       	in	r24, 0x24	; 36
     4f4:	8f 7d       	andi	r24, 0xDF	; 223
     4f6:	fb cf       	rjmp	.-10     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
digitalWrite():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     4f8:	4e 2b       	or	r20, r30
     4fa:	b8 cf       	rjmp	.-144    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>

000004fc <pinMode>:
pinMode():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	fc 01       	movw	r30, r24
     504:	e1 53       	subi	r30, 0x31	; 49
     506:	fd 4f       	sbci	r31, 0xFD	; 253
     508:	24 91       	lpm	r18, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     50a:	87 58       	subi	r24, 0x87	; 135
     50c:	9d 4f       	sbci	r25, 0xFD	; 253
     50e:	fc 01       	movw	r30, r24
     510:	84 91       	lpm	r24, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     512:	88 23       	and	r24, r24
     514:	d1 f0       	breq	.+52     	; 0x54a <pinMode+0x4e>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	fc 01       	movw	r30, r24
     51e:	eb 5b       	subi	r30, 0xBB	; 187
     520:	fd 4f       	sbci	r31, 0xFD	; 253
     522:	a5 91       	lpm	r26, Z+
     524:	b4 91       	lpm	r27, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     526:	fc 01       	movw	r30, r24
     528:	e1 5a       	subi	r30, 0xA1	; 161
     52a:	fd 4f       	sbci	r31, 0xFD	; 253
     52c:	c5 91       	lpm	r28, Z+
     52e:	d4 91       	lpm	r29, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     530:	61 11       	cpse	r22, r1
     532:	0e c0       	rjmp	.+28     	; 0x550 <pinMode+0x54>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     534:	9f b7       	in	r25, 0x3f	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     536:	f8 94       	cli
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     538:	8c 91       	ld	r24, X
     53a:	e2 2f       	mov	r30, r18
     53c:	e0 95       	com	r30
     53e:	8e 23       	and	r24, r30
     540:	8c 93       	st	X, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     542:	28 81       	ld	r18, Y
     544:	e2 23       	and	r30, r18
     546:	e8 83       	st	Y, r30
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     548:	9f bf       	out	0x3f, r25	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     550:	8f b7       	in	r24, 0x3f	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     552:	f8 94       	cli
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     554:	ec 91       	ld	r30, X
     556:	e2 2b       	or	r30, r18
     558:	ec 93       	st	X, r30
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     55a:	8f bf       	out	0x3f, r24	; 63
     55c:	f6 cf       	rjmp	.-20     	; 0x54a <pinMode+0x4e>

0000055e <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     55e:	af 92       	push	r10
     560:	bf 92       	push	r11
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	6c 01       	movw	r12, r24
     574:	7b 01       	movw	r14, r22
     576:	8b 01       	movw	r16, r22
     578:	04 0f       	add	r16, r20
     57a:	15 1f       	adc	r17, r21
     57c:	eb 01       	movw	r28, r22
     57e:	5e 01       	movw	r10, r28
     580:	ae 18       	sub	r10, r14
     582:	bf 08       	sbc	r11, r15
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     584:	c0 17       	cp	r28, r16
     586:	d1 07       	cpc	r29, r17
     588:	59 f0       	breq	.+22     	; 0x5a0 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     58a:	69 91       	ld	r22, Y+
     58c:	d6 01       	movw	r26, r12
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	01 90       	ld	r0, Z+
     594:	f0 81       	ld	r31, Z
     596:	e0 2d       	mov	r30, r0
     598:	c6 01       	movw	r24, r12
     59a:	19 95       	eicall
     59c:	89 2b       	or	r24, r25
     59e:	79 f7       	brne	.-34     	; 0x57e <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     5a0:	c5 01       	movw	r24, r10
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	08 95       	ret

000005b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>:
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.h:58
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     5b8:	0c 94 af 02 	jmp	0x55e	; 0x55e <Print::write(unsigned char const*, unsigned int)>

000005bc <Print::println() [clone .constprop.5]>:
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     5bc:	42 e0       	ldi	r20, 0x02	; 2
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	6d e2       	ldi	r22, 0x2D	; 45
     5c2:	72 e0       	ldi	r23, 0x02	; 2
     5c4:	85 e9       	ldi	r24, 0x95	; 149
     5c6:	97 e1       	ldi	r25, 0x17	; 23
     5c8:	0c 94 af 02 	jmp	0x55e	; 0x55e <Print::write(unsigned char const*, unsigned int)>

000005cc <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     5cc:	fc 01       	movw	r30, r24
     5ce:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     5d0:	44 8d       	ldd	r20, Z+28	; 0x1c
     5d2:	25 2f       	mov	r18, r21
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	84 2f       	mov	r24, r20
     5d8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     5da:	82 1b       	sub	r24, r18
     5dc:	93 0b       	sbc	r25, r19
     5de:	54 17       	cp	r21, r20
     5e0:	10 f0       	brcs	.+4      	; 0x5e6 <HardwareSerial::availableForWrite()+0x1a>
     5e2:	cf 96       	adiw	r24, 0x3f	; 63
     5e4:	08 95       	ret
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     5e6:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     5e8:	08 95       	ret

000005ea <HardwareSerial::read()>:
read():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     5ea:	fc 01       	movw	r30, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     5ec:	91 8d       	ldd	r25, Z+25	; 0x19
     5ee:	82 8d       	ldd	r24, Z+26	; 0x1a
     5f0:	98 17       	cp	r25, r24
     5f2:	61 f0       	breq	.+24     	; 0x60c <HardwareSerial::read()+0x22>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     5f4:	a2 8d       	ldd	r26, Z+26	; 0x1a
     5f6:	ae 0f       	add	r26, r30
     5f8:	bf 2f       	mov	r27, r31
     5fa:	b1 1d       	adc	r27, r1
     5fc:	5d 96       	adiw	r26, 0x1d	; 29
     5fe:	8c 91       	ld	r24, X
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     600:	92 8d       	ldd	r25, Z+26	; 0x1a
     602:	9f 5f       	subi	r25, 0xFF	; 255
     604:	9f 73       	andi	r25, 0x3F	; 63
     606:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	08 95       	ret
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     60c:	8f ef       	ldi	r24, 0xFF	; 255
     60e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     610:	08 95       	ret

00000612 <HardwareSerial::peek()>:
peek():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     612:	fc 01       	movw	r30, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     614:	91 8d       	ldd	r25, Z+25	; 0x19
     616:	82 8d       	ldd	r24, Z+26	; 0x1a
     618:	98 17       	cp	r25, r24
     61a:	31 f0       	breq	.+12     	; 0x628 <HardwareSerial::peek()+0x16>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     61c:	82 8d       	ldd	r24, Z+26	; 0x1a
     61e:	e8 0f       	add	r30, r24
     620:	f1 1d       	adc	r31, r1
     622:	85 8d       	ldd	r24, Z+29	; 0x1d
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	08 95       	ret
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     62c:	08 95       	ret

0000062e <HardwareSerial::available()>:
available():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     62e:	fc 01       	movw	r30, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     630:	91 8d       	ldd	r25, Z+25	; 0x19
     632:	22 8d       	ldd	r18, Z+26	; 0x1a
     634:	89 2f       	mov	r24, r25
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	80 5c       	subi	r24, 0xC0	; 192
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	82 1b       	sub	r24, r18
     63e:	91 09       	sbc	r25, r1
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     640:	8f 73       	andi	r24, 0x3F	; 63
     642:	99 27       	eor	r25, r25
     644:	08 95       	ret

00000646 <Serial2_available()>:
Serial2_available():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial2.cpp:54
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
     646:	88 ef       	ldi	r24, 0xF8	; 248
     648:	96 e1       	ldi	r25, 0x16	; 22
     64a:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
     64e:	21 e0       	ldi	r18, 0x01	; 1
     650:	89 2b       	or	r24, r25
     652:	09 f4       	brne	.+2      	; 0x656 <Serial2_available()+0x10>
     654:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
}
     656:	82 2f       	mov	r24, r18
     658:	08 95       	ret

0000065a <Serial1_available()>:
Serial1_available():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     65a:	85 e9       	ldi	r24, 0x95	; 149
     65c:	97 e1       	ldi	r25, 0x17	; 23
     65e:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
     662:	21 e0       	ldi	r18, 0x01	; 1
     664:	89 2b       	or	r24, r25
     666:	09 f4       	brne	.+2      	; 0x66a <Serial1_available()+0x10>
     668:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
     66a:	82 2f       	mov	r24, r18
     66c:	08 95       	ret

0000066e <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     66e:	fc 01       	movw	r30, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     670:	a4 8d       	ldd	r26, Z+28	; 0x1c
     672:	a8 0f       	add	r26, r24
     674:	b9 2f       	mov	r27, r25
     676:	b1 1d       	adc	r27, r1
     678:	a3 5a       	subi	r26, 0xA3	; 163
     67a:	bf 4f       	sbci	r27, 0xFF	; 255
     67c:	2c 91       	ld	r18, X
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     67e:	84 8d       	ldd	r24, Z+28	; 0x1c
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	8f 73       	andi	r24, 0x3F	; 63
     686:	99 27       	eor	r25, r25
     688:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     68a:	a6 89       	ldd	r26, Z+22	; 0x16
     68c:	b7 89       	ldd	r27, Z+23	; 0x17
     68e:	2c 93       	st	X, r18
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     690:	a0 89       	ldd	r26, Z+16	; 0x10
     692:	b1 89       	ldd	r27, Z+17	; 0x11
     694:	8c 91       	ld	r24, X
     696:	83 70       	andi	r24, 0x03	; 3
     698:	80 64       	ori	r24, 0x40	; 64
     69a:	8c 93       	st	X, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     69c:	93 8d       	ldd	r25, Z+27	; 0x1b
     69e:	84 8d       	ldd	r24, Z+28	; 0x1c
     6a0:	98 13       	cpse	r25, r24
     6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     6a4:	02 88       	ldd	r0, Z+18	; 0x12
     6a6:	f3 89       	ldd	r31, Z+19	; 0x13
     6a8:	e0 2d       	mov	r30, r0
     6aa:	80 81       	ld	r24, Z
     6ac:	8f 7d       	andi	r24, 0xDF	; 223
     6ae:	80 83       	st	Z, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     6b0:	08 95       	ret

000006b2 <HardwareSerial::write(unsigned char)>:
write():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	ec 01       	movw	r28, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     6c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6c8:	98 13       	cpse	r25, r24
     6ca:	1a c0       	rjmp	.+52     	; 0x700 <HardwareSerial::write(unsigned char)+0x4e>
     6cc:	e8 89       	ldd	r30, Y+16	; 0x10
     6ce:	f9 89       	ldd	r31, Y+17	; 0x11
     6d0:	80 81       	ld	r24, Z
     6d2:	85 ff       	sbrs	r24, 5
     6d4:	15 c0       	rjmp	.+42     	; 0x700 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     6d6:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\owner\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6d8:	f8 94       	cli
write():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     6da:	ee 89       	ldd	r30, Y+22	; 0x16
     6dc:	ff 89       	ldd	r31, Y+23	; 0x17
     6de:	60 83       	st	Z, r22
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     6e0:	e8 89       	ldd	r30, Y+16	; 0x10
     6e2:	f9 89       	ldd	r31, Y+17	; 0x11
     6e4:	80 81       	ld	r24, Z
     6e6:	83 70       	andi	r24, 0x03	; 3
     6e8:	80 64       	ori	r24, 0x40	; 64
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     6ea:	80 83       	st	Z, r24
__iRestore():
c:\users\owner\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6ec:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	08 95       	ret
     700:	f6 2e       	mov	r15, r22
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     702:	0b 8d       	ldd	r16, Y+27	; 0x1b
     704:	10 e0       	ldi	r17, 0x00	; 0
     706:	0f 5f       	subi	r16, 0xFF	; 255
     708:	1f 4f       	sbci	r17, 0xFF	; 255
     70a:	0f 73       	andi	r16, 0x3F	; 63
     70c:	11 27       	eor	r17, r17
     70e:	e0 2e       	mov	r14, r16
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     710:	8c 8d       	ldd	r24, Y+28	; 0x1c
     712:	8e 11       	cpse	r24, r14
     714:	0c c0       	rjmp	.+24     	; 0x72e <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	07 fc       	sbrc	r0, 7
     71a:	fa cf       	rjmp	.-12     	; 0x710 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     71c:	e8 89       	ldd	r30, Y+16	; 0x10
     71e:	f9 89       	ldd	r31, Y+17	; 0x11
     720:	80 81       	ld	r24, Z
     722:	85 ff       	sbrs	r24, 5
     724:	f5 cf       	rjmp	.-22     	; 0x710 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     726:	ce 01       	movw	r24, r28
     728:	0e 94 37 03 	call	0x66e	; 0x66e <HardwareSerial::_tx_udr_empty_irq()>
     72c:	f1 cf       	rjmp	.-30     	; 0x710 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     72e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     730:	ec 0f       	add	r30, r28
     732:	fd 2f       	mov	r31, r29
     734:	f1 1d       	adc	r31, r1
     736:	e3 5a       	subi	r30, 0xA3	; 163
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	f0 82       	st	Z, r15
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     73c:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\owner\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     73e:	f8 94       	cli
write():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     740:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     742:	ea 89       	ldd	r30, Y+18	; 0x12
     744:	fb 89       	ldd	r31, Y+19	; 0x13
     746:	80 81       	ld	r24, Z
     748:	80 62       	ori	r24, 0x20	; 32
     74a:	cf cf       	rjmp	.-98     	; 0x6ea <HardwareSerial::write(unsigned char)+0x38>

0000074c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>:
println():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:114
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	8c 01       	movw	r16, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:47
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     756:	d0 e0       	ldi	r29, 0x00	; 0
     758:	c0 e0       	ldi	r28, 0x00	; 0
print():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     75a:	f8 01       	movw	r30, r16
     75c:	ec 0f       	add	r30, r28
     75e:	fd 1f       	adc	r31, r29
     760:	64 91       	lpm	r22, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     762:	66 23       	and	r22, r22
     764:	41 f0       	breq	.+16     	; 0x776 <Print::println(__FlashStringHelper const*) [clone .constprop.2]+0x2a>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     766:	85 e9       	ldi	r24, 0x95	; 149
     768:	97 e1       	ldi	r25, 0x17	; 23
     76a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <HardwareSerial::write(unsigned char)>
     76e:	89 2b       	or	r24, r25
     770:	11 f0       	breq	.+4      	; 0x776 <Print::println(__FlashStringHelper const*) [clone .constprop.2]+0x2a>
     772:	21 96       	adiw	r28, 0x01	; 1
     774:	f2 cf       	rjmp	.-28     	; 0x75a <Print::println(__FlashStringHelper const*) [clone .constprop.2]+0xe>
println():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:117
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
     776:	0e 94 de 02 	call	0x5bc	; 0x5bc <Print::println() [clone .constprop.5]>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:119
  return n;
}
     77a:	8c 0f       	add	r24, r28
     77c:	9d 1f       	adc	r25, r29
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <HardwareSerial::flush()>:
flush():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	ec 01       	movw	r28, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     78e:	88 8d       	ldd	r24, Y+24	; 0x18
     790:	88 23       	and	r24, r24
     792:	b9 f0       	breq	.+46     	; 0x7c2 <HardwareSerial::flush()+0x3a>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     794:	aa 89       	ldd	r26, Y+18	; 0x12
     796:	bb 89       	ldd	r27, Y+19	; 0x13
     798:	e8 89       	ldd	r30, Y+16	; 0x10
     79a:	f9 89       	ldd	r31, Y+17	; 0x11
     79c:	8c 91       	ld	r24, X
     79e:	85 fd       	sbrc	r24, 5
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <HardwareSerial::flush()+0x20>
     7a2:	80 81       	ld	r24, Z
     7a4:	86 fd       	sbrc	r24, 6
     7a6:	0d c0       	rjmp	.+26     	; 0x7c2 <HardwareSerial::flush()+0x3a>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	07 fc       	sbrc	r0, 7
     7ac:	f7 cf       	rjmp	.-18     	; 0x79c <HardwareSerial::flush()+0x14>
     7ae:	8c 91       	ld	r24, X
     7b0:	85 ff       	sbrs	r24, 5
     7b2:	f2 cf       	rjmp	.-28     	; 0x798 <HardwareSerial::flush()+0x10>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     7b4:	80 81       	ld	r24, Z
     7b6:	85 ff       	sbrs	r24, 5
     7b8:	ed cf       	rjmp	.-38     	; 0x794 <HardwareSerial::flush()+0xc>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     7ba:	ce 01       	movw	r24, r28
     7bc:	0e 94 37 03 	call	0x66e	; 0x66e <HardwareSerial::_tx_udr_empty_irq()>
     7c0:	e9 cf       	rjmp	.-46     	; 0x794 <HardwareSerial::flush()+0xc>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <serialEventRun()>:
serialEventRun():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	89 2b       	or	r24, r25
     7ce:	49 f0       	breq	.+18     	; 0x7e2 <serialEventRun()+0x1a>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	89 2b       	or	r24, r25
     7d6:	29 f0       	breq	.+10     	; 0x7e2 <serialEventRun()+0x1a>
     7d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     7dc:	81 11       	cpse	r24, r1
     7de:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	89 2b       	or	r24, r25
     7e8:	29 f0       	breq	.+10     	; 0x7f4 <serialEventRun()+0x2c>
     7ea:	0e 94 2d 03 	call	0x65a	; 0x65a <Serial1_available()>
     7ee:	81 11       	cpse	r24, r1
     7f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	89 2b       	or	r24, r25
     7fa:	29 f0       	breq	.+10     	; 0x806 <serialEventRun()+0x3e>
     7fc:	0e 94 23 03 	call	0x646	; 0x646 <Serial2_available()>
     800:	81 11       	cpse	r24, r1
     802:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	89 2b       	or	r24, r25
     80c:	49 f0       	breq	.+18     	; 0x820 <serialEventRun()+0x58>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	89 2b       	or	r24, r25
     814:	29 f0       	breq	.+10     	; 0x820 <serialEventRun()+0x58>
     816:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     81a:	81 11       	cpse	r24, r1
     81c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
     820:	08 95       	ret

00000822 <CRC16_modbus(char*, int)>:
CRC16_modbus():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:945

void clrmodBuffer() {  // Clear modBuffer
  memset(modBuffer, 0, sizeof modBuffer);
}

unsigned short CRC16_modbus(char* buf, int len) {  //Find modbus CRC16
     822:	ac 01       	movw	r20, r24
     824:	fc 01       	movw	r30, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:946
  unsigned int crc = 0xFFFF;
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:947
  for (int pos = 0; pos < len; pos++) {
     82a:	9f 01       	movw	r18, r30
     82c:	24 1b       	sub	r18, r20
     82e:	35 0b       	sbc	r19, r21
     830:	26 17       	cp	r18, r22
     832:	37 07       	cpc	r19, r23
     834:	bc f4       	brge	.+46     	; 0x864 <CRC16_modbus(char*, int)+0x42>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:948
    crc ^= (unsigned int)buf[pos];  // XOR byte into least sig. byte of crc
     836:	21 91       	ld	r18, Z+
     838:	02 2e       	mov	r0, r18
     83a:	00 0c       	add	r0, r0
     83c:	33 0b       	sbc	r19, r19
     83e:	82 27       	eor	r24, r18
     840:	93 27       	eor	r25, r19
     842:	28 e0       	ldi	r18, 0x08	; 8
     844:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:951

    for (int i = 8; i != 0; i--) {  // Loop over each bit
      if ((crc & 0x0001) != 0) {    // If the LSB is set
     846:	dc 01       	movw	r26, r24
     848:	a1 70       	andi	r26, 0x01	; 1
     84a:	bb 27       	eor	r27, r27
     84c:	96 95       	lsr	r25
     84e:	87 95       	ror	r24
     850:	ab 2b       	or	r26, r27
     852:	21 f0       	breq	.+8      	; 0x85c <CRC16_modbus(char*, int)+0x3a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:953
        crc >>= 1;                  // Shift right and XOR 0xA001
        crc ^= 0xA001;
     854:	a1 e0       	ldi	r26, 0x01	; 1
     856:	8a 27       	eor	r24, r26
     858:	a0 ea       	ldi	r26, 0xA0	; 160
     85a:	9a 27       	eor	r25, r26
     85c:	21 50       	subi	r18, 0x01	; 1
     85e:	31 09       	sbc	r19, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:950
unsigned short CRC16_modbus(char* buf, int len) {  //Find modbus CRC16
  unsigned int crc = 0xFFFF;
  for (int pos = 0; pos < len; pos++) {
    crc ^= (unsigned int)buf[pos];  // XOR byte into least sig. byte of crc

    for (int i = 8; i != 0; i--) {  // Loop over each bit
     860:	91 f7       	brne	.-28     	; 0x846 <CRC16_modbus(char*, int)+0x24>
     862:	e3 cf       	rjmp	.-58     	; 0x82a <CRC16_modbus(char*, int)+0x8>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:960
        crc >>= 1;  // Just shift right
    }
  }

  return crc;
}
     864:	08 95       	ret

00000866 <millisDelay(int)>:
millisDelay():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:928
  } else {
    return 0;
  }
}

void millisDelay(int delayTime) {
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
millis():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     86a:	4f b7       	in	r20, 0x3f	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     86c:	f8 94       	cli
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     86e:	00 91 f4 16 	lds	r16, 0x16F4	; 0x8016f4 <timer0_millis>
     872:	10 91 f5 16 	lds	r17, 0x16F5	; 0x8016f5 <timer0_millis+0x1>
     876:	20 91 f6 16 	lds	r18, 0x16F6	; 0x8016f6 <timer0_millis+0x2>
     87a:	30 91 f7 16 	lds	r19, 0x16F7	; 0x8016f7 <timer0_millis+0x3>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     87e:	4f bf       	out	0x3f, r20	; 63
millisDelay():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:932

  unsigned long time_now = millis();

  while (millis() - time_now < delayTime) {
     880:	09 2e       	mov	r0, r25
     882:	00 0c       	add	r0, r0
     884:	aa 0b       	sbc	r26, r26
     886:	bb 0b       	sbc	r27, r27
millis():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     888:	ef b7       	in	r30, 0x3f	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     88a:	f8 94       	cli
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     88c:	40 91 f4 16 	lds	r20, 0x16F4	; 0x8016f4 <timer0_millis>
     890:	50 91 f5 16 	lds	r21, 0x16F5	; 0x8016f5 <timer0_millis+0x1>
     894:	60 91 f6 16 	lds	r22, 0x16F6	; 0x8016f6 <timer0_millis+0x2>
     898:	70 91 f7 16 	lds	r23, 0x16F7	; 0x8016f7 <timer0_millis+0x3>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     89c:	ef bf       	out	0x3f, r30	; 63
millisDelay():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:932
     89e:	40 1b       	sub	r20, r16
     8a0:	51 0b       	sbc	r21, r17
     8a2:	62 0b       	sbc	r22, r18
     8a4:	73 0b       	sbc	r23, r19
     8a6:	48 17       	cp	r20, r24
     8a8:	59 07       	cpc	r21, r25
     8aa:	6a 07       	cpc	r22, r26
     8ac:	7b 07       	cpc	r23, r27
     8ae:	60 f3       	brcs	.-40     	; 0x888 <millisDelay(int)+0x22>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:935
    //wait.
  }
}
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <serverRead()>:
serverRead():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:880
      simBuffer[i] = simSerial.read();
    }
  }
}

void serverRead() {
     8b6:	cf 92       	push	r12
     8b8:	df 92       	push	r13
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	c8 5e       	subi	r28, 0xE8	; 232
     8cc:	d3 40       	sbci	r29, 0x03	; 3
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:886
  unsigned char buftemp[1000];
  int len;
  int start;
  int count = 0;

  millisDelay(300);
     8d8:	8c e2       	ldi	r24, 0x2C	; 44
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
     8e0:	8e 01       	movw	r16, r28
     8e2:	0f 5f       	subi	r16, 0xFF	; 255
     8e4:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:887
  while (simSerial.available()) {  // While data incomming: Read into buffer
     8e6:	85 e9       	ldi	r24, 0x95	; 149
     8e8:	97 e1       	ldi	r25, 0x17	; 23
     8ea:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
     8ee:	89 2b       	or	r24, r25
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <serverRead()+0x3e>
     8f2:	42 c0       	rjmp	.+132    	; 0x978 <serverRead()+0xc2>
     8f4:	f8 01       	movw	r30, r16
     8f6:	9f 01       	movw	r18, r30
     8f8:	20 1b       	sub	r18, r16
     8fa:	31 0b       	sbc	r19, r17
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:894
    for (int i = 0; i < numBytes; i++) {
      buftemp[i] = simSerial.read();
    }
  }

  while(buftemp[count] != 44){
     8fc:	81 91       	ld	r24, Z+
     8fe:	8c 32       	cpi	r24, 0x2C	; 44
     900:	d1 f7       	brne	.-12     	; 0x8f6 <serverRead()+0x40>
     902:	8a 85       	ldd	r24, Y+10	; 0x0a
     904:	80 53       	subi	r24, 0x30	; 48
     906:	99 0b       	sbc	r25, r25
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:898
    count ++;
  }

  if (count == 4) {
     908:	24 30       	cpi	r18, 0x04	; 4
     90a:	31 05       	cpc	r19, r1
     90c:	09 f0       	breq	.+2      	; 0x910 <serverRead()+0x5a>
     90e:	49 c0       	rjmp	.+146    	; 0x9a2 <serverRead()+0xec>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:899
    len = ((buftemp[9] - 48) * 1000) + ((buftemp[10] - 48) * 100) + ((buftemp[11] - 48) * 10) + buftemp[12] - 48;
     910:	4b 85       	ldd	r20, Y+11	; 0x0b
     912:	40 53       	subi	r20, 0x30	; 48
     914:	55 0b       	sbc	r21, r21
     916:	64 e6       	ldi	r22, 0x64	; 100
     918:	64 9f       	mul	r22, r20
     91a:	90 01       	movw	r18, r0
     91c:	65 9f       	mul	r22, r21
     91e:	30 0d       	add	r19, r0
     920:	11 24       	eor	r1, r1
     922:	68 ee       	ldi	r22, 0xE8	; 232
     924:	73 e0       	ldi	r23, 0x03	; 3
     926:	86 9f       	mul	r24, r22
     928:	a0 01       	movw	r20, r0
     92a:	87 9f       	mul	r24, r23
     92c:	50 0d       	add	r21, r0
     92e:	96 9f       	mul	r25, r22
     930:	50 0d       	add	r21, r0
     932:	11 24       	eor	r1, r1
     934:	c9 01       	movw	r24, r18
     936:	84 0f       	add	r24, r20
     938:	95 1f       	adc	r25, r21
     93a:	2c 85       	ldd	r18, Y+12	; 0x0c
     93c:	fa e0       	ldi	r31, 0x0A	; 10
     93e:	2f 9f       	mul	r18, r31
     940:	80 0d       	add	r24, r0
     942:	91 1d       	adc	r25, r1
     944:	11 24       	eor	r1, r1
     946:	80 5e       	subi	r24, 0xE0	; 224
     948:	91 40       	sbci	r25, 0x01	; 1
     94a:	2d 85       	ldd	r18, Y+13	; 0x0d
     94c:	82 0f       	add	r24, r18
     94e:	91 1d       	adc	r25, r1
     950:	c0 97       	sbiw	r24, 0x30	; 48
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:900
    start = 14;
     952:	ee e0       	ldi	r30, 0x0E	; 14
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	e0 0f       	add	r30, r16
     958:	f1 1f       	adc	r31, r17
     95a:	20 91 34 18 	lds	r18, 0x1834	; 0x801834 <simBuffer>
     95e:	30 91 35 18 	lds	r19, 0x1835	; 0x801835 <simBuffer+0x1>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:913
    len = buftemp[9] - 48;
    start = 11;
  }

  for (int i = 0; i < len; i++) {
    simBuffer[i] = buftemp[start + i];
     962:	d9 01       	movw	r26, r18
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:912
  } else{
    len = buftemp[9] - 48;
    start = 11;
  }

  for (int i = 0; i < len; i++) {
     964:	ad 01       	movw	r20, r26
     966:	42 1b       	sub	r20, r18
     968:	53 0b       	sbc	r21, r19
     96a:	48 17       	cp	r20, r24
     96c:	59 07       	cpc	r21, r25
     96e:	0c f0       	brlt	.+2      	; 0x972 <serverRead()+0xbc>
     970:	48 c0       	rjmp	.+144    	; 0xa02 <serverRead()+0x14c>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:913
    simBuffer[i] = buftemp[start + i];
     972:	41 91       	ld	r20, Z+
     974:	4d 93       	st	X+, r20
     976:	f6 cf       	rjmp	.-20     	; 0x964 <serverRead()+0xae>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:888
  int start;
  int count = 0;

  millisDelay(300);
  while (simSerial.available()) {  // While data incomming: Read into buffer
    int numBytes = simSerial.available();
     978:	85 e9       	ldi	r24, 0x95	; 149
     97a:	97 e1       	ldi	r25, 0x17	; 23
     97c:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
     980:	6c 01       	movw	r12, r24
     982:	78 01       	movw	r14, r16
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:889
    for (int i = 0; i < numBytes; i++) {
     984:	c7 01       	movw	r24, r14
     986:	80 1b       	sub	r24, r16
     988:	91 0b       	sbc	r25, r17
     98a:	8c 15       	cp	r24, r12
     98c:	9d 05       	cpc	r25, r13
     98e:	0c f0       	brlt	.+2      	; 0x992 <serverRead()+0xdc>
     990:	aa cf       	rjmp	.-172    	; 0x8e6 <serverRead()+0x30>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:890
      buftemp[i] = simSerial.read();
     992:	85 e9       	ldi	r24, 0x95	; 149
     994:	97 e1       	ldi	r25, 0x17	; 23
     996:	0e 94 f5 02 	call	0x5ea	; 0x5ea <HardwareSerial::read()>
     99a:	f7 01       	movw	r30, r14
     99c:	81 93       	st	Z+, r24
     99e:	7f 01       	movw	r14, r30
     9a0:	f1 cf       	rjmp	.-30     	; 0x984 <serverRead()+0xce>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:901
  }

  if (count == 4) {
    len = ((buftemp[9] - 48) * 1000) + ((buftemp[10] - 48) * 100) + ((buftemp[11] - 48) * 10) + buftemp[12] - 48;
    start = 14;
  } else if (count == 3) {
     9a2:	23 30       	cpi	r18, 0x03	; 3
     9a4:	31 05       	cpc	r19, r1
     9a6:	c9 f4       	brne	.+50     	; 0x9da <serverRead()+0x124>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:902
    len = ((buftemp[9] - 48) * 100) + ((buftemp[10] - 48) * 10) + buftemp[11] - 48;
     9a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     9aa:	40 53       	subi	r20, 0x30	; 48
     9ac:	55 0b       	sbc	r21, r21
     9ae:	6a e0       	ldi	r22, 0x0A	; 10
     9b0:	64 9f       	mul	r22, r20
     9b2:	90 01       	movw	r18, r0
     9b4:	65 9f       	mul	r22, r21
     9b6:	30 0d       	add	r19, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	64 e6       	ldi	r22, 0x64	; 100
     9bc:	68 9f       	mul	r22, r24
     9be:	a0 01       	movw	r20, r0
     9c0:	69 9f       	mul	r22, r25
     9c2:	50 0d       	add	r21, r0
     9c4:	11 24       	eor	r1, r1
     9c6:	24 0f       	add	r18, r20
     9c8:	35 1f       	adc	r19, r21
     9ca:	8c 85       	ldd	r24, Y+12	; 0x0c
     9cc:	82 0f       	add	r24, r18
     9ce:	93 2f       	mov	r25, r19
     9d0:	91 1d       	adc	r25, r1
     9d2:	c0 97       	sbiw	r24, 0x30	; 48
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:903
    start = 13;
     9d4:	ed e0       	ldi	r30, 0x0D	; 13
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	be cf       	rjmp	.-132    	; 0x956 <serverRead()+0xa0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:909
  } else if (count == 2){
    len = ((buftemp[9] - 48) * 10) + buftemp[10] - 48;
    start = 12;
  } else{
    len = buftemp[9] - 48;
    start = 11;
     9da:	eb e0       	ldi	r30, 0x0B	; 11
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:904
    len = ((buftemp[9] - 48) * 1000) + ((buftemp[10] - 48) * 100) + ((buftemp[11] - 48) * 10) + buftemp[12] - 48;
    start = 14;
  } else if (count == 3) {
    len = ((buftemp[9] - 48) * 100) + ((buftemp[10] - 48) * 10) + buftemp[11] - 48;
    start = 13;
  } else if (count == 2){
     9de:	22 30       	cpi	r18, 0x02	; 2
     9e0:	31 05       	cpc	r19, r1
     9e2:	09 f0       	breq	.+2      	; 0x9e6 <serverRead()+0x130>
     9e4:	b8 cf       	rjmp	.-144    	; 0x956 <serverRead()+0xa0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:905
    len = ((buftemp[9] - 48) * 10) + buftemp[10] - 48;
     9e6:	4a e0       	ldi	r20, 0x0A	; 10
     9e8:	48 9f       	mul	r20, r24
     9ea:	90 01       	movw	r18, r0
     9ec:	49 9f       	mul	r20, r25
     9ee:	30 0d       	add	r19, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9f4:	82 0f       	add	r24, r18
     9f6:	93 2f       	mov	r25, r19
     9f8:	91 1d       	adc	r25, r1
     9fa:	c0 97       	sbiw	r24, 0x30	; 48
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:906
    start = 12;
     9fc:	ec e0       	ldi	r30, 0x0C	; 12
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	aa cf       	rjmp	.-172    	; 0x956 <serverRead()+0xa0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:915
  }

  for (int i = 0; i < len; i++) {
    simBuffer[i] = buftemp[start + i];
  }
}
     a02:	c8 51       	subi	r28, 0x18	; 24
     a04:	dc 4f       	sbci	r29, 0xFC	; 252
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	08 95       	ret

00000a22 <slaveRead()>:
slaveRead():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:736
      modbusSerial.write(ADU, ADUsize);
    }
  }
}

void slaveRead() {  // Read modbus response
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:738

  millisDelay(100);  // Wait for slaves to process message
     a2a:	84 e6       	ldi	r24, 0x64	; 100
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:740

  while (modbusSerial.available()) {  // Stay in while while data available
     a32:	88 ef       	ldi	r24, 0xF8	; 248
     a34:	96 e1       	ldi	r25, 0x16	; 22
     a36:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
     a3a:	89 2b       	or	r24, r25
     a3c:	99 f0       	breq	.+38     	; 0xa64 <slaveRead()+0x42>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:742

    int numBytes = modbusSerial.available();  // Find number of bytes to read
     a3e:	88 ef       	ldi	r24, 0xF8	; 248
     a40:	96 e1       	ldi	r25, 0x16	; 22
     a42:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
     a46:	8c 01       	movw	r16, r24
     a48:	c6 ea       	ldi	r28, 0xA6	; 166
     a4a:	d6 e1       	ldi	r29, 0x16	; 22
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:743
    for (int i = 0; i < numBytes; i++) {
     a4c:	ce 01       	movw	r24, r28
     a4e:	86 5a       	subi	r24, 0xA6	; 166
     a50:	96 41       	sbci	r25, 0x16	; 22
     a52:	80 17       	cp	r24, r16
     a54:	91 07       	cpc	r25, r17
     a56:	6c f7       	brge	.-38     	; 0xa32 <slaveRead()+0x10>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:744
      modBuffer[i] = modbusSerial.read();  // Read into modBuffer
     a58:	88 ef       	ldi	r24, 0xF8	; 248
     a5a:	96 e1       	ldi	r25, 0x16	; 22
     a5c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <HardwareSerial::read()>
     a60:	89 93       	st	Y+, r24
     a62:	f4 cf       	rjmp	.-24     	; 0xa4c <slaveRead()+0x2a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:747
    }
  }
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <responseCheck(char*, unsigned int)>:
responseCheck():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:813

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
  responseCheck("00", 10000);
}

int responseCheck(char* c, unsigned int timeout) {  // Check if correct response or ERROR.
     a6e:	2f 92       	push	r2
     a70:	3f 92       	push	r3
     a72:	4f 92       	push	r4
     a74:	5f 92       	push	r5
     a76:	6f 92       	push	r6
     a78:	7f 92       	push	r7
     a7a:	8f 92       	push	r8
     a7c:	9f 92       	push	r9
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	2c 01       	movw	r4, r24
millis():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     a94:	8f b7       	in	r24, 0x3f	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     a96:	f8 94       	cli
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     a98:	80 90 f4 16 	lds	r8, 0x16F4	; 0x8016f4 <timer0_millis>
     a9c:	90 90 f5 16 	lds	r9, 0x16F5	; 0x8016f5 <timer0_millis+0x1>
     aa0:	a0 90 f6 16 	lds	r10, 0x16F6	; 0x8016f6 <timer0_millis+0x2>
     aa4:	b0 90 f7 16 	lds	r11, 0x16F7	; 0x8016f7 <timer0_millis+0x3>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     aa8:	8f bf       	out	0x3f, r24	; 63
responseCheck():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:817

  unsigned long timerStart = 0;
  unsigned long timerEnd = 0;
  int check = 0;
     aaa:	d0 e0       	ldi	r29, 0x00	; 0
     aac:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:851
      millisDelay(125);
    }

    timerEnd = millis();

    if (timerEnd - timerStart > timeout) {
     aae:	6b 01       	movw	r12, r22
     ab0:	f1 2c       	mov	r15, r1
     ab2:	e1 2c       	mov	r14, r1
simRead():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:870
  return check;
}

void simRead() {  // Read response after sending AT command

  millisDelay(1000);  // Wait for sim module to respons correctly
     ab4:	88 ee       	ldi	r24, 0xE8	; 232
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:872

  while (simSerial.available()) {  // While data incomming: Read into buffer
     abc:	85 e9       	ldi	r24, 0x95	; 149
     abe:	97 e1       	ldi	r25, 0x17	; 23
     ac0:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
     ac4:	89 2b       	or	r24, r25
     ac6:	81 f1       	breq	.+96     	; 0xb28 <responseCheck(char*, unsigned int)+0xba>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:873
    int numBytes = simSerial.available();
     ac8:	85 e9       	ldi	r24, 0x95	; 149
     aca:	97 e1       	ldi	r25, 0x17	; 23
     acc:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
     ad0:	3c 01       	movw	r6, r24
responseCheck():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:874
    for (int i = 0; i < numBytes; i++) {
     ad2:	31 2c       	mov	r3, r1
     ad4:	21 2c       	mov	r2, r1
     ad6:	00 91 34 18 	lds	r16, 0x1834	; 0x801834 <simBuffer>
     ada:	10 91 35 18 	lds	r17, 0x1835	; 0x801835 <simBuffer+0x1>
simRead():
     ade:	26 14       	cp	r2, r6
     ae0:	37 04       	cpc	r3, r7
     ae2:	64 f7       	brge	.-40     	; 0xabc <responseCheck(char*, unsigned int)+0x4e>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:875
      simBuffer[i] = simSerial.read();
     ae4:	85 e9       	ldi	r24, 0x95	; 149
     ae6:	97 e1       	ldi	r25, 0x17	; 23
     ae8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <HardwareSerial::read()>
     aec:	f8 01       	movw	r30, r16
     aee:	e2 0d       	add	r30, r2
     af0:	f3 1d       	adc	r31, r3
     af2:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:874

  millisDelay(1000);  // Wait for sim module to respons correctly

  while (simSerial.available()) {  // While data incomming: Read into buffer
    int numBytes = simSerial.available();
    for (int i = 0; i < numBytes; i++) {
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	28 1a       	sub	r2, r24
     af8:	38 0a       	sbc	r3, r24
     afa:	ed cf       	rjmp	.-38     	; 0xad6 <responseCheck(char*, unsigned int)+0x68>
responseCheck():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:822
  int check = 0;

  bool msg = 0;
  timerStart = millis();

  while (!msg) {
     afc:	22 23       	and	r18, r18
     afe:	d1 f2       	breq	.-76     	; 0xab4 <responseCheck(char*, unsigned int)+0x46>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:866
      millisDelay(125);
    }
  }

  return check;
}
     b00:	ce 01       	movw	r24, r28
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	bf 90       	pop	r11
     b14:	af 90       	pop	r10
     b16:	9f 90       	pop	r9
     b18:	8f 90       	pop	r8
     b1a:	7f 90       	pop	r7
     b1c:	6f 90       	pop	r6
     b1e:	5f 90       	pop	r5
     b20:	4f 90       	pop	r4
     b22:	3f 90       	pop	r3
     b24:	2f 90       	pop	r2
     b26:	08 95       	ret
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:825
  timerStart = millis();

  while (!msg) {
    simRead();

    if (strstr((char*)simBuffer, c)) {
     b28:	00 91 34 18 	lds	r16, 0x1834	; 0x801834 <simBuffer>
     b2c:	10 91 35 18 	lds	r17, 0x1835	; 0x801835 <simBuffer+0x1>
     b30:	b2 01       	movw	r22, r4
     b32:	c8 01       	movw	r24, r16
     b34:	0e 94 f5 19 	call	0x33ea	; 0x33ea <strstr>
     b38:	89 2b       	or	r24, r25
     b3a:	09 f4       	brne	.+2      	; 0xb3e <responseCheck(char*, unsigned int)+0xd0>
     b3c:	5b c0       	rjmp	.+182    	; 0xbf4 <responseCheck(char*, unsigned int)+0x186>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:828
      check = 1;
      msg = 1;
      digitalWrite(GREEN_LED, HIGH);
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	81 e4       	ldi	r24, 0x41	; 65
     b42:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:829
      millisDelay(125);
     b46:	8d e7       	ldi	r24, 0x7D	; 125
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:830
      digitalWrite(GREEN_LED, LOW);
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	81 e4       	ldi	r24, 0x41	; 65
     b52:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:831
      millisDelay(125);
     b56:	8d e7       	ldi	r24, 0x7D	; 125
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:832
      digitalWrite(GREEN_LED, HIGH);
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	81 e4       	ldi	r24, 0x41	; 65
     b62:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:833
      millisDelay(125);
     b66:	8d e7       	ldi	r24, 0x7D	; 125
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:834
      digitalWrite(GREEN_LED, LOW);
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	81 e4       	ldi	r24, 0x41	; 65
     b72:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:835
      millisDelay(125);
     b76:	8d e7       	ldi	r24, 0x7D	; 125
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:827
  while (!msg) {
    simRead();

    if (strstr((char*)simBuffer, c)) {
      check = 1;
      msg = 1;
     b7e:	21 e0       	ldi	r18, 0x01	; 1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:826

  while (!msg) {
    simRead();

    if (strstr((char*)simBuffer, c)) {
      check = 1;
     b80:	c1 e0       	ldi	r28, 0x01	; 1
     b82:	d0 e0       	ldi	r29, 0x00	; 0
millis():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     b84:	3f b7       	in	r19, 0x3f	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     b86:	f8 94       	cli
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     b88:	80 91 f4 16 	lds	r24, 0x16F4	; 0x8016f4 <timer0_millis>
     b8c:	90 91 f5 16 	lds	r25, 0x16F5	; 0x8016f5 <timer0_millis+0x1>
     b90:	a0 91 f6 16 	lds	r26, 0x16F6	; 0x8016f6 <timer0_millis+0x2>
     b94:	b0 91 f7 16 	lds	r27, 0x16F7	; 0x8016f7 <timer0_millis+0x3>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     b98:	3f bf       	out	0x3f, r19	; 63
responseCheck():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:851
      millisDelay(125);
    }

    timerEnd = millis();

    if (timerEnd - timerStart > timeout) {
     b9a:	88 19       	sub	r24, r8
     b9c:	99 09       	sbc	r25, r9
     b9e:	aa 09       	sbc	r26, r10
     ba0:	bb 09       	sbc	r27, r11
     ba2:	c8 16       	cp	r12, r24
     ba4:	d9 06       	cpc	r13, r25
     ba6:	ea 06       	cpc	r14, r26
     ba8:	fb 06       	cpc	r15, r27
     baa:	08 f0       	brcs	.+2      	; 0xbae <responseCheck(char*, unsigned int)+0x140>
     bac:	a7 cf       	rjmp	.-178    	; 0xafc <responseCheck(char*, unsigned int)+0x8e>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:854
      check = 0;
      msg = 1;
      digitalWrite(BLUE_LED, HIGH);
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	82 e4       	ldi	r24, 0x42	; 66
     bb2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:855
      millisDelay(125);
     bb6:	8d e7       	ldi	r24, 0x7D	; 125
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:856
      digitalWrite(BLUE_LED, LOW);
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	82 e4       	ldi	r24, 0x42	; 66
     bc2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:857
      millisDelay(125);
     bc6:	8d e7       	ldi	r24, 0x7D	; 125
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:858
      digitalWrite(BLUE_LED, HIGH);
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	82 e4       	ldi	r24, 0x42	; 66
     bd2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:859
      millisDelay(125);
     bd6:	8d e7       	ldi	r24, 0x7D	; 125
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:860
      digitalWrite(BLUE_LED, LOW);
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	82 e4       	ldi	r24, 0x42	; 66
     be2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:861
      millisDelay(125);
     be6:	8d e7       	ldi	r24, 0x7D	; 125
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:852
    }

    timerEnd = millis();

    if (timerEnd - timerStart > timeout) {
      check = 0;
     bee:	d0 e0       	ldi	r29, 0x00	; 0
     bf0:	c0 e0       	ldi	r28, 0x00	; 0
     bf2:	86 cf       	rjmp	.-244    	; 0xb00 <responseCheck(char*, unsigned int)+0x92>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:836
      millisDelay(125);
      digitalWrite(GREEN_LED, HIGH);
      millisDelay(125);
      digitalWrite(GREEN_LED, LOW);
      millisDelay(125);
    } else if (strstr((char*)simBuffer, "ERROR")) {
     bf4:	60 e3       	ldi	r22, 0x30	; 48
     bf6:	72 e0       	ldi	r23, 0x02	; 2
     bf8:	c8 01       	movw	r24, r16
     bfa:	0e 94 f5 19 	call	0x33ea	; 0x33ea <strstr>
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	89 2b       	or	r24, r25
     c02:	09 f4       	brne	.+2      	; 0xc06 <responseCheck(char*, unsigned int)+0x198>
     c04:	bf cf       	rjmp	.-130    	; 0xb84 <responseCheck(char*, unsigned int)+0x116>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:839
      check = 2;
      msg = 1;
      digitalWrite(RED_LED, HIGH);
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	80 e4       	ldi	r24, 0x40	; 64
     c0a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:840
      millisDelay(125);
     c0e:	8d e7       	ldi	r24, 0x7D	; 125
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:841
      digitalWrite(RED_LED, LOW);
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	80 e4       	ldi	r24, 0x40	; 64
     c1a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:842
      millisDelay(125);
     c1e:	8d e7       	ldi	r24, 0x7D	; 125
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:843
      digitalWrite(RED_LED, HIGH);
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	80 e4       	ldi	r24, 0x40	; 64
     c2a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:844
      millisDelay(125);
     c2e:	8d e7       	ldi	r24, 0x7D	; 125
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:845
      digitalWrite(RED_LED, LOW);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	80 e4       	ldi	r24, 0x40	; 64
     c3a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:846
      millisDelay(125);
     c3e:	8d e7       	ldi	r24, 0x7D	; 125
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:838
      millisDelay(125);
      digitalWrite(GREEN_LED, LOW);
      millisDelay(125);
    } else if (strstr((char*)simBuffer, "ERROR")) {
      check = 2;
      msg = 1;
     c46:	21 e0       	ldi	r18, 0x01	; 1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:837
      digitalWrite(GREEN_LED, HIGH);
      millisDelay(125);
      digitalWrite(GREEN_LED, LOW);
      millisDelay(125);
    } else if (strstr((char*)simBuffer, "ERROR")) {
      check = 2;
     c48:	c2 e0       	ldi	r28, 0x02	; 2
     c4a:	d0 e0       	ldi	r29, 0x00	; 0
     c4c:	9b cf       	rjmp	.-202    	; 0xb84 <responseCheck(char*, unsigned int)+0x116>

00000c4e <clrsimBuffer()>:
clrsimBuffer():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:938
    //wait.
  }
}

void clrsimBuffer() {  // Clear simBuffer
  memset(simBuffer, 0, sizeof simBuffer);
     c4e:	e0 91 34 18 	lds	r30, 0x1834	; 0x801834 <simBuffer>
     c52:	f0 91 35 18 	lds	r31, 0x1835	; 0x801835 <simBuffer+0x1>
     c56:	11 82       	std	Z+1, r1	; 0x01
     c58:	10 82       	st	Z, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:939
}
     c5a:	08 95       	ret

00000c5c <modbusWrite()>:
modbusWrite():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:567
  millisDelay(200);

  simSerial.write((char*)serverMessage, strlen((char*)serverMessage));  // Send message to server
}

void modbusWrite() {
     c5c:	2f 92       	push	r2
     c5e:	3f 92       	push	r3
     c60:	4f 92       	push	r4
     c62:	5f 92       	push	r5
     c64:	6f 92       	push	r6
     c66:	7f 92       	push	r7
     c68:	8f 92       	push	r8
     c6a:	9f 92       	push	r9
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	c4 51       	subi	r28, 0x14	; 20
     c86:	df 40       	sbci	r29, 0x0F	; 15
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	e0 91 34 18 	lds	r30, 0x1834	; 0x801834 <simBuffer>
     c96:	f0 91 35 18 	lds	r31, 0x1835	; 0x801835 <simBuffer+0x1>
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	92 81       	ldd	r25, Z+2	; 0x02
     c9e:	58 2e       	mov	r5, r24
     ca0:	49 2e       	mov	r4, r25
     ca2:	c9 5f       	subi	r28, 0xF9	; 249
     ca4:	d0 4f       	sbci	r29, 0xF0	; 240
     ca6:	59 82       	std	Y+1, r5	; 0x01
     ca8:	48 82       	st	Y, r4
     caa:	c7 50       	subi	r28, 0x07	; 7
     cac:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:587
  char VAR = 0;
  char VAL = 0;
  int IDCount = 0;
  char writeIDarray[30];

  dataCount = dataCount | simBuffer[1];
     cae:	67 e0       	ldi	r22, 0x07	; 7
     cb0:	66 2e       	mov	r6, r22
     cb2:	71 2c       	mov	r7, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:591
  dataCount = dataCount << 8;
  dataCount = dataCount | simBuffer[2];

  for (int i = 0; i < (dataCount); i++) {
     cb4:	b1 2c       	mov	r11, r1
     cb6:	a1 2c       	mov	r10, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:584
  unsigned short dataCount = 0;
  char ID = 0;
  short ADR = 0;
  char VAR = 0;
  char VAL = 0;
  int IDCount = 0;
     cb8:	91 2c       	mov	r9, r1
     cba:	81 2c       	mov	r8, r1
     cbc:	8e 01       	movw	r16, r28
     cbe:	0d 51       	subi	r16, 0x1D	; 29
     cc0:	11 4f       	sbci	r17, 0xF1	; 241
     cc2:	cd 5f       	subi	r28, 0xFD	; 253
     cc4:	d0 4f       	sbci	r29, 0xF0	; 240
     cc6:	19 83       	std	Y+1, r17	; 0x01
     cc8:	08 83       	st	Y, r16
     cca:	c3 50       	subi	r28, 0x03	; 3
     ccc:	df 40       	sbci	r29, 0x0F	; 15
     cce:	7e e7       	ldi	r23, 0x7E	; 126
     cd0:	47 2e       	mov	r4, r23
reset():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:61
  unsigned short writeDigitalLargeAdress;
  unsigned short digitalMsgData;
  int writeDigitalCount;
  int writeAnalogCount;
  void reset() {
    memset(writeAnalogAdress, 0, sizeof(writeAnalogAdress));
     cd2:	e0 e2       	ldi	r30, 0x20	; 32
     cd4:	3e 2e       	mov	r3, r30
modbusWrite():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:608

    if (VAR == 0x01) {
      writeSlave[ID].writeDigitalAdress[writeSlave[ID].writeDigitalCount++] = ADR;
      writeSlave[ID].writeDigitalData[ADR] = simBuffer[(i * 6) + 7];
    } else {
      writeSlave[ID].writeAnalogAdress[writeSlave[ID].writeAnalogCount++] = ADR;
     cd6:	ff e3       	ldi	r31, 0x3F	; 63
     cd8:	2f 2e       	mov	r2, r31
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:591

  dataCount = dataCount | simBuffer[1];
  dataCount = dataCount << 8;
  dataCount = dataCount | simBuffer[2];

  for (int i = 0; i < (dataCount); i++) {
     cda:	c9 5f       	subi	r28, 0xF9	; 249
     cdc:	d0 4f       	sbci	r29, 0xF0	; 240
     cde:	c8 80       	ld	r12, Y
     ce0:	d9 80       	ldd	r13, Y+1	; 0x01
     ce2:	c7 50       	subi	r28, 0x07	; 7
     ce4:	df 40       	sbci	r29, 0x0F	; 15
     ce6:	ac 14       	cp	r10, r12
     ce8:	bd 04       	cpc	r11, r13
     cea:	09 f4       	brne	.+2      	; 0xcee <modbusWrite()+0x92>
     cec:	f3 c0       	rjmp	.+486    	; 0xed4 <modbusWrite()+0x278>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:592
    ID = simBuffer[(i * 6) + 3];
     cee:	00 91 34 18 	lds	r16, 0x1834	; 0x801834 <simBuffer>
     cf2:	10 91 35 18 	lds	r17, 0x1835	; 0x801835 <simBuffer+0x1>
     cf6:	06 0d       	add	r16, r6
     cf8:	17 1d       	adc	r17, r7
     cfa:	f8 01       	movw	r30, r16
     cfc:	34 97       	sbiw	r30, 0x04	; 4
     cfe:	50 80       	ld	r5, Z
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:593
    ADR = simBuffer[(i * 6) + 4];
     d00:	31 96       	adiw	r30, 0x01	; 1
     d02:	e0 80       	ld	r14, Z
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:595
    ADR = ADR << 8;
    ADR |= simBuffer[(i * 6) + 5];
     d04:	31 96       	adiw	r30, 0x01	; 1
     d06:	80 81       	ld	r24, Z
     d08:	fe 2c       	mov	r15, r14
     d0a:	e8 2e       	mov	r14, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:596
    VAR = simBuffer[(i * 6) + 8];
     d0c:	d8 01       	movw	r26, r16
     d0e:	11 96       	adiw	r26, 0x01	; 1
     d10:	bc 91       	ld	r27, X
     d12:	cb 5f       	subi	r28, 0xFB	; 251
     d14:	d0 4f       	sbci	r29, 0xF0	; 240
     d16:	b8 83       	st	Y, r27
     d18:	c5 50       	subi	r28, 0x05	; 5
     d1a:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:597
    if (!(strchr(writeIDarray, ID) > 0)) {
     d1c:	c5 2c       	mov	r12, r5
     d1e:	05 2c       	mov	r0, r5
     d20:	00 0c       	add	r0, r0
     d22:	dd 08       	sbc	r13, r13
     d24:	b6 01       	movw	r22, r12
     d26:	ce 01       	movw	r24, r28
     d28:	8d 51       	subi	r24, 0x1D	; 29
     d2a:	91 4f       	sbci	r25, 0xF1	; 241
     d2c:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <strchr>
     d30:	89 2b       	or	r24, r25
     d32:	09 f0       	breq	.+2      	; 0xd36 <modbusWrite()+0xda>
     d34:	54 c0       	rjmp	.+168    	; 0xdde <modbusWrite()+0x182>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:598
      writeIDarray[IDCount++] = ID;
     d36:	e3 ee       	ldi	r30, 0xE3	; 227
     d38:	fe e0       	ldi	r31, 0x0E	; 14
     d3a:	ec 0f       	add	r30, r28
     d3c:	fd 1f       	adc	r31, r29
     d3e:	e8 0d       	add	r30, r8
     d40:	f9 1d       	adc	r31, r9
     d42:	50 82       	st	Z, r5
     d44:	e5 2d       	mov	r30, r5
     d46:	f4 2d       	mov	r31, r4
     d48:	ef 02       	muls	r30, r31
     d4a:	c0 01       	movw	r24, r0
     d4c:	11 24       	eor	r1, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:601
      writeSlave[ID].writeDigitalCount = 0;
      writeSlave[ID].writeAnalogCount = 0;
      writeSlave[ID].reset();
     d4e:	e1 e0       	ldi	r30, 0x01	; 1
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	ec 0f       	add	r30, r28
     d54:	fd 1f       	adc	r31, r29
     d56:	e8 0f       	add	r30, r24
     d58:	f9 1f       	adc	r31, r25
reset():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:61
  unsigned short writeDigitalLargeAdress;
  unsigned short digitalMsgData;
  int writeDigitalCount;
  int writeAnalogCount;
  void reset() {
    memset(writeAnalogAdress, 0, sizeof(writeAnalogAdress));
     d5a:	df 01       	movw	r26, r30
     d5c:	53 2c       	mov	r5, r3
     d5e:	1d 92       	st	X+, r1
     d60:	5a 94       	dec	r5
     d62:	e9 f7       	brne	.-6      	; 0xd5e <modbusWrite()+0x102>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:62
    memset(writeDigitalAdress, 0, sizeof(writeDigitalAdress));
     d64:	fc 01       	movw	r30, r24
     d66:	b0 96       	adiw	r30, 0x20	; 32
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	2c 0f       	add	r18, r28
     d6e:	3d 1f       	adc	r19, r29
     d70:	e2 0f       	add	r30, r18
     d72:	f3 1f       	adc	r31, r19
     d74:	df 01       	movw	r26, r30
     d76:	53 2c       	mov	r5, r3
     d78:	1d 92       	st	X+, r1
     d7a:	5a 94       	dec	r5
     d7c:	e9 f7       	brne	.-6      	; 0xd78 <modbusWrite()+0x11c>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:63
    memset(writeAnalogData, 0, sizeof(writeAnalogData));
     d7e:	fc 01       	movw	r30, r24
     d80:	e0 5c       	subi	r30, 0xC0	; 192
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	e2 0f       	add	r30, r18
     d86:	f3 1f       	adc	r31, r19
     d88:	df 01       	movw	r26, r30
     d8a:	53 2c       	mov	r5, r3
     d8c:	1d 92       	st	X+, r1
     d8e:	5a 94       	dec	r5
     d90:	e9 f7       	brne	.-6      	; 0xd8c <modbusWrite()+0x130>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:64
    memset(writeDigitalData, 0, sizeof(writeDigitalData));
     d92:	8c 59       	subi	r24, 0x9C	; 156
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	f9 01       	movw	r30, r18
     d98:	e8 0f       	add	r30, r24
     d9a:	f9 1f       	adc	r31, r25
     d9c:	df 01       	movw	r26, r30
     d9e:	50 e1       	ldi	r21, 0x10	; 16
     da0:	55 2e       	mov	r5, r21
     da2:	1d 92       	st	X+, r1
     da4:	5a 94       	dec	r5
     da6:	e9 f7       	brne	.-6      	; 0xda2 <modbusWrite()+0x146>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:65
    digitalMsgData = 0;
     da8:	4c 9c       	mul	r4, r12
     daa:	c0 01       	movw	r24, r0
     dac:	4d 9c       	mul	r4, r13
     dae:	90 0d       	add	r25, r0
     db0:	11 24       	eor	r1, r1
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	2c 0f       	add	r18, r28
     db8:	3d 1f       	adc	r19, r29
     dba:	82 0f       	add	r24, r18
     dbc:	93 1f       	adc	r25, r19
     dbe:	fc 01       	movw	r30, r24
     dc0:	e8 58       	subi	r30, 0x88	; 136
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	11 82       	std	Z+1, r1	; 0x01
     dc6:	10 82       	st	Z, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:66
    writeDigitalCount = 0;
     dc8:	32 96       	adiw	r30, 0x02	; 2
     dca:	11 82       	std	Z+1, r1	; 0x01
     dcc:	10 82       	st	Z, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:67
    writeAnalogCount = 0;
     dce:	84 58       	subi	r24, 0x84	; 132
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	dc 01       	movw	r26, r24
     dd4:	1d 92       	st	X+, r1
     dd6:	1c 92       	st	X, r1
modbusWrite():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:598
    ADR = simBuffer[(i * 6) + 4];
    ADR = ADR << 8;
    ADR |= simBuffer[(i * 6) + 5];
    VAR = simBuffer[(i * 6) + 8];
    if (!(strchr(writeIDarray, ID) > 0)) {
      writeIDarray[IDCount++] = ID;
     dd8:	f4 01       	movw	r30, r8
     dda:	31 96       	adiw	r30, 0x01	; 1
     ddc:	4f 01       	movw	r8, r30
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:604
      writeSlave[ID].writeDigitalCount = 0;
      writeSlave[ID].writeAnalogCount = 0;
      writeSlave[ID].reset();
    }

    if (VAR == 0x01) {
     dde:	cb 5f       	subi	r28, 0xFB	; 251
     de0:	d0 4f       	sbci	r29, 0xF0	; 240
     de2:	f8 81       	ld	r31, Y
     de4:	c5 50       	subi	r28, 0x05	; 5
     de6:	df 40       	sbci	r29, 0x0F	; 15
     de8:	f1 30       	cpi	r31, 0x01	; 1
     dea:	b1 f5       	brne	.+108    	; 0xe58 <modbusWrite()+0x1fc>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:605
      writeSlave[ID].writeDigitalAdress[writeSlave[ID].writeDigitalCount++] = ADR;
     dec:	4c 9c       	mul	r4, r12
     dee:	c0 01       	movw	r24, r0
     df0:	4d 9c       	mul	r4, r13
     df2:	90 0d       	add	r25, r0
     df4:	11 24       	eor	r1, r1
     df6:	21 e0       	ldi	r18, 0x01	; 1
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	2c 0f       	add	r18, r28
     dfc:	3d 1f       	adc	r19, r29
     dfe:	82 0f       	add	r24, r18
     e00:	93 1f       	adc	r25, r19
     e02:	fc 01       	movw	r30, r24
     e04:	e6 58       	subi	r30, 0x86	; 134
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	20 81       	ld	r18, Z
     e0a:	31 81       	ldd	r19, Z+1	; 0x01
     e0c:	a9 01       	movw	r20, r18
     e0e:	4f 5f       	subi	r20, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	51 83       	std	Z+1, r21	; 0x01
     e14:	40 83       	st	Z, r20
     e16:	2c 9c       	mul	r2, r12
     e18:	f0 01       	movw	r30, r0
     e1a:	2d 9c       	mul	r2, r13
     e1c:	f0 0d       	add	r31, r0
     e1e:	11 24       	eor	r1, r1
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	70 96       	adiw	r30, 0x10	; 16
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	a1 e0       	ldi	r26, 0x01	; 1
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	ac 0f       	add	r26, r28
     e30:	bd 1f       	adc	r27, r29
     e32:	ea 0f       	add	r30, r26
     e34:	fb 1f       	adc	r31, r27
     e36:	f1 82       	std	Z+1, r15	; 0x01
     e38:	e0 82       	st	Z, r14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:606
      writeSlave[ID].writeDigitalData[ADR] = simBuffer[(i * 6) + 7];
     e3a:	f8 01       	movw	r30, r16
     e3c:	20 81       	ld	r18, Z
     e3e:	e8 0e       	add	r14, r24
     e40:	f9 1e       	adc	r15, r25
     e42:	f7 01       	movw	r30, r14
     e44:	ec 59       	subi	r30, 0x9C	; 156
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	20 83       	st	Z, r18
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:591

  dataCount = dataCount | simBuffer[1];
  dataCount = dataCount << 8;
  dataCount = dataCount | simBuffer[2];

  for (int i = 0; i < (dataCount); i++) {
     e4a:	bf ef       	ldi	r27, 0xFF	; 255
     e4c:	ab 1a       	sub	r10, r27
     e4e:	bb 0a       	sbc	r11, r27
     e50:	e6 e0       	ldi	r30, 0x06	; 6
     e52:	6e 0e       	add	r6, r30
     e54:	71 1c       	adc	r7, r1
     e56:	41 cf       	rjmp	.-382    	; 0xcda <modbusWrite()+0x7e>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:608

    if (VAR == 0x01) {
      writeSlave[ID].writeDigitalAdress[writeSlave[ID].writeDigitalCount++] = ADR;
      writeSlave[ID].writeDigitalData[ADR] = simBuffer[(i * 6) + 7];
    } else {
      writeSlave[ID].writeAnalogAdress[writeSlave[ID].writeAnalogCount++] = ADR;
     e58:	4c 9c       	mul	r4, r12
     e5a:	f0 01       	movw	r30, r0
     e5c:	4d 9c       	mul	r4, r13
     e5e:	f0 0d       	add	r31, r0
     e60:	11 24       	eor	r1, r1
     e62:	21 e0       	ldi	r18, 0x01	; 1
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	2c 0f       	add	r18, r28
     e68:	3d 1f       	adc	r19, r29
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	e4 58       	subi	r30, 0x84	; 132
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	a0 81       	ld	r26, Z
     e74:	b1 81       	ldd	r27, Z+1	; 0x01
     e76:	9d 01       	movw	r18, r26
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	31 83       	std	Z+1, r19	; 0x01
     e7e:	20 83       	st	Z, r18
     e80:	2c 9c       	mul	r2, r12
     e82:	f0 01       	movw	r30, r0
     e84:	2d 9c       	mul	r2, r13
     e86:	f0 0d       	add	r31, r0
     e88:	11 24       	eor	r1, r1
     e8a:	ae 0f       	add	r26, r30
     e8c:	bf 1f       	adc	r27, r31
     e8e:	aa 0f       	add	r26, r26
     e90:	bb 1f       	adc	r27, r27
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	8c 0f       	add	r24, r28
     e98:	9d 1f       	adc	r25, r29
     e9a:	a8 0f       	add	r26, r24
     e9c:	b9 1f       	adc	r27, r25
     e9e:	ed 92       	st	X+, r14
     ea0:	fc 92       	st	X, r15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:609
      writeSlave[ID].writeAnalogData[ADR] = simBuffer[(i * 6) + 6];
     ea2:	d8 01       	movw	r26, r16
     ea4:	11 97       	sbiw	r26, 0x01	; 1
     ea6:	8c 91       	ld	r24, X
     ea8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:610
      writeSlave[ID].writeAnalogData[ADR] = writeSlave[ID].writeAnalogData[ADR] << 8;
     eaa:	98 2f       	mov	r25, r24
     eac:	88 27       	eor	r24, r24
     eae:	ee 0d       	add	r30, r14
     eb0:	ff 1d       	adc	r31, r15
     eb2:	b0 96       	adiw	r30, 0x20	; 32
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	a1 e0       	ldi	r26, 0x01	; 1
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ac 0f       	add	r26, r28
     ebe:	bd 1f       	adc	r27, r29
     ec0:	ea 0f       	add	r30, r26
     ec2:	fb 1f       	adc	r31, r27
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:611
      writeSlave[ID].writeAnalogData[ADR] |= simBuffer[(i * 6) + 7];
     ec8:	d8 01       	movw	r26, r16
     eca:	2c 91       	ld	r18, X
     ecc:	82 2b       	or	r24, r18
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	80 83       	st	Z, r24
     ed2:	bb cf       	rjmp	.-138    	; 0xe4a <modbusWrite()+0x1ee>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:615
    }
  }

  clrsimBuffer();
     ed4:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
     ed8:	8e 01       	movw	r16, r28
     eda:	0d 51       	subi	r16, 0x1D	; 29
     edc:	11 4f       	sbci	r17, 0xF1	; 241
     ede:	18 01       	movw	r2, r16
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:617

  for (int i = 0; i < strlen(writeIDarray); i++) {
     ee0:	cf 5f       	subi	r28, 0xFF	; 255
     ee2:	d0 4f       	sbci	r29, 0xF0	; 240
     ee4:	19 83       	std	Y+1, r17	; 0x01
     ee6:	08 83       	st	Y, r16
     ee8:	c1 50       	subi	r28, 0x01	; 1
     eea:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:619

    if (writeSlave[writeIDarray[i]].writeDigitalCount > 0) {
     eec:	8e e7       	ldi	r24, 0x7E	; 126
     eee:	f8 2e       	mov	r15, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:667
      }
    }

    if (writeSlave[writeIDarray[i]].writeDigitalCount > 0) {

      memset(ADU, 0, sizeof ADU);
     ef0:	05 ec       	ldi	r16, 0xC5	; 197
     ef2:	1e e0       	ldi	r17, 0x0E	; 14
     ef4:	0c 0f       	add	r16, r28
     ef6:	1d 1f       	adc	r17, r29
     ef8:	0a 5f       	subi	r16, 0xFA	; 250
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	c5 5f       	subi	r28, 0xF5	; 245
     efe:	d0 4f       	sbci	r29, 0xF0	; 240
     f00:	19 83       	std	Y+1, r17	; 0x01
     f02:	08 83       	st	Y, r16
     f04:	cb 50       	subi	r28, 0x0B	; 11
     f06:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:617
    }
  }

  clrsimBuffer();

  for (int i = 0; i < strlen(writeIDarray); i++) {
     f08:	cf 5f       	subi	r28, 0xFF	; 255
     f0a:	d0 4f       	sbci	r29, 0xF0	; 240
     f0c:	e8 81       	ld	r30, Y
     f0e:	f9 81       	ldd	r31, Y+1	; 0x01
     f10:	c1 50       	subi	r28, 0x01	; 1
     f12:	df 40       	sbci	r29, 0x0F	; 15
     f14:	01 90       	ld	r0, Z+
     f16:	00 20       	and	r0, r0
     f18:	e9 f7       	brne	.-6      	; 0xf14 <modbusWrite()+0x2b8>
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	cf 5f       	subi	r28, 0xFF	; 255
     f1e:	d0 4f       	sbci	r29, 0xF0	; 240
     f20:	48 80       	ld	r4, Y
     f22:	59 80       	ldd	r5, Y+1	; 0x01
     f24:	c1 50       	subi	r28, 0x01	; 1
     f26:	df 40       	sbci	r29, 0x0F	; 15
     f28:	e4 19       	sub	r30, r4
     f2a:	f5 09       	sbc	r31, r5
     f2c:	c1 01       	movw	r24, r2
     f2e:	cd 5f       	subi	r28, 0xFD	; 253
     f30:	d0 4f       	sbci	r29, 0xF0	; 240
     f32:	a8 80       	ld	r10, Y
     f34:	b9 80       	ldd	r11, Y+1	; 0x01
     f36:	c3 50       	subi	r28, 0x03	; 3
     f38:	df 40       	sbci	r29, 0x0F	; 15
     f3a:	8a 19       	sub	r24, r10
     f3c:	9b 09       	sbc	r25, r11
     f3e:	8e 17       	cp	r24, r30
     f40:	9f 07       	cpc	r25, r31
     f42:	08 f0       	brcs	.+2      	; 0xf46 <modbusWrite()+0x2ea>
     f44:	e9 c2       	rjmp	.+1490   	; 0x1518 <modbusWrite()+0x8bc>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:619

    if (writeSlave[writeIDarray[i]].writeDigitalCount > 0) {
     f46:	d1 01       	movw	r26, r2
     f48:	ec 90       	ld	r14, X
     f4a:	4e 2d       	mov	r20, r14
     f4c:	0e 2c       	mov	r0, r14
     f4e:	00 0c       	add	r0, r0
     f50:	55 0b       	sbc	r21, r21
     f52:	f4 9e       	mul	r15, r20
     f54:	f0 01       	movw	r30, r0
     f56:	f5 9e       	mul	r15, r21
     f58:	f0 0d       	add	r31, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	44 24       	eor	r4, r4
     f5e:	43 94       	inc	r4
     f60:	51 2c       	mov	r5, r1
     f62:	4c 0e       	add	r4, r28
     f64:	5d 1e       	adc	r5, r29
     f66:	e4 0d       	add	r30, r4
     f68:	f5 1d       	adc	r31, r5
     f6a:	df 01       	movw	r26, r30
     f6c:	a6 58       	subi	r26, 0x86	; 134
     f6e:	bf 4f       	sbci	r27, 0xFF	; 255
     f70:	6d 91       	ld	r22, X+
     f72:	7c 91       	ld	r23, X
     f74:	11 97       	sbiw	r26, 0x01	; 1
     f76:	0e 2d       	mov	r16, r14
     f78:	1e e7       	ldi	r17, 0x7E	; 126
     f7a:	01 02       	muls	r16, r17
     f7c:	20 01       	movw	r4, r0
     f7e:	11 24       	eor	r1, r1
     f80:	16 16       	cp	r1, r22
     f82:	17 06       	cpc	r1, r23
     f84:	8c f5       	brge	.+98     	; 0xfe8 <modbusWrite()+0x38c>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:620
      writeSlave[writeIDarray[i]].writeDigitalSmallAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[0];  //Assume first element is smallest
     f86:	80 a1       	ldd	r24, Z+32	; 0x20
     f88:	91 a1       	ldd	r25, Z+33	; 0x21
     f8a:	16 97       	sbiw	r26, 0x06	; 6
     f8c:	11 96       	adiw	r26, 0x01	; 1
     f8e:	9c 93       	st	X, r25
     f90:	8e 93       	st	-X, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:621
      writeSlave[writeIDarray[i]].writeDigitalLargeAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[0];  //Assume first element is largest
     f92:	ea 58       	subi	r30, 0x8A	; 138
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:623

      for (int j = 1; j < writeSlave[writeIDarray[i]].writeDigitalCount; j++) {
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:627
        if (writeSlave[writeIDarray[i]].writeDigitalAdress[j] < writeSlave[writeIDarray[i]].writeDigitalSmallAdress) {
          writeSlave[writeIDarray[i]].writeDigitalSmallAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[j];
        }
        if (writeSlave[writeIDarray[i]].writeDigitalAdress[j] > writeSlave[writeIDarray[i]].writeDigitalLargeAdress) {
     f9e:	6f 01       	movw	r12, r30
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:623

    if (writeSlave[writeIDarray[i]].writeDigitalCount > 0) {
      writeSlave[writeIDarray[i]].writeDigitalSmallAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[0];  //Assume first element is smallest
      writeSlave[writeIDarray[i]].writeDigitalLargeAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[0];  //Assume first element is largest

      for (int j = 1; j < writeSlave[writeIDarray[i]].writeDigitalCount; j++) {
     fa0:	68 17       	cp	r22, r24
     fa2:	79 07       	cpc	r23, r25
     fa4:	09 f1       	breq	.+66     	; 0xfe8 <modbusWrite()+0x38c>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:624
        if (writeSlave[writeIDarray[i]].writeDigitalAdress[j] < writeSlave[writeIDarray[i]].writeDigitalSmallAdress) {
     fa6:	9c 01       	movw	r18, r24
     fa8:	22 0f       	add	r18, r18
     faa:	33 1f       	adc	r19, r19
     fac:	24 0d       	add	r18, r4
     fae:	35 1d       	adc	r19, r5
     fb0:	e1 e0       	ldi	r30, 0x01	; 1
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	ec 0f       	add	r30, r28
     fb6:	fd 1f       	adc	r31, r29
     fb8:	2e 0f       	add	r18, r30
     fba:	3f 1f       	adc	r19, r31
     fbc:	f9 01       	movw	r30, r18
     fbe:	20 a1       	ldd	r18, Z+32	; 0x20
     fc0:	31 a1       	ldd	r19, Z+33	; 0x21
     fc2:	0d 91       	ld	r16, X+
     fc4:	1c 91       	ld	r17, X
     fc6:	11 97       	sbiw	r26, 0x01	; 1
     fc8:	20 17       	cp	r18, r16
     fca:	31 07       	cpc	r19, r17
     fcc:	18 f4       	brcc	.+6      	; 0xfd4 <modbusWrite()+0x378>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:625
          writeSlave[writeIDarray[i]].writeDigitalSmallAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[j];
     fce:	11 96       	adiw	r26, 0x01	; 1
     fd0:	3c 93       	st	X, r19
     fd2:	2e 93       	st	-X, r18
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:627
        }
        if (writeSlave[writeIDarray[i]].writeDigitalAdress[j] > writeSlave[writeIDarray[i]].writeDigitalLargeAdress) {
     fd4:	f6 01       	movw	r30, r12
     fd6:	00 81       	ld	r16, Z
     fd8:	11 81       	ldd	r17, Z+1	; 0x01
     fda:	02 17       	cp	r16, r18
     fdc:	13 07       	cpc	r17, r19
     fde:	10 f4       	brcc	.+4      	; 0xfe4 <modbusWrite()+0x388>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:628
          writeSlave[writeIDarray[i]].writeDigitalLargeAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[j];
     fe0:	31 83       	std	Z+1, r19	; 0x01
     fe2:	20 83       	st	Z, r18
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:623

    if (writeSlave[writeIDarray[i]].writeDigitalCount > 0) {
      writeSlave[writeIDarray[i]].writeDigitalSmallAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[0];  //Assume first element is smallest
      writeSlave[writeIDarray[i]].writeDigitalLargeAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[0];  //Assume first element is largest

      for (int j = 1; j < writeSlave[writeIDarray[i]].writeDigitalCount; j++) {
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	dc cf       	rjmp	.-72     	; 0xfa0 <modbusWrite()+0x344>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:632
        if (writeSlave[writeIDarray[i]].writeDigitalAdress[j] > writeSlave[writeIDarray[i]].writeDigitalLargeAdress) {
          writeSlave[writeIDarray[i]].writeDigitalLargeAdress = writeSlave[writeIDarray[i]].writeDigitalAdress[j];
        }
      }
    }
    if (writeSlave[writeIDarray[i]].writeAnalogCount > 0) {
     fe8:	f4 9e       	mul	r15, r20
     fea:	f0 01       	movw	r30, r0
     fec:	f5 9e       	mul	r15, r21
     fee:	f0 0d       	add	r31, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	aa 24       	eor	r10, r10
     ff4:	a3 94       	inc	r10
     ff6:	b1 2c       	mov	r11, r1
     ff8:	ac 0e       	add	r10, r28
     ffa:	bd 1e       	adc	r11, r29
     ffc:	ea 0d       	add	r30, r10
     ffe:	fb 1d       	adc	r31, r11
    1000:	df 01       	movw	r26, r30
    1002:	a4 58       	subi	r26, 0x84	; 132
    1004:	bf 4f       	sbci	r27, 0xFF	; 255
    1006:	0d 91       	ld	r16, X+
    1008:	1c 91       	ld	r17, X
    100a:	11 97       	sbiw	r26, 0x01	; 1
    100c:	10 16       	cp	r1, r16
    100e:	11 06       	cpc	r1, r17
    1010:	94 f5       	brge	.+100    	; 0x1076 <modbusWrite()+0x41a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:633
      writeSlave[writeIDarray[i]].writeAnalogSmallAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[0];  //Assume first element is smallest
    1012:	80 81       	ld	r24, Z
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	5c 97       	sbiw	r26, 0x1c	; 28
    1018:	11 96       	adiw	r26, 0x01	; 1
    101a:	9c 93       	st	X, r25
    101c:	8e 93       	st	-X, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:634
      writeSlave[writeIDarray[i]].writeAnalogLargeAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[0];  //Assume first element is largest
    101e:	ee 59       	subi	r30, 0x9E	; 158
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:636

      for (int j = 1; j < writeSlave[writeIDarray[i]].writeAnalogCount; j++) {
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:640
        if (writeSlave[writeIDarray[i]].writeAnalogAdress[j] < writeSlave[writeIDarray[i]].writeAnalogSmallAdress) {
          writeSlave[writeIDarray[i]].writeAnalogSmallAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[j];
        }
        if (writeSlave[writeIDarray[i]].writeAnalogAdress[j] > writeSlave[writeIDarray[i]].writeAnalogLargeAdress) {
    102a:	5f 01       	movw	r10, r30
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:636
    }
    if (writeSlave[writeIDarray[i]].writeAnalogCount > 0) {
      writeSlave[writeIDarray[i]].writeAnalogSmallAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[0];  //Assume first element is smallest
      writeSlave[writeIDarray[i]].writeAnalogLargeAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[0];  //Assume first element is largest

      for (int j = 1; j < writeSlave[writeIDarray[i]].writeAnalogCount; j++) {
    102c:	08 17       	cp	r16, r24
    102e:	19 07       	cpc	r17, r25
    1030:	11 f1       	breq	.+68     	; 0x1076 <modbusWrite()+0x41a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:637
        if (writeSlave[writeIDarray[i]].writeAnalogAdress[j] < writeSlave[writeIDarray[i]].writeAnalogSmallAdress) {
    1032:	9c 01       	movw	r18, r24
    1034:	22 0f       	add	r18, r18
    1036:	33 1f       	adc	r19, r19
    1038:	24 0d       	add	r18, r4
    103a:	35 1d       	adc	r19, r5
    103c:	cc 24       	eor	r12, r12
    103e:	c3 94       	inc	r12
    1040:	d1 2c       	mov	r13, r1
    1042:	cc 0e       	add	r12, r28
    1044:	dd 1e       	adc	r13, r29
    1046:	2c 0d       	add	r18, r12
    1048:	3d 1d       	adc	r19, r13
    104a:	f9 01       	movw	r30, r18
    104c:	20 81       	ld	r18, Z
    104e:	31 81       	ldd	r19, Z+1	; 0x01
    1050:	cd 90       	ld	r12, X+
    1052:	dc 90       	ld	r13, X
    1054:	11 97       	sbiw	r26, 0x01	; 1
    1056:	2c 15       	cp	r18, r12
    1058:	3d 05       	cpc	r19, r13
    105a:	18 f4       	brcc	.+6      	; 0x1062 <modbusWrite()+0x406>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:638
          writeSlave[writeIDarray[i]].writeAnalogSmallAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[j];
    105c:	11 96       	adiw	r26, 0x01	; 1
    105e:	3c 93       	st	X, r19
    1060:	2e 93       	st	-X, r18
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:640
        }
        if (writeSlave[writeIDarray[i]].writeAnalogAdress[j] > writeSlave[writeIDarray[i]].writeAnalogLargeAdress) {
    1062:	f5 01       	movw	r30, r10
    1064:	c0 80       	ld	r12, Z
    1066:	d1 80       	ldd	r13, Z+1	; 0x01
    1068:	c2 16       	cp	r12, r18
    106a:	d3 06       	cpc	r13, r19
    106c:	10 f4       	brcc	.+4      	; 0x1072 <modbusWrite()+0x416>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:641
          writeSlave[writeIDarray[i]].writeAnalogLargeAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[j];
    106e:	31 83       	std	Z+1, r19	; 0x01
    1070:	20 83       	st	Z, r18
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:636
    }
    if (writeSlave[writeIDarray[i]].writeAnalogCount > 0) {
      writeSlave[writeIDarray[i]].writeAnalogSmallAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[0];  //Assume first element is smallest
      writeSlave[writeIDarray[i]].writeAnalogLargeAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[0];  //Assume first element is largest

      for (int j = 1; j < writeSlave[writeIDarray[i]].writeAnalogCount; j++) {
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	db cf       	rjmp	.-74     	; 0x102c <modbusWrite()+0x3d0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:646
          writeSlave[writeIDarray[i]].writeAnalogLargeAdress = writeSlave[writeIDarray[i]].writeAnalogAdress[j];
        }
      }
    }

    writeSlave[writeIDarray[i]].digitalMsgData = 0;
    1076:	f4 9e       	mul	r15, r20
    1078:	c0 01       	movw	r24, r0
    107a:	f5 9e       	mul	r15, r21
    107c:	90 0d       	add	r25, r0
    107e:	11 24       	eor	r1, r1
    1080:	aa 24       	eor	r10, r10
    1082:	a3 94       	inc	r10
    1084:	b1 2c       	mov	r11, r1
    1086:	ac 0e       	add	r10, r28
    1088:	bd 1e       	adc	r11, r29
    108a:	8a 0d       	add	r24, r10
    108c:	9b 1d       	adc	r25, r11
    108e:	fc 01       	movw	r30, r24
    1090:	e8 58       	subi	r30, 0x88	; 136
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	11 82       	std	Z+1, r1	; 0x01
    1096:	10 82       	st	Z, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:648
    //Omregner bytes til bits om tilføjer nyt og gamle data til beskeden
    for (int j = 0; j < (writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1; j++) {
    1098:	dc 01       	movw	r26, r24
    109a:	aa 58       	subi	r26, 0x8A	; 138
    109c:	bf 4f       	sbci	r27, 0xFF	; 255
    109e:	cd 90       	ld	r12, X+
    10a0:	dc 90       	ld	r13, X
    10a2:	11 97       	sbiw	r26, 0x01	; 1
    10a4:	cb 5f       	subi	r28, 0xFB	; 251
    10a6:	d0 4f       	sbci	r29, 0xF0	; 240
    10a8:	d9 82       	std	Y+1, r13	; 0x01
    10aa:	c8 82       	st	Y, r12
    10ac:	c5 50       	subi	r28, 0x05	; 5
    10ae:	df 40       	sbci	r29, 0x0F	; 15
    10b0:	12 97       	sbiw	r26, 0x02	; 2
    10b2:	6d 90       	ld	r6, X+
    10b4:	7c 90       	ld	r7, X
    10b6:	46 01       	movw	r8, r12
    10b8:	0f ef       	ldi	r16, 0xFF	; 255
    10ba:	80 1a       	sub	r8, r16
    10bc:	90 0a       	sbc	r9, r16
    10be:	86 18       	sub	r8, r6
    10c0:	97 08       	sbc	r9, r7
    10c2:	ac ea       	ldi	r26, 0xAC	; 172
    10c4:	a4 9f       	mul	r26, r20
    10c6:	90 01       	movw	r18, r0
    10c8:	a5 9f       	mul	r26, r21
    10ca:	30 0d       	add	r19, r0
    10cc:	11 24       	eor	r1, r1
    10ce:	c7 5f       	subi	r28, 0xF7	; 247
    10d0:	d0 4f       	sbci	r29, 0xF0	; 240
    10d2:	39 83       	std	Y+1, r19	; 0x01
    10d4:	28 83       	st	Y, r18
    10d6:	c9 50       	subi	r28, 0x09	; 9
    10d8:	df 40       	sbci	r29, 0x0F	; 15
    10da:	93 01       	movw	r18, r6
    10dc:	b1 2c       	mov	r11, r1
    10de:	a1 2c       	mov	r10, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:653
      dataFlag = 0;
      temp = 0;
      for (int k = 0; k < writeSlave[writeIDarray[i]].writeDigitalCount; k++) {
        if (writeSlave[writeIDarray[i]].writeDigitalAdress[k] == writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j) {
          temp = temp | writeSlave[writeIDarray[i]].writeDigitalData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j];
    10e0:	cf 5e       	subi	r28, 0xEF	; 239
    10e2:	d0 4f       	sbci	r29, 0xF0	; 240
    10e4:	99 83       	std	Y+1, r25	; 0x01
    10e6:	88 83       	st	Y, r24
    10e8:	c1 51       	subi	r28, 0x11	; 17
    10ea:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:655
          writeSlave[writeIDarray[i]].digitalMsgData = writeSlave[writeIDarray[i]].digitalMsgData | (temp << j);
          slaveSaved[writeIDarray[i]].writeDigitalOldData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j] = writeSlave[writeIDarray[i]].writeDigitalData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j];
    10ec:	c7 5f       	subi	r28, 0xF7	; 247
    10ee:	d0 4f       	sbci	r29, 0xF0	; 240
    10f0:	08 81       	ld	r16, Y
    10f2:	19 81       	ldd	r17, Y+1	; 0x01
    10f4:	c9 50       	subi	r28, 0x09	; 9
    10f6:	df 40       	sbci	r29, 0x0F	; 15
    10f8:	02 58       	subi	r16, 0x82	; 130
    10fa:	1d 4f       	sbci	r17, 0xFD	; 253
    10fc:	cd 5e       	subi	r28, 0xED	; 237
    10fe:	d0 4f       	sbci	r29, 0xF0	; 240
    1100:	19 83       	std	Y+1, r17	; 0x01
    1102:	08 83       	st	Y, r16
    1104:	c3 51       	subi	r28, 0x13	; 19
    1106:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:648
      }
    }

    writeSlave[writeIDarray[i]].digitalMsgData = 0;
    //Omregner bytes til bits om tilføjer nyt og gamle data til beskeden
    for (int j = 0; j < (writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1; j++) {
    1108:	8a 14       	cp	r8, r10
    110a:	9b 04       	cpc	r9, r11
    110c:	09 f4       	brne	.+2      	; 0x1110 <modbusWrite()+0x4b4>
    110e:	96 c0       	rjmp	.+300    	; 0x123c <modbusWrite()+0x5e0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:651
      dataFlag = 0;
      temp = 0;
      for (int k = 0; k < writeSlave[writeIDarray[i]].writeDigitalCount; k++) {
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:650

    writeSlave[writeIDarray[i]].digitalMsgData = 0;
    //Omregner bytes til bits om tilføjer nyt og gamle data til beskeden
    for (int j = 0; j < (writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1; j++) {
      dataFlag = 0;
      temp = 0;
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:649
    }

    writeSlave[writeIDarray[i]].digitalMsgData = 0;
    //Omregner bytes til bits om tilføjer nyt og gamle data til beskeden
    for (int j = 0; j < (writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1; j++) {
      dataFlag = 0;
    1118:	c9 5f       	subi	r28, 0xF9	; 249
    111a:	d0 4f       	sbci	r29, 0xF0	; 240
    111c:	18 82       	st	Y, r1
    111e:	c7 50       	subi	r28, 0x07	; 7
    1120:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:653
      temp = 0;
      for (int k = 0; k < writeSlave[writeIDarray[i]].writeDigitalCount; k++) {
        if (writeSlave[writeIDarray[i]].writeDigitalAdress[k] == writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j) {
          temp = temp | writeSlave[writeIDarray[i]].writeDigitalData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j];
    1122:	cf 5e       	subi	r28, 0xEF	; 239
    1124:	d0 4f       	sbci	r29, 0xF0	; 240
    1126:	c8 80       	ld	r12, Y
    1128:	d9 80       	ldd	r13, Y+1	; 0x01
    112a:	c1 51       	subi	r28, 0x11	; 17
    112c:	df 40       	sbci	r29, 0x0F	; 15
    112e:	c2 0e       	add	r12, r18
    1130:	d3 1e       	adc	r13, r19
    1132:	d6 01       	movw	r26, r12
    1134:	ac 59       	subi	r26, 0x9C	; 156
    1136:	bf 4f       	sbci	r27, 0xFF	; 255
    1138:	c3 5f       	subi	r28, 0xF3	; 243
    113a:	d0 4f       	sbci	r29, 0xF0	; 240
    113c:	b9 83       	std	Y+1, r27	; 0x01
    113e:	a8 83       	st	Y, r26
    1140:	cd 50       	subi	r28, 0x0D	; 13
    1142:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:655
          writeSlave[writeIDarray[i]].digitalMsgData = writeSlave[writeIDarray[i]].digitalMsgData | (temp << j);
          slaveSaved[writeIDarray[i]].writeDigitalOldData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j] = writeSlave[writeIDarray[i]].writeDigitalData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j];
    1144:	cd 5e       	subi	r28, 0xED	; 237
    1146:	d0 4f       	sbci	r29, 0xF0	; 240
    1148:	c8 80       	ld	r12, Y
    114a:	d9 80       	ldd	r13, Y+1	; 0x01
    114c:	c3 51       	subi	r28, 0x13	; 19
    114e:	df 40       	sbci	r29, 0x0F	; 15
    1150:	c2 0e       	add	r12, r18
    1152:	d3 1e       	adc	r13, r19
    1154:	d6 01       	movw	r26, r12
    1156:	a4 56       	subi	r26, 0x64	; 100
    1158:	bf 4f       	sbci	r27, 0xFF	; 255
    115a:	c1 5f       	subi	r28, 0xF1	; 241
    115c:	d0 4f       	sbci	r29, 0xF0	; 240
    115e:	b9 83       	std	Y+1, r27	; 0x01
    1160:	a8 83       	st	Y, r26
    1162:	cf 50       	subi	r28, 0x0F	; 15
    1164:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:651
    writeSlave[writeIDarray[i]].digitalMsgData = 0;
    //Omregner bytes til bits om tilføjer nyt og gamle data til beskeden
    for (int j = 0; j < (writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1; j++) {
      dataFlag = 0;
      temp = 0;
      for (int k = 0; k < writeSlave[writeIDarray[i]].writeDigitalCount; k++) {
    1166:	06 17       	cp	r16, r22
    1168:	17 07       	cpc	r17, r23
    116a:	0c f0       	brlt	.+2      	; 0x116e <modbusWrite()+0x512>
    116c:	42 c0       	rjmp	.+132    	; 0x11f2 <modbusWrite()+0x596>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:652
        if (writeSlave[writeIDarray[i]].writeDigitalAdress[k] == writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j) {
    116e:	d8 01       	movw	r26, r16
    1170:	aa 0f       	add	r26, r26
    1172:	bb 1f       	adc	r27, r27
    1174:	a4 0d       	add	r26, r4
    1176:	b5 1d       	adc	r27, r5
    1178:	cc 24       	eor	r12, r12
    117a:	c3 94       	inc	r12
    117c:	d1 2c       	mov	r13, r1
    117e:	cc 0e       	add	r12, r28
    1180:	dd 1e       	adc	r13, r29
    1182:	ac 0d       	add	r26, r12
    1184:	bd 1d       	adc	r27, r13
    1186:	90 96       	adiw	r26, 0x20	; 32
    1188:	0d 90       	ld	r0, X+
    118a:	bc 91       	ld	r27, X
    118c:	a0 2d       	mov	r26, r0
    118e:	a2 17       	cp	r26, r18
    1190:	b3 07       	cpc	r27, r19
    1192:	61 f5       	brne	.+88     	; 0x11ec <modbusWrite()+0x590>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:653
          temp = temp | writeSlave[writeIDarray[i]].writeDigitalData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j];
    1194:	c3 5f       	subi	r28, 0xF3	; 243
    1196:	d0 4f       	sbci	r29, 0xF0	; 240
    1198:	a8 81       	ld	r26, Y
    119a:	b9 81       	ldd	r27, Y+1	; 0x01
    119c:	cd 50       	subi	r28, 0x0D	; 13
    119e:	df 40       	sbci	r29, 0x0F	; 15
    11a0:	bc 91       	ld	r27, X
    11a2:	c9 5f       	subi	r28, 0xF9	; 249
    11a4:	d0 4f       	sbci	r29, 0xF0	; 240
    11a6:	b8 83       	st	Y, r27
    11a8:	c7 50       	subi	r28, 0x07	; 7
    11aa:	df 40       	sbci	r29, 0x0F	; 15
    11ac:	8b 2b       	or	r24, r27
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:654
          writeSlave[writeIDarray[i]].digitalMsgData = writeSlave[writeIDarray[i]].digitalMsgData | (temp << j);
    11ae:	6c 01       	movw	r12, r24
    11b0:	0a 2c       	mov	r0, r10
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <modbusWrite()+0x55c>
    11b4:	cc 0c       	add	r12, r12
    11b6:	dd 1c       	adc	r13, r13
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <modbusWrite()+0x558>
    11bc:	a0 81       	ld	r26, Z
    11be:	b1 81       	ldd	r27, Z+1	; 0x01
    11c0:	ac 29       	or	r26, r12
    11c2:	bd 29       	or	r27, r13
    11c4:	b1 83       	std	Z+1, r27	; 0x01
    11c6:	a0 83       	st	Z, r26
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:655
          slaveSaved[writeIDarray[i]].writeDigitalOldData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j] = writeSlave[writeIDarray[i]].writeDigitalData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j];
    11c8:	c9 5f       	subi	r28, 0xF9	; 249
    11ca:	d0 4f       	sbci	r29, 0xF0	; 240
    11cc:	c8 80       	ld	r12, Y
    11ce:	c7 50       	subi	r28, 0x07	; 7
    11d0:	df 40       	sbci	r29, 0x0F	; 15
    11d2:	c1 5f       	subi	r28, 0xF1	; 241
    11d4:	d0 4f       	sbci	r29, 0xF0	; 240
    11d6:	a8 81       	ld	r26, Y
    11d8:	b9 81       	ldd	r27, Y+1	; 0x01
    11da:	cf 50       	subi	r28, 0x0F	; 15
    11dc:	df 40       	sbci	r29, 0x0F	; 15
    11de:	cc 92       	st	X, r12
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:656
          dataFlag = 1;
    11e0:	a1 e0       	ldi	r26, 0x01	; 1
    11e2:	c9 5f       	subi	r28, 0xF9	; 249
    11e4:	d0 4f       	sbci	r29, 0xF0	; 240
    11e6:	a8 83       	st	Y, r26
    11e8:	c7 50       	subi	r28, 0x07	; 7
    11ea:	df 40       	sbci	r29, 0x0F	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:651
    writeSlave[writeIDarray[i]].digitalMsgData = 0;
    //Omregner bytes til bits om tilføjer nyt og gamle data til beskeden
    for (int j = 0; j < (writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1; j++) {
      dataFlag = 0;
      temp = 0;
      for (int k = 0; k < writeSlave[writeIDarray[i]].writeDigitalCount; k++) {
    11ec:	0f 5f       	subi	r16, 0xFF	; 255
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	ba cf       	rjmp	.-140    	; 0x1166 <modbusWrite()+0x50a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:659
          writeSlave[writeIDarray[i]].digitalMsgData = writeSlave[writeIDarray[i]].digitalMsgData | (temp << j);
          slaveSaved[writeIDarray[i]].writeDigitalOldData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j] = writeSlave[writeIDarray[i]].writeDigitalData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j];
          dataFlag = 1;
        }
      }
      if (!dataFlag) {
    11f2:	c9 5f       	subi	r28, 0xF9	; 249
    11f4:	d0 4f       	sbci	r29, 0xF0	; 240
    11f6:	b8 81       	ld	r27, Y
    11f8:	c7 50       	subi	r28, 0x07	; 7
    11fa:	df 40       	sbci	r29, 0x0F	; 15
    11fc:	b1 11       	cpse	r27, r1
    11fe:	18 c0       	rjmp	.+48     	; 0x1230 <modbusWrite()+0x5d4>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:660
        temp = temp | slaveSaved[writeIDarray[i]].writeDigitalOldData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j];
    1200:	c7 5f       	subi	r28, 0xF7	; 247
    1202:	d0 4f       	sbci	r29, 0xF0	; 240
    1204:	a8 81       	ld	r26, Y
    1206:	b9 81       	ldd	r27, Y+1	; 0x01
    1208:	c9 50       	subi	r28, 0x09	; 9
    120a:	df 40       	sbci	r29, 0x0F	; 15
    120c:	a2 0f       	add	r26, r18
    120e:	b3 1f       	adc	r27, r19
    1210:	a6 5e       	subi	r26, 0xE6	; 230
    1212:	bc 4f       	sbci	r27, 0xFC	; 252
    1214:	ac 91       	ld	r26, X
    1216:	8a 2b       	or	r24, r26
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:661
        writeSlave[writeIDarray[i]].digitalMsgData = writeSlave[writeIDarray[i]].digitalMsgData | (temp << j);
    1218:	0a 2c       	mov	r0, r10
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <modbusWrite()+0x5c4>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <modbusWrite()+0x5c0>
    1224:	a0 81       	ld	r26, Z
    1226:	b1 81       	ldd	r27, Z+1	; 0x01
    1228:	8a 2b       	or	r24, r26
    122a:	9b 2b       	or	r25, r27
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:648
      }
    }

    writeSlave[writeIDarray[i]].digitalMsgData = 0;
    //Omregner bytes til bits om tilføjer nyt og gamle data til beskeden
    for (int j = 0; j < (writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1; j++) {
    1230:	0f ef       	ldi	r16, 0xFF	; 255
    1232:	a0 1a       	sub	r10, r16
    1234:	b0 0a       	sbc	r11, r16
    1236:	2f 5f       	subi	r18, 0xFF	; 255
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	66 cf       	rjmp	.-308    	; 0x1108 <modbusWrite()+0x4ac>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:665
        temp = temp | slaveSaved[writeIDarray[i]].writeDigitalOldData[writeSlave[writeIDarray[i]].writeDigitalSmallAdress + j];
        writeSlave[writeIDarray[i]].digitalMsgData = writeSlave[writeIDarray[i]].digitalMsgData | (temp << j);
      }
    }

    if (writeSlave[writeIDarray[i]].writeDigitalCount > 0) {
    123c:	16 16       	cp	r1, r22
    123e:	17 06       	cpc	r1, r23
    1240:	0c f0       	brlt	.+2      	; 0x1244 <modbusWrite()+0x5e8>
    1242:	6f c0       	rjmp	.+222    	; 0x1322 <modbusWrite()+0x6c6>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:667

      memset(ADU, 0, sizeof ADU);
    1244:	88 e1       	ldi	r24, 0x18	; 24
    1246:	c5 5f       	subi	r28, 0xF5	; 245
    1248:	d0 4f       	sbci	r29, 0xF0	; 240
    124a:	a8 81       	ld	r26, Y
    124c:	b9 81       	ldd	r27, Y+1	; 0x01
    124e:	cb 50       	subi	r28, 0x0B	; 11
    1250:	df 40       	sbci	r29, 0x0F	; 15
    1252:	1d 92       	st	X+, r1
    1254:	8a 95       	dec	r24
    1256:	e9 f7       	brne	.-6      	; 0x1252 <modbusWrite()+0x5f6>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:672
      ADUsize = 0;
      CRC = 0;

      //Assempling ADU message
      ADU[ADUsize++] = writeIDarray[i];
    1258:	cb 53       	subi	r28, 0x3B	; 59
    125a:	d1 4f       	sbci	r29, 0xF1	; 241
    125c:	e8 82       	st	Y, r14
    125e:	c5 5c       	subi	r28, 0xC5	; 197
    1260:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:673
      ADU[ADUsize++] = 0x0F;  //Function code
    1262:	8f e0       	ldi	r24, 0x0F	; 15
    1264:	ca 53       	subi	r28, 0x3A	; 58
    1266:	d1 4f       	sbci	r29, 0xF1	; 241
    1268:	88 83       	st	Y, r24
    126a:	c6 5c       	subi	r28, 0xC6	; 198
    126c:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:674
      ADU[ADUsize++] = highByte(writeSlave[writeIDarray[i]].writeDigitalSmallAdress);
    126e:	c9 53       	subi	r28, 0x39	; 57
    1270:	d1 4f       	sbci	r29, 0xF1	; 241
    1272:	78 82       	st	Y, r7
    1274:	c7 5c       	subi	r28, 0xC7	; 199
    1276:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:675
      ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].writeDigitalSmallAdress);
    1278:	c8 53       	subi	r28, 0x38	; 56
    127a:	d1 4f       	sbci	r29, 0xF1	; 241
    127c:	68 82       	st	Y, r6
    127e:	c8 5c       	subi	r28, 0xC8	; 200
    1280:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:676
      ADU[ADUsize++] = highByte((writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1);
    1282:	c7 53       	subi	r28, 0x37	; 55
    1284:	d1 4f       	sbci	r29, 0xF1	; 241
    1286:	98 82       	st	Y, r9
    1288:	c9 5c       	subi	r28, 0xC9	; 201
    128a:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:677
      ADU[ADUsize++] = lowByte((writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1);
    128c:	cb 5f       	subi	r28, 0xFB	; 251
    128e:	d0 4f       	sbci	r29, 0xF0	; 240
    1290:	88 81       	ld	r24, Y
    1292:	c5 50       	subi	r28, 0x05	; 5
    1294:	df 40       	sbci	r29, 0x0F	; 15
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	86 19       	sub	r24, r6
    129a:	c6 53       	subi	r28, 0x36	; 54
    129c:	d1 4f       	sbci	r29, 0xF1	; 241
    129e:	88 83       	st	Y, r24
    12a0:	ca 5c       	subi	r28, 0xCA	; 202
    12a2:	de 40       	sbci	r29, 0x0E	; 14
    12a4:	f4 9e       	mul	r15, r20
    12a6:	f0 01       	movw	r30, r0
    12a8:	f5 9e       	mul	r15, r21
    12aa:	f0 0d       	add	r31, r0
    12ac:	11 24       	eor	r1, r1
    12ae:	44 24       	eor	r4, r4
    12b0:	43 94       	inc	r4
    12b2:	51 2c       	mov	r5, r1
    12b4:	4c 0e       	add	r4, r28
    12b6:	5d 1e       	adc	r5, r29
    12b8:	e4 0d       	add	r30, r4
    12ba:	f5 1d       	adc	r31, r5
    12bc:	e8 58       	subi	r30, 0x88	; 136
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:678
      if ((writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1 > 8) {
    12c4:	09 e0       	ldi	r16, 0x09	; 9
    12c6:	80 16       	cp	r8, r16
    12c8:	91 04       	cpc	r9, r1
    12ca:	08 f4       	brcc	.+2      	; 0x12ce <modbusWrite()+0x672>
    12cc:	fe c0       	rjmp	.+508    	; 0x14ca <modbusWrite()+0x86e>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:679
        ADU[ADUsize++] = 0x02;
    12ce:	22 e0       	ldi	r18, 0x02	; 2
    12d0:	c5 53       	subi	r28, 0x35	; 53
    12d2:	d1 4f       	sbci	r29, 0xF1	; 241
    12d4:	28 83       	st	Y, r18
    12d6:	cb 5c       	subi	r28, 0xCB	; 203
    12d8:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:680
        ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].digitalMsgData);
    12da:	c4 53       	subi	r28, 0x34	; 52
    12dc:	d1 4f       	sbci	r29, 0xF1	; 241
    12de:	88 83       	st	Y, r24
    12e0:	cc 5c       	subi	r28, 0xCC	; 204
    12e2:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:681
        ADU[ADUsize++] = highByte(writeSlave[writeIDarray[i]].digitalMsgData);
    12e4:	c3 53       	subi	r28, 0x33	; 51
    12e6:	d1 4f       	sbci	r29, 0xF1	; 241
    12e8:	98 83       	st	Y, r25
    12ea:	cd 5c       	subi	r28, 0xCD	; 205
    12ec:	de 40       	sbci	r29, 0x0E	; 14
    12ee:	09 e0       	ldi	r16, 0x09	; 9
    12f0:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:688
        ADU[ADUsize++] = 0x01;
        ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].digitalMsgData);
      }

      //Calculate CRC16 for MODBUS
      CRC = CRC16_modbus(ADU, ADUsize);
    12f2:	b8 01       	movw	r22, r16
    12f4:	ce 01       	movw	r24, r28
    12f6:	8b 53       	subi	r24, 0x3B	; 59
    12f8:	91 4f       	sbci	r25, 0xF1	; 241
    12fa:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:689
      ADU[ADUsize++] = lowByte(CRC);
    12fe:	e5 ec       	ldi	r30, 0xC5	; 197
    1300:	fe e0       	ldi	r31, 0x0E	; 14
    1302:	ec 0f       	add	r30, r28
    1304:	fd 1f       	adc	r31, r29
    1306:	e0 0f       	add	r30, r16
    1308:	f1 1f       	adc	r31, r17
    130a:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:690
      ADU[ADUsize++] = highByte(CRC);
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	a8 01       	movw	r20, r16
    1310:	4e 5f       	subi	r20, 0xFE	; 254
    1312:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:693

      // ADU to MODBUS slave
      modbusSerial.write(ADU, ADUsize);
    1314:	be 01       	movw	r22, r28
    1316:	6b 53       	subi	r22, 0x3B	; 59
    1318:	71 4f       	sbci	r23, 0xF1	; 241
    131a:	88 ef       	ldi	r24, 0xF8	; 248
    131c:	96 e1       	ldi	r25, 0x16	; 22
    131e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:696
    }

    if (writeSlave[writeIDarray[i]].writeAnalogCount > 0) {
    1322:	d1 01       	movw	r26, r2
    1324:	1d 91       	ld	r17, X+
    1326:	1d 01       	movw	r2, r26
    1328:	61 2f       	mov	r22, r17
    132a:	01 2e       	mov	r0, r17
    132c:	00 0c       	add	r0, r0
    132e:	77 0b       	sbc	r23, r23
    1330:	f6 9e       	mul	r15, r22
    1332:	90 01       	movw	r18, r0
    1334:	f7 9e       	mul	r15, r23
    1336:	30 0d       	add	r19, r0
    1338:	11 24       	eor	r1, r1
    133a:	e1 e0       	ldi	r30, 0x01	; 1
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	ec 0f       	add	r30, r28
    1340:	fd 1f       	adc	r31, r29
    1342:	2e 0f       	add	r18, r30
    1344:	3f 1f       	adc	r19, r31
    1346:	d9 01       	movw	r26, r18
    1348:	a4 58       	subi	r26, 0x84	; 132
    134a:	bf 4f       	sbci	r27, 0xFF	; 255
    134c:	4d 90       	ld	r4, X+
    134e:	5c 90       	ld	r5, X
    1350:	cb 5f       	subi	r28, 0xFB	; 251
    1352:	d0 4f       	sbci	r29, 0xF0	; 240
    1354:	59 82       	std	Y+1, r5	; 0x01
    1356:	48 82       	st	Y, r4
    1358:	c5 50       	subi	r28, 0x05	; 5
    135a:	df 40       	sbci	r29, 0x0F	; 15
    135c:	14 14       	cp	r1, r4
    135e:	15 04       	cpc	r1, r5
    1360:	0c f0       	brlt	.+2      	; 0x1364 <modbusWrite()+0x708>
    1362:	d2 cd       	rjmp	.-1116   	; 0xf08 <modbusWrite()+0x2ac>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:697
      memset(ADU, 0, sizeof ADU);
    1364:	88 e1       	ldi	r24, 0x18	; 24
    1366:	c5 5f       	subi	r28, 0xF5	; 245
    1368:	d0 4f       	sbci	r29, 0xF0	; 240
    136a:	a8 81       	ld	r26, Y
    136c:	b9 81       	ldd	r27, Y+1	; 0x01
    136e:	cb 50       	subi	r28, 0x0B	; 11
    1370:	df 40       	sbci	r29, 0x0F	; 15
    1372:	1d 92       	st	X+, r1
    1374:	8a 95       	dec	r24
    1376:	e9 f7       	brne	.-6      	; 0x1372 <modbusWrite()+0x716>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:702
      ADUsize = 0;
      CRC = 0;

      //Assempling ADU message
      ADU[ADUsize++] = writeIDarray[i];
    1378:	cb 53       	subi	r28, 0x3B	; 59
    137a:	d1 4f       	sbci	r29, 0xF1	; 241
    137c:	18 83       	st	Y, r17
    137e:	c5 5c       	subi	r28, 0xC5	; 197
    1380:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:703
      ADU[ADUsize++] = 0x10;  //Function code
    1382:	80 e1       	ldi	r24, 0x10	; 16
    1384:	ca 53       	subi	r28, 0x3A	; 58
    1386:	d1 4f       	sbci	r29, 0xF1	; 241
    1388:	88 83       	st	Y, r24
    138a:	c6 5c       	subi	r28, 0xC6	; 198
    138c:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:704
      ADU[ADUsize++] = highByte(writeSlave[writeIDarray[i]].writeAnalogSmallAdress);
    138e:	c9 01       	movw	r24, r18
    1390:	80 5a       	subi	r24, 0xA0	; 160
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	fc 01       	movw	r30, r24
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	c9 53       	subi	r28, 0x39	; 57
    139c:	d1 4f       	sbci	r29, 0xF1	; 241
    139e:	98 83       	st	Y, r25
    13a0:	c7 5c       	subi	r28, 0xC7	; 199
    13a2:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:705
      ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].writeAnalogSmallAdress);
    13a4:	c8 53       	subi	r28, 0x38	; 56
    13a6:	d1 4f       	sbci	r29, 0xF1	; 241
    13a8:	88 83       	st	Y, r24
    13aa:	c8 5c       	subi	r28, 0xC8	; 200
    13ac:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:706
      ADU[ADUsize++] = highByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
    13ae:	2e 59       	subi	r18, 0x9E	; 158
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	d9 01       	movw	r26, r18
    13b4:	4d 91       	ld	r20, X+
    13b6:	5c 91       	ld	r21, X
    13b8:	9a 01       	movw	r18, r20
    13ba:	2f 5f       	subi	r18, 0xFF	; 255
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255
    13be:	28 1b       	sub	r18, r24
    13c0:	39 0b       	sbc	r19, r25
    13c2:	c7 53       	subi	r28, 0x37	; 55
    13c4:	d1 4f       	sbci	r29, 0xF1	; 241
    13c6:	38 83       	st	Y, r19
    13c8:	c9 5c       	subi	r28, 0xC9	; 201
    13ca:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:707
      ADU[ADUsize++] = lowByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
    13cc:	4f 5f       	subi	r20, 0xFF	; 255
    13ce:	48 1b       	sub	r20, r24
    13d0:	c6 53       	subi	r28, 0x36	; 54
    13d2:	d1 4f       	sbci	r29, 0xF1	; 241
    13d4:	48 83       	st	Y, r20
    13d6:	ca 5c       	subi	r28, 0xCA	; 202
    13d8:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:708
      ADU[ADUsize++] = ((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1) * 2;
    13da:	42 2f       	mov	r20, r18
    13dc:	44 0f       	add	r20, r20
    13de:	c5 53       	subi	r28, 0x35	; 53
    13e0:	d1 4f       	sbci	r29, 0xF1	; 241
    13e2:	48 83       	st	Y, r20
    13e4:	cb 5c       	subi	r28, 0xCB	; 203
    13e6:	de 40       	sbci	r29, 0x0E	; 14
    13e8:	bf 2d       	mov	r27, r15
    13ea:	1b 02       	muls	r17, r27
    13ec:	40 01       	movw	r8, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	3c 01       	movw	r6, r24
    13f2:	e6 e5       	ldi	r30, 0x56	; 86
    13f4:	1e 02       	muls	r17, r30
    13f6:	60 0c       	add	r6, r0
    13f8:	71 1c       	adc	r7, r1
    13fa:	11 24       	eor	r1, r1
    13fc:	66 0c       	add	r6, r6
    13fe:	77 1c       	adc	r7, r7
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:710

      for (int j = 0; j < (writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1; j++) {
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:708
      ADU[ADUsize++] = 0x10;  //Function code
      ADU[ADUsize++] = highByte(writeSlave[writeIDarray[i]].writeAnalogSmallAdress);
      ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].writeAnalogSmallAdress);
      ADU[ADUsize++] = highByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
      ADU[ADUsize++] = lowByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
      ADU[ADUsize++] = ((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1) * 2;
    1404:	07 e0       	ldi	r16, 0x07	; 7
    1406:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:714

      for (int j = 0; j < (writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1; j++) {
        dataFlag = 0;
        for (int k = 0; k < writeSlave[writeIDarray[i]].writeAnalogCount; k++) {
          if (writeSlave[writeIDarray[i]].writeAnalogAdress[k] == writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j) {
            ADU[ADUsize++] = highByte(writeSlave[writeIDarray[i]].writeAnalogData[writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j]);
    1408:	ef e3       	ldi	r30, 0x3F	; 63
    140a:	e6 9f       	mul	r30, r22
    140c:	60 01       	movw	r12, r0
    140e:	e7 9f       	mul	r30, r23
    1410:	d0 0c       	add	r13, r0
    1412:	11 24       	eor	r1, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:710
      ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].writeAnalogSmallAdress);
      ADU[ADUsize++] = highByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
      ADU[ADUsize++] = lowByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
      ADU[ADUsize++] = ((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1) * 2;

      for (int j = 0; j < (writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1; j++) {
    1414:	42 17       	cp	r20, r18
    1416:	53 07       	cpc	r21, r19
    1418:	09 f4       	brne	.+2      	; 0x141c <modbusWrite()+0x7c0>
    141a:	65 c0       	rjmp	.+202    	; 0x14e6 <modbusWrite()+0x88a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:712
        dataFlag = 0;
        for (int k = 0; k < writeSlave[writeIDarray[i]].writeAnalogCount; k++) {
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:711
      ADU[ADUsize++] = highByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
      ADU[ADUsize++] = lowByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
      ADU[ADUsize++] = ((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1) * 2;

      for (int j = 0; j < (writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1; j++) {
        dataFlag = 0;
    1420:	e1 2c       	mov	r14, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:714
        for (int k = 0; k < writeSlave[writeIDarray[i]].writeAnalogCount; k++) {
          if (writeSlave[writeIDarray[i]].writeAnalogAdress[k] == writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j) {
            ADU[ADUsize++] = highByte(writeSlave[writeIDarray[i]].writeAnalogData[writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j]);
    1422:	f6 01       	movw	r30, r12
    1424:	e8 0f       	add	r30, r24
    1426:	f9 1f       	adc	r31, r25
    1428:	b0 96       	adiw	r30, 0x20	; 32
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	44 24       	eor	r4, r4
    1430:	43 94       	inc	r4
    1432:	51 2c       	mov	r5, r1
    1434:	4c 0e       	add	r4, r28
    1436:	5d 1e       	adc	r5, r29
    1438:	e4 0d       	add	r30, r4
    143a:	f5 1d       	adc	r31, r5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:713
      ADU[ADUsize++] = ((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1) * 2;

      for (int j = 0; j < (writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1; j++) {
        dataFlag = 0;
        for (int k = 0; k < writeSlave[writeIDarray[i]].writeAnalogCount; k++) {
          if (writeSlave[writeIDarray[i]].writeAnalogAdress[k] == writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j) {
    143c:	5b 01       	movw	r10, r22
    143e:	aa 0c       	add	r10, r10
    1440:	bb 1c       	adc	r11, r11
    1442:	a8 0c       	add	r10, r8
    1444:	b9 1c       	adc	r11, r9
    1446:	a1 e0       	ldi	r26, 0x01	; 1
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ac 0f       	add	r26, r28
    144c:	bd 1f       	adc	r27, r29
    144e:	aa 0e       	add	r10, r26
    1450:	bb 1e       	adc	r11, r27
    1452:	d5 01       	movw	r26, r10
    1454:	ad 90       	ld	r10, X+
    1456:	bc 90       	ld	r11, X
    1458:	a8 16       	cp	r10, r24
    145a:	b9 06       	cpc	r11, r25
    145c:	91 f4       	brne	.+36     	; 0x1482 <modbusWrite()+0x826>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:714
            ADU[ADUsize++] = highByte(writeSlave[writeIDarray[i]].writeAnalogData[writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j]);
    145e:	e0 80       	ld	r14, Z
    1460:	51 80       	ldd	r5, Z+1	; 0x01
    1462:	a5 ec       	ldi	r26, 0xC5	; 197
    1464:	aa 2e       	mov	r10, r26
    1466:	ae e0       	ldi	r26, 0x0E	; 14
    1468:	ba 2e       	mov	r11, r26
    146a:	ac 0e       	add	r10, r28
    146c:	bd 1e       	adc	r11, r29
    146e:	a0 0e       	add	r10, r16
    1470:	b1 1e       	adc	r11, r17
    1472:	d5 01       	movw	r26, r10
    1474:	5c 92       	st	X, r5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:715
            ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].writeAnalogData[writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j]);
    1476:	11 96       	adiw	r26, 0x01	; 1
    1478:	ec 92       	st	X, r14
    147a:	0e 5f       	subi	r16, 0xFE	; 254
    147c:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:716
            dataFlag = 1;
    147e:	ee 24       	eor	r14, r14
    1480:	e3 94       	inc	r14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:712
      ADU[ADUsize++] = lowByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
      ADU[ADUsize++] = ((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1) * 2;

      for (int j = 0; j < (writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1; j++) {
        dataFlag = 0;
        for (int k = 0; k < writeSlave[writeIDarray[i]].writeAnalogCount; k++) {
    1482:	6f 5f       	subi	r22, 0xFF	; 255
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	cb 5f       	subi	r28, 0xFB	; 251
    1488:	d0 4f       	sbci	r29, 0xF0	; 240
    148a:	48 80       	ld	r4, Y
    148c:	59 80       	ldd	r5, Y+1	; 0x01
    148e:	c5 50       	subi	r28, 0x05	; 5
    1490:	df 40       	sbci	r29, 0x0F	; 15
    1492:	46 16       	cp	r4, r22
    1494:	57 06       	cpc	r5, r23
    1496:	91 f6       	brne	.-92     	; 0x143c <modbusWrite()+0x7e0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:719
            ADU[ADUsize++] = highByte(writeSlave[writeIDarray[i]].writeAnalogData[writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j]);
            ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].writeAnalogData[writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j]);
            dataFlag = 1;
          }
        }
        if (!dataFlag) {
    1498:	e1 10       	cpse	r14, r1
    149a:	13 c0       	rjmp	.+38     	; 0x14c2 <modbusWrite()+0x866>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:720
          ADU[ADUsize++] = highByte(slaveSaved[writeIDarray[i]].writeAnalogOldData[writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j]);
    149c:	fa 01       	movw	r30, r20
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e6 0d       	add	r30, r6
    14a4:	f7 1d       	adc	r31, r7
    14a6:	e6 50       	subi	r30, 0x06	; 6
    14a8:	fd 4f       	sbci	r31, 0xFD	; 253
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	e5 ec       	ldi	r30, 0xC5	; 197
    14b0:	fe e0       	ldi	r31, 0x0E	; 14
    14b2:	ec 0f       	add	r30, r28
    14b4:	fd 1f       	adc	r31, r29
    14b6:	e0 0f       	add	r30, r16
    14b8:	f1 1f       	adc	r31, r17
    14ba:	70 83       	st	Z, r23
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:721
          ADU[ADUsize++] = lowByte(slaveSaved[writeIDarray[i]].writeAnalogOldData[writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j]);
    14bc:	61 83       	std	Z+1, r22	; 0x01
    14be:	0e 5f       	subi	r16, 0xFE	; 254
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:710
      ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].writeAnalogSmallAdress);
      ADU[ADUsize++] = highByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
      ADU[ADUsize++] = lowByte((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1);
      ADU[ADUsize++] = ((writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1) * 2;

      for (int j = 0; j < (writeSlave[writeIDarray[i]].writeAnalogLargeAdress - writeSlave[writeIDarray[i]].writeAnalogSmallAdress) + 1; j++) {
    14c2:	4f 5f       	subi	r20, 0xFF	; 255
    14c4:	5f 4f       	sbci	r21, 0xFF	; 255
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	a5 cf       	rjmp	.-182    	; 0x1414 <modbusWrite()+0x7b8>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:683
      if ((writeSlave[writeIDarray[i]].writeDigitalLargeAdress - writeSlave[writeIDarray[i]].writeDigitalSmallAdress) + 1 > 8) {
        ADU[ADUsize++] = 0x02;
        ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].digitalMsgData);
        ADU[ADUsize++] = highByte(writeSlave[writeIDarray[i]].digitalMsgData);
      } else {
        ADU[ADUsize++] = 0x01;
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	c5 53       	subi	r28, 0x35	; 53
    14ce:	d1 4f       	sbci	r29, 0xF1	; 241
    14d0:	98 83       	st	Y, r25
    14d2:	cb 5c       	subi	r28, 0xCB	; 203
    14d4:	de 40       	sbci	r29, 0x0E	; 14
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:684
        ADU[ADUsize++] = lowByte(writeSlave[writeIDarray[i]].digitalMsgData);
    14d6:	c4 53       	subi	r28, 0x34	; 52
    14d8:	d1 4f       	sbci	r29, 0xF1	; 241
    14da:	88 83       	st	Y, r24
    14dc:	cc 5c       	subi	r28, 0xCC	; 204
    14de:	de 40       	sbci	r29, 0x0E	; 14
    14e0:	08 e0       	ldi	r16, 0x08	; 8
    14e2:	10 e0       	ldi	r17, 0x00	; 0
    14e4:	06 cf       	rjmp	.-500    	; 0x12f2 <modbusWrite()+0x696>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:726
          ADU[ADUsize++] = lowByte(slaveSaved[writeIDarray[i]].writeAnalogOldData[writeSlave[writeIDarray[i]].writeAnalogSmallAdress + j]);
        }
      }

      //Calculate CRC16 for MODBUS
      CRC = CRC16_modbus(ADU, ADUsize);
    14e6:	b8 01       	movw	r22, r16
    14e8:	ce 01       	movw	r24, r28
    14ea:	8b 53       	subi	r24, 0x3B	; 59
    14ec:	91 4f       	sbci	r25, 0xF1	; 241
    14ee:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:727
      ADU[ADUsize++] = lowByte(CRC);
    14f2:	e5 ec       	ldi	r30, 0xC5	; 197
    14f4:	fe e0       	ldi	r31, 0x0E	; 14
    14f6:	ec 0f       	add	r30, r28
    14f8:	fd 1f       	adc	r31, r29
    14fa:	e0 0f       	add	r30, r16
    14fc:	f1 1f       	adc	r31, r17
    14fe:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:728
      ADU[ADUsize++] = highByte(CRC);
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	a8 01       	movw	r20, r16
    1504:	4e 5f       	subi	r20, 0xFE	; 254
    1506:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:731

      // ADU to MODBUS slave
      modbusSerial.write(ADU, ADUsize);
    1508:	be 01       	movw	r22, r28
    150a:	6b 53       	subi	r22, 0x3B	; 59
    150c:	71 4f       	sbci	r23, 0xF1	; 241
    150e:	88 ef       	ldi	r24, 0xF8	; 248
    1510:	96 e1       	ldi	r25, 0x16	; 22
    1512:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>
    1516:	f8 cc       	rjmp	.-1552   	; 0xf08 <modbusWrite()+0x2ac>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:734
    }
  }
}
    1518:	cc 5e       	subi	r28, 0xEC	; 236
    151a:	d0 4f       	sbci	r29, 0xF0	; 240
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	df 90       	pop	r13
    1534:	cf 90       	pop	r12
    1536:	bf 90       	pop	r11
    1538:	af 90       	pop	r10
    153a:	9f 90       	pop	r9
    153c:	8f 90       	pop	r8
    153e:	7f 90       	pop	r7
    1540:	6f 90       	pop	r6
    1542:	5f 90       	pop	r5
    1544:	4f 90       	pop	r4
    1546:	3f 90       	pop	r3
    1548:	2f 90       	pop	r2
    154a:	08 95       	ret

0000154c <modbusRead()>:
modbusRead():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:320
  simSerial.println(F("AT+CAOPEN=0,0,\"UDP\",\"207.154.251.171\",8080"));  // Open UDP connection/socket
  responseCheck("OK", 10000);
  clrsimBuffer();
}

void modbusRead() {
    154c:	2f 92       	push	r2
    154e:	3f 92       	push	r3
    1550:	4f 92       	push	r4
    1552:	5f 92       	push	r5
    1554:	6f 92       	push	r6
    1556:	7f 92       	push	r7
    1558:	8f 92       	push	r8
    155a:	9f 92       	push	r9
    155c:	af 92       	push	r10
    155e:	bf 92       	push	r11
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	cb 5a       	subi	r28, 0xAB	; 171
    1576:	d5 40       	sbci	r29, 0x05	; 5
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:324

  struct slaves_info slave[30];  //Create slave structures

  if (!slaveSetupCheck) {  //Save information of slaves. Will only do after a setup.
    1582:	80 91 ec 16 	lds	r24, 0x16EC	; 0x8016ec <slaveSetupCheck>
    1586:	81 11       	cpse	r24, r1
    1588:	6e c1       	rjmp	.+732    	; 0x1866 <modbusRead()+0x31a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:332
    char ID = 0;
    short ADR = 0;
    char VAR = 0;
    short VAL = 0;
    int IDCount = 0;
    memset(IDarray, 0, sizeof(IDarray));
    158a:	e0 e6       	ldi	r30, 0x60	; 96
    158c:	f2 e0       	ldi	r31, 0x02	; 2
    158e:	8e e1       	ldi	r24, 0x1E	; 30
    1590:	df 01       	movw	r26, r30
    1592:	1d 92       	st	X+, r1
    1594:	8a 95       	dec	r24
    1596:	e9 f7       	brne	.-6      	; 0x1592 <modbusRead()+0x46>
    1598:	e0 91 34 18 	lds	r30, 0x1834	; 0x801834 <simBuffer>
    159c:	f0 91 35 18 	lds	r31, 0x1835	; 0x801835 <simBuffer+0x1>
    15a0:	81 81       	ldd	r24, Z+1	; 0x01
    15a2:	92 81       	ldd	r25, Z+2	; 0x02
    15a4:	d8 2e       	mov	r13, r24
    15a6:	c9 2e       	mov	r12, r25
    15a8:	c6 55       	subi	r28, 0x56	; 86
    15aa:	da 4f       	sbci	r29, 0xFA	; 250
    15ac:	d9 82       	std	Y+1, r13	; 0x01
    15ae:	c8 82       	st	Y, r12
    15b0:	ca 5a       	subi	r28, 0xAA	; 170
    15b2:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:334

    dataCount = dataCount | simBuffer[1];  //Number of data/adresses to read
    15b4:	03 e0       	ldi	r16, 0x03	; 3
    15b6:	e0 2e       	mov	r14, r16
    15b8:	f1 2c       	mov	r15, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:338
    dataCount = dataCount << 8;
    dataCount = dataCount | simBuffer[2];

    for (int i = 0; i < (dataCount); i++) {  //Save ID, adresses and initial value
    15ba:	d1 2c       	mov	r13, r1
    15bc:	c1 2c       	mov	r12, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:331
    unsigned short dataCount = 0;
    char ID = 0;
    short ADR = 0;
    char VAR = 0;
    short VAL = 0;
    int IDCount = 0;
    15be:	b1 2c       	mov	r11, r1
    15c0:	a1 2c       	mov	r10, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:352

      EEPROM.put(ID, VAL);

      if (!(strchr(IDarray, ID) > 0)) {
        IDarray[IDCount++] = ID;
        slaveSaved[ID].digitalCount = 0;
    15c2:	8c ea       	ldi	r24, 0xAC	; 172
    15c4:	28 2e       	mov	r2, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:338

    dataCount = dataCount | simBuffer[1];  //Number of data/adresses to read
    dataCount = dataCount << 8;
    dataCount = dataCount | simBuffer[2];

    for (int i = 0; i < (dataCount); i++) {  //Save ID, adresses and initial value
    15c6:	c6 55       	subi	r28, 0x56	; 86
    15c8:	da 4f       	sbci	r29, 0xFA	; 250
    15ca:	28 81       	ld	r18, Y
    15cc:	39 81       	ldd	r19, Y+1	; 0x01
    15ce:	ca 5a       	subi	r28, 0xAA	; 170
    15d0:	d5 40       	sbci	r29, 0x05	; 5
    15d2:	c2 16       	cp	r12, r18
    15d4:	d3 06       	cpc	r13, r19
    15d6:	09 f4       	brne	.+2      	; 0x15da <modbusRead()+0x8e>
    15d8:	ab c0       	rjmp	.+342    	; 0x1730 <modbusRead()+0x1e4>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:339
      ID = simBuffer[(i * 6) + 3];
    15da:	e0 91 34 18 	lds	r30, 0x1834	; 0x801834 <simBuffer>
    15de:	f0 91 35 18 	lds	r31, 0x1835	; 0x801835 <simBuffer+0x1>
    15e2:	ee 0d       	add	r30, r14
    15e4:	ff 1d       	adc	r31, r15
    15e6:	30 80       	ld	r3, Z
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:340
      ADR = simBuffer[(i * 6) + 4];
    15e8:	81 81       	ldd	r24, Z+1	; 0x01
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:342
      ADR = ADR << 8;
      ADR |= simBuffer[(i * 6) + 5];
    15ea:	42 80       	ldd	r4, Z+2	; 0x02
    15ec:	58 2e       	mov	r5, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:343
      VAR = simBuffer[(i * 6) + 6];
    15ee:	33 81       	ldd	r19, Z+3	; 0x03
    15f0:	c7 55       	subi	r28, 0x57	; 87
    15f2:	da 4f       	sbci	r29, 0xFA	; 250
    15f4:	38 83       	st	Y, r19
    15f6:	c9 5a       	subi	r28, 0xA9	; 169
    15f8:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:344
      VAL = simBuffer[(i * 6) + 7];
    15fa:	84 81       	ldd	r24, Z+4	; 0x04
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:346
      VAL = VAL << 8;
      VAL |= simBuffer[(i * 6) + 8];
    15fc:	65 80       	ldd	r6, Z+5	; 0x05
    15fe:	78 2e       	mov	r7, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:348

      EEPROM.put(ID, VAL);
    1600:	03 2d       	mov	r16, r3
    1602:	03 2c       	mov	r0, r3
    1604:	00 0c       	add	r0, r0
    1606:	11 0b       	sbc	r17, r17
operator*():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1608:	c8 01       	movw	r24, r16
    160a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <eeprom_read_byte>
update():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    160e:	68 16       	cp	r6, r24
    1610:	21 f0       	breq	.+8      	; 0x161a <modbusRead()+0xce>
_ZN5EERefaSEh():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1612:	66 2d       	mov	r22, r6
    1614:	c8 01       	movw	r24, r16
    1616:	0e 94 80 17 	call	0x2f00	; 0x2f00 <eeprom_write_byte>
_ZN5EEPtrppEv():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:100
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
    161a:	48 01       	movw	r8, r16
    161c:	4f ef       	ldi	r20, 0xFF	; 255
    161e:	84 1a       	sub	r8, r20
    1620:	94 0a       	sbc	r9, r20
operator*():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1622:	c4 01       	movw	r24, r8
    1624:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <eeprom_read_byte>
update():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    1628:	78 16       	cp	r7, r24
    162a:	21 f0       	breq	.+8      	; 0x1634 <modbusRead()+0xe8>
_ZN5EERefaSEh():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    162c:	67 2d       	mov	r22, r7
    162e:	c4 01       	movw	r24, r8
    1630:	0e 94 80 17 	call	0x2f00	; 0x2f00 <eeprom_write_byte>
modbusRead():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:350

      if (!(strchr(IDarray, ID) > 0)) {
    1634:	b8 01       	movw	r22, r16
    1636:	80 e6       	ldi	r24, 0x60	; 96
    1638:	92 e0       	ldi	r25, 0x02	; 2
    163a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <strchr>
    163e:	89 2b       	or	r24, r25
    1640:	a9 f5       	brne	.+106    	; 0x16ac <modbusRead()+0x160>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:351
        IDarray[IDCount++] = ID;
    1642:	f5 01       	movw	r30, r10
    1644:	e0 5a       	subi	r30, 0xA0	; 160
    1646:	fd 4f       	sbci	r31, 0xFD	; 253
    1648:	30 82       	st	Z, r3
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:352
        slaveSaved[ID].digitalCount = 0;
    164a:	20 9e       	mul	r2, r16
    164c:	c0 01       	movw	r24, r0
    164e:	21 9e       	mul	r2, r17
    1650:	90 0d       	add	r25, r0
    1652:	11 24       	eor	r1, r1
    1654:	82 58       	subi	r24, 0x82	; 130
    1656:	9d 4f       	sbci	r25, 0xFD	; 253
    1658:	fc 01       	movw	r30, r24
    165a:	e8 58       	subi	r30, 0x88	; 136
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	11 82       	std	Z+1, r1	; 0x01
    1660:	10 82       	st	Z, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:353
        slaveSaved[ID].analogCount = 0;
    1662:	86 58       	subi	r24, 0x86	; 134
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	dc 01       	movw	r26, r24
    1668:	1d 92       	st	X+, r1
    166a:	1c 92       	st	X, r1
    166c:	b3 2d       	mov	r27, r3
    166e:	e0 e3       	ldi	r30, 0x30	; 48
    1670:	be 02       	muls	r27, r30
    1672:	c0 01       	movw	r24, r0
    1674:	11 24       	eor	r1, r1
reset():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:43

struct slaves_info {
  unsigned short analogData[16];
  unsigned char digitalData[16];
  void reset() {
    memset(analogData, 0, sizeof(analogData));
    1676:	e1 e0       	ldi	r30, 0x01	; 1
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	ec 0f       	add	r30, r28
    167c:	fd 1f       	adc	r31, r29
    167e:	e8 0f       	add	r30, r24
    1680:	f9 1f       	adc	r31, r25
    1682:	df 01       	movw	r26, r30
    1684:	20 e2       	ldi	r18, 0x20	; 32
    1686:	1d 92       	st	X+, r1
    1688:	2a 95       	dec	r18
    168a:	e9 f7       	brne	.-6      	; 0x1686 <modbusRead()+0x13a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:44
    memset(digitalData, 0, sizeof(digitalData));
    168c:	80 96       	adiw	r24, 0x20	; 32
    168e:	e1 e0       	ldi	r30, 0x01	; 1
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	ec 0f       	add	r30, r28
    1694:	fd 1f       	adc	r31, r29
    1696:	e8 0f       	add	r30, r24
    1698:	f9 1f       	adc	r31, r25
    169a:	df 01       	movw	r26, r30
    169c:	20 e1       	ldi	r18, 0x10	; 16
    169e:	1d 92       	st	X+, r1
    16a0:	2a 95       	dec	r18
    16a2:	e9 f7       	brne	.-6      	; 0x169e <modbusRead()+0x152>
modbusRead():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:351
      VAL |= simBuffer[(i * 6) + 8];

      EEPROM.put(ID, VAL);

      if (!(strchr(IDarray, ID) > 0)) {
        IDarray[IDCount++] = ID;
    16a4:	a5 01       	movw	r20, r10
    16a6:	4f 5f       	subi	r20, 0xFF	; 255
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	5a 01       	movw	r10, r20
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:357
        slaveSaved[ID].digitalCount = 0;
        slaveSaved[ID].analogCount = 0;
        slave[ID].reset();
      }

      if (VAR == 1) {
    16ac:	c7 55       	subi	r28, 0x57	; 87
    16ae:	da 4f       	sbci	r29, 0xFA	; 250
    16b0:	58 81       	ld	r21, Y
    16b2:	c9 5a       	subi	r28, 0xA9	; 169
    16b4:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:358
        slaveSaved[ID].digitalAdress[slaveSaved[ID].digitalCount++] = ADR;
    16b6:	20 9e       	mul	r2, r16
    16b8:	d0 01       	movw	r26, r0
    16ba:	21 9e       	mul	r2, r17
    16bc:	b0 0d       	add	r27, r0
    16be:	11 24       	eor	r1, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:357
        slaveSaved[ID].digitalCount = 0;
        slaveSaved[ID].analogCount = 0;
        slave[ID].reset();
      }

      if (VAR == 1) {
    16c0:	51 30       	cpi	r21, 0x01	; 1
    16c2:	f9 f4       	brne	.+62     	; 0x1702 <modbusRead()+0x1b6>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:358
        slaveSaved[ID].digitalAdress[slaveSaved[ID].digitalCount++] = ADR;
    16c4:	aa 50       	subi	r26, 0x0A	; 10
    16c6:	bd 4f       	sbci	r27, 0xFD	; 253
    16c8:	8d 91       	ld	r24, X+
    16ca:	9c 91       	ld	r25, X
    16cc:	11 97       	sbiw	r26, 0x01	; 1
    16ce:	9c 01       	movw	r18, r24
    16d0:	2f 5f       	subi	r18, 0xFF	; 255
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	2d 93       	st	X+, r18
    16d6:	3c 93       	st	X, r19
    16d8:	66 e5       	ldi	r22, 0x56	; 86
    16da:	60 9f       	mul	r22, r16
    16dc:	f0 01       	movw	r30, r0
    16de:	61 9f       	mul	r22, r17
    16e0:	f0 0d       	add	r31, r0
    16e2:	11 24       	eor	r1, r1
    16e4:	e8 0f       	add	r30, r24
    16e6:	f9 1f       	adc	r31, r25
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	e2 56       	subi	r30, 0x62	; 98
    16ee:	fd 4f       	sbci	r31, 0xFD	; 253
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:361

      } else {
        slaveSaved[ID].analogAdress[slaveSaved[ID].analogCount++] = ADR;
    16f0:	51 82       	std	Z+1, r5	; 0x01
    16f2:	40 82       	st	Z, r4
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:338

    dataCount = dataCount | simBuffer[1];  //Number of data/adresses to read
    dataCount = dataCount << 8;
    dataCount = dataCount | simBuffer[2];

    for (int i = 0; i < (dataCount); i++) {  //Save ID, adresses and initial value
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
    16f6:	c8 1a       	sub	r12, r24
    16f8:	d8 0a       	sbc	r13, r24
    16fa:	96 e0       	ldi	r25, 0x06	; 6
    16fc:	e9 0e       	add	r14, r25
    16fe:	f1 1c       	adc	r15, r1
    1700:	62 cf       	rjmp	.-316    	; 0x15c6 <modbusRead()+0x7a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:361

      if (VAR == 1) {
        slaveSaved[ID].digitalAdress[slaveSaved[ID].digitalCount++] = ADR;

      } else {
        slaveSaved[ID].analogAdress[slaveSaved[ID].analogCount++] = ADR;
    1702:	a8 50       	subi	r26, 0x08	; 8
    1704:	bd 4f       	sbci	r27, 0xFD	; 253
    1706:	8d 91       	ld	r24, X+
    1708:	9c 91       	ld	r25, X
    170a:	11 97       	sbiw	r26, 0x01	; 1
    170c:	9c 01       	movw	r18, r24
    170e:	2f 5f       	subi	r18, 0xFF	; 255
    1710:	3f 4f       	sbci	r19, 0xFF	; 255
    1712:	2d 93       	st	X+, r18
    1714:	3c 93       	st	X, r19
    1716:	76 e5       	ldi	r23, 0x56	; 86
    1718:	70 9f       	mul	r23, r16
    171a:	f0 01       	movw	r30, r0
    171c:	71 9f       	mul	r23, r17
    171e:	f0 0d       	add	r31, r0
    1720:	11 24       	eor	r1, r1
    1722:	e8 0f       	add	r30, r24
    1724:	f9 1f       	adc	r31, r25
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	e2 58       	subi	r30, 0x82	; 130
    172c:	fd 4f       	sbci	r31, 0xFD	; 253
    172e:	e0 cf       	rjmp	.-64     	; 0x16f0 <modbusRead()+0x1a4>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:365
      }
    }
    
    clrsimBuffer();
    1730:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
    1734:	60 e6       	ldi	r22, 0x60	; 96
    1736:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:367

    for (int i = 0; i < strlen(IDarray); i++) {
    1738:	5b 01       	movw	r10, r22
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:369

      if (slaveSaved[IDarray[i]].digitalCount > 0) {
    173a:	ac ea       	ldi	r26, 0xAC	; 172
    173c:	9a 2e       	mov	r9, r26
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:367
      }
    }
    
    clrsimBuffer();

    for (int i = 0; i < strlen(IDarray); i++) {
    173e:	d5 01       	movw	r26, r10
    1740:	0d 90       	ld	r0, X+
    1742:	00 20       	and	r0, r0
    1744:	e9 f7       	brne	.-6      	; 0x1740 <modbusRead()+0x1f4>
    1746:	cd 01       	movw	r24, r26
    1748:	81 56       	subi	r24, 0x61	; 97
    174a:	92 40       	sbci	r25, 0x02	; 2
    174c:	9b 01       	movw	r18, r22
    174e:	20 56       	subi	r18, 0x60	; 96
    1750:	32 40       	sbci	r19, 0x02	; 2
    1752:	28 17       	cp	r18, r24
    1754:	39 07       	cpc	r19, r25
    1756:	08 f0       	brcs	.+2      	; 0x175a <modbusRead()+0x20e>
    1758:	86 c0       	rjmp	.+268    	; 0x1866 <modbusRead()+0x31a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:369

      if (slaveSaved[IDarray[i]].digitalCount > 0) {
    175a:	fb 01       	movw	r30, r22
    175c:	81 91       	ld	r24, Z+
    175e:	bf 01       	movw	r22, r30
    1760:	08 2e       	mov	r0, r24
    1762:	00 0c       	add	r0, r0
    1764:	99 0b       	sbc	r25, r25
    1766:	98 9e       	mul	r9, r24
    1768:	70 01       	movw	r14, r0
    176a:	99 9e       	mul	r9, r25
    176c:	f0 0c       	add	r15, r0
    176e:	11 24       	eor	r1, r1
    1770:	f7 01       	movw	r30, r14
    1772:	e2 58       	subi	r30, 0x82	; 130
    1774:	fd 4f       	sbci	r31, 0xFD	; 253
    1776:	df 01       	movw	r26, r30
    1778:	a8 58       	subi	r26, 0x88	; 136
    177a:	bf 4f       	sbci	r27, 0xFF	; 255
    177c:	0d 91       	ld	r16, X+
    177e:	1c 91       	ld	r17, X
    1780:	11 97       	sbiw	r26, 0x01	; 1
    1782:	10 16       	cp	r1, r16
    1784:	11 06       	cpc	r1, r17
    1786:	74 f5       	brge	.+92     	; 0x17e4 <modbusRead()+0x298>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:371

        slaveSaved[IDarray[i]].digitalSmallAdress = slaveSaved[IDarray[i]].digitalAdress[0];  //Assume first element is smallest
    1788:	20 a1       	ldd	r18, Z+32	; 0x20
    178a:	31 a1       	ldd	r19, Z+33	; 0x21
    178c:	d4 97       	sbiw	r26, 0x34	; 52
    178e:	11 96       	adiw	r26, 0x01	; 1
    1790:	3c 93       	st	X, r19
    1792:	2e 93       	st	-X, r18
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:372
        slaveSaved[IDarray[i]].digitalLargeAdress = slaveSaved[IDarray[i]].digitalAdress[0];  //Assume first element is smallest
    1794:	ea 5b       	subi	r30, 0xBA	; 186
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	31 83       	std	Z+1, r19	; 0x01
    179a:	20 83       	st	Z, r18
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:374

        for (int j = 1; j < slaveSaved[IDarray[i]].digitalCount; j++) {
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:378
          if (slaveSaved[IDarray[i]].digitalAdress[j] < slaveSaved[IDarray[i]].digitalSmallAdress) {
            slaveSaved[IDarray[i]].digitalSmallAdress = slaveSaved[IDarray[i]].digitalAdress[j];
          }
          if (slaveSaved[IDarray[i]].digitalAdress[j] > slaveSaved[IDarray[i]].digitalLargeAdress) {
    17a0:	3f 01       	movw	r6, r30
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:374
      if (slaveSaved[IDarray[i]].digitalCount > 0) {

        slaveSaved[IDarray[i]].digitalSmallAdress = slaveSaved[IDarray[i]].digitalAdress[0];  //Assume first element is smallest
        slaveSaved[IDarray[i]].digitalLargeAdress = slaveSaved[IDarray[i]].digitalAdress[0];  //Assume first element is smallest

        for (int j = 1; j < slaveSaved[IDarray[i]].digitalCount; j++) {
    17a2:	02 17       	cp	r16, r18
    17a4:	13 07       	cpc	r17, r19
    17a6:	f1 f0       	breq	.+60     	; 0x17e4 <modbusRead()+0x298>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:375
          if (slaveSaved[IDarray[i]].digitalAdress[j] < slaveSaved[IDarray[i]].digitalSmallAdress) {
    17a8:	a9 01       	movw	r20, r18
    17aa:	44 0f       	add	r20, r20
    17ac:	55 1f       	adc	r21, r21
    17ae:	4e 0d       	add	r20, r14
    17b0:	5f 1d       	adc	r21, r15
    17b2:	42 58       	subi	r20, 0x82	; 130
    17b4:	5d 4f       	sbci	r21, 0xFD	; 253
    17b6:	fa 01       	movw	r30, r20
    17b8:	40 a1       	ldd	r20, Z+32	; 0x20
    17ba:	51 a1       	ldd	r21, Z+33	; 0x21
    17bc:	cd 90       	ld	r12, X+
    17be:	dc 90       	ld	r13, X
    17c0:	11 97       	sbiw	r26, 0x01	; 1
    17c2:	4c 15       	cp	r20, r12
    17c4:	5d 05       	cpc	r21, r13
    17c6:	18 f4       	brcc	.+6      	; 0x17ce <modbusRead()+0x282>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:376
            slaveSaved[IDarray[i]].digitalSmallAdress = slaveSaved[IDarray[i]].digitalAdress[j];
    17c8:	11 96       	adiw	r26, 0x01	; 1
    17ca:	5c 93       	st	X, r21
    17cc:	4e 93       	st	-X, r20
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:378
          }
          if (slaveSaved[IDarray[i]].digitalAdress[j] > slaveSaved[IDarray[i]].digitalLargeAdress) {
    17ce:	f3 01       	movw	r30, r6
    17d0:	c0 80       	ld	r12, Z
    17d2:	d1 80       	ldd	r13, Z+1	; 0x01
    17d4:	c4 16       	cp	r12, r20
    17d6:	d5 06       	cpc	r13, r21
    17d8:	10 f4       	brcc	.+4      	; 0x17de <modbusRead()+0x292>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:379
            slaveSaved[IDarray[i]].digitalLargeAdress = slaveSaved[IDarray[i]].digitalAdress[j];
    17da:	51 83       	std	Z+1, r21	; 0x01
    17dc:	40 83       	st	Z, r20
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:374
      if (slaveSaved[IDarray[i]].digitalCount > 0) {

        slaveSaved[IDarray[i]].digitalSmallAdress = slaveSaved[IDarray[i]].digitalAdress[0];  //Assume first element is smallest
        slaveSaved[IDarray[i]].digitalLargeAdress = slaveSaved[IDarray[i]].digitalAdress[0];  //Assume first element is smallest

        for (int j = 1; j < slaveSaved[IDarray[i]].digitalCount; j++) {
    17de:	2f 5f       	subi	r18, 0xFF	; 255
    17e0:	3f 4f       	sbci	r19, 0xFF	; 255
    17e2:	df cf       	rjmp	.-66     	; 0x17a2 <modbusRead()+0x256>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:383
          if (slaveSaved[IDarray[i]].digitalAdress[j] > slaveSaved[IDarray[i]].digitalLargeAdress) {
            slaveSaved[IDarray[i]].digitalLargeAdress = slaveSaved[IDarray[i]].digitalAdress[j];
          }
        }
      }
      if (slaveSaved[IDarray[i]].analogCount > 0) {
    17e4:	98 9e       	mul	r9, r24
    17e6:	a0 01       	movw	r20, r0
    17e8:	99 9e       	mul	r9, r25
    17ea:	50 0d       	add	r21, r0
    17ec:	11 24       	eor	r1, r1
    17ee:	fa 01       	movw	r30, r20
    17f0:	e2 58       	subi	r30, 0x82	; 130
    17f2:	fd 4f       	sbci	r31, 0xFD	; 253
    17f4:	df 01       	movw	r26, r30
    17f6:	a6 58       	subi	r26, 0x86	; 134
    17f8:	bf 4f       	sbci	r27, 0xFF	; 255
    17fa:	0d 91       	ld	r16, X+
    17fc:	1c 91       	ld	r17, X
    17fe:	11 97       	sbiw	r26, 0x01	; 1
    1800:	10 16       	cp	r1, r16
    1802:	11 06       	cpc	r1, r17
    1804:	0c f0       	brlt	.+2      	; 0x1808 <modbusRead()+0x2bc>
    1806:	9b cf       	rjmp	.-202    	; 0x173e <modbusRead()+0x1f2>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:384
        slaveSaved[IDarray[i]].analogSmallAdress = slaveSaved[IDarray[i]].analogAdress[0];  //Assume first element is smallest
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	da 97       	sbiw	r26, 0x3a	; 58
    180e:	11 96       	adiw	r26, 0x01	; 1
    1810:	9c 93       	st	X, r25
    1812:	8e 93       	st	-X, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:385
        slaveSaved[IDarray[i]].analogLargeAdress = slaveSaved[IDarray[i]].analogAdress[0];  //Assume first element is largest
    1814:	ee 5b       	subi	r30, 0xBE	; 190
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:387

        for (int j = 1; j < slaveSaved[IDarray[i]].analogCount; j++) {
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:391
          if (slaveSaved[IDarray[i]].analogAdress[j] < slaveSaved[IDarray[i]].analogSmallAdress) {
            slaveSaved[IDarray[i]].analogSmallAdress = slaveSaved[IDarray[i]].analogAdress[j];
          }
          if (slaveSaved[IDarray[i]].analogAdress[j] > slaveSaved[IDarray[i]].analogLargeAdress) {
    1820:	6f 01       	movw	r12, r30
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:387
      }
      if (slaveSaved[IDarray[i]].analogCount > 0) {
        slaveSaved[IDarray[i]].analogSmallAdress = slaveSaved[IDarray[i]].analogAdress[0];  //Assume first element is smallest
        slaveSaved[IDarray[i]].analogLargeAdress = slaveSaved[IDarray[i]].analogAdress[0];  //Assume first element is largest

        for (int j = 1; j < slaveSaved[IDarray[i]].analogCount; j++) {
    1822:	02 17       	cp	r16, r18
    1824:	13 07       	cpc	r17, r19
    1826:	09 f4       	brne	.+2      	; 0x182a <modbusRead()+0x2de>
    1828:	8a cf       	rjmp	.-236    	; 0x173e <modbusRead()+0x1f2>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:388
          if (slaveSaved[IDarray[i]].analogAdress[j] < slaveSaved[IDarray[i]].analogSmallAdress) {
    182a:	c9 01       	movw	r24, r18
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	84 0f       	add	r24, r20
    1832:	95 1f       	adc	r25, r21
    1834:	82 58       	subi	r24, 0x82	; 130
    1836:	9d 4f       	sbci	r25, 0xFD	; 253
    1838:	fc 01       	movw	r30, r24
    183a:	80 81       	ld	r24, Z
    183c:	91 81       	ldd	r25, Z+1	; 0x01
    183e:	ed 90       	ld	r14, X+
    1840:	fc 90       	ld	r15, X
    1842:	11 97       	sbiw	r26, 0x01	; 1
    1844:	8e 15       	cp	r24, r14
    1846:	9f 05       	cpc	r25, r15
    1848:	18 f4       	brcc	.+6      	; 0x1850 <modbusRead()+0x304>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:389
            slaveSaved[IDarray[i]].analogSmallAdress = slaveSaved[IDarray[i]].analogAdress[j];
    184a:	11 96       	adiw	r26, 0x01	; 1
    184c:	9c 93       	st	X, r25
    184e:	8e 93       	st	-X, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:391
          }
          if (slaveSaved[IDarray[i]].analogAdress[j] > slaveSaved[IDarray[i]].analogLargeAdress) {
    1850:	f6 01       	movw	r30, r12
    1852:	e0 80       	ld	r14, Z
    1854:	f1 80       	ldd	r15, Z+1	; 0x01
    1856:	e8 16       	cp	r14, r24
    1858:	f9 06       	cpc	r15, r25
    185a:	10 f4       	brcc	.+4      	; 0x1860 <modbusRead()+0x314>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:392
            slaveSaved[IDarray[i]].analogLargeAdress = slaveSaved[IDarray[i]].analogAdress[j];
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:387
      }
      if (slaveSaved[IDarray[i]].analogCount > 0) {
        slaveSaved[IDarray[i]].analogSmallAdress = slaveSaved[IDarray[i]].analogAdress[0];  //Assume first element is smallest
        slaveSaved[IDarray[i]].analogLargeAdress = slaveSaved[IDarray[i]].analogAdress[0];  //Assume first element is largest

        for (int j = 1; j < slaveSaved[IDarray[i]].analogCount; j++) {
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	de cf       	rjmp	.-68     	; 0x1822 <modbusRead()+0x2d6>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:398
          }
        }
      }
    }
  }
  slaveSetupCheck = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	80 93 ec 16 	sts	0x16EC, r24	; 0x8016ec <slaveSetupCheck>
    186c:	00 e6       	ldi	r16, 0x60	; 96
    186e:	12 e0       	ldi	r17, 0x02	; 2
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:407
  int ADUsize = 0;
  short CRCModbus = 0;

  char temp;

  for (int i = 0; i < strlen(IDarray); i++) {
    1870:	28 01       	movw	r4, r16
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:409

    if (slaveSaved[IDarray[i]].digitalCount > 0) {
    1872:	fc ea       	ldi	r31, 0xAC	; 172
    1874:	7f 2e       	mov	r7, r31
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:411

      memset(ADU, 0, sizeof ADU);
    1876:	a1 ea       	ldi	r26, 0xA1	; 161
    1878:	8a 2e       	mov	r8, r26
    187a:	a5 e0       	ldi	r26, 0x05	; 5
    187c:	9a 2e       	mov	r9, r26
    187e:	8c 0e       	add	r8, r28
    1880:	9d 1e       	adc	r9, r29
    1882:	f6 e0       	ldi	r31, 0x06	; 6
    1884:	8f 0e       	add	r8, r31
    1886:	91 1c       	adc	r9, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:438
      for (int j = 0; j < modBuffer[2]; j++) {

        temp = modBuffer[3 + j];

        for (int k = 0; k < modBuffer[2] * 8; k++) {
          slave[IDarray[i]].digitalData[k] = (temp & (1 << k)) >> k;
    1888:	b0 e3       	ldi	r27, 0x30	; 48
    188a:	6b 2e       	mov	r6, r27
    188c:	aa 24       	eor	r10, r10
    188e:	a3 94       	inc	r10
    1890:	b1 2c       	mov	r11, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:407
  int ADUsize = 0;
  short CRCModbus = 0;

  char temp;

  for (int i = 0; i < strlen(IDarray); i++) {
    1892:	d2 01       	movw	r26, r4
    1894:	0d 90       	ld	r0, X+
    1896:	00 20       	and	r0, r0
    1898:	e9 f7       	brne	.-6      	; 0x1894 <modbusRead()+0x348>
    189a:	cd 01       	movw	r24, r26
    189c:	81 56       	subi	r24, 0x61	; 97
    189e:	92 40       	sbci	r25, 0x02	; 2
    18a0:	98 01       	movw	r18, r16
    18a2:	20 56       	subi	r18, 0x60	; 96
    18a4:	32 40       	sbci	r19, 0x02	; 2
    18a6:	28 17       	cp	r18, r24
    18a8:	39 07       	cpc	r19, r25
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <modbusRead()+0x362>
    18ac:	26 c1       	rjmp	.+588    	; 0x1afa <modbusRead()+0x5ae>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:409

    if (slaveSaved[IDarray[i]].digitalCount > 0) {
    18ae:	f8 01       	movw	r30, r16
    18b0:	20 81       	ld	r18, Z
    18b2:	37 2d       	mov	r19, r7
    18b4:	23 03       	mulsu	r18, r19
    18b6:	c0 01       	movw	r24, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	82 58       	subi	r24, 0x82	; 130
    18bc:	9d 4f       	sbci	r25, 0xFD	; 253
    18be:	fc 01       	movw	r30, r24
    18c0:	e8 58       	subi	r30, 0x88	; 136
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	40 81       	ld	r20, Z
    18c6:	51 81       	ldd	r21, Z+1	; 0x01
    18c8:	14 16       	cp	r1, r20
    18ca:	15 06       	cpc	r1, r21
    18cc:	0c f0       	brlt	.+2      	; 0x18d0 <modbusRead()+0x384>
    18ce:	8c c0       	rjmp	.+280    	; 0x19e8 <modbusRead()+0x49c>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:411

      memset(ADU, 0, sizeof ADU);
    18d0:	d4 01       	movw	r26, r8
    18d2:	1d 92       	st	X+, r1
    18d4:	1c 92       	st	X, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:416
      ADUsize = 0;
      CRCModbus = 0;

      //Assempling ADU message
      ADU[ADUsize++] = IDarray[i];
    18d6:	cf 55       	subi	r28, 0x5F	; 95
    18d8:	da 4f       	sbci	r29, 0xFA	; 250
    18da:	28 83       	st	Y, r18
    18dc:	c1 5a       	subi	r28, 0xA1	; 161
    18de:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:417
      ADU[ADUsize++] = 0x02;  //Function code
    18e0:	22 e0       	ldi	r18, 0x02	; 2
    18e2:	ce 55       	subi	r28, 0x5E	; 94
    18e4:	da 4f       	sbci	r29, 0xFA	; 250
    18e6:	28 83       	st	Y, r18
    18e8:	c2 5a       	subi	r28, 0xA2	; 162
    18ea:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:418
      ADU[ADUsize++] = highByte(slaveSaved[IDarray[i]].digitalSmallAdress);
    18ec:	f4 97       	sbiw	r30, 0x34	; 52
    18ee:	20 81       	ld	r18, Z
    18f0:	31 81       	ldd	r19, Z+1	; 0x01
    18f2:	cd 55       	subi	r28, 0x5D	; 93
    18f4:	da 4f       	sbci	r29, 0xFA	; 250
    18f6:	38 83       	st	Y, r19
    18f8:	c3 5a       	subi	r28, 0xA3	; 163
    18fa:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:419
      ADU[ADUsize++] = lowByte(slaveSaved[IDarray[i]].digitalSmallAdress);
    18fc:	cc 55       	subi	r28, 0x5C	; 92
    18fe:	da 4f       	sbci	r29, 0xFA	; 250
    1900:	28 83       	st	Y, r18
    1902:	c4 5a       	subi	r28, 0xA4	; 164
    1904:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:420
      ADU[ADUsize++] = highByte((slaveSaved[IDarray[i]].digitalLargeAdress - slaveSaved[IDarray[i]].digitalSmallAdress) + 1);
    1906:	8a 5b       	subi	r24, 0xBA	; 186
    1908:	9f 4f       	sbci	r25, 0xFF	; 255
    190a:	fc 01       	movw	r30, r24
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	ac 01       	movw	r20, r24
    1912:	4f 5f       	subi	r20, 0xFF	; 255
    1914:	5f 4f       	sbci	r21, 0xFF	; 255
    1916:	42 1b       	sub	r20, r18
    1918:	53 0b       	sbc	r21, r19
    191a:	cb 55       	subi	r28, 0x5B	; 91
    191c:	da 4f       	sbci	r29, 0xFA	; 250
    191e:	58 83       	st	Y, r21
    1920:	c5 5a       	subi	r28, 0xA5	; 165
    1922:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:421
      ADU[ADUsize++] = lowByte((slaveSaved[IDarray[i]].digitalLargeAdress - slaveSaved[IDarray[i]].digitalSmallAdress) + 1);
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	82 1b       	sub	r24, r18
    1928:	ca 55       	subi	r28, 0x5A	; 90
    192a:	da 4f       	sbci	r29, 0xFA	; 250
    192c:	88 83       	st	Y, r24
    192e:	c6 5a       	subi	r28, 0xA6	; 166
    1930:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:424

      //Calculate CRC16 for MODBUS
      CRCModbus = CRC16_modbus(ADU, ADUsize);
    1932:	66 e0       	ldi	r22, 0x06	; 6
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	ce 01       	movw	r24, r28
    1938:	8f 55       	subi	r24, 0x5F	; 95
    193a:	9a 4f       	sbci	r25, 0xFA	; 250
    193c:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:425
      ADU[ADUsize++] = lowByte(CRCModbus);
    1940:	c9 55       	subi	r28, 0x59	; 89
    1942:	da 4f       	sbci	r29, 0xFA	; 250
    1944:	88 83       	st	Y, r24
    1946:	c7 5a       	subi	r28, 0xA7	; 167
    1948:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:426
      ADU[ADUsize++] = highByte(CRCModbus);
    194a:	c8 55       	subi	r28, 0x58	; 88
    194c:	da 4f       	sbci	r29, 0xFA	; 250
    194e:	98 83       	st	Y, r25
    1950:	c8 5a       	subi	r28, 0xA8	; 168
    1952:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:429

      //Write ADU to MODBUS slave
      modbusSerial.write(ADU, ADUsize);
    1954:	48 e0       	ldi	r20, 0x08	; 8
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	be 01       	movw	r22, r28
    195a:	6f 55       	subi	r22, 0x5F	; 95
    195c:	7a 4f       	sbci	r23, 0xFA	; 250
    195e:	88 ef       	ldi	r24, 0xF8	; 248
    1960:	96 e1       	ldi	r25, 0x16	; 22
    1962:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:431

      slaveRead();
    1966:	0e 94 11 05 	call	0xa22	; 0xa22 <slaveRead()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:433

      for (int j = 0; j < modBuffer[2]; j++) {
    196a:	60 91 a8 16 	lds	r22, 0x16A8	; 0x8016a8 <modBuffer+0x2>
    196e:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:437

        temp = modBuffer[3 + j];

        for (int k = 0; k < modBuffer[2] * 8; k++) {
    1970:	7b 01       	movw	r14, r22
    1972:	e3 e0       	ldi	r30, 0x03	; 3
    1974:	ee 0c       	add	r14, r14
    1976:	ff 1c       	adc	r15, r15
    1978:	ea 95       	dec	r30
    197a:	e1 f7       	brne	.-8      	; 0x1974 <modbusRead()+0x428>
    197c:	e6 ea       	ldi	r30, 0xA6	; 166
    197e:	f6 e1       	ldi	r31, 0x16	; 22
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:433
      //Write ADU to MODBUS slave
      modbusSerial.write(ADU, ADUsize);

      slaveRead();

      for (int j = 0; j < modBuffer[2]; j++) {
    1980:	cf 01       	movw	r24, r30
    1982:	86 5a       	subi	r24, 0xA6	; 166
    1984:	96 41       	sbci	r25, 0x16	; 22
    1986:	86 17       	cp	r24, r22
    1988:	97 07       	cpc	r25, r23
    198a:	74 f5       	brge	.+92     	; 0x19e8 <modbusRead()+0x49c>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:435

        temp = modBuffer[3 + j];
    198c:	d3 80       	ldd	r13, Z+3	; 0x03
    198e:	d8 01       	movw	r26, r16
    1990:	4c 91       	ld	r20, X
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:437

        for (int k = 0; k < modBuffer[2] * 8; k++) {
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:438
          slave[IDarray[i]].digitalData[k] = (temp & (1 << k)) >> k;
    1996:	26 2d       	mov	r18, r6
    1998:	42 03       	mulsu	r20, r18
    199a:	a0 01       	movw	r20, r0
    199c:	11 24       	eor	r1, r1
    199e:	a1 e0       	ldi	r26, 0x01	; 1
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	ac 0f       	add	r26, r28
    19a4:	bd 1f       	adc	r27, r29
    19a6:	4a 0f       	add	r20, r26
    19a8:	5b 1f       	adc	r21, r27
    19aa:	2d 2c       	mov	r2, r13
    19ac:	dd 0c       	add	r13, r13
    19ae:	33 08       	sbc	r3, r3
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:437

      for (int j = 0; j < modBuffer[2]; j++) {

        temp = modBuffer[3 + j];

        for (int k = 0; k < modBuffer[2] * 8; k++) {
    19b0:	8e 15       	cp	r24, r14
    19b2:	9f 05       	cpc	r25, r15
    19b4:	bc f4       	brge	.+46     	; 0x19e4 <modbusRead()+0x498>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:438
          slave[IDarray[i]].digitalData[k] = (temp & (1 << k)) >> k;
    19b6:	6a 01       	movw	r12, r20
    19b8:	c8 0e       	add	r12, r24
    19ba:	d9 1e       	adc	r13, r25
    19bc:	95 01       	movw	r18, r10
    19be:	08 2e       	mov	r0, r24
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <modbusRead()+0x47a>
    19c2:	22 0f       	add	r18, r18
    19c4:	33 1f       	adc	r19, r19
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <modbusRead()+0x476>
    19ca:	22 21       	and	r18, r2
    19cc:	33 21       	and	r19, r3
    19ce:	08 2e       	mov	r0, r24
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <modbusRead()+0x48a>
    19d2:	35 95       	asr	r19
    19d4:	27 95       	ror	r18
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <modbusRead()+0x486>
    19da:	d6 01       	movw	r26, r12
    19dc:	90 96       	adiw	r26, 0x20	; 32
    19de:	2c 93       	st	X, r18
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:437

      for (int j = 0; j < modBuffer[2]; j++) {

        temp = modBuffer[3 + j];

        for (int k = 0; k < modBuffer[2] * 8; k++) {
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	e6 cf       	rjmp	.-52     	; 0x19b0 <modbusRead()+0x464>
    19e4:	31 96       	adiw	r30, 0x01	; 1
    19e6:	cc cf       	rjmp	.-104    	; 0x1980 <modbusRead()+0x434>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:443
          slave[IDarray[i]].digitalData[k] = (temp & (1 << k)) >> k;
        }
      }
    }

    if (slaveSaved[IDarray[i]].analogCount > 0) {
    19e8:	f8 01       	movw	r30, r16
    19ea:	20 81       	ld	r18, Z
    19ec:	37 2d       	mov	r19, r7
    19ee:	23 03       	mulsu	r18, r19
    19f0:	c0 01       	movw	r24, r0
    19f2:	11 24       	eor	r1, r1
    19f4:	82 58       	subi	r24, 0x82	; 130
    19f6:	9d 4f       	sbci	r25, 0xFD	; 253
    19f8:	fc 01       	movw	r30, r24
    19fa:	e6 58       	subi	r30, 0x86	; 134
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	40 81       	ld	r20, Z
    1a00:	51 81       	ldd	r21, Z+1	; 0x01
    1a02:	14 16       	cp	r1, r20
    1a04:	15 06       	cpc	r1, r21
    1a06:	0c f0       	brlt	.+2      	; 0x1a0a <modbusRead()+0x4be>
    1a08:	75 c0       	rjmp	.+234    	; 0x1af4 <modbusRead()+0x5a8>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:445

      memset(ADU, 0, sizeof ADU);
    1a0a:	d4 01       	movw	r26, r8
    1a0c:	1d 92       	st	X+, r1
    1a0e:	1c 92       	st	X, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:450
      ADUsize = 0;
      CRCModbus = 0;

      //Assempling ADU message
      ADU[ADUsize++] = IDarray[i];
    1a10:	cf 55       	subi	r28, 0x5F	; 95
    1a12:	da 4f       	sbci	r29, 0xFA	; 250
    1a14:	28 83       	st	Y, r18
    1a16:	c1 5a       	subi	r28, 0xA1	; 161
    1a18:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:451
      ADU[ADUsize++] = 0x03;  //Function code
    1a1a:	23 e0       	ldi	r18, 0x03	; 3
    1a1c:	ce 55       	subi	r28, 0x5E	; 94
    1a1e:	da 4f       	sbci	r29, 0xFA	; 250
    1a20:	28 83       	st	Y, r18
    1a22:	c2 5a       	subi	r28, 0xA2	; 162
    1a24:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:452
      ADU[ADUsize++] = highByte(slaveSaved[IDarray[i]].analogSmallAdress);
    1a26:	fa 97       	sbiw	r30, 0x3a	; 58
    1a28:	20 81       	ld	r18, Z
    1a2a:	31 81       	ldd	r19, Z+1	; 0x01
    1a2c:	cd 55       	subi	r28, 0x5D	; 93
    1a2e:	da 4f       	sbci	r29, 0xFA	; 250
    1a30:	38 83       	st	Y, r19
    1a32:	c3 5a       	subi	r28, 0xA3	; 163
    1a34:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:453
      ADU[ADUsize++] = lowByte(slaveSaved[IDarray[i]].analogSmallAdress);
    1a36:	cc 55       	subi	r28, 0x5C	; 92
    1a38:	da 4f       	sbci	r29, 0xFA	; 250
    1a3a:	28 83       	st	Y, r18
    1a3c:	c4 5a       	subi	r28, 0xA4	; 164
    1a3e:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:454
      ADU[ADUsize++] = highByte((slaveSaved[IDarray[i]].analogLargeAdress - slaveSaved[IDarray[i]].analogSmallAdress) + 1);
    1a40:	8e 5b       	subi	r24, 0xBE	; 190
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	fc 01       	movw	r30, r24
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	ac 01       	movw	r20, r24
    1a4c:	4f 5f       	subi	r20, 0xFF	; 255
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a50:	42 1b       	sub	r20, r18
    1a52:	53 0b       	sbc	r21, r19
    1a54:	cb 55       	subi	r28, 0x5B	; 91
    1a56:	da 4f       	sbci	r29, 0xFA	; 250
    1a58:	58 83       	st	Y, r21
    1a5a:	c5 5a       	subi	r28, 0xA5	; 165
    1a5c:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:455
      ADU[ADUsize++] = lowByte((slaveSaved[IDarray[i]].analogLargeAdress - slaveSaved[IDarray[i]].analogSmallAdress) + 1);
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	82 1b       	sub	r24, r18
    1a62:	ca 55       	subi	r28, 0x5A	; 90
    1a64:	da 4f       	sbci	r29, 0xFA	; 250
    1a66:	88 83       	st	Y, r24
    1a68:	c6 5a       	subi	r28, 0xA6	; 166
    1a6a:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:458

      //Calculate CRC16 for MODBUS
      CRCModbus = CRC16_modbus(ADU, ADUsize);
    1a6c:	66 e0       	ldi	r22, 0x06	; 6
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	ce 01       	movw	r24, r28
    1a72:	8f 55       	subi	r24, 0x5F	; 95
    1a74:	9a 4f       	sbci	r25, 0xFA	; 250
    1a76:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:459
      ADU[ADUsize++] = lowByte(CRCModbus);
    1a7a:	c9 55       	subi	r28, 0x59	; 89
    1a7c:	da 4f       	sbci	r29, 0xFA	; 250
    1a7e:	88 83       	st	Y, r24
    1a80:	c7 5a       	subi	r28, 0xA7	; 167
    1a82:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:460
      ADU[ADUsize++] = highByte(CRCModbus);
    1a84:	c8 55       	subi	r28, 0x58	; 88
    1a86:	da 4f       	sbci	r29, 0xFA	; 250
    1a88:	98 83       	st	Y, r25
    1a8a:	c8 5a       	subi	r28, 0xA8	; 168
    1a8c:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:463

      //Write ADU to MODBUS slave
      modbusSerial.write(ADU, ADUsize);
    1a8e:	48 e0       	ldi	r20, 0x08	; 8
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	be 01       	movw	r22, r28
    1a94:	6f 55       	subi	r22, 0x5F	; 95
    1a96:	7a 4f       	sbci	r23, 0xFA	; 250
    1a98:	88 ef       	ldi	r24, 0xF8	; 248
    1a9a:	96 e1       	ldi	r25, 0x16	; 22
    1a9c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:465

      slaveRead();
    1aa0:	0e 94 11 05 	call	0xa22	; 0xa22 <slaveRead()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:467

      for (int j = 0; j < (modBuffer[2] / 2); j++) {
    1aa4:	80 91 a8 16 	lds	r24, 0x16A8	; 0x8016a8 <modBuffer+0x2>
    1aa8:	86 95       	lsr	r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a6 ea       	ldi	r26, 0xA6	; 166
    1aae:	b6 e1       	ldi	r27, 0x16	; 22
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:470
        slave[IDarray[i]].analogData[j] = modBuffer[(2 * j) + 3];
        slave[IDarray[i]].analogData[j] = slave[IDarray[i]].analogData[j] << 8;
        slave[IDarray[i]].analogData[j] |= modBuffer[(2 * j) + 4];
    1ab4:	68 e1       	ldi	r22, 0x18	; 24
    1ab6:	12 96       	adiw	r26, 0x02	; 2
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:467
      //Write ADU to MODBUS slave
      modbusSerial.write(ADU, ADUsize);

      slaveRead();

      for (int j = 0; j < (modBuffer[2] / 2); j++) {
    1ab8:	28 17       	cp	r18, r24
    1aba:	39 07       	cpc	r19, r25
    1abc:	dc f4       	brge	.+54     	; 0x1af4 <modbusRead()+0x5a8>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:468
        slave[IDarray[i]].analogData[j] = modBuffer[(2 * j) + 3];
    1abe:	f8 01       	movw	r30, r16
    1ac0:	40 81       	ld	r20, Z
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:470
        slave[IDarray[i]].analogData[j] = slave[IDarray[i]].analogData[j] << 8;
        slave[IDarray[i]].analogData[j] |= modBuffer[(2 * j) + 4];
    1ac2:	46 03       	mulsu	r20, r22
    1ac4:	f0 01       	movw	r30, r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	e2 0f       	add	r30, r18
    1aca:	f3 1f       	adc	r31, r19
    1acc:	ee 0f       	add	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	cc 24       	eor	r12, r12
    1ad2:	c3 94       	inc	r12
    1ad4:	d1 2c       	mov	r13, r1
    1ad6:	cc 0e       	add	r12, r28
    1ad8:	dd 1e       	adc	r13, r29
    1ada:	ec 0d       	add	r30, r12
    1adc:	fd 1d       	adc	r31, r13
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:468
      modbusSerial.write(ADU, ADUsize);

      slaveRead();

      for (int j = 0; j < (modBuffer[2] / 2); j++) {
        slave[IDarray[i]].analogData[j] = modBuffer[(2 * j) + 3];
    1ade:	11 96       	adiw	r26, 0x01	; 1
    1ae0:	5c 91       	ld	r21, X
    1ae2:	11 97       	sbiw	r26, 0x01	; 1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:470
        slave[IDarray[i]].analogData[j] = slave[IDarray[i]].analogData[j] << 8;
        slave[IDarray[i]].analogData[j] |= modBuffer[(2 * j) + 4];
    1ae4:	12 96       	adiw	r26, 0x02	; 2
    1ae6:	4c 91       	ld	r20, X
    1ae8:	12 97       	sbiw	r26, 0x02	; 2
    1aea:	51 83       	std	Z+1, r21	; 0x01
    1aec:	40 83       	st	Z, r20
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:467
      //Write ADU to MODBUS slave
      modbusSerial.write(ADU, ADUsize);

      slaveRead();

      for (int j = 0; j < (modBuffer[2] / 2); j++) {
    1aee:	2f 5f       	subi	r18, 0xFF	; 255
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	e1 cf       	rjmp	.-62     	; 0x1ab6 <modbusRead()+0x56a>
    1af4:	0f 5f       	subi	r16, 0xFF	; 255
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	cc ce       	rjmp	.-616    	; 0x1892 <modbusRead()+0x346>
clrmodBuffer():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:942
void clrsimBuffer() {  // Clear simBuffer
  memset(simBuffer, 0, sizeof simBuffer);
}

void clrmodBuffer() {  // Clear modBuffer
  memset(modBuffer, 0, sizeof modBuffer);
    1afa:	e6 ea       	ldi	r30, 0xA6	; 166
    1afc:	f6 e1       	ldi	r31, 0x16	; 22
    1afe:	82 e3       	ldi	r24, 0x32	; 50
    1b00:	df 01       	movw	r26, r30
    1b02:	1d 92       	st	X+, r1
    1b04:	8a 95       	dec	r24
    1b06:	e9 f7       	brne	.-6      	; 0x1b02 <modbusRead()+0x5b6>
modbusRead():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:481

  short CRCSim = 0;  // To hold CRC
  int msgPos = 19;
  bool noNewData = 0;
  short totalAdress = 0;
  keyNumber++;
    1b08:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:482
  memset(serverMessage, 0, sizeof serverMessage);
    1b12:	00 91 32 18 	lds	r16, 0x1832	; 0x801832 <serverMessage>
    1b16:	10 91 33 18 	lds	r17, 0x1833	; 0x801833 <serverMessage+0x1>
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	11 82       	std	Z+1, r1	; 0x01
    1b1e:	10 82       	st	Z, r1
    1b20:	a8 ed       	ldi	r26, 0xD8	; 216
    1b22:	b6 e1       	ldi	r27, 0x16	; 22
    1b24:	98 01       	movw	r18, r16
    1b26:	21 5f       	subi	r18, 0xF1	; 241
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:485

  for (int i = 0; i < 15; i++) {
    serverMessage[i] = IMEI[i];
    1b2a:	9d 91       	ld	r25, X+
    1b2c:	91 93       	st	Z+, r25
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:484
  bool noNewData = 0;
  short totalAdress = 0;
  keyNumber++;
  memset(serverMessage, 0, sizeof serverMessage);

  for (int i = 0; i < 15; i++) {
    1b2e:	2e 17       	cp	r18, r30
    1b30:	3f 07       	cpc	r19, r31
    1b32:	d9 f7       	brne	.-10     	; 0x1b2a <modbusRead()+0x5de>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:488
    serverMessage[i] = IMEI[i];
  }

  serverMessage[15] = keyNumber;
    1b34:	d8 01       	movw	r26, r16
    1b36:	1f 96       	adiw	r26, 0x0f	; 15
    1b38:	8c 93       	st	X, r24
    1b3a:	1f 97       	sbiw	r26, 0x0f	; 15
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:490

  serverMessage[16] = 0x01;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	50 96       	adiw	r26, 0x10	; 16
    1b40:	8c 93       	st	X, r24
    1b42:	e0 e6       	ldi	r30, 0x60	; 96
    1b44:	f2 e0       	ldi	r31, 0x02	; 2
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:480
  clrmodBuffer();

  short CRCSim = 0;  // To hold CRC
  int msgPos = 19;
  bool noNewData = 0;
  short totalAdress = 0;
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:479

  clrmodBuffer();

  short CRCSim = 0;  // To hold CRC
  int msgPos = 19;
  bool noNewData = 0;
    1b4a:	c7 55       	subi	r28, 0x57	; 87
    1b4c:	da 4f       	sbci	r29, 0xFA	; 250
    1b4e:	18 82       	st	Y, r1
    1b50:	c9 5a       	subi	r28, 0xA9	; 169
    1b52:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:478
  }

  clrmodBuffer();

  short CRCSim = 0;  // To hold CRC
  int msgPos = 19;
    1b54:	63 e1       	ldi	r22, 0x13	; 19
    1b56:	e6 2e       	mov	r14, r22
    1b58:	f1 2c       	mov	r15, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:494

  serverMessage[16] = 0x01;

  for (int i = 0; i < strlen(IDarray); i++) {

    if (slaveSaved[IDarray[i]].digitalCount > 0) {
    1b5a:	2c ea       	ldi	r18, 0xAC	; 172
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:497
      for (int j = 0; j < (slaveSaved[IDarray[i]].digitalLargeAdress - slaveSaved[IDarray[i]].digitalSmallAdress) + 1; j++) {
        if (arraycheck(slaveSaved[IDarray[i]].digitalAdress, slaveSaved[IDarray[i]].digitalSmallAdress + j, slaveSaved[IDarray[i]].digitalCount)) {
          if (slave[IDarray[i]].digitalData[j] != slaveSaved[IDarray[i]].digitalOldData[j]) {
    1b5c:	70 e3       	ldi	r23, 0x30	; 48
    1b5e:	67 2e       	mov	r6, r23
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:492

  serverMessage[15] = keyNumber;

  serverMessage[16] = 0x01;

  for (int i = 0; i < strlen(IDarray); i++) {
    1b60:	a0 e6       	ldi	r26, 0x60	; 96
    1b62:	b2 e0       	ldi	r27, 0x02	; 2
    1b64:	0d 90       	ld	r0, X+
    1b66:	00 20       	and	r0, r0
    1b68:	e9 f7       	brne	.-6      	; 0x1b64 <modbusRead()+0x618>
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	81 56       	subi	r24, 0x61	; 97
    1b6e:	92 40       	sbci	r25, 0x02	; 2
    1b70:	bf 01       	movw	r22, r30
    1b72:	60 56       	subi	r22, 0x60	; 96
    1b74:	72 40       	sbci	r23, 0x02	; 2
    1b76:	68 17       	cp	r22, r24
    1b78:	79 07       	cpc	r23, r25
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <modbusRead()+0x632>
    1b7c:	83 c1       	rjmp	.+774    	; 0x1e84 <modbusRead()+0x938>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:494

    if (slaveSaved[IDarray[i]].digitalCount > 0) {
    1b7e:	60 81       	ld	r22, Z
    1b80:	62 03       	mulsu	r22, r18
    1b82:	d0 01       	movw	r26, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	aa 50       	subi	r26, 0x0A	; 10
    1b88:	bd 4f       	sbci	r27, 0xFD	; 253
    1b8a:	8d 91       	ld	r24, X+
    1b8c:	9c 91       	ld	r25, X
    1b8e:	18 16       	cp	r1, r24
    1b90:	19 06       	cpc	r1, r25
    1b92:	0c f0       	brlt	.+2      	; 0x1b96 <modbusRead()+0x64a>
    1b94:	a5 c0       	rjmp	.+330    	; 0x1ce0 <modbusRead()+0x794>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:495
      for (int j = 0; j < (slaveSaved[IDarray[i]].digitalLargeAdress - slaveSaved[IDarray[i]].digitalSmallAdress) + 1; j++) {
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	70 80       	ld	r7, Z
    1b9c:	67 2d       	mov	r22, r7
    1b9e:	07 2c       	mov	r0, r7
    1ba0:	00 0c       	add	r0, r0
    1ba2:	77 0b       	sbc	r23, r23
    1ba4:	26 9f       	mul	r18, r22
    1ba6:	40 01       	movw	r8, r0
    1ba8:	27 9f       	mul	r18, r23
    1baa:	90 0c       	add	r9, r0
    1bac:	11 24       	eor	r1, r1
    1bae:	d4 01       	movw	r26, r8
    1bb0:	a2 58       	subi	r26, 0x82	; 130
    1bb2:	bd 4f       	sbci	r27, 0xFD	; 253
    1bb4:	5d 01       	movw	r10, r26
    1bb6:	6d 01       	movw	r12, r26
    1bb8:	b4 e4       	ldi	r27, 0x44	; 68
    1bba:	cb 0e       	add	r12, r27
    1bbc:	d1 1c       	adc	r13, r1
    1bbe:	d6 01       	movw	r26, r12
    1bc0:	4d 90       	ld	r4, X+
    1bc2:	5c 90       	ld	r5, X
    1bc4:	65 01       	movw	r12, r10
    1bc6:	b6 e4       	ldi	r27, 0x46	; 70
    1bc8:	cb 0e       	add	r12, r27
    1bca:	d1 1c       	adc	r13, r1
    1bcc:	d6 01       	movw	r26, r12
    1bce:	cd 90       	ld	r12, X+
    1bd0:	dc 90       	ld	r13, X
    1bd2:	bf ef       	ldi	r27, 0xFF	; 255
    1bd4:	cb 1a       	sub	r12, r27
    1bd6:	db 0a       	sbc	r13, r27
    1bd8:	c4 18       	sub	r12, r4
    1bda:	d5 08       	sbc	r13, r5
    1bdc:	8c 15       	cp	r24, r12
    1bde:	9d 05       	cpc	r25, r13
    1be0:	08 f0       	brcs	.+2      	; 0x1be4 <modbusRead()+0x698>
    1be2:	7e c0       	rjmp	.+252    	; 0x1ce0 <modbusRead()+0x794>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:496
        if (arraycheck(slaveSaved[IDarray[i]].digitalAdress, slaveSaved[IDarray[i]].digitalSmallAdress + j, slaveSaved[IDarray[i]].digitalCount)) {
    1be4:	d5 01       	movw	r26, r10
    1be6:	a8 58       	subi	r26, 0x88	; 136
    1be8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bea:	2d 90       	ld	r2, X+
    1bec:	3c 90       	ld	r3, X
    1bee:	48 0e       	add	r4, r24
    1bf0:	59 1e       	adc	r5, r25
    1bf2:	d4 01       	movw	r26, r8
    1bf4:	a2 56       	subi	r26, 0x62	; 98
    1bf6:	bd 4f       	sbci	r27, 0xFD	; 253
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:964
  return crc;
}

bool arraycheck(unsigned short* arr, short num, int len) {

  for (int i = 0; i < len; i++) {
    1bf8:	d1 2c       	mov	r13, r1
    1bfa:	c1 2c       	mov	r12, r1
arraycheck():
    1bfc:	c2 14       	cp	r12, r2
    1bfe:	d3 04       	cpc	r13, r3
    1c00:	0c f0       	brlt	.+2      	; 0x1c04 <modbusRead()+0x6b8>
    1c02:	7a c1       	rjmp	.+756    	; 0x1ef8 <modbusRead()+0x9ac>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:965
    if (arr[i] == num) {
    1c04:	ad 90       	ld	r10, X+
    1c06:	bd 90       	ld	r11, X+
    1c08:	4a 14       	cp	r4, r10
    1c0a:	5b 04       	cpc	r5, r11
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <modbusRead()+0x6c4>
    1c0e:	7c c1       	rjmp	.+760    	; 0x1f08 <modbusRead()+0x9bc>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:964
  return crc;
}

bool arraycheck(unsigned short* arr, short num, int len) {

  for (int i = 0; i < len; i++) {
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	c3 1a       	sub	r12, r19
    1c14:	d3 0a       	sbc	r13, r19
    1c16:	f2 cf       	rjmp	.-28     	; 0x1bfc <modbusRead()+0x6b0>
modbusRead():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:499
    if (slaveSaved[IDarray[i]].digitalCount > 0) {
      for (int j = 0; j < (slaveSaved[IDarray[i]].digitalLargeAdress - slaveSaved[IDarray[i]].digitalSmallAdress) + 1; j++) {
        if (arraycheck(slaveSaved[IDarray[i]].digitalAdress, slaveSaved[IDarray[i]].digitalSmallAdress + j, slaveSaved[IDarray[i]].digitalCount)) {
          if (slave[IDarray[i]].digitalData[j] != slaveSaved[IDarray[i]].digitalOldData[j]) {
            noNewData = 0;
            serverMessage[msgPos++] = IDarray[i];
    1c18:	b8 01       	movw	r22, r16
    1c1a:	6e 0d       	add	r22, r14
    1c1c:	7f 1d       	adc	r23, r15
    1c1e:	db 01       	movw	r26, r22
    1c20:	7c 92       	st	X, r7
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:500
            serverMessage[msgPos++] = highByte(slaveSaved[IDarray[i]].digitalSmallAdress + j);
    1c22:	30 81       	ld	r19, Z
    1c24:	32 03       	mulsu	r19, r18
    1c26:	d0 01       	movw	r26, r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	ae 53       	subi	r26, 0x3E	; 62
    1c2c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c2e:	0d 90       	ld	r0, X+
    1c30:	bc 91       	ld	r27, X
    1c32:	a0 2d       	mov	r26, r0
    1c34:	6d 01       	movw	r12, r26
    1c36:	c8 0e       	add	r12, r24
    1c38:	d9 1e       	adc	r13, r25
    1c3a:	db 01       	movw	r26, r22
    1c3c:	11 96       	adiw	r26, 0x01	; 1
    1c3e:	dc 92       	st	X, r13
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:501
            serverMessage[msgPos++] = lowByte(slaveSaved[IDarray[i]].digitalSmallAdress + j);
    1c40:	30 81       	ld	r19, Z
    1c42:	32 03       	mulsu	r19, r18
    1c44:	d0 01       	movw	r26, r0
    1c46:	11 24       	eor	r1, r1
    1c48:	ae 53       	subi	r26, 0x3E	; 62
    1c4a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c4c:	3c 91       	ld	r19, X
    1c4e:	38 0f       	add	r19, r24
    1c50:	db 01       	movw	r26, r22
    1c52:	12 96       	adiw	r26, 0x02	; 2
    1c54:	3c 93       	st	X, r19
    1c56:	12 97       	sbiw	r26, 0x02	; 2
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:502
            serverMessage[msgPos++] = 0x00;
    1c58:	13 96       	adiw	r26, 0x03	; 3
    1c5a:	1c 92       	st	X, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:503
            serverMessage[msgPos++] = slave[IDarray[i]].digitalData[j];
    1c5c:	30 81       	ld	r19, Z
    1c5e:	66 2d       	mov	r22, r6
    1c60:	36 03       	mulsu	r19, r22
    1c62:	d0 01       	movw	r26, r0
    1c64:	11 24       	eor	r1, r1
    1c66:	cc 24       	eor	r12, r12
    1c68:	c3 94       	inc	r12
    1c6a:	d1 2c       	mov	r13, r1
    1c6c:	cc 0e       	add	r12, r28
    1c6e:	dd 1e       	adc	r13, r29
    1c70:	ac 0d       	add	r26, r12
    1c72:	bd 1d       	adc	r27, r13
    1c74:	a8 0f       	add	r26, r24
    1c76:	b9 1f       	adc	r27, r25
    1c78:	90 96       	adiw	r26, 0x20	; 32
    1c7a:	3c 91       	ld	r19, X
    1c7c:	d7 01       	movw	r26, r14
    1c7e:	14 96       	adiw	r26, 0x04	; 4
    1c80:	a0 0f       	add	r26, r16
    1c82:	b1 1f       	adc	r27, r17
    1c84:	65 e0       	ldi	r22, 0x05	; 5
    1c86:	e6 0e       	add	r14, r22
    1c88:	f1 1c       	adc	r15, r1
    1c8a:	3c 93       	st	X, r19
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:504
            slaveSaved[IDarray[i]].digitalOldData[j] = slave[IDarray[i]].digitalData[j];
    1c8c:	c0 80       	ld	r12, Z
    1c8e:	0c 2c       	mov	r0, r12
    1c90:	00 0c       	add	r0, r0
    1c92:	dd 08       	sbc	r13, r13
    1c94:	2c 9d       	mul	r18, r12
    1c96:	d0 01       	movw	r26, r0
    1c98:	2d 9d       	mul	r18, r13
    1c9a:	b0 0d       	add	r27, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	a8 0f       	add	r26, r24
    1ca0:	b9 1f       	adc	r27, r25
    1ca2:	bd 01       	movw	r22, r26
    1ca4:	6a 53       	subi	r22, 0x3A	; 58
    1ca6:	7d 4f       	sbci	r23, 0xFD	; 253
    1ca8:	5b 01       	movw	r10, r22
    1caa:	6c 9c       	mul	r6, r12
    1cac:	b0 01       	movw	r22, r0
    1cae:	6d 9c       	mul	r6, r13
    1cb0:	70 0d       	add	r23, r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	a1 e0       	ldi	r26, 0x01	; 1
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	ac 0f       	add	r26, r28
    1cba:	bd 1f       	adc	r27, r29
    1cbc:	6a 0f       	add	r22, r26
    1cbe:	7b 1f       	adc	r23, r27
    1cc0:	68 0f       	add	r22, r24
    1cc2:	79 1f       	adc	r23, r25
    1cc4:	db 01       	movw	r26, r22
    1cc6:	90 96       	adiw	r26, 0x20	; 32
    1cc8:	3c 91       	ld	r19, X
    1cca:	d5 01       	movw	r26, r10
    1ccc:	3c 93       	st	X, r19
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:510
          } else {
            noNewData = 1;
          }
        }
        if (!noNewData) {
          totalAdress++;
    1cce:	4f 5f       	subi	r20, 0xFF	; 255
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	c7 55       	subi	r28, 0x57	; 87
    1cd4:	da 4f       	sbci	r29, 0xFA	; 250
    1cd6:	18 82       	st	Y, r1
    1cd8:	c9 5a       	subi	r28, 0xA9	; 169
    1cda:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:495
  serverMessage[16] = 0x01;

  for (int i = 0; i < strlen(IDarray); i++) {

    if (slaveSaved[IDarray[i]].digitalCount > 0) {
      for (int j = 0; j < (slaveSaved[IDarray[i]].digitalLargeAdress - slaveSaved[IDarray[i]].digitalSmallAdress) + 1; j++) {
    1cdc:	01 96       	adiw	r24, 0x01	; 1
    1cde:	5d cf       	rjmp	.-326    	; 0x1b9a <modbusRead()+0x64e>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:514
        if (!noNewData) {
          totalAdress++;
        }
      }
    }
    if (slaveSaved[IDarray[i]].analogCount > 0) {
    1ce0:	60 81       	ld	r22, Z
    1ce2:	62 03       	mulsu	r22, r18
    1ce4:	d0 01       	movw	r26, r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	a8 50       	subi	r26, 0x08	; 8
    1cea:	bd 4f       	sbci	r27, 0xFD	; 253
    1cec:	8d 91       	ld	r24, X+
    1cee:	9c 91       	ld	r25, X
    1cf0:	18 16       	cp	r1, r24
    1cf2:	19 06       	cpc	r1, r25
    1cf4:	0c f0       	brlt	.+2      	; 0x1cf8 <modbusRead()+0x7ac>
    1cf6:	c4 c0       	rjmp	.+392    	; 0x1e80 <modbusRead()+0x934>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:515
      for (int j = 0; j < (slaveSaved[IDarray[i]].analogLargeAdress - slaveSaved[IDarray[i]].analogSmallAdress) + 1; j++) {
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	30 80       	ld	r3, Z
    1cfe:	63 2d       	mov	r22, r3
    1d00:	03 2c       	mov	r0, r3
    1d02:	00 0c       	add	r0, r0
    1d04:	77 0b       	sbc	r23, r23
    1d06:	26 9f       	mul	r18, r22
    1d08:	50 01       	movw	r10, r0
    1d0a:	27 9f       	mul	r18, r23
    1d0c:	b0 0c       	add	r11, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	d5 01       	movw	r26, r10
    1d12:	a2 58       	subi	r26, 0x82	; 130
    1d14:	bd 4f       	sbci	r27, 0xFD	; 253
    1d16:	5d 01       	movw	r10, r26
    1d18:	6d 01       	movw	r12, r26
    1d1a:	b0 e4       	ldi	r27, 0x40	; 64
    1d1c:	cb 0e       	add	r12, r27
    1d1e:	d1 1c       	adc	r13, r1
    1d20:	d6 01       	movw	r26, r12
    1d22:	8d 90       	ld	r8, X+
    1d24:	9c 90       	ld	r9, X
    1d26:	65 01       	movw	r12, r10
    1d28:	b2 e4       	ldi	r27, 0x42	; 66
    1d2a:	cb 0e       	add	r12, r27
    1d2c:	d1 1c       	adc	r13, r1
    1d2e:	d6 01       	movw	r26, r12
    1d30:	cd 90       	ld	r12, X+
    1d32:	dc 90       	ld	r13, X
    1d34:	bf ef       	ldi	r27, 0xFF	; 255
    1d36:	cb 1a       	sub	r12, r27
    1d38:	db 0a       	sbc	r13, r27
    1d3a:	c8 18       	sub	r12, r8
    1d3c:	d9 08       	sbc	r13, r9
    1d3e:	8c 15       	cp	r24, r12
    1d40:	9d 05       	cpc	r25, r13
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <modbusRead()+0x7fa>
    1d44:	9d c0       	rjmp	.+314    	; 0x1e80 <modbusRead()+0x934>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:516
        if (arraycheck(slaveSaved[IDarray[i]].analogAdress, slaveSaved[IDarray[i]].analogSmallAdress + j, slaveSaved[IDarray[i]].analogCount)) {
    1d46:	65 01       	movw	r12, r10
    1d48:	3a e7       	ldi	r19, 0x7A	; 122
    1d4a:	c3 0e       	add	r12, r19
    1d4c:	d1 1c       	adc	r13, r1
    1d4e:	d6 01       	movw	r26, r12
    1d50:	4d 90       	ld	r4, X+
    1d52:	5c 90       	ld	r5, X
    1d54:	88 0e       	add	r8, r24
    1d56:	99 1e       	adc	r9, r25
    1d58:	d5 01       	movw	r26, r10
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:964
  return crc;
}

bool arraycheck(unsigned short* arr, short num, int len) {

  for (int i = 0; i < len; i++) {
    1d5a:	d1 2c       	mov	r13, r1
    1d5c:	c1 2c       	mov	r12, r1
arraycheck():
    1d5e:	c4 14       	cp	r12, r4
    1d60:	d5 04       	cpc	r13, r5
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <modbusRead()+0x81a>
    1d64:	f7 c0       	rjmp	.+494    	; 0x1f54 <modbusRead()+0xa08>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:965
    if (arr[i] == num) {
    1d66:	ad 90       	ld	r10, X+
    1d68:	bd 90       	ld	r11, X+
    1d6a:	8a 14       	cp	r8, r10
    1d6c:	9b 04       	cpc	r9, r11
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <modbusRead()+0x826>
    1d70:	f9 c0       	rjmp	.+498    	; 0x1f64 <modbusRead()+0xa18>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:964
  return crc;
}

bool arraycheck(unsigned short* arr, short num, int len) {

  for (int i = 0; i < len; i++) {
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	c3 1a       	sub	r12, r19
    1d76:	d3 0a       	sbc	r13, r19
    1d78:	f2 cf       	rjmp	.-28     	; 0x1d5e <modbusRead()+0x812>
modbusRead():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:519
    if (slaveSaved[IDarray[i]].analogCount > 0) {
      for (int j = 0; j < (slaveSaved[IDarray[i]].analogLargeAdress - slaveSaved[IDarray[i]].analogSmallAdress) + 1; j++) {
        if (arraycheck(slaveSaved[IDarray[i]].analogAdress, slaveSaved[IDarray[i]].analogSmallAdress + j, slaveSaved[IDarray[i]].analogCount)) {
          if ((slave[IDarray[i]].analogData[j] != slaveSaved[IDarray[i]].analogOldData[j])) {
            noNewData = 0;
            serverMessage[msgPos++] = IDarray[i];
    1d7a:	58 01       	movw	r10, r16
    1d7c:	ae 0c       	add	r10, r14
    1d7e:	bf 1c       	adc	r11, r15
    1d80:	d5 01       	movw	r26, r10
    1d82:	3c 92       	st	X, r3
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:520
            serverMessage[msgPos++] = highByte(slaveSaved[IDarray[i]].analogSmallAdress + j);
    1d84:	30 81       	ld	r19, Z
    1d86:	32 03       	mulsu	r19, r18
    1d88:	d0 01       	movw	r26, r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	a2 54       	subi	r26, 0x42	; 66
    1d8e:	bd 4f       	sbci	r27, 0xFD	; 253
    1d90:	0d 90       	ld	r0, X+
    1d92:	bc 91       	ld	r27, X
    1d94:	a0 2d       	mov	r26, r0
    1d96:	6d 01       	movw	r12, r26
    1d98:	c8 0e       	add	r12, r24
    1d9a:	d9 1e       	adc	r13, r25
    1d9c:	d5 01       	movw	r26, r10
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	dc 92       	st	X, r13
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:521
            serverMessage[msgPos++] = lowByte(slaveSaved[IDarray[i]].analogSmallAdress + j);
    1da2:	30 81       	ld	r19, Z
    1da4:	32 03       	mulsu	r19, r18
    1da6:	d0 01       	movw	r26, r0
    1da8:	11 24       	eor	r1, r1
    1daa:	a2 54       	subi	r26, 0x42	; 66
    1dac:	bd 4f       	sbci	r27, 0xFD	; 253
    1dae:	3c 91       	ld	r19, X
    1db0:	38 0f       	add	r19, r24
    1db2:	d5 01       	movw	r26, r10
    1db4:	12 96       	adiw	r26, 0x02	; 2
    1db6:	3c 93       	st	X, r19
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:522
            serverMessage[msgPos++] = highByte(slave[IDarray[i]].analogData[j]);
    1db8:	a0 81       	ld	r26, Z
    1dba:	38 e1       	ldi	r19, 0x18	; 24
    1dbc:	6a 2f       	mov	r22, r26
    1dbe:	63 03       	mulsu	r22, r19
    1dc0:	d0 01       	movw	r26, r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	a8 0f       	add	r26, r24
    1dc6:	b9 1f       	adc	r27, r25
    1dc8:	aa 0f       	add	r26, r26
    1dca:	bb 1f       	adc	r27, r27
    1dcc:	cc 24       	eor	r12, r12
    1dce:	c3 94       	inc	r12
    1dd0:	d1 2c       	mov	r13, r1
    1dd2:	cc 0e       	add	r12, r28
    1dd4:	dd 1e       	adc	r13, r29
    1dd6:	ac 0d       	add	r26, r12
    1dd8:	bd 1d       	adc	r27, r13
    1dda:	11 96       	adiw	r26, 0x01	; 1
    1ddc:	3c 91       	ld	r19, X
    1dde:	d5 01       	movw	r26, r10
    1de0:	13 96       	adiw	r26, 0x03	; 3
    1de2:	3c 93       	st	X, r19
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:523
            serverMessage[msgPos++] = lowByte(slave[IDarray[i]].analogData[j]);
    1de4:	b7 01       	movw	r22, r14
    1de6:	6c 5f       	subi	r22, 0xFC	; 252
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	6b 01       	movw	r12, r22
    1dec:	c0 0e       	add	r12, r16
    1dee:	d1 1e       	adc	r13, r17
    1df0:	b5 e0       	ldi	r27, 0x05	; 5
    1df2:	eb 0e       	add	r14, r27
    1df4:	f1 1c       	adc	r15, r1
    1df6:	a0 81       	ld	r26, Z
    1df8:	38 e1       	ldi	r19, 0x18	; 24
    1dfa:	6a 2f       	mov	r22, r26
    1dfc:	63 03       	mulsu	r22, r19
    1dfe:	d0 01       	movw	r26, r0
    1e00:	11 24       	eor	r1, r1
    1e02:	a8 0f       	add	r26, r24
    1e04:	b9 1f       	adc	r27, r25
    1e06:	aa 0f       	add	r26, r26
    1e08:	bb 1f       	adc	r27, r27
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	6c 0f       	add	r22, r28
    1e10:	7d 1f       	adc	r23, r29
    1e12:	a6 0f       	add	r26, r22
    1e14:	b7 1f       	adc	r27, r23
    1e16:	3c 91       	ld	r19, X
    1e18:	d6 01       	movw	r26, r12
    1e1a:	3c 93       	st	X, r19
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:524
            slaveSaved[IDarray[i]].analogOldData[j] = slave[IDarray[i]].analogData[j];
    1e1c:	c0 80       	ld	r12, Z
    1e1e:	0c 2c       	mov	r0, r12
    1e20:	00 0c       	add	r0, r0
    1e22:	dd 08       	sbc	r13, r13
    1e24:	36 e5       	ldi	r19, 0x56	; 86
    1e26:	3c 9d       	mul	r19, r12
    1e28:	d0 01       	movw	r26, r0
    1e2a:	3d 9d       	mul	r19, r13
    1e2c:	b0 0d       	add	r27, r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	a8 0f       	add	r26, r24
    1e32:	b9 1f       	adc	r27, r25
    1e34:	aa 0f       	add	r26, r26
    1e36:	bb 1f       	adc	r27, r27
    1e38:	bd 01       	movw	r22, r26
    1e3a:	6a 52       	subi	r22, 0x2A	; 42
    1e3c:	7d 4f       	sbci	r23, 0xFD	; 253
    1e3e:	5b 01       	movw	r10, r22
    1e40:	a8 e1       	ldi	r26, 0x18	; 24
    1e42:	ac 9d       	mul	r26, r12
    1e44:	b0 01       	movw	r22, r0
    1e46:	ad 9d       	mul	r26, r13
    1e48:	70 0d       	add	r23, r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	68 0f       	add	r22, r24
    1e4e:	79 1f       	adc	r23, r25
    1e50:	66 0f       	add	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	cc 24       	eor	r12, r12
    1e56:	c3 94       	inc	r12
    1e58:	d1 2c       	mov	r13, r1
    1e5a:	cc 0e       	add	r12, r28
    1e5c:	dd 1e       	adc	r13, r29
    1e5e:	6c 0d       	add	r22, r12
    1e60:	7d 1d       	adc	r23, r13
    1e62:	db 01       	movw	r26, r22
    1e64:	6d 91       	ld	r22, X+
    1e66:	7c 91       	ld	r23, X
    1e68:	d5 01       	movw	r26, r10
    1e6a:	6d 93       	st	X+, r22
    1e6c:	7c 93       	st	X, r23
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:530
          } else {
            noNewData = 1;
          }
        }
        if (!noNewData) {
          totalAdress++;
    1e6e:	4f 5f       	subi	r20, 0xFF	; 255
    1e70:	5f 4f       	sbci	r21, 0xFF	; 255
    1e72:	c7 55       	subi	r28, 0x57	; 87
    1e74:	da 4f       	sbci	r29, 0xFA	; 250
    1e76:	18 82       	st	Y, r1
    1e78:	c9 5a       	subi	r28, 0xA9	; 169
    1e7a:	d5 40       	sbci	r29, 0x05	; 5
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:515
          totalAdress++;
        }
      }
    }
    if (slaveSaved[IDarray[i]].analogCount > 0) {
      for (int j = 0; j < (slaveSaved[IDarray[i]].analogLargeAdress - slaveSaved[IDarray[i]].analogSmallAdress) + 1; j++) {
    1e7c:	01 96       	adiw	r24, 0x01	; 1
    1e7e:	3e cf       	rjmp	.-388    	; 0x1cfc <modbusRead()+0x7b0>
    1e80:	31 96       	adiw	r30, 0x01	; 1
    1e82:	6e ce       	rjmp	.-804    	; 0x1b60 <modbusRead()+0x614>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:536
        }
      }
    }
  }

  if (totalAdress > 0) {
    1e84:	14 16       	cp	r1, r20
    1e86:	15 06       	cpc	r1, r21
    1e88:	94 f5       	brge	.+100    	; 0x1eee <modbusRead()+0x9a2>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:537
    serverMessage[17] = highByte(totalAdress);
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	51 8b       	std	Z+17, r21	; 0x11
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:538
    serverMessage[18] = lowByte(totalAdress);
    1e8e:	42 8b       	std	Z+18, r20	; 0x12
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:540

    CRCSim = CRC16_modbus((char*)serverMessage, strlen((char*)serverMessage));  // Find CRC from message
    1e90:	01 90       	ld	r0, Z+
    1e92:	00 20       	and	r0, r0
    1e94:	e9 f7       	brne	.-6      	; 0x1e90 <modbusRead()+0x944>
    1e96:	31 97       	sbiw	r30, 0x01	; 1
    1e98:	bf 01       	movw	r22, r30
    1e9a:	60 1b       	sub	r22, r16
    1e9c:	71 0b       	sbc	r23, r17
    1e9e:	c8 01       	movw	r24, r16
    1ea0:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:542

    serverMessage[msgPos++] = highByte(CRCSim);
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	ee 0d       	add	r30, r14
    1ea8:	ff 1d       	adc	r31, r15
    1eaa:	90 83       	st	Z, r25
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:543
    serverMessage[msgPos++] = lowByte(CRCSim);
    1eac:	81 83       	std	Z+1, r24	; 0x01
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:545

    state = serversend;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	90 93 ee 16 	sts	0x16EE, r25	; 0x8016ee <state+0x1>
    1eb6:	80 93 ed 16 	sts	0x16ED, r24	; 0x8016ed <state>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:549
  } else {
    state = slaveread;
  }
}
    1eba:	c5 55       	subi	r28, 0x55	; 85
    1ebc:	da 4f       	sbci	r29, 0xFA	; 250
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	ff 90       	pop	r15
    1ed2:	ef 90       	pop	r14
    1ed4:	df 90       	pop	r13
    1ed6:	cf 90       	pop	r12
    1ed8:	bf 90       	pop	r11
    1eda:	af 90       	pop	r10
    1edc:	9f 90       	pop	r9
    1ede:	8f 90       	pop	r8
    1ee0:	7f 90       	pop	r7
    1ee2:	6f 90       	pop	r6
    1ee4:	5f 90       	pop	r5
    1ee6:	4f 90       	pop	r4
    1ee8:	3f 90       	pop	r3
    1eea:	2f 90       	pop	r2
    1eec:	08 95       	ret
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:547
    serverMessage[msgPos++] = highByte(CRCSim);
    serverMessage[msgPos++] = lowByte(CRCSim);

    state = serversend;
  } else {
    state = slaveread;
    1eee:	10 92 ee 16 	sts	0x16EE, r1	; 0x8016ee <state+0x1>
    1ef2:	10 92 ed 16 	sts	0x16ED, r1	; 0x8016ed <state>
    1ef6:	e1 cf       	rjmp	.-62     	; 0x1eba <modbusRead()+0x96e>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:509
            slaveSaved[IDarray[i]].digitalOldData[j] = slave[IDarray[i]].digitalData[j];
          } else {
            noNewData = 1;
          }
        }
        if (!noNewData) {
    1ef8:	c7 55       	subi	r28, 0x57	; 87
    1efa:	da 4f       	sbci	r29, 0xFA	; 250
    1efc:	c8 80       	ld	r12, Y
    1efe:	c9 5a       	subi	r28, 0xA9	; 169
    1f00:	d5 40       	sbci	r29, 0x05	; 5
    1f02:	c1 10       	cpse	r12, r1
    1f04:	eb ce       	rjmp	.-554    	; 0x1cdc <modbusRead()+0x790>
    1f06:	e3 ce       	rjmp	.-570    	; 0x1cce <modbusRead()+0x782>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:497
  for (int i = 0; i < strlen(IDarray); i++) {

    if (slaveSaved[IDarray[i]].digitalCount > 0) {
      for (int j = 0; j < (slaveSaved[IDarray[i]].digitalLargeAdress - slaveSaved[IDarray[i]].digitalSmallAdress) + 1; j++) {
        if (arraycheck(slaveSaved[IDarray[i]].digitalAdress, slaveSaved[IDarray[i]].digitalSmallAdress + j, slaveSaved[IDarray[i]].digitalCount)) {
          if (slave[IDarray[i]].digitalData[j] != slaveSaved[IDarray[i]].digitalOldData[j]) {
    1f08:	66 9e       	mul	r6, r22
    1f0a:	60 01       	movw	r12, r0
    1f0c:	67 9e       	mul	r6, r23
    1f0e:	d0 0c       	add	r13, r0
    1f10:	11 24       	eor	r1, r1
    1f12:	a1 e0       	ldi	r26, 0x01	; 1
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ac 0f       	add	r26, r28
    1f18:	bd 1f       	adc	r27, r29
    1f1a:	ca 0e       	add	r12, r26
    1f1c:	db 1e       	adc	r13, r27
    1f1e:	c8 0e       	add	r12, r24
    1f20:	d9 1e       	adc	r13, r25
    1f22:	26 9f       	mul	r18, r22
    1f24:	d0 01       	movw	r26, r0
    1f26:	27 9f       	mul	r18, r23
    1f28:	b0 0d       	add	r27, r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	a8 0f       	add	r26, r24
    1f2e:	b9 1f       	adc	r27, r25
    1f30:	bd 01       	movw	r22, r26
    1f32:	6a 53       	subi	r22, 0x3A	; 58
    1f34:	7d 4f       	sbci	r23, 0xFD	; 253
    1f36:	5b 01       	movw	r10, r22
    1f38:	d6 01       	movw	r26, r12
    1f3a:	90 96       	adiw	r26, 0x20	; 32
    1f3c:	6c 91       	ld	r22, X
    1f3e:	d5 01       	movw	r26, r10
    1f40:	3c 91       	ld	r19, X
    1f42:	63 13       	cpse	r22, r19
    1f44:	69 ce       	rjmp	.-814    	; 0x1c18 <modbusRead()+0x6cc>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:506
            serverMessage[msgPos++] = lowByte(slaveSaved[IDarray[i]].digitalSmallAdress + j);
            serverMessage[msgPos++] = 0x00;
            serverMessage[msgPos++] = slave[IDarray[i]].digitalData[j];
            slaveSaved[IDarray[i]].digitalOldData[j] = slave[IDarray[i]].digitalData[j];
          } else {
            noNewData = 1;
    1f46:	b1 e0       	ldi	r27, 0x01	; 1
    1f48:	c7 55       	subi	r28, 0x57	; 87
    1f4a:	da 4f       	sbci	r29, 0xFA	; 250
    1f4c:	b8 83       	st	Y, r27
    1f4e:	c9 5a       	subi	r28, 0xA9	; 169
    1f50:	d5 40       	sbci	r29, 0x05	; 5
    1f52:	c4 ce       	rjmp	.-632    	; 0x1cdc <modbusRead()+0x790>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:529
            slaveSaved[IDarray[i]].analogOldData[j] = slave[IDarray[i]].analogData[j];
          } else {
            noNewData = 1;
          }
        }
        if (!noNewData) {
    1f54:	c7 55       	subi	r28, 0x57	; 87
    1f56:	da 4f       	sbci	r29, 0xFA	; 250
    1f58:	c8 80       	ld	r12, Y
    1f5a:	c9 5a       	subi	r28, 0xA9	; 169
    1f5c:	d5 40       	sbci	r29, 0x05	; 5
    1f5e:	c1 10       	cpse	r12, r1
    1f60:	8d cf       	rjmp	.-230    	; 0x1e7c <modbusRead()+0x930>
    1f62:	85 cf       	rjmp	.-246    	; 0x1e6e <modbusRead()+0x922>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:517
      }
    }
    if (slaveSaved[IDarray[i]].analogCount > 0) {
      for (int j = 0; j < (slaveSaved[IDarray[i]].analogLargeAdress - slaveSaved[IDarray[i]].analogSmallAdress) + 1; j++) {
        if (arraycheck(slaveSaved[IDarray[i]].analogAdress, slaveSaved[IDarray[i]].analogSmallAdress + j, slaveSaved[IDarray[i]].analogCount)) {
          if ((slave[IDarray[i]].analogData[j] != slaveSaved[IDarray[i]].analogOldData[j])) {
    1f64:	38 e1       	ldi	r19, 0x18	; 24
    1f66:	36 9f       	mul	r19, r22
    1f68:	60 01       	movw	r12, r0
    1f6a:	37 9f       	mul	r19, r23
    1f6c:	d0 0c       	add	r13, r0
    1f6e:	11 24       	eor	r1, r1
    1f70:	c8 0e       	add	r12, r24
    1f72:	d9 1e       	adc	r13, r25
    1f74:	cc 0c       	add	r12, r12
    1f76:	dd 1c       	adc	r13, r13
    1f78:	a1 e0       	ldi	r26, 0x01	; 1
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	ac 0f       	add	r26, r28
    1f7e:	bd 1f       	adc	r27, r29
    1f80:	ca 0e       	add	r12, r26
    1f82:	db 1e       	adc	r13, r27
    1f84:	36 e5       	ldi	r19, 0x56	; 86
    1f86:	36 9f       	mul	r19, r22
    1f88:	d0 01       	movw	r26, r0
    1f8a:	37 9f       	mul	r19, r23
    1f8c:	b0 0d       	add	r27, r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	a8 0f       	add	r26, r24
    1f92:	b9 1f       	adc	r27, r25
    1f94:	aa 0f       	add	r26, r26
    1f96:	bb 1f       	adc	r27, r27
    1f98:	bd 01       	movw	r22, r26
    1f9a:	6a 52       	subi	r22, 0x2A	; 42
    1f9c:	7d 4f       	sbci	r23, 0xFD	; 253
    1f9e:	5b 01       	movw	r10, r22
    1fa0:	d6 01       	movw	r26, r12
    1fa2:	6d 91       	ld	r22, X+
    1fa4:	7c 91       	ld	r23, X
    1fa6:	d5 01       	movw	r26, r10
    1fa8:	cd 90       	ld	r12, X+
    1faa:	dc 90       	ld	r13, X
    1fac:	6c 15       	cp	r22, r12
    1fae:	7d 05       	cpc	r23, r13
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <modbusRead()+0xa68>
    1fb2:	e3 ce       	rjmp	.-570    	; 0x1d7a <modbusRead()+0x82e>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:526
            serverMessage[msgPos++] = lowByte(slaveSaved[IDarray[i]].analogSmallAdress + j);
            serverMessage[msgPos++] = highByte(slave[IDarray[i]].analogData[j]);
            serverMessage[msgPos++] = lowByte(slave[IDarray[i]].analogData[j]);
            slaveSaved[IDarray[i]].analogOldData[j] = slave[IDarray[i]].analogData[j];
          } else {
            noNewData = 1;
    1fb4:	b1 e0       	ldi	r27, 0x01	; 1
    1fb6:	c7 55       	subi	r28, 0x57	; 87
    1fb8:	da 4f       	sbci	r29, 0xFA	; 250
    1fba:	b8 83       	st	Y, r27
    1fbc:	c9 5a       	subi	r28, 0xA9	; 169
    1fbe:	d5 40       	sbci	r29, 0x05	; 5
    1fc0:	5d cf       	rjmp	.-326    	; 0x1e7c <modbusRead()+0x930>

00001fc2 <__vector_23>:
__vector_23():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1fc2:	1f 92       	push	r1
    1fc4:	0f 92       	push	r0
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	0f 92       	push	r0
    1fca:	11 24       	eor	r1, r1
    1fcc:	2f 93       	push	r18
    1fce:	3f 93       	push	r19
    1fd0:	8f 93       	push	r24
    1fd2:	9f 93       	push	r25
    1fd4:	af 93       	push	r26
    1fd6:	bf 93       	push	r27
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1fd8:	80 91 f4 16 	lds	r24, 0x16F4	; 0x8016f4 <timer0_millis>
    1fdc:	90 91 f5 16 	lds	r25, 0x16F5	; 0x8016f5 <timer0_millis+0x1>
    1fe0:	a0 91 f6 16 	lds	r26, 0x16F6	; 0x8016f6 <timer0_millis+0x2>
    1fe4:	b0 91 f7 16 	lds	r27, 0x16F7	; 0x8016f7 <timer0_millis+0x3>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1fe8:	30 91 f3 16 	lds	r19, 0x16F3	; 0x8016f3 <timer0_fract>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1fec:	26 e0       	ldi	r18, 0x06	; 6
    1fee:	23 0f       	add	r18, r19
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1ff0:	2d 37       	cpi	r18, 0x7D	; 125
    1ff2:	68 f1       	brcs	.+90     	; 0x204e <__vector_23+0x8c>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1ff4:	29 e8       	ldi	r18, 0x89	; 137
    1ff6:	23 0f       	add	r18, r19
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1ff8:	03 96       	adiw	r24, 0x03	; 3
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	b1 1d       	adc	r27, r1
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1ffe:	20 93 f3 16 	sts	0x16F3, r18	; 0x8016f3 <timer0_fract>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    2002:	80 93 f4 16 	sts	0x16F4, r24	; 0x8016f4 <timer0_millis>
    2006:	90 93 f5 16 	sts	0x16F5, r25	; 0x8016f5 <timer0_millis+0x1>
    200a:	a0 93 f6 16 	sts	0x16F6, r26	; 0x8016f6 <timer0_millis+0x2>
    200e:	b0 93 f7 16 	sts	0x16F7, r27	; 0x8016f7 <timer0_millis+0x3>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    2012:	80 91 ef 16 	lds	r24, 0x16EF	; 0x8016ef <timer0_overflow_count>
    2016:	90 91 f0 16 	lds	r25, 0x16F0	; 0x8016f0 <timer0_overflow_count+0x1>
    201a:	a0 91 f1 16 	lds	r26, 0x16F1	; 0x8016f1 <timer0_overflow_count+0x2>
    201e:	b0 91 f2 16 	lds	r27, 0x16F2	; 0x8016f2 <timer0_overflow_count+0x3>
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	a1 1d       	adc	r26, r1
    2026:	b1 1d       	adc	r27, r1
    2028:	80 93 ef 16 	sts	0x16EF, r24	; 0x8016ef <timer0_overflow_count>
    202c:	90 93 f0 16 	sts	0x16F0, r25	; 0x8016f0 <timer0_overflow_count+0x1>
    2030:	a0 93 f1 16 	sts	0x16F1, r26	; 0x8016f1 <timer0_overflow_count+0x2>
    2034:	b0 93 f2 16 	sts	0x16F2, r27	; 0x8016f2 <timer0_overflow_count+0x3>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    2038:	bf 91       	pop	r27
    203a:	af 91       	pop	r26
    203c:	9f 91       	pop	r25
    203e:	8f 91       	pop	r24
    2040:	3f 91       	pop	r19
    2042:	2f 91       	pop	r18
    2044:	0f 90       	pop	r0
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	0f 90       	pop	r0
    204a:	1f 90       	pop	r1
    204c:	18 95       	reti
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    204e:	02 96       	adiw	r24, 0x02	; 2
    2050:	a1 1d       	adc	r26, r1
    2052:	b1 1d       	adc	r27, r1
    2054:	d4 cf       	rjmp	.-88     	; 0x1ffe <__vector_23+0x3c>

00002056 <__vector_52>:
__vector_52():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial2.cpp:45
{
  Serial2._rx_complete_irq();
}

ISR(USART2_UDRE_vect)
{
    2056:	1f 92       	push	r1
    2058:	0f 92       	push	r0
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	0f 92       	push	r0
    205e:	11 24       	eor	r1, r1
    2060:	0b b6       	in	r0, 0x3b	; 59
    2062:	0f 92       	push	r0
    2064:	2f 93       	push	r18
    2066:	3f 93       	push	r19
    2068:	4f 93       	push	r20
    206a:	5f 93       	push	r21
    206c:	6f 93       	push	r22
    206e:	7f 93       	push	r23
    2070:	8f 93       	push	r24
    2072:	9f 93       	push	r25
    2074:	af 93       	push	r26
    2076:	bf 93       	push	r27
    2078:	ef 93       	push	r30
    207a:	ff 93       	push	r31
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial2.cpp:46
  Serial2._tx_udr_empty_irq();
    207c:	88 ef       	ldi	r24, 0xF8	; 248
    207e:	96 e1       	ldi	r25, 0x16	; 22
    2080:	0e 94 37 03 	call	0x66e	; 0x66e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial2.cpp:47
}
    2084:	ff 91       	pop	r31
    2086:	ef 91       	pop	r30
    2088:	bf 91       	pop	r27
    208a:	af 91       	pop	r26
    208c:	9f 91       	pop	r25
    208e:	8f 91       	pop	r24
    2090:	7f 91       	pop	r23
    2092:	6f 91       	pop	r22
    2094:	5f 91       	pop	r21
    2096:	4f 91       	pop	r20
    2098:	3f 91       	pop	r19
    209a:	2f 91       	pop	r18
    209c:	0f 90       	pop	r0
    209e:	0b be       	out	0x3b, r0	; 59
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	0f 90       	pop	r0
    20a6:	1f 90       	pop	r1
    20a8:	18 95       	reti

000020aa <__vector_51>:
__vector_51():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial2.cpp:40
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    20aa:	1f 92       	push	r1
    20ac:	0f 92       	push	r0
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	0f 92       	push	r0
    20b2:	11 24       	eor	r1, r1
    20b4:	0b b6       	in	r0, 0x3b	; 59
    20b6:	0f 92       	push	r0
    20b8:	2f 93       	push	r18
    20ba:	8f 93       	push	r24
    20bc:	9f 93       	push	r25
    20be:	ef 93       	push	r30
    20c0:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    20c2:	e0 91 08 17 	lds	r30, 0x1708	; 0x801708 <Serial2+0x10>
    20c6:	f0 91 09 17 	lds	r31, 0x1709	; 0x801709 <Serial2+0x11>
    20ca:	80 81       	ld	r24, Z
    20cc:	e0 91 0e 17 	lds	r30, 0x170E	; 0x80170e <Serial2+0x16>
    20d0:	f0 91 0f 17 	lds	r31, 0x170F	; 0x80170f <Serial2+0x17>
    20d4:	82 fd       	sbrc	r24, 2
    20d6:	1d c0       	rjmp	.+58     	; 0x2112 <__vector_51+0x68>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    20d8:	90 81       	ld	r25, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    20da:	80 91 11 17 	lds	r24, 0x1711	; 0x801711 <Serial2+0x19>
    20de:	8f 5f       	subi	r24, 0xFF	; 255
    20e0:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    20e2:	20 91 12 17 	lds	r18, 0x1712	; 0x801712 <Serial2+0x1a>
    20e6:	82 17       	cp	r24, r18
    20e8:	41 f0       	breq	.+16     	; 0x20fa <__vector_51+0x50>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    20ea:	e0 91 11 17 	lds	r30, 0x1711	; 0x801711 <Serial2+0x19>
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	e8 50       	subi	r30, 0x08	; 8
    20f2:	f9 4e       	sbci	r31, 0xE9	; 233
    20f4:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    20f6:	80 93 11 17 	sts	0x1711, r24	; 0x801711 <Serial2+0x19>
__vector_51():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
  Serial2._rx_complete_irq();
}
    20fa:	ff 91       	pop	r31
    20fc:	ef 91       	pop	r30
    20fe:	9f 91       	pop	r25
    2100:	8f 91       	pop	r24
    2102:	2f 91       	pop	r18
    2104:	0f 90       	pop	r0
    2106:	0b be       	out	0x3b, r0	; 59
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	0f 90       	pop	r0
    210e:	1f 90       	pop	r1
    2110:	18 95       	reti
_rx_complete_irq():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2112:	80 81       	ld	r24, Z
    2114:	f2 cf       	rjmp	.-28     	; 0x20fa <__vector_51+0x50>

00002116 <__vector_37>:
__vector_37():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	0b b6       	in	r0, 0x3b	; 59
    2122:	0f 92       	push	r0
    2124:	2f 93       	push	r18
    2126:	3f 93       	push	r19
    2128:	4f 93       	push	r20
    212a:	5f 93       	push	r21
    212c:	6f 93       	push	r22
    212e:	7f 93       	push	r23
    2130:	8f 93       	push	r24
    2132:	9f 93       	push	r25
    2134:	af 93       	push	r26
    2136:	bf 93       	push	r27
    2138:	ef 93       	push	r30
    213a:	ff 93       	push	r31
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    213c:	85 e9       	ldi	r24, 0x95	; 149
    213e:	97 e1       	ldi	r25, 0x17	; 23
    2140:	0e 94 37 03 	call	0x66e	; 0x66e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    2144:	ff 91       	pop	r31
    2146:	ef 91       	pop	r30
    2148:	bf 91       	pop	r27
    214a:	af 91       	pop	r26
    214c:	9f 91       	pop	r25
    214e:	8f 91       	pop	r24
    2150:	7f 91       	pop	r23
    2152:	6f 91       	pop	r22
    2154:	5f 91       	pop	r21
    2156:	4f 91       	pop	r20
    2158:	3f 91       	pop	r19
    215a:	2f 91       	pop	r18
    215c:	0f 90       	pop	r0
    215e:	0b be       	out	0x3b, r0	; 59
    2160:	0f 90       	pop	r0
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	0f 90       	pop	r0
    2166:	1f 90       	pop	r1
    2168:	18 95       	reti

0000216a <__vector_36>:
__vector_36():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    216a:	1f 92       	push	r1
    216c:	0f 92       	push	r0
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	0f 92       	push	r0
    2172:	11 24       	eor	r1, r1
    2174:	0b b6       	in	r0, 0x3b	; 59
    2176:	0f 92       	push	r0
    2178:	2f 93       	push	r18
    217a:	8f 93       	push	r24
    217c:	9f 93       	push	r25
    217e:	ef 93       	push	r30
    2180:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2182:	e0 91 a5 17 	lds	r30, 0x17A5	; 0x8017a5 <Serial1+0x10>
    2186:	f0 91 a6 17 	lds	r31, 0x17A6	; 0x8017a6 <Serial1+0x11>
    218a:	80 81       	ld	r24, Z
    218c:	e0 91 ab 17 	lds	r30, 0x17AB	; 0x8017ab <Serial1+0x16>
    2190:	f0 91 ac 17 	lds	r31, 0x17AC	; 0x8017ac <Serial1+0x17>
    2194:	82 fd       	sbrc	r24, 2
    2196:	1d c0       	rjmp	.+58     	; 0x21d2 <__vector_36+0x68>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2198:	90 81       	ld	r25, Z
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    219a:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <Serial1+0x19>
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    21a2:	20 91 af 17 	lds	r18, 0x17AF	; 0x8017af <Serial1+0x1a>
    21a6:	82 17       	cp	r24, r18
    21a8:	41 f0       	breq	.+16     	; 0x21ba <__vector_36+0x50>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    21aa:	e0 91 ae 17 	lds	r30, 0x17AE	; 0x8017ae <Serial1+0x19>
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	eb 56       	subi	r30, 0x6B	; 107
    21b2:	f8 4e       	sbci	r31, 0xE8	; 232
    21b4:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    21b6:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <Serial1+0x19>
__vector_36():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    21ba:	ff 91       	pop	r31
    21bc:	ef 91       	pop	r30
    21be:	9f 91       	pop	r25
    21c0:	8f 91       	pop	r24
    21c2:	2f 91       	pop	r18
    21c4:	0f 90       	pop	r0
    21c6:	0b be       	out	0x3b, r0	; 59
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f 90       	pop	r0
    21ce:	1f 90       	pop	r1
    21d0:	18 95       	reti
_rx_complete_irq():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    21d2:	80 81       	ld	r24, Z
    21d4:	f2 cf       	rjmp	.-28     	; 0x21ba <__vector_36+0x50>

000021d6 <global constructors keyed to 65535_0_Modbus_Master_kode.ino.cpp.o.1992>:
_GLOBAL__I_65535_0_Modbus_Master_kode.ino.cpp.o.1992():
    21d6:	e8 ef       	ldi	r30, 0xF8	; 248
    21d8:	f6 e1       	ldi	r31, 0x16	; 22
    21da:	13 82       	std	Z+3, r1	; 0x03
    21dc:	12 82       	std	Z+2, r1	; 0x02
    21de:	48 ee       	ldi	r20, 0xE8	; 232
    21e0:	53 e0       	ldi	r21, 0x03	; 3
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	44 83       	std	Z+4, r20	; 0x04
    21e8:	55 83       	std	Z+5, r21	; 0x05
    21ea:	66 83       	std	Z+6, r22	; 0x06
    21ec:	77 83       	std	Z+7, r23	; 0x07
    21ee:	8f e1       	ldi	r24, 0x1F	; 31
    21f0:	92 e0       	ldi	r25, 0x02	; 2
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	25 ed       	ldi	r18, 0xD5	; 213
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	35 87       	std	Z+13, r19	; 0x0d
    21fc:	24 87       	std	Z+12, r18	; 0x0c
    21fe:	24 ed       	ldi	r18, 0xD4	; 212
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	37 87       	std	Z+15, r19	; 0x0f
    2204:	26 87       	std	Z+14, r18	; 0x0e
    2206:	20 ed       	ldi	r18, 0xD0	; 208
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	31 8b       	std	Z+17, r19	; 0x11
    220c:	20 8b       	std	Z+16, r18	; 0x10
    220e:	21 ed       	ldi	r18, 0xD1	; 209
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	33 8b       	std	Z+19, r19	; 0x13
    2214:	22 8b       	std	Z+18, r18	; 0x12
    2216:	22 ed       	ldi	r18, 0xD2	; 210
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	35 8b       	std	Z+21, r19	; 0x15
    221c:	24 8b       	std	Z+20, r18	; 0x14
    221e:	26 ed       	ldi	r18, 0xD6	; 214
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	37 8b       	std	Z+23, r19	; 0x17
    2224:	26 8b       	std	Z+22, r18	; 0x16
    2226:	11 8e       	std	Z+25, r1	; 0x19
    2228:	12 8e       	std	Z+26, r1	; 0x1a
    222a:	13 8e       	std	Z+27, r1	; 0x1b
    222c:	14 8e       	std	Z+28, r1	; 0x1c
    222e:	e5 e9       	ldi	r30, 0x95	; 149
    2230:	f7 e1       	ldi	r31, 0x17	; 23
    2232:	13 82       	std	Z+3, r1	; 0x03
    2234:	12 82       	std	Z+2, r1	; 0x02
    2236:	44 83       	std	Z+4, r20	; 0x04
    2238:	55 83       	std	Z+5, r21	; 0x05
    223a:	66 83       	std	Z+6, r22	; 0x06
    223c:	77 83       	std	Z+7, r23	; 0x07
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	80 83       	st	Z, r24
    2242:	8d ec       	ldi	r24, 0xCD	; 205
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	95 87       	std	Z+13, r25	; 0x0d
    2248:	84 87       	std	Z+12, r24	; 0x0c
    224a:	8c ec       	ldi	r24, 0xCC	; 204
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	97 87       	std	Z+15, r25	; 0x0f
    2250:	86 87       	std	Z+14, r24	; 0x0e
    2252:	88 ec       	ldi	r24, 0xC8	; 200
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	91 8b       	std	Z+17, r25	; 0x11
    2258:	80 8b       	std	Z+16, r24	; 0x10
    225a:	89 ec       	ldi	r24, 0xC9	; 201
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	93 8b       	std	Z+19, r25	; 0x13
    2260:	82 8b       	std	Z+18, r24	; 0x12
    2262:	8a ec       	ldi	r24, 0xCA	; 202
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	95 8b       	std	Z+21, r25	; 0x15
    2268:	84 8b       	std	Z+20, r24	; 0x14
    226a:	8e ec       	ldi	r24, 0xCE	; 206
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	97 8b       	std	Z+23, r25	; 0x17
    2270:	86 8b       	std	Z+22, r24	; 0x16
    2272:	11 8e       	std	Z+25, r1	; 0x19
    2274:	12 8e       	std	Z+26, r1	; 0x1a
    2276:	13 8e       	std	Z+27, r1	; 0x1b
    2278:	14 8e       	std	Z+28, r1	; 0x1c
    227a:	88 ee       	ldi	r24, 0xE8	; 232
    227c:	93 e0       	ldi	r25, 0x03	; 3
    227e:	0e 94 ba 18 	call	0x3174	; 0x3174 <malloc>
    2282:	90 93 35 18 	sts	0x1835, r25	; 0x801835 <simBuffer+0x1>
    2286:	80 93 34 18 	sts	0x1834, r24	; 0x801834 <simBuffer>
    228a:	80 ed       	ldi	r24, 0xD0	; 208
    228c:	97 e0       	ldi	r25, 0x07	; 7
    228e:	0e 94 ba 18 	call	0x3174	; 0x3174 <malloc>
    2292:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <serverMessage+0x1>
    2296:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <serverMessage>
    229a:	08 95       	ret

0000229c <main>:
main():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	a8 97       	sbiw	r28, 0x28	; 40
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    22b0:	78 94       	sei
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    22b2:	84 b5       	in	r24, 0x24	; 36
    22b4:	83 60       	ori	r24, 0x03	; 3
    22b6:	84 bd       	out	0x24, r24	; 36
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    22b8:	85 b5       	in	r24, 0x25	; 37
    22ba:	83 60       	ori	r24, 0x03	; 3
    22bc:	85 bd       	out	0x25, r24	; 37
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    22be:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    22c2:	81 60       	ori	r24, 0x01	; 1
    22c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    22ce:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    22d2:	91 60       	ori	r25, 0x01	; 1
    22d4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    22d8:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    22dc:	91 60       	ori	r25, 0x01	; 1
    22de:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    22e2:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    22e6:	94 60       	ori	r25, 0x04	; 4
    22e8:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    22ec:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    22f0:	91 60       	ori	r25, 0x01	; 1
    22f2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    22f6:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    22fa:	93 60       	ori	r25, 0x03	; 3
    22fc:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    2300:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2304:	91 60       	ori	r25, 0x01	; 1
    2306:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    230a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    230e:	93 60       	ori	r25, 0x03	; 3
    2310:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    2314:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2318:	91 60       	ori	r25, 0x01	; 1
    231a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    231e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2322:	93 60       	ori	r25, 0x03	; 3
    2324:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    2328:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    232c:	91 60       	ori	r25, 0x01	; 1
    232e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    2332:	96 e8       	ldi	r25, 0x86	; 134
    2334:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2338:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
setup():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:94

struct saved_data slaveSaved[30];

void setup() {

  CLKPR = 1 << CLKPCE;  // Clock Prescaler Change Enable
    233c:	90 e8       	ldi	r25, 0x80	; 128
    233e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:95
  CLKPR = 0;            // Change clock division factor to 1.
    2342:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
begin():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2346:	e0 91 a5 17 	lds	r30, 0x17A5	; 0x8017a5 <Serial1+0x10>
    234a:	f0 91 a6 17 	lds	r31, 0x17A6	; 0x8017a6 <Serial1+0x11>
    234e:	80 83       	st	Z, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2350:	e0 91 a1 17 	lds	r30, 0x17A1	; 0x8017a1 <Serial1+0xc>
    2354:	f0 91 a2 17 	lds	r31, 0x17A2	; 0x8017a2 <Serial1+0xd>
    2358:	10 82       	st	Z, r1
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    235a:	e0 91 a3 17 	lds	r30, 0x17A3	; 0x8017a3 <Serial1+0xe>
    235e:	f0 91 a4 17 	lds	r31, 0x17A4	; 0x8017a4 <Serial1+0xf>
    2362:	37 e6       	ldi	r19, 0x67	; 103
    2364:	30 83       	st	Z, r19
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    2366:	10 92 ad 17 	sts	0x17AD, r1	; 0x8017ad <Serial1+0x18>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    236a:	e0 91 a9 17 	lds	r30, 0x17A9	; 0x8017a9 <Serial1+0x14>
    236e:	f0 91 aa 17 	lds	r31, 0x17AA	; 0x8017aa <Serial1+0x15>
    2372:	26 e0       	ldi	r18, 0x06	; 6
    2374:	20 83       	st	Z, r18
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    2376:	e0 91 a7 17 	lds	r30, 0x17A7	; 0x8017a7 <Serial1+0x12>
    237a:	f0 91 a8 17 	lds	r31, 0x17A8	; 0x8017a8 <Serial1+0x13>
    237e:	90 81       	ld	r25, Z
    2380:	98 69       	ori	r25, 0x98	; 152
    2382:	90 83       	st	Z, r25
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    2384:	e0 91 a7 17 	lds	r30, 0x17A7	; 0x8017a7 <Serial1+0x12>
    2388:	f0 91 a8 17 	lds	r31, 0x17A8	; 0x8017a8 <Serial1+0x13>
    238c:	90 81       	ld	r25, Z
    238e:	9f 7d       	andi	r25, 0xDF	; 223
    2390:	90 83       	st	Z, r25
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2392:	e0 91 08 17 	lds	r30, 0x1708	; 0x801708 <Serial2+0x10>
    2396:	f0 91 09 17 	lds	r31, 0x1709	; 0x801709 <Serial2+0x11>
    239a:	80 83       	st	Z, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    239c:	e0 91 04 17 	lds	r30, 0x1704	; 0x801704 <Serial2+0xc>
    23a0:	f0 91 05 17 	lds	r31, 0x1705	; 0x801705 <Serial2+0xd>
    23a4:	10 82       	st	Z, r1
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    23a6:	e0 91 06 17 	lds	r30, 0x1706	; 0x801706 <Serial2+0xe>
    23aa:	f0 91 07 17 	lds	r31, 0x1707	; 0x801707 <Serial2+0xf>
    23ae:	30 83       	st	Z, r19
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    23b0:	10 92 10 17 	sts	0x1710, r1	; 0x801710 <Serial2+0x18>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    23b4:	e0 91 0c 17 	lds	r30, 0x170C	; 0x80170c <Serial2+0x14>
    23b8:	f0 91 0d 17 	lds	r31, 0x170D	; 0x80170d <Serial2+0x15>
    23bc:	20 83       	st	Z, r18
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    23be:	e0 91 0a 17 	lds	r30, 0x170A	; 0x80170a <Serial2+0x12>
    23c2:	f0 91 0b 17 	lds	r31, 0x170B	; 0x80170b <Serial2+0x13>
    23c6:	80 81       	ld	r24, Z
    23c8:	88 69       	ori	r24, 0x98	; 152
    23ca:	80 83       	st	Z, r24
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    23cc:	e0 91 0a 17 	lds	r30, 0x170A	; 0x80170a <Serial2+0x12>
    23d0:	f0 91 0b 17 	lds	r31, 0x170B	; 0x80170b <Serial2+0x13>
    23d4:	80 81       	ld	r24, Z
    23d6:	8f 7d       	andi	r24, 0xDF	; 223
    23d8:	80 83       	st	Z, r24
setup():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:102
  //Begin serial communication
  simSerial.begin(9600);
  modbusSerial.begin(9600);

  //Setup mode of pins on master
  pinMode(DTR_E, OUTPUT);
    23da:	61 e0       	ldi	r22, 0x01	; 1
    23dc:	8a e2       	ldi	r24, 0x2A	; 42
    23de:	0e 94 7e 02 	call	0x4fc	; 0x4fc <pinMode>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:103
  pinMode(PWRKEY, OUTPUT);
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	8b e2       	ldi	r24, 0x2B	; 43
    23e6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <pinMode>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:104
  pinMode(BLUE_LED, OUTPUT);
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	82 e4       	ldi	r24, 0x42	; 66
    23ee:	0e 94 7e 02 	call	0x4fc	; 0x4fc <pinMode>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:105
  pinMode(GREEN_LED, OUTPUT);
    23f2:	61 e0       	ldi	r22, 0x01	; 1
    23f4:	81 e4       	ldi	r24, 0x41	; 65
    23f6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <pinMode>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:106
  pinMode(RED_LED, OUTPUT);
    23fa:	61 e0       	ldi	r22, 0x01	; 1
    23fc:	80 e4       	ldi	r24, 0x40	; 64
    23fe:	0e 94 7e 02 	call	0x4fc	; 0x4fc <pinMode>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:107
  pinMode(Button, INPUT);
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	83 e4       	ldi	r24, 0x43	; 67
    2406:	0e 94 7e 02 	call	0x4fc	; 0x4fc <pinMode>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:109

  digitalWrite(BLUE_LED, HIGH);
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	82 e4       	ldi	r24, 0x42	; 66
    240e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:110
  digitalWrite(RED_LED, HIGH);
    2412:	61 e0       	ldi	r22, 0x01	; 1
    2414:	80 e4       	ldi	r24, 0x40	; 64
    2416:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:111
  digitalWrite(GREEN_LED, HIGH);
    241a:	61 e0       	ldi	r22, 0x01	; 1
    241c:	81 e4       	ldi	r24, 0x41	; 65
    241e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:113

  digitalWrite(PWRKEY, HIGH);
    2422:	61 e0       	ldi	r22, 0x01	; 1
    2424:	8b e2       	ldi	r24, 0x2B	; 43
    2426:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:114
  digitalWrite(DTR_E, LOW);
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	8a e2       	ldi	r24, 0x2A	; 42
    242e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
main():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/main.cpp:34
    2432:	84 e0       	ldi	r24, 0x04	; 4
    2434:	e8 2e       	mov	r14, r24
    2436:	f1 2c       	mov	r15, r1
    2438:	99 24       	eor	r9, r9
    243a:	93 94       	inc	r9
simSetup():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:257
  bool start = 0;  // Start bit used in simSetup
  bool stop = 1;   // Stop bit used in simSetup

  while (stop) {                   // Stay in loop while stop is set
    for (int i = 0; i < 4; i++) {  // Check four times for OK response
      simSerial.println(F("AT"));  // Print AT
    243c:	81 ed       	ldi	r24, 0xD1	; 209
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
OKcomcheck():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:760

bool OKcomcheck(int dly) {  // Same as comcheck, but only for check "OK" response and with no while

  bool check = 0;

  millisDelay(dly);
    2444:	8c e2       	ldi	r24, 0x2C	; 44
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:762

  while (simSerial.available()) {
    244c:	85 e9       	ldi	r24, 0x95	; 149
    244e:	97 e1       	ldi	r25, 0x17	; 23
    2450:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
    2454:	8c 01       	movw	r16, r24
    2456:	89 2b       	or	r24, r25
    2458:	c9 f0       	breq	.+50     	; 0x248c <main+0x1f0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:763
    int numBytes = simSerial.available();
    245a:	85 e9       	ldi	r24, 0x95	; 149
    245c:	97 e1       	ldi	r25, 0x17	; 23
    245e:	0e 94 17 03 	call	0x62e	; 0x62e <HardwareSerial::available()>
    2462:	5c 01       	movw	r10, r24
main():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:764
    for (int i = 0; i < numBytes; i++) {
    2464:	10 e0       	ldi	r17, 0x00	; 0
    2466:	00 e0       	ldi	r16, 0x00	; 0
    2468:	c0 90 34 18 	lds	r12, 0x1834	; 0x801834 <simBuffer>
    246c:	d0 90 35 18 	lds	r13, 0x1835	; 0x801835 <simBuffer+0x1>
OKcomcheck():
    2470:	0a 15       	cp	r16, r10
    2472:	1b 05       	cpc	r17, r11
    2474:	5c f7       	brge	.-42     	; 0x244c <main+0x1b0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:765
      simBuffer[i] = simSerial.read();
    2476:	85 e9       	ldi	r24, 0x95	; 149
    2478:	97 e1       	ldi	r25, 0x17	; 23
    247a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <HardwareSerial::read()>
    247e:	f6 01       	movw	r30, r12
    2480:	e0 0f       	add	r30, r16
    2482:	f1 1f       	adc	r31, r17
    2484:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:764

  millisDelay(dly);

  while (simSerial.available()) {
    int numBytes = simSerial.available();
    for (int i = 0; i < numBytes; i++) {
    2486:	0f 5f       	subi	r16, 0xFF	; 255
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	ee cf       	rjmp	.-36     	; 0x2468 <main+0x1cc>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:769
      simBuffer[i] = simSerial.read();
    }
  }

  if (strstr((char*)simBuffer, "OK")) {
    248c:	66 e3       	ldi	r22, 0x36	; 54
    248e:	72 e0       	ldi	r23, 0x02	; 2
    2490:	80 91 34 18 	lds	r24, 0x1834	; 0x801834 <simBuffer>
    2494:	90 91 35 18 	lds	r25, 0x1835	; 0x801835 <simBuffer+0x1>
    2498:	0e 94 f5 19 	call	0x33ea	; 0x33ea <strstr>
    249c:	89 2b       	or	r24, r25
    249e:	09 f4       	brne	.+2      	; 0x24a2 <main+0x206>
    24a0:	c8 c0       	rjmp	.+400    	; 0x2632 <main+0x396>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:775
    check = 1;
  } else {
    check = 0;
  }

  clrsimBuffer();
    24a2:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
main():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:770
      simBuffer[i] = simSerial.read();
    }
  }

  if (strstr((char*)simBuffer, "OK")) {
    check = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:260
  while (stop) {                   // Stay in loop while stop is set
    for (int i = 0; i < 4; i++) {  // Check four times for OK response
      simSerial.println(F("AT"));  // Print AT
      start = OKcomcheck(300);     // Check for OK
      if (start) {                 // If start is set, stop while
        stop = 0;
    24a8:	91 2c       	mov	r9, r1
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	e9 1a       	sub	r14, r25
    24ae:	f1 08       	sbc	r15, r1
simSetup():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:256

  bool start = 0;  // Start bit used in simSetup
  bool stop = 1;   // Stop bit used in simSetup

  while (stop) {                   // Stay in loop while stop is set
    for (int i = 0; i < 4; i++) {  // Check four times for OK response
    24b0:	29 f6       	brne	.-118    	; 0x243c <main+0x1a0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:263
      start = OKcomcheck(300);     // Check for OK
      if (start) {                 // If start is set, stop while
        stop = 0;
      }
    }
    if (!start) {  // If start is not set sim module is turned of, therefore turn on
    24b2:	81 11       	cpse	r24, r1
    24b4:	0c c0       	rjmp	.+24     	; 0x24ce <main+0x232>
simpow():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:751
  }
}

void simpow() {  // Used to power on or off sim module

  digitalWrite(PWRKEY, LOW);
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	8b e2       	ldi	r24, 0x2B	; 43
    24ba:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:752
  millisDelay(1000);
    24be:	88 ee       	ldi	r24, 0xE8	; 232
    24c0:	93 e0       	ldi	r25, 0x03	; 3
    24c2:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:753
  digitalWrite(PWRKEY, HIGH);
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	8b e2       	ldi	r24, 0x2B	; 43
    24ca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <digitalWrite>
simSetup():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:255
void simSetup() {

  bool start = 0;  // Start bit used in simSetup
  bool stop = 1;   // Stop bit used in simSetup

  while (stop) {                   // Stay in loop while stop is set
    24ce:	91 10       	cpse	r9, r1
    24d0:	b0 cf       	rjmp	.-160    	; 0x2432 <main+0x196>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:269
      simpow();
    }
  }
  stop = 1;  // Set stop for next siminit call

  clrsimBuffer();
    24d2:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:271

  simSerial.println(F("AT+GSN"));  // Sent at command to get IMEI number
    24d6:	8a ec       	ldi	r24, 0xCA	; 202
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:272
  responseCheck("OK", 10000);
    24de:	60 e1       	ldi	r22, 0x10	; 16
    24e0:	77 e2       	ldi	r23, 0x27	; 39
    24e2:	86 e3       	ldi	r24, 0x36	; 54
    24e4:	92 e0       	ldi	r25, 0x02	; 2
    24e6:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
    24ea:	a0 91 34 18 	lds	r26, 0x1834	; 0x801834 <simBuffer>
    24ee:	b0 91 35 18 	lds	r27, 0x1835	; 0x801835 <simBuffer+0x1>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:275

  for (int i = 0; i < 8; i++) {  // Put response into IMEI array
    IMEI[i] = (simBuffer[(i * 2) + 9] - 48) << 4;
    24f2:	e8 ed       	ldi	r30, 0xD8	; 216
    24f4:	f6 e1       	ldi	r31, 0x16	; 22
    24f6:	19 96       	adiw	r26, 0x09	; 9
    24f8:	8c 91       	ld	r24, X
    24fa:	19 97       	sbiw	r26, 0x09	; 9
    24fc:	80 53       	subi	r24, 0x30	; 48
    24fe:	99 0b       	sbc	r25, r25
    2500:	54 e0       	ldi	r21, 0x04	; 4
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	5a 95       	dec	r21
    2508:	e1 f7       	brne	.-8      	; 0x2502 <main+0x266>
    250a:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:276
    if (i < 7) {
    250c:	07 30       	cpi	r16, 0x07	; 7
    250e:	11 05       	cpc	r17, r1
    2510:	31 f0       	breq	.+12     	; 0x251e <main+0x282>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:277
      IMEI[i] = IMEI[i] | (simBuffer[(i * 2) + 10] - 48);
    2512:	1a 96       	adiw	r26, 0x0a	; 10
    2514:	9c 91       	ld	r25, X
    2516:	1a 97       	sbiw	r26, 0x0a	; 10
    2518:	90 53       	subi	r25, 0x30	; 48
    251a:	89 2b       	or	r24, r25
    251c:	80 83       	st	Z, r24
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:274
  clrsimBuffer();

  simSerial.println(F("AT+GSN"));  // Sent at command to get IMEI number
  responseCheck("OK", 10000);

  for (int i = 0; i < 8; i++) {  // Put response into IMEI array
    251e:	0f 5f       	subi	r16, 0xFF	; 255
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	12 96       	adiw	r26, 0x02	; 2
    2524:	31 96       	adiw	r30, 0x01	; 1
    2526:	08 30       	cpi	r16, 0x08	; 8
    2528:	11 05       	cpc	r17, r1
    252a:	29 f7       	brne	.-54     	; 0x24f6 <main+0x25a>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:280
    IMEI[i] = (simBuffer[(i * 2) + 9] - 48) << 4;
    if (i < 7) {
      IMEI[i] = IMEI[i] | (simBuffer[(i * 2) + 10] - 48);
    }
  }
  clrsimBuffer();  // Clear sim response buffer
    252c:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:282

  simSerial.println(F("AT+CGATT?"));  // Check operator. See operator e.g Telia and if connected to NB or CAT-M
    2530:	80 ec       	ldi	r24, 0xC0	; 192
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:283
  responseCheck("1", 10000);
    2538:	60 e1       	ldi	r22, 0x10	; 16
    253a:	77 e2       	ldi	r23, 0x27	; 39
    253c:	89 e3       	ldi	r24, 0x39	; 57
    253e:	92 e0       	ldi	r25, 0x02	; 2
    2540:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:284
  clrsimBuffer();
    2544:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:286

  simSerial.println(F("AT+COPS?"));  // Check operator. See operator e.g Telia and if connected to NB or CAT-M
    2548:	87 eb       	ldi	r24, 0xB7	; 183
    254a:	91 e0       	ldi	r25, 0x01	; 1
    254c:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:287
  if (responseCheck("9", 5000) != 1) {
    2550:	68 e8       	ldi	r22, 0x88	; 136
    2552:	73 e1       	ldi	r23, 0x13	; 19
    2554:	8b e3       	ldi	r24, 0x3B	; 59
    2556:	92 e0       	ldi	r25, 0x02	; 2
    2558:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	31 f0       	breq	.+12     	; 0x256c <main+0x2d0>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:288
    responseCheck("7", 5000);
    2560:	68 e8       	ldi	r22, 0x88	; 136
    2562:	73 e1       	ldi	r23, 0x13	; 19
    2564:	8d e3       	ldi	r24, 0x3D	; 61
    2566:	92 e0       	ldi	r25, 0x02	; 2
    2568:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:290
  }
  clrsimBuffer();
    256c:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:292

  simSerial.println(F("AT+CGNAPN"));
    2570:	8d ea       	ldi	r24, 0xAD	; 173
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:293
  responseCheck("1,\"iot.1nce.net\"", 10000);
    2578:	60 e1       	ldi	r22, 0x10	; 16
    257a:	77 e2       	ldi	r23, 0x27	; 39
    257c:	8f e3       	ldi	r24, 0x3F	; 63
    257e:	92 e0       	ldi	r25, 0x02	; 2
    2580:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:294
  clrsimBuffer();
    2584:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:296

  simSerial.println(F("AT+CSQ"));  // Check signal quality
    2588:	86 ea       	ldi	r24, 0xA6	; 166
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:297
  responseCheck("OK", 10000);
    2590:	60 e1       	ldi	r22, 0x10	; 16
    2592:	77 e2       	ldi	r23, 0x27	; 39
    2594:	86 e3       	ldi	r24, 0x36	; 54
    2596:	92 e0       	ldi	r25, 0x02	; 2
    2598:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:301
  for (int i = 0; i < 2; i++) {  // Put response into IMEI array
    CSQ[i] = simBuffer[i + 7];
  }
  clrsimBuffer();  // Clear sim response buffer
    259c:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:303

  simSerial.println(F("AT+CNCFG=0,1,\"iot.1nce.net\""));  // Check if connected to the correct APN
    25a0:	8a e8       	ldi	r24, 0x8A	; 138
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:304
  responseCheck("OK", 10000);
    25a8:	60 e1       	ldi	r22, 0x10	; 16
    25aa:	77 e2       	ldi	r23, 0x27	; 39
    25ac:	86 e3       	ldi	r24, 0x36	; 54
    25ae:	92 e0       	ldi	r25, 0x02	; 2
    25b0:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:305
  clrsimBuffer();
    25b4:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:307

  simSerial.println(F("AT+CNACT=0,1"));  // Activate network
    25b8:	8d e7       	ldi	r24, 0x7D	; 125
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:308
  responseCheck("0,ACTIVE", 10000);
    25c0:	60 e1       	ldi	r22, 0x10	; 16
    25c2:	77 e2       	ldi	r23, 0x27	; 39
    25c4:	80 e5       	ldi	r24, 0x50	; 80
    25c6:	92 e0       	ldi	r25, 0x02	; 2
    25c8:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:309
  clrsimBuffer();
    25cc:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:311

  simSerial.println(F("AT+CNACT?"));  // Check if network is active to adress
    25d0:	83 e7       	ldi	r24, 0x73	; 115
    25d2:	91 e0       	ldi	r25, 0x01	; 1
    25d4:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:312
  responseCheck("OK", 10000);
    25d8:	60 e1       	ldi	r22, 0x10	; 16
    25da:	77 e2       	ldi	r23, 0x27	; 39
    25dc:	86 e3       	ldi	r24, 0x36	; 54
    25de:	92 e0       	ldi	r25, 0x02	; 2
    25e0:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:313
  clrsimBuffer();
    25e4:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:315

  simSerial.println(F("AT+CAOPEN=0,0,\"UDP\",\"207.154.251.171\",8080"));  // Open UDP connection/socket
    25e8:	88 e4       	ldi	r24, 0x48	; 72
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:316
  responseCheck("OK", 10000);
    25f0:	60 e1       	ldi	r22, 0x10	; 16
    25f2:	77 e2       	ldi	r23, 0x27	; 39
    25f4:	86 e3       	ldi	r24, 0x36	; 54
    25f6:	92 e0       	ldi	r25, 0x02	; 2
    25f8:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:317
  clrsimBuffer();
    25fc:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
    2600:	be 01       	movw	r22, r28
    2602:	6f 5f       	subi	r22, 0xFF	; 255
    2604:	7f 4f       	sbci	r23, 0xFF	; 255
    2606:	a8 ed       	ldi	r26, 0xD8	; 216
    2608:	b6 e1       	ldi	r27, 0x16	; 22
    260a:	8b 01       	movw	r16, r22
setup():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:124

  char modelAndFirmware[16];
  short model = 0x0001;     //Model nr.
  short firmware = 0x0001;  //Firmware nr.

  for (int i = 0; i < strlen(IMEI); i++) {
    260c:	9d 01       	movw	r18, r26
    260e:	f9 01       	movw	r30, r18
    2610:	01 90       	ld	r0, Z+
    2612:	00 20       	and	r0, r0
    2614:	e9 f7       	brne	.-6      	; 0x2610 <main+0x374>
    2616:	cf 01       	movw	r24, r30
    2618:	89 5d       	subi	r24, 0xD9	; 217
    261a:	96 41       	sbci	r25, 0x16	; 22
    261c:	ad 01       	movw	r20, r26
    261e:	48 5d       	subi	r20, 0xD8	; 216
    2620:	56 41       	sbci	r21, 0x16	; 22
    2622:	48 17       	cp	r20, r24
    2624:	59 07       	cpc	r21, r25
    2626:	48 f4       	brcc	.+18     	; 0x263a <main+0x39e>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:125
    modelAndFirmware[i] = IMEI[i];
    2628:	8d 91       	ld	r24, X+
    262a:	fb 01       	movw	r30, r22
    262c:	81 93       	st	Z+, r24
    262e:	bf 01       	movw	r22, r30
    2630:	ee cf       	rjmp	.-36     	; 0x260e <main+0x372>
OKcomcheck():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:775
    check = 1;
  } else {
    check = 0;
  }

  clrsimBuffer();
    2632:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
main():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:772
  }

  if (strstr((char*)simBuffer, "OK")) {
    check = 1;
  } else {
    check = 0;
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	38 cf       	rjmp	.-400    	; 0x24aa <main+0x20e>
setup():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:127
  short firmware = 0x0001;  //Firmware nr.

  for (int i = 0; i < strlen(IMEI); i++) {
    modelAndFirmware[i] = IMEI[i];
  }
  modelAndFirmware[8] = 0x02;
    263a:	82 e0       	ldi	r24, 0x02	; 2
    263c:	89 87       	std	Y+9, r24	; 0x09
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:129

  modelAndFirmware[9] = highByte(model);
    263e:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:130
  modelAndFirmware[10] = lowByte(model);
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	8b 87       	std	Y+11, r24	; 0x0b
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:132

  modelAndFirmware[11] = highByte(firmware);
    2644:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:133
  modelAndFirmware[12] = lowByte(firmware);
    2646:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:135

  modelAndFirmware[13] = lowByte(CRC16_modbus(modelAndFirmware, 13));
    2648:	6d e0       	ldi	r22, 0x0D	; 13
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	c8 01       	movw	r24, r16
    264e:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
    2652:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:136
  modelAndFirmware[14] = highByte(CRC16_modbus(modelAndFirmware, 13));
    2654:	6d e0       	ldi	r22, 0x0D	; 13
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	c8 01       	movw	r24, r16
    265a:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
    265e:	9f 87       	std	Y+15, r25	; 0x0f
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:138

  simSerial.println(F("AT+CASEND=0,15"));
    2660:	85 e0       	ldi	r24, 0x05	; 5
    2662:	92 e0       	ldi	r25, 0x02	; 2
    2664:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:139
  responseCheck("OK", 10000);
    2668:	60 e1       	ldi	r22, 0x10	; 16
    266a:	77 e2       	ldi	r23, 0x27	; 39
    266c:	86 e3       	ldi	r24, 0x36	; 54
    266e:	92 e0       	ldi	r25, 0x02	; 2
    2670:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:140
  clrsimBuffer();
    2674:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:142

  simSerial.write(modelAndFirmware, strlen(modelAndFirmware));  // Check if network is active to adress
    2678:	f8 01       	movw	r30, r16
    267a:	01 90       	ld	r0, Z+
    267c:	00 20       	and	r0, r0
    267e:	e9 f7       	brne	.-6      	; 0x267a <main+0x3de>
    2680:	31 97       	sbiw	r30, 0x01	; 1
    2682:	af 01       	movw	r20, r30
    2684:	40 1b       	sub	r20, r16
    2686:	51 0b       	sbc	r21, r17
    2688:	b8 01       	movw	r22, r16
    268a:	85 e9       	ldi	r24, 0x95	; 149
    268c:	97 e1       	ldi	r25, 0x17	; 23
    268e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:143
  responseCheck("OK", 10000);
    2692:	60 e1       	ldi	r22, 0x10	; 16
    2694:	77 e2       	ldi	r23, 0x27	; 39
    2696:	86 e3       	ldi	r24, 0x36	; 54
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:145

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    269e:	84 ef       	ldi	r24, 0xF4	; 244
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:146
  responseCheck("00", 10000);
    26a6:	60 e1       	ldi	r22, 0x10	; 16
    26a8:	77 e2       	ldi	r23, 0x27	; 39
    26aa:	89 e5       	ldi	r24, 0x59	; 89
    26ac:	92 e0       	ldi	r25, 0x02	; 2
    26ae:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
    26b2:	be 01       	movw	r22, r28
    26b4:	6b 5e       	subi	r22, 0xEB	; 235
    26b6:	7f 4f       	sbci	r23, 0xFF	; 255
    26b8:	a8 ed       	ldi	r26, 0xD8	; 216
    26ba:	b6 e1       	ldi	r27, 0x16	; 22
    26bc:	7b 01       	movw	r14, r22
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:153
  /************************************************/

  /**********Ask for slave setup on startup********/
  char msg[15];

  for (int i = 0; i < strlen(IMEI); i++) {
    26be:	9d 01       	movw	r18, r26
    26c0:	f9 01       	movw	r30, r18
    26c2:	01 90       	ld	r0, Z+
    26c4:	00 20       	and	r0, r0
    26c6:	e9 f7       	brne	.-6      	; 0x26c2 <main+0x426>
    26c8:	cf 01       	movw	r24, r30
    26ca:	89 5d       	subi	r24, 0xD9	; 217
    26cc:	96 41       	sbci	r25, 0x16	; 22
    26ce:	ad 01       	movw	r20, r26
    26d0:	48 5d       	subi	r20, 0xD8	; 216
    26d2:	56 41       	sbci	r21, 0x16	; 22
    26d4:	48 17       	cp	r20, r24
    26d6:	59 07       	cpc	r21, r25
    26d8:	28 f4       	brcc	.+10     	; 0x26e4 <main+0x448>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:154
    msg[i] = IMEI[i];
    26da:	8d 91       	ld	r24, X+
    26dc:	fb 01       	movw	r30, r22
    26de:	81 93       	st	Z+, r24
    26e0:	bf 01       	movw	r22, r30
    26e2:	ee cf       	rjmp	.-36     	; 0x26c0 <main+0x424>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:156
  }
  msg[8] = 0x03;
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	8d 8f       	std	Y+29, r24	; 0x1d
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:158

  msg[9] = lowByte(CRC16_modbus(msg, 9));
    26e8:	69 e0       	ldi	r22, 0x09	; 9
    26ea:	70 e0       	ldi	r23, 0x00	; 0
    26ec:	c7 01       	movw	r24, r14
    26ee:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
    26f2:	8e 8f       	std	Y+30, r24	; 0x1e
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:159
  msg[10] = highByte(CRC16_modbus(msg, 9));
    26f4:	69 e0       	ldi	r22, 0x09	; 9
    26f6:	70 e0       	ldi	r23, 0x00	; 0
    26f8:	c7 01       	movw	r24, r14
    26fa:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
    26fe:	9f 8f       	std	Y+31, r25	; 0x1f
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:161

  simSerial.println(F("AT+CASEND=0,11"));
    2700:	85 ee       	ldi	r24, 0xE5	; 229
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:162
  responseCheck("OK", 10000);
    2708:	60 e1       	ldi	r22, 0x10	; 16
    270a:	77 e2       	ldi	r23, 0x27	; 39
    270c:	86 e3       	ldi	r24, 0x36	; 54
    270e:	92 e0       	ldi	r25, 0x02	; 2
    2710:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:163
  clrsimBuffer();
    2714:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:165

  simSerial.write(msg, strlen(msg));  // Check if network is active to adress
    2718:	f7 01       	movw	r30, r14
    271a:	01 90       	ld	r0, Z+
    271c:	00 20       	and	r0, r0
    271e:	e9 f7       	brne	.-6      	; 0x271a <main+0x47e>
    2720:	31 97       	sbiw	r30, 0x01	; 1
    2722:	af 01       	movw	r20, r30
    2724:	4e 19       	sub	r20, r14
    2726:	5f 09       	sbc	r21, r15
    2728:	b7 01       	movw	r22, r14
    272a:	85 e9       	ldi	r24, 0x95	; 149
    272c:	97 e1       	ldi	r25, 0x17	; 23
    272e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:166
  responseCheck("OK", 10000);
    2732:	60 e1       	ldi	r22, 0x10	; 16
    2734:	77 e2       	ldi	r23, 0x27	; 39
    2736:	86 e3       	ldi	r24, 0x36	; 54
    2738:	92 e0       	ldi	r25, 0x02	; 2
    273a:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:168

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    273e:	84 ed       	ldi	r24, 0xD4	; 212
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:170

  serverRead();
    2746:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <serverRead()>
sendToServer():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:553
  }
}

void sendToServer() {

  char sendLength[20] = "AT+CASEND=0,";  // To hold at command that sends size of data to be send
    274a:	97 e0       	ldi	r25, 0x07	; 7
    274c:	29 2e       	mov	r2, r25
    274e:	2e 01       	movw	r4, r28
    2750:	f2 e2       	ldi	r31, 0x22	; 34
    2752:	4f 0e       	add	r4, r31
    2754:	51 1c       	adc	r5, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:556
  char msgLength[20];                    // Hold size of message

  sprintf(msgLength, "%u", strlen((char*)serverMessage));  // Add message size to end of AT command
    2756:	2c e5       	ldi	r18, 0x5C	; 92
    2758:	62 2e       	mov	r6, r18
    275a:	22 e0       	ldi	r18, 0x02	; 2
    275c:	72 2e       	mov	r7, r18
loop():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:193

      if (simBuffer[0] == keyNumber) {
        if (simBuffer[1] == 0x00) {  //Go to different case depending on response
          state = slaveread;
        } else if (simBuffer[1] == 0x01) {
          state = slavewrite;
    275e:	32 e0       	ldi	r19, 0x02	; 2
    2760:	a3 2e       	mov	r10, r19
    2762:	b1 2c       	mov	r11, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:217
      char masterData[20];

      for (int i = 0; i < strlen(IMEI); i++) {
        masterData[i] = IMEI[i];
      }
      masterData[8] = 0x01;
    2764:	33 24       	eor	r3, r3
    2766:	33 94       	inc	r3
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:246
      responseCheck("00", 10000);
      break;
  }

  if (powerStatus() == 0) {  //If power is still on
    state = poweroff;
    2768:	43 e0       	ldi	r20, 0x03	; 3
    276a:	84 2e       	mov	r8, r20
    276c:	91 2c       	mov	r9, r1
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:176
  /************************************************/
}

void loop() {

  switch (state) {
    276e:	c0 90 ed 16 	lds	r12, 0x16ED	; 0x8016ed <state>
    2772:	d0 90 ee 16 	lds	r13, 0x16EE	; 0x8016ee <state+0x1>
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	c8 16       	cp	r12, r24
    277a:	d1 04       	cpc	r13, r1
    277c:	09 f4       	brne	.+2      	; 0x2780 <main+0x4e4>
    277e:	57 c0       	rjmp	.+174    	; 0x282e <main+0x592>
    2780:	9c f5       	brge	.+102    	; 0x27e8 <main+0x54c>
    2782:	cd 28       	or	r12, r13
    2784:	09 f4       	brne	.+2      	; 0x2788 <main+0x4ec>
    2786:	50 c0       	rjmp	.+160    	; 0x2828 <main+0x58c>
analogRead():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:61
#endif

#if defined(ADCSRB) && defined(MUX5)
  // the MUX5 bit of ADCSRB selects whether we're reading from channels
  // 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
  ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    2788:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    278c:	87 7f       	andi	r24, 0xF7	; 247
    278e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    2792:	b0 e4       	ldi	r27, 0x40	; 64
    2794:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    2798:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    279c:	80 64       	ori	r24, 0x40	; 64
    279e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    27a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    27a6:	86 fd       	sbrc	r24, 6
    27a8:	fc cf       	rjmp	.-8      	; 0x27a2 <main+0x506>
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    27aa:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    27ae:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
powerStatus():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:919
  }
}

bool powerStatus() {
  ADCValue = analogRead(A0);
  voltage = ADCValue * (5.0 / 1023.0);
    27b2:	07 2e       	mov	r0, r23
    27b4:	00 0c       	add	r0, r0
    27b6:	88 0b       	sbc	r24, r24
    27b8:	99 0b       	sbc	r25, r25
    27ba:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__floatsisf>
    27be:	2a e0       	ldi	r18, 0x0A	; 10
    27c0:	38 e2       	ldi	r19, 0x28	; 40
    27c2:	40 ea       	ldi	r20, 0xA0	; 160
    27c4:	5b e3       	ldi	r21, 0x3B	; 59
    27c6:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <__mulsf3>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:921

  if (voltage > 2) {
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	50 e4       	ldi	r21, 0x40	; 64
    27d2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__gesf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	24 f0       	brlt	.+8      	; 0x27e2 <main+0x546>
loop():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:246
      responseCheck("00", 10000);
      break;
  }

  if (powerStatus() == 0) {  //If power is still on
    state = poweroff;
    27da:	90 92 ee 16 	sts	0x16EE, r9	; 0x8016ee <state+0x1>
    27de:	80 92 ed 16 	sts	0x16ED, r8	; 0x8016ed <state>
main():
C:\Users\owner\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    27e2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <serialEventRun()>
    27e6:	c3 cf       	rjmp	.-122    	; 0x276e <main+0x4d2>
loop():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:176
  /************************************************/
}

void loop() {

  switch (state) {
    27e8:	a2 e0       	ldi	r26, 0x02	; 2
    27ea:	ca 16       	cp	r12, r26
    27ec:	d1 04       	cpc	r13, r1
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <main+0x556>
    27f0:	89 c0       	rjmp	.+274    	; 0x2904 <main+0x668>
    27f2:	a8 01       	movw	r20, r16
    27f4:	e8 ed       	ldi	r30, 0xD8	; 216
    27f6:	f6 e1       	ldi	r31, 0x16	; 22
    27f8:	b3 e0       	ldi	r27, 0x03	; 3
    27fa:	cb 16       	cp	r12, r27
    27fc:	d1 04       	cpc	r13, r1
    27fe:	21 f6       	brne	.-120    	; 0x2788 <main+0x4ec>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:214

    case poweroff:  //Send power off to server

      char masterData[20];

      for (int i = 0; i < strlen(IMEI); i++) {
    2800:	a8 ed       	ldi	r26, 0xD8	; 216
    2802:	b6 e1       	ldi	r27, 0x16	; 22
    2804:	0d 90       	ld	r0, X+
    2806:	00 20       	and	r0, r0
    2808:	e9 f7       	brne	.-6      	; 0x2804 <main+0x568>
    280a:	cd 01       	movw	r24, r26
    280c:	89 5d       	subi	r24, 0xD9	; 217
    280e:	96 41       	sbci	r25, 0x16	; 22
    2810:	9f 01       	movw	r18, r30
    2812:	28 5d       	subi	r18, 0xD8	; 216
    2814:	36 41       	sbci	r19, 0x16	; 22
    2816:	28 17       	cp	r18, r24
    2818:	39 07       	cpc	r19, r25
    281a:	08 f0       	brcs	.+2      	; 0x281e <main+0x582>
    281c:	85 c0       	rjmp	.+266    	; 0x2928 <main+0x68c>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:215
        masterData[i] = IMEI[i];
    281e:	81 91       	ld	r24, Z+
    2820:	da 01       	movw	r26, r20
    2822:	8d 93       	st	X+, r24
    2824:	ad 01       	movw	r20, r26
    2826:	ec cf       	rjmp	.-40     	; 0x2800 <main+0x564>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:178

void loop() {

  switch (state) {
    case slaveread:  //Slavesetup and read data from slaves. Also check for change in data.
      modbusRead();
    2828:	0e 94 a6 0a 	call	0x154c	; 0x154c <modbusRead()>
    282c:	ad cf       	rjmp	.-166    	; 0x2788 <main+0x4ec>
sendToServer():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:553
  }
}

void sendToServer() {

  char sendLength[20] = "AT+CASEND=0,";  // To hold at command that sends size of data to be send
    282e:	8d e0       	ldi	r24, 0x0D	; 13
    2830:	e7 e0       	ldi	r30, 0x07	; 7
    2832:	f2 e0       	ldi	r31, 0x02	; 2
    2834:	de 01       	movw	r26, r28
    2836:	55 96       	adiw	r26, 0x15	; 21
    2838:	01 90       	ld	r0, Z+
    283a:	0d 92       	st	X+, r0
    283c:	8a 95       	dec	r24
    283e:	e1 f7       	brne	.-8      	; 0x2838 <main+0x59c>
    2840:	f2 01       	movw	r30, r4
    2842:	82 2d       	mov	r24, r2
    2844:	11 92       	st	Z+, r1
    2846:	8a 95       	dec	r24
    2848:	e9 f7       	brne	.-6      	; 0x2844 <main+0x5a8>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:556
  char msgLength[20];                    // Hold size of message

  sprintf(msgLength, "%u", strlen((char*)serverMessage));  // Add message size to end of AT command
    284a:	a0 91 32 18 	lds	r26, 0x1832	; 0x801832 <serverMessage>
    284e:	b0 91 33 18 	lds	r27, 0x1833	; 0x801833 <serverMessage+0x1>
    2852:	fd 01       	movw	r30, r26
    2854:	01 90       	ld	r0, Z+
    2856:	00 20       	and	r0, r0
    2858:	e9 f7       	brne	.-6      	; 0x2854 <main+0x5b8>
    285a:	31 97       	sbiw	r30, 0x01	; 1
    285c:	ea 1b       	sub	r30, r26
    285e:	fb 0b       	sbc	r31, r27
    2860:	ff 93       	push	r31
    2862:	ef 93       	push	r30
    2864:	7f 92       	push	r7
    2866:	6f 92       	push	r6
    2868:	1f 93       	push	r17
    286a:	0f 93       	push	r16
    286c:	0e 94 0f 1a 	call	0x341e	; 0x341e <sprintf>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:557
  strcat(sendLength, msgLength);
    2870:	b8 01       	movw	r22, r16
    2872:	c7 01       	movw	r24, r14
    2874:	0e 94 df 19 	call	0x33be	; 0x33be <strcat>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:559

  simSerial.write(sendLength, strlen(sendLength));  // Send AT command
    2878:	f7 01       	movw	r30, r14
    287a:	01 90       	ld	r0, Z+
    287c:	00 20       	and	r0, r0
    287e:	e9 f7       	brne	.-6      	; 0x287a <main+0x5de>
    2880:	31 97       	sbiw	r30, 0x01	; 1
    2882:	af 01       	movw	r20, r30
    2884:	4e 19       	sub	r20, r14
    2886:	5f 09       	sbc	r21, r15
    2888:	b7 01       	movw	r22, r14
    288a:	85 e9       	ldi	r24, 0x95	; 149
    288c:	97 e1       	ldi	r25, 0x17	; 23
    288e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:560
  simSerial.println();                              // Need ln when writing to sim module
    2892:	0e 94 de 02 	call	0x5bc	; 0x5bc <Print::println() [clone .constprop.5]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:562

  millisDelay(200);
    2896:	88 ec       	ldi	r24, 0xC8	; 200
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 33 04 	call	0x866	; 0x866 <millisDelay(int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:564

  simSerial.write((char*)serverMessage, strlen((char*)serverMessage));  // Send message to server
    289e:	60 91 32 18 	lds	r22, 0x1832	; 0x801832 <serverMessage>
    28a2:	70 91 33 18 	lds	r23, 0x1833	; 0x801833 <serverMessage+0x1>
    28a6:	fb 01       	movw	r30, r22
    28a8:	01 90       	ld	r0, Z+
    28aa:	00 20       	and	r0, r0
    28ac:	e9 f7       	brne	.-6      	; 0x28a8 <main+0x60c>
    28ae:	31 97       	sbiw	r30, 0x01	; 1
    28b0:	af 01       	movw	r20, r30
    28b2:	46 1b       	sub	r20, r22
    28b4:	57 0b       	sbc	r21, r23
    28b6:	85 e9       	ldi	r24, 0x95	; 149
    28b8:	97 e1       	ldi	r25, 0x17	; 23
    28ba:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>
loop():
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:185

    case serversend:

      sendToServer();  //Send message to server

      simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    28be:	84 e3       	ldi	r24, 0x34	; 52
    28c0:	92 e0       	ldi	r25, 0x02	; 2
    28c2:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:187

      serverRead();  //Read server message
    28c6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <serverRead()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:189

      if (simBuffer[0] == keyNumber) {
    28ca:	e0 91 34 18 	lds	r30, 0x1834	; 0x801834 <simBuffer>
    28ce:	f0 91 35 18 	lds	r31, 0x1835	; 0x801835 <simBuffer+0x1>
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	90 81       	ld	r25, Z
    28e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    28e4:	98 13       	cpse	r25, r24
    28e6:	1b c0       	rjmp	.+54     	; 0x291e <main+0x682>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:190
        if (simBuffer[1] == 0x00) {  //Go to different case depending on response
    28e8:	81 81       	ldd	r24, Z+1	; 0x01
    28ea:	81 11       	cpse	r24, r1
    28ec:	05 c0       	rjmp	.+10     	; 0x28f8 <main+0x65c>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:198
          state = slavewrite;
        } else if (simBuffer[1] == 0x02) {
          state = slaveread;
        } else if (simBuffer[1] == 0x03) {
          slaveSetupCheck = 0;
          state = slaveread;
    28ee:	10 92 ee 16 	sts	0x16EE, r1	; 0x8016ee <state+0x1>
    28f2:	10 92 ed 16 	sts	0x16ED, r1	; 0x8016ed <state>
    28f6:	06 c0       	rjmp	.+12     	; 0x2904 <main+0x668>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:192
      serverRead();  //Read server message

      if (simBuffer[0] == keyNumber) {
        if (simBuffer[1] == 0x00) {  //Go to different case depending on response
          state = slaveread;
        } else if (simBuffer[1] == 0x01) {
    28f8:	81 30       	cpi	r24, 0x01	; 1
    28fa:	39 f4       	brne	.+14     	; 0x290a <main+0x66e>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:193
          state = slavewrite;
    28fc:	b0 92 ee 16 	sts	0x16EE, r11	; 0x8016ee <state+0x1>
    2900:	a0 92 ed 16 	sts	0x16ED, r10	; 0x8016ed <state>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:207
      } else {
        state = serversend;
      }

    case slavewrite:
      modbusWrite();  //Write data response to slaves
    2904:	0e 94 2e 06 	call	0xc5c	; 0xc5c <modbusWrite()>
    2908:	3f cf       	rjmp	.-386    	; 0x2788 <main+0x4ec>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:194
      if (simBuffer[0] == keyNumber) {
        if (simBuffer[1] == 0x00) {  //Go to different case depending on response
          state = slaveread;
        } else if (simBuffer[1] == 0x01) {
          state = slavewrite;
        } else if (simBuffer[1] == 0x02) {
    290a:	82 30       	cpi	r24, 0x02	; 2
    290c:	81 f3       	breq	.-32     	; 0x28ee <main+0x652>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:196
          state = slaveread;
        } else if (simBuffer[1] == 0x03) {
    290e:	83 30       	cpi	r24, 0x03	; 3
    2910:	19 f4       	brne	.+6      	; 0x2918 <main+0x67c>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:197
          slaveSetupCheck = 0;
    2912:	10 92 ec 16 	sts	0x16EC, r1	; 0x8016ec <slaveSetupCheck>
    2916:	eb cf       	rjmp	.-42     	; 0x28ee <main+0x652>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:199
          state = slaveread;
        } else if (simBuffer[1] == 0x04) {
    2918:	84 30       	cpi	r24, 0x04	; 4
    291a:	a1 f7       	brne	.-24     	; 0x2904 <main+0x668>
    291c:	e8 cf       	rjmp	.-48     	; 0x28ee <main+0x652>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:203
          state = slaveread;
        }
      } else {
        state = serversend;
    291e:	d0 92 ee 16 	sts	0x16EE, r13	; 0x8016ee <state+0x1>
    2922:	c0 92 ed 16 	sts	0x16ED, r12	; 0x8016ed <state>
    2926:	ee cf       	rjmp	.-36     	; 0x2904 <main+0x668>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:217
      char masterData[20];

      for (int i = 0; i < strlen(IMEI); i++) {
        masterData[i] = IMEI[i];
      }
      masterData[8] = 0x01;
    2928:	39 86       	std	Y+9, r3	; 0x09
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:219

      masterData[9] = highByte(0x0001);
    292a:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:220
      masterData[10] = lowByte(0x0001);
    292c:	3b 86       	std	Y+11, r3	; 0x0b
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:222

      masterData[11] = 0x00;
    292e:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:224

      masterData[12] = highByte(0x0001);
    2930:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:225
      masterData[13] = lowByte(0x0001);
    2932:	3e 86       	std	Y+14, r3	; 0x0e
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:227

      masterData[14] = highByte(0x0001);
    2934:	1f 86       	std	Y+15, r1	; 0x0f
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:228
      masterData[15] = lowByte(0x0001);
    2936:	38 8a       	std	Y+16, r3	; 0x10
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:230

      masterData[16] = lowByte(CRC16_modbus(masterData, 16));
    2938:	60 e1       	ldi	r22, 0x10	; 16
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	c8 01       	movw	r24, r16
    293e:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
    2942:	89 8b       	std	Y+17, r24	; 0x11
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:231
      masterData[17] = highByte(CRC16_modbus(masterData, 16));
    2944:	60 e1       	ldi	r22, 0x10	; 16
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	c8 01       	movw	r24, r16
    294a:	0e 94 11 04 	call	0x822	; 0x822 <CRC16_modbus(char*, int)>
    294e:	9a 8b       	std	Y+18, r25	; 0x12
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:233

      simSerial.println(F("AT+CASEND=0,18"));
    2950:	85 e2       	ldi	r24, 0x25	; 37
    2952:	92 e0       	ldi	r25, 0x02	; 2
    2954:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:234
      responseCheck("OK", 10000);
    2958:	60 e1       	ldi	r22, 0x10	; 16
    295a:	77 e2       	ldi	r23, 0x27	; 39
    295c:	86 e3       	ldi	r24, 0x36	; 54
    295e:	92 e0       	ldi	r25, 0x02	; 2
    2960:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:235
      clrsimBuffer();
    2964:	0e 94 27 06 	call	0xc4e	; 0xc4e <clrsimBuffer()>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:237

      simSerial.write(masterData, strlen(masterData));  // Check if network is active to adress
    2968:	f8 01       	movw	r30, r16
    296a:	01 90       	ld	r0, Z+
    296c:	00 20       	and	r0, r0
    296e:	e9 f7       	brne	.-6      	; 0x296a <main+0x6ce>
    2970:	31 97       	sbiw	r30, 0x01	; 1
    2972:	af 01       	movw	r20, r30
    2974:	40 1b       	sub	r20, r16
    2976:	51 0b       	sbc	r21, r17
    2978:	b8 01       	movw	r22, r16
    297a:	85 e9       	ldi	r24, 0x95	; 149
    297c:	97 e1       	ldi	r25, 0x17	; 23
    297e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Print::write(char const*, unsigned int) [clone .constprop.10]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:238
      responseCheck("OK", 10000);
    2982:	60 e1       	ldi	r22, 0x10	; 16
    2984:	77 e2       	ldi	r23, 0x27	; 39
    2986:	86 e3       	ldi	r24, 0x36	; 54
    2988:	92 e0       	ldi	r25, 0x02	; 2
    298a:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:240

      simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    298e:	84 e1       	ldi	r24, 0x14	; 20
    2990:	92 e0       	ldi	r25, 0x02	; 2
    2992:	0e 94 a6 03 	call	0x74c	; 0x74c <Print::println(__FlashStringHelper const*) [clone .constprop.2]>
C:\Users\owner\Documents\GitHub\Modbus-wireless\Modbus-Master-main\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:241
      responseCheck("00", 10000);
    2996:	60 e1       	ldi	r22, 0x10	; 16
    2998:	77 e2       	ldi	r23, 0x27	; 39
    299a:	89 e5       	ldi	r24, 0x59	; 89
    299c:	92 e0       	ldi	r25, 0x02	; 2
    299e:	0e 94 37 05 	call	0xa6e	; 0xa6e <responseCheck(char*, unsigned int)>
    29a2:	f2 ce       	rjmp	.-540    	; 0x2788 <main+0x4ec>

000029a4 <vfprintf>:
vfprintf():
    29a4:	2f 92       	push	r2
    29a6:	3f 92       	push	r3
    29a8:	4f 92       	push	r4
    29aa:	5f 92       	push	r5
    29ac:	6f 92       	push	r6
    29ae:	7f 92       	push	r7
    29b0:	8f 92       	push	r8
    29b2:	9f 92       	push	r9
    29b4:	af 92       	push	r10
    29b6:	bf 92       	push	r11
    29b8:	cf 92       	push	r12
    29ba:	df 92       	push	r13
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	00 d0       	rcall	.+0      	; 0x29ca <vfprintf+0x26>
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <vfprintf+0x28>
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <vfprintf+0x2a>
    29ce:	1f 92       	push	r1
    29d0:	1f 92       	push	r1
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	7c 01       	movw	r14, r24
    29d8:	3b 01       	movw	r6, r22
    29da:	8a 01       	movw	r16, r20
    29dc:	fc 01       	movw	r30, r24
    29de:	17 82       	std	Z+7, r1	; 0x07
    29e0:	16 82       	std	Z+6, r1	; 0x06
    29e2:	83 81       	ldd	r24, Z+3	; 0x03
    29e4:	81 ff       	sbrs	r24, 1
    29e6:	dd c1       	rjmp	.+954    	; 0x2da2 <vfprintf+0x3fe>
    29e8:	ce 01       	movw	r24, r28
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	5c 01       	movw	r10, r24
    29ee:	f7 01       	movw	r30, r14
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	f3 01       	movw	r30, r6
    29f4:	93 fd       	sbrc	r25, 3
    29f6:	85 91       	lpm	r24, Z+
    29f8:	93 ff       	sbrs	r25, 3
    29fa:	81 91       	ld	r24, Z+
    29fc:	3f 01       	movw	r6, r30
    29fe:	88 23       	and	r24, r24
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <vfprintf+0x60>
    2a02:	53 c1       	rjmp	.+678    	; 0x2caa <vfprintf+0x306>
    2a04:	85 32       	cpi	r24, 0x25	; 37
    2a06:	39 f4       	brne	.+14     	; 0x2a16 <vfprintf+0x72>
    2a08:	93 fd       	sbrc	r25, 3
    2a0a:	85 91       	lpm	r24, Z+
    2a0c:	93 ff       	sbrs	r25, 3
    2a0e:	81 91       	ld	r24, Z+
    2a10:	3f 01       	movw	r6, r30
    2a12:	85 32       	cpi	r24, 0x25	; 37
    2a14:	29 f4       	brne	.+10     	; 0x2a20 <vfprintf+0x7c>
    2a16:	b7 01       	movw	r22, r14
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2a1e:	e7 cf       	rjmp	.-50     	; 0x29ee <vfprintf+0x4a>
    2a20:	91 2c       	mov	r9, r1
    2a22:	21 2c       	mov	r2, r1
    2a24:	31 2c       	mov	r3, r1
    2a26:	ff e1       	ldi	r31, 0x1F	; 31
    2a28:	f3 15       	cp	r31, r3
    2a2a:	38 f0       	brcs	.+14     	; 0x2a3a <vfprintf+0x96>
    2a2c:	8b 32       	cpi	r24, 0x2B	; 43
    2a2e:	11 f1       	breq	.+68     	; 0x2a74 <vfprintf+0xd0>
    2a30:	90 f4       	brcc	.+36     	; 0x2a56 <vfprintf+0xb2>
    2a32:	80 32       	cpi	r24, 0x20	; 32
    2a34:	09 f1       	breq	.+66     	; 0x2a78 <vfprintf+0xd4>
    2a36:	83 32       	cpi	r24, 0x23	; 35
    2a38:	29 f1       	breq	.+74     	; 0x2a84 <vfprintf+0xe0>
    2a3a:	37 fc       	sbrc	r3, 7
    2a3c:	3c c0       	rjmp	.+120    	; 0x2ab6 <vfprintf+0x112>
    2a3e:	20 ed       	ldi	r18, 0xD0	; 208
    2a40:	28 0f       	add	r18, r24
    2a42:	2a 30       	cpi	r18, 0x0A	; 10
    2a44:	50 f5       	brcc	.+84     	; 0x2a9a <vfprintf+0xf6>
    2a46:	36 fe       	sbrs	r3, 6
    2a48:	20 c0       	rjmp	.+64     	; 0x2a8a <vfprintf+0xe6>
    2a4a:	8a e0       	ldi	r24, 0x0A	; 10
    2a4c:	98 9e       	mul	r9, r24
    2a4e:	20 0d       	add	r18, r0
    2a50:	11 24       	eor	r1, r1
    2a52:	92 2e       	mov	r9, r18
    2a54:	06 c0       	rjmp	.+12     	; 0x2a62 <vfprintf+0xbe>
    2a56:	8d 32       	cpi	r24, 0x2D	; 45
    2a58:	91 f0       	breq	.+36     	; 0x2a7e <vfprintf+0xda>
    2a5a:	80 33       	cpi	r24, 0x30	; 48
    2a5c:	71 f7       	brne	.-36     	; 0x2a3a <vfprintf+0x96>
    2a5e:	68 94       	set
    2a60:	30 f8       	bld	r3, 0
    2a62:	f3 01       	movw	r30, r6
    2a64:	93 fd       	sbrc	r25, 3
    2a66:	85 91       	lpm	r24, Z+
    2a68:	93 ff       	sbrs	r25, 3
    2a6a:	81 91       	ld	r24, Z+
    2a6c:	3f 01       	movw	r6, r30
    2a6e:	81 11       	cpse	r24, r1
    2a70:	da cf       	rjmp	.-76     	; 0x2a26 <vfprintf+0x82>
    2a72:	21 c0       	rjmp	.+66     	; 0x2ab6 <vfprintf+0x112>
    2a74:	68 94       	set
    2a76:	31 f8       	bld	r3, 1
    2a78:	68 94       	set
    2a7a:	32 f8       	bld	r3, 2
    2a7c:	f2 cf       	rjmp	.-28     	; 0x2a62 <vfprintf+0xbe>
    2a7e:	68 94       	set
    2a80:	33 f8       	bld	r3, 3
    2a82:	ef cf       	rjmp	.-34     	; 0x2a62 <vfprintf+0xbe>
    2a84:	68 94       	set
    2a86:	34 f8       	bld	r3, 4
    2a88:	ec cf       	rjmp	.-40     	; 0x2a62 <vfprintf+0xbe>
    2a8a:	ea e0       	ldi	r30, 0x0A	; 10
    2a8c:	2e 9e       	mul	r2, r30
    2a8e:	20 0d       	add	r18, r0
    2a90:	11 24       	eor	r1, r1
    2a92:	22 2e       	mov	r2, r18
    2a94:	68 94       	set
    2a96:	35 f8       	bld	r3, 5
    2a98:	e4 cf       	rjmp	.-56     	; 0x2a62 <vfprintf+0xbe>
    2a9a:	8e 32       	cpi	r24, 0x2E	; 46
    2a9c:	29 f4       	brne	.+10     	; 0x2aa8 <vfprintf+0x104>
    2a9e:	36 fc       	sbrc	r3, 6
    2aa0:	04 c1       	rjmp	.+520    	; 0x2caa <vfprintf+0x306>
    2aa2:	68 94       	set
    2aa4:	36 f8       	bld	r3, 6
    2aa6:	dd cf       	rjmp	.-70     	; 0x2a62 <vfprintf+0xbe>
    2aa8:	8c 36       	cpi	r24, 0x6C	; 108
    2aaa:	19 f4       	brne	.+6      	; 0x2ab2 <vfprintf+0x10e>
    2aac:	68 94       	set
    2aae:	37 f8       	bld	r3, 7
    2ab0:	d8 cf       	rjmp	.-80     	; 0x2a62 <vfprintf+0xbe>
    2ab2:	88 36       	cpi	r24, 0x68	; 104
    2ab4:	b1 f2       	breq	.-84     	; 0x2a62 <vfprintf+0xbe>
    2ab6:	98 2f       	mov	r25, r24
    2ab8:	9f 7d       	andi	r25, 0xDF	; 223
    2aba:	95 54       	subi	r25, 0x45	; 69
    2abc:	93 30       	cpi	r25, 0x03	; 3
    2abe:	e0 f0       	brcs	.+56     	; 0x2af8 <vfprintf+0x154>
    2ac0:	83 36       	cpi	r24, 0x63	; 99
    2ac2:	a1 f1       	breq	.+104    	; 0x2b2c <vfprintf+0x188>
    2ac4:	83 37       	cpi	r24, 0x73	; 115
    2ac6:	c1 f1       	breq	.+112    	; 0x2b38 <vfprintf+0x194>
    2ac8:	83 35       	cpi	r24, 0x53	; 83
    2aca:	09 f0       	breq	.+2      	; 0x2ace <vfprintf+0x12a>
    2acc:	63 c0       	rjmp	.+198    	; 0x2b94 <vfprintf+0x1f0>
    2ace:	28 01       	movw	r4, r16
    2ad0:	f2 e0       	ldi	r31, 0x02	; 2
    2ad2:	4f 0e       	add	r4, r31
    2ad4:	51 1c       	adc	r5, r1
    2ad6:	f8 01       	movw	r30, r16
    2ad8:	c0 80       	ld	r12, Z
    2ada:	d1 80       	ldd	r13, Z+1	; 0x01
    2adc:	69 2d       	mov	r22, r9
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	36 fc       	sbrc	r3, 6
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <vfprintf+0x144>
    2ae4:	6f ef       	ldi	r22, 0xFF	; 255
    2ae6:	7f ef       	ldi	r23, 0xFF	; 255
    2ae8:	c6 01       	movw	r24, r12
    2aea:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <strnlen_P>
    2aee:	4c 01       	movw	r8, r24
    2af0:	68 94       	set
    2af2:	37 f8       	bld	r3, 7
    2af4:	82 01       	movw	r16, r4
    2af6:	0a c0       	rjmp	.+20     	; 0x2b0c <vfprintf+0x168>
    2af8:	0c 5f       	subi	r16, 0xFC	; 252
    2afa:	1f 4f       	sbci	r17, 0xFF	; 255
    2afc:	ff e3       	ldi	r31, 0x3F	; 63
    2afe:	f9 83       	std	Y+1, r31	; 0x01
    2b00:	88 24       	eor	r8, r8
    2b02:	83 94       	inc	r8
    2b04:	91 2c       	mov	r9, r1
    2b06:	65 01       	movw	r12, r10
    2b08:	e8 94       	clt
    2b0a:	37 f8       	bld	r3, 7
    2b0c:	33 fe       	sbrs	r3, 3
    2b0e:	2d c0       	rjmp	.+90     	; 0x2b6a <vfprintf+0x1c6>
    2b10:	52 2c       	mov	r5, r2
    2b12:	81 14       	cp	r8, r1
    2b14:	91 04       	cpc	r9, r1
    2b16:	71 f5       	brne	.+92     	; 0x2b74 <vfprintf+0x1d0>
    2b18:	55 20       	and	r5, r5
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <vfprintf+0x17a>
    2b1c:	68 cf       	rjmp	.-304    	; 0x29ee <vfprintf+0x4a>
    2b1e:	b7 01       	movw	r22, r14
    2b20:	80 e2       	ldi	r24, 0x20	; 32
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2b28:	5a 94       	dec	r5
    2b2a:	f6 cf       	rjmp	.-20     	; 0x2b18 <vfprintf+0x174>
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	80 81       	ld	r24, Z
    2b30:	89 83       	std	Y+1, r24	; 0x01
    2b32:	0e 5f       	subi	r16, 0xFE	; 254
    2b34:	1f 4f       	sbci	r17, 0xFF	; 255
    2b36:	e4 cf       	rjmp	.-56     	; 0x2b00 <vfprintf+0x15c>
    2b38:	28 01       	movw	r4, r16
    2b3a:	f2 e0       	ldi	r31, 0x02	; 2
    2b3c:	4f 0e       	add	r4, r31
    2b3e:	51 1c       	adc	r5, r1
    2b40:	f8 01       	movw	r30, r16
    2b42:	c0 80       	ld	r12, Z
    2b44:	d1 80       	ldd	r13, Z+1	; 0x01
    2b46:	69 2d       	mov	r22, r9
    2b48:	70 e0       	ldi	r23, 0x00	; 0
    2b4a:	36 fc       	sbrc	r3, 6
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <vfprintf+0x1ae>
    2b4e:	6f ef       	ldi	r22, 0xFF	; 255
    2b50:	7f ef       	ldi	r23, 0xFF	; 255
    2b52:	c6 01       	movw	r24, r12
    2b54:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <strnlen>
    2b58:	4c 01       	movw	r8, r24
    2b5a:	82 01       	movw	r16, r4
    2b5c:	d5 cf       	rjmp	.-86     	; 0x2b08 <vfprintf+0x164>
    2b5e:	b7 01       	movw	r22, r14
    2b60:	80 e2       	ldi	r24, 0x20	; 32
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2b68:	2a 94       	dec	r2
    2b6a:	28 14       	cp	r2, r8
    2b6c:	19 04       	cpc	r1, r9
    2b6e:	09 f0       	breq	.+2      	; 0x2b72 <vfprintf+0x1ce>
    2b70:	b0 f7       	brcc	.-20     	; 0x2b5e <vfprintf+0x1ba>
    2b72:	ce cf       	rjmp	.-100    	; 0x2b10 <vfprintf+0x16c>
    2b74:	f6 01       	movw	r30, r12
    2b76:	37 fc       	sbrc	r3, 7
    2b78:	85 91       	lpm	r24, Z+
    2b7a:	37 fe       	sbrs	r3, 7
    2b7c:	81 91       	ld	r24, Z+
    2b7e:	6f 01       	movw	r12, r30
    2b80:	b7 01       	movw	r22, r14
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2b88:	51 10       	cpse	r5, r1
    2b8a:	5a 94       	dec	r5
    2b8c:	f1 e0       	ldi	r31, 0x01	; 1
    2b8e:	8f 1a       	sub	r8, r31
    2b90:	91 08       	sbc	r9, r1
    2b92:	bf cf       	rjmp	.-130    	; 0x2b12 <vfprintf+0x16e>
    2b94:	84 36       	cpi	r24, 0x64	; 100
    2b96:	19 f0       	breq	.+6      	; 0x2b9e <vfprintf+0x1fa>
    2b98:	89 36       	cpi	r24, 0x69	; 105
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <vfprintf+0x1fa>
    2b9c:	77 c0       	rjmp	.+238    	; 0x2c8c <vfprintf+0x2e8>
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	37 fe       	sbrs	r3, 7
    2ba2:	6b c0       	rjmp	.+214    	; 0x2c7a <vfprintf+0x2d6>
    2ba4:	60 81       	ld	r22, Z
    2ba6:	71 81       	ldd	r23, Z+1	; 0x01
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	0c 5f       	subi	r16, 0xFC	; 252
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	f3 2d       	mov	r31, r3
    2bb2:	ff 76       	andi	r31, 0x6F	; 111
    2bb4:	3f 2e       	mov	r3, r31
    2bb6:	97 ff       	sbrs	r25, 7
    2bb8:	09 c0       	rjmp	.+18     	; 0x2bcc <vfprintf+0x228>
    2bba:	90 95       	com	r25
    2bbc:	80 95       	com	r24
    2bbe:	70 95       	com	r23
    2bc0:	61 95       	neg	r22
    2bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc8:	68 94       	set
    2bca:	37 f8       	bld	r3, 7
    2bcc:	2a e0       	ldi	r18, 0x0A	; 10
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	a5 01       	movw	r20, r10
    2bd2:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__ultoa_invert>
    2bd6:	c8 2e       	mov	r12, r24
    2bd8:	ca 18       	sub	r12, r10
    2bda:	8c 2c       	mov	r8, r12
    2bdc:	43 2c       	mov	r4, r3
    2bde:	36 fe       	sbrs	r3, 6
    2be0:	0c c0       	rjmp	.+24     	; 0x2bfa <vfprintf+0x256>
    2be2:	e8 94       	clt
    2be4:	40 f8       	bld	r4, 0
    2be6:	c9 14       	cp	r12, r9
    2be8:	40 f4       	brcc	.+16     	; 0x2bfa <vfprintf+0x256>
    2bea:	34 fe       	sbrs	r3, 4
    2bec:	05 c0       	rjmp	.+10     	; 0x2bf8 <vfprintf+0x254>
    2bee:	32 fc       	sbrc	r3, 2
    2bf0:	03 c0       	rjmp	.+6      	; 0x2bf8 <vfprintf+0x254>
    2bf2:	f3 2d       	mov	r31, r3
    2bf4:	fe 7e       	andi	r31, 0xEE	; 238
    2bf6:	4f 2e       	mov	r4, r31
    2bf8:	89 2c       	mov	r8, r9
    2bfa:	44 fe       	sbrs	r4, 4
    2bfc:	aa c0       	rjmp	.+340    	; 0x2d52 <vfprintf+0x3ae>
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ec 0d       	add	r30, r12
    2c02:	f1 1d       	adc	r31, r1
    2c04:	80 81       	ld	r24, Z
    2c06:	80 33       	cpi	r24, 0x30	; 48
    2c08:	09 f0       	breq	.+2      	; 0x2c0c <vfprintf+0x268>
    2c0a:	9c c0       	rjmp	.+312    	; 0x2d44 <vfprintf+0x3a0>
    2c0c:	24 2d       	mov	r18, r4
    2c0e:	29 7e       	andi	r18, 0xE9	; 233
    2c10:	42 2e       	mov	r4, r18
    2c12:	84 2d       	mov	r24, r4
    2c14:	88 70       	andi	r24, 0x08	; 8
    2c16:	58 2e       	mov	r5, r24
    2c18:	43 fc       	sbrc	r4, 3
    2c1a:	aa c0       	rjmp	.+340    	; 0x2d70 <vfprintf+0x3cc>
    2c1c:	40 fe       	sbrs	r4, 0
    2c1e:	a4 c0       	rjmp	.+328    	; 0x2d68 <vfprintf+0x3c4>
    2c20:	9c 2c       	mov	r9, r12
    2c22:	82 14       	cp	r8, r2
    2c24:	18 f4       	brcc	.+6      	; 0x2c2c <vfprintf+0x288>
    2c26:	2c 0c       	add	r2, r12
    2c28:	92 2c       	mov	r9, r2
    2c2a:	98 18       	sub	r9, r8
    2c2c:	44 fe       	sbrs	r4, 4
    2c2e:	a6 c0       	rjmp	.+332    	; 0x2d7c <vfprintf+0x3d8>
    2c30:	b7 01       	movw	r22, r14
    2c32:	80 e3       	ldi	r24, 0x30	; 48
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2c3a:	42 fe       	sbrs	r4, 2
    2c3c:	09 c0       	rjmp	.+18     	; 0x2c50 <vfprintf+0x2ac>
    2c3e:	88 e7       	ldi	r24, 0x78	; 120
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	41 fe       	sbrs	r4, 1
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <vfprintf+0x2a6>
    2c46:	88 e5       	ldi	r24, 0x58	; 88
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	b7 01       	movw	r22, r14
    2c4c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2c50:	c9 14       	cp	r12, r9
    2c52:	08 f4       	brcc	.+2      	; 0x2c56 <vfprintf+0x2b2>
    2c54:	9f c0       	rjmp	.+318    	; 0x2d94 <vfprintf+0x3f0>
    2c56:	ca 94       	dec	r12
    2c58:	d1 2c       	mov	r13, r1
    2c5a:	9f ef       	ldi	r25, 0xFF	; 255
    2c5c:	c9 1a       	sub	r12, r25
    2c5e:	d9 0a       	sbc	r13, r25
    2c60:	ca 0c       	add	r12, r10
    2c62:	db 1c       	adc	r13, r11
    2c64:	f6 01       	movw	r30, r12
    2c66:	82 91       	ld	r24, -Z
    2c68:	6f 01       	movw	r12, r30
    2c6a:	b7 01       	movw	r22, r14
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2c72:	ac 14       	cp	r10, r12
    2c74:	bd 04       	cpc	r11, r13
    2c76:	b1 f7       	brne	.-20     	; 0x2c64 <vfprintf+0x2c0>
    2c78:	4f cf       	rjmp	.-354    	; 0x2b18 <vfprintf+0x174>
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	07 2e       	mov	r0, r23
    2c80:	00 0c       	add	r0, r0
    2c82:	88 0b       	sbc	r24, r24
    2c84:	99 0b       	sbc	r25, r25
    2c86:	0e 5f       	subi	r16, 0xFE	; 254
    2c88:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8a:	92 cf       	rjmp	.-220    	; 0x2bb0 <vfprintf+0x20c>
    2c8c:	d3 2c       	mov	r13, r3
    2c8e:	e8 94       	clt
    2c90:	d4 f8       	bld	r13, 4
    2c92:	2a e0       	ldi	r18, 0x0A	; 10
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	85 37       	cpi	r24, 0x75	; 117
    2c98:	e1 f1       	breq	.+120    	; 0x2d12 <vfprintf+0x36e>
    2c9a:	23 2d       	mov	r18, r3
    2c9c:	29 7f       	andi	r18, 0xF9	; 249
    2c9e:	d2 2e       	mov	r13, r18
    2ca0:	8f 36       	cpi	r24, 0x6F	; 111
    2ca2:	a9 f1       	breq	.+106    	; 0x2d0e <vfprintf+0x36a>
    2ca4:	f0 f4       	brcc	.+60     	; 0x2ce2 <vfprintf+0x33e>
    2ca6:	88 35       	cpi	r24, 0x58	; 88
    2ca8:	51 f1       	breq	.+84     	; 0x2cfe <vfprintf+0x35a>
    2caa:	f7 01       	movw	r30, r14
    2cac:	86 81       	ldd	r24, Z+6	; 0x06
    2cae:	97 81       	ldd	r25, Z+7	; 0x07
    2cb0:	2b 96       	adiw	r28, 0x0b	; 11
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	ff 90       	pop	r15
    2cc6:	ef 90       	pop	r14
    2cc8:	df 90       	pop	r13
    2cca:	cf 90       	pop	r12
    2ccc:	bf 90       	pop	r11
    2cce:	af 90       	pop	r10
    2cd0:	9f 90       	pop	r9
    2cd2:	8f 90       	pop	r8
    2cd4:	7f 90       	pop	r7
    2cd6:	6f 90       	pop	r6
    2cd8:	5f 90       	pop	r5
    2cda:	4f 90       	pop	r4
    2cdc:	3f 90       	pop	r3
    2cde:	2f 90       	pop	r2
    2ce0:	08 95       	ret
    2ce2:	80 37       	cpi	r24, 0x70	; 112
    2ce4:	49 f0       	breq	.+18     	; 0x2cf8 <vfprintf+0x354>
    2ce6:	88 37       	cpi	r24, 0x78	; 120
    2ce8:	01 f7       	brne	.-64     	; 0x2caa <vfprintf+0x306>
    2cea:	d4 fe       	sbrs	r13, 4
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <vfprintf+0x34e>
    2cee:	68 94       	set
    2cf0:	d2 f8       	bld	r13, 2
    2cf2:	20 e1       	ldi	r18, 0x10	; 16
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	0d c0       	rjmp	.+26     	; 0x2d12 <vfprintf+0x36e>
    2cf8:	68 94       	set
    2cfa:	d4 f8       	bld	r13, 4
    2cfc:	f6 cf       	rjmp	.-20     	; 0x2cea <vfprintf+0x346>
    2cfe:	34 fe       	sbrs	r3, 4
    2d00:	03 c0       	rjmp	.+6      	; 0x2d08 <vfprintf+0x364>
    2d02:	82 2f       	mov	r24, r18
    2d04:	86 60       	ori	r24, 0x06	; 6
    2d06:	d8 2e       	mov	r13, r24
    2d08:	20 e1       	ldi	r18, 0x10	; 16
    2d0a:	32 e0       	ldi	r19, 0x02	; 2
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <vfprintf+0x36e>
    2d0e:	28 e0       	ldi	r18, 0x08	; 8
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	f8 01       	movw	r30, r16
    2d14:	d7 fe       	sbrs	r13, 7
    2d16:	0f c0       	rjmp	.+30     	; 0x2d36 <vfprintf+0x392>
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	82 81       	ldd	r24, Z+2	; 0x02
    2d1e:	93 81       	ldd	r25, Z+3	; 0x03
    2d20:	0c 5f       	subi	r16, 0xFC	; 252
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	a5 01       	movw	r20, r10
    2d26:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__ultoa_invert>
    2d2a:	c8 2e       	mov	r12, r24
    2d2c:	ca 18       	sub	r12, r10
    2d2e:	3d 2c       	mov	r3, r13
    2d30:	e8 94       	clt
    2d32:	37 f8       	bld	r3, 7
    2d34:	52 cf       	rjmp	.-348    	; 0x2bda <vfprintf+0x236>
    2d36:	60 81       	ld	r22, Z
    2d38:	71 81       	ldd	r23, Z+1	; 0x01
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	0e 5f       	subi	r16, 0xFE	; 254
    2d40:	1f 4f       	sbci	r17, 0xFF	; 255
    2d42:	f0 cf       	rjmp	.-32     	; 0x2d24 <vfprintf+0x380>
    2d44:	42 fc       	sbrc	r4, 2
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <vfprintf+0x3a8>
    2d48:	83 94       	inc	r8
    2d4a:	63 cf       	rjmp	.-314    	; 0x2c12 <vfprintf+0x26e>
    2d4c:	83 94       	inc	r8
    2d4e:	83 94       	inc	r8
    2d50:	60 cf       	rjmp	.-320    	; 0x2c12 <vfprintf+0x26e>
    2d52:	84 2d       	mov	r24, r4
    2d54:	86 78       	andi	r24, 0x86	; 134
    2d56:	09 f4       	brne	.+2      	; 0x2d5a <vfprintf+0x3b6>
    2d58:	5c cf       	rjmp	.-328    	; 0x2c12 <vfprintf+0x26e>
    2d5a:	f6 cf       	rjmp	.-20     	; 0x2d48 <vfprintf+0x3a4>
    2d5c:	b7 01       	movw	r22, r14
    2d5e:	80 e2       	ldi	r24, 0x20	; 32
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2d66:	83 94       	inc	r8
    2d68:	82 14       	cp	r8, r2
    2d6a:	c0 f3       	brcs	.-16     	; 0x2d5c <vfprintf+0x3b8>
    2d6c:	51 2c       	mov	r5, r1
    2d6e:	5e cf       	rjmp	.-324    	; 0x2c2c <vfprintf+0x288>
    2d70:	52 2c       	mov	r5, r2
    2d72:	58 18       	sub	r5, r8
    2d74:	82 14       	cp	r8, r2
    2d76:	08 f4       	brcc	.+2      	; 0x2d7a <vfprintf+0x3d6>
    2d78:	59 cf       	rjmp	.-334    	; 0x2c2c <vfprintf+0x288>
    2d7a:	f8 cf       	rjmp	.-16     	; 0x2d6c <vfprintf+0x3c8>
    2d7c:	84 2d       	mov	r24, r4
    2d7e:	86 78       	andi	r24, 0x86	; 134
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <vfprintf+0x3e0>
    2d82:	66 cf       	rjmp	.-308    	; 0x2c50 <vfprintf+0x2ac>
    2d84:	8b e2       	ldi	r24, 0x2B	; 43
    2d86:	41 fe       	sbrs	r4, 1
    2d88:	80 e2       	ldi	r24, 0x20	; 32
    2d8a:	47 fc       	sbrc	r4, 7
    2d8c:	8d e2       	ldi	r24, 0x2D	; 45
    2d8e:	b7 01       	movw	r22, r14
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	5c cf       	rjmp	.-328    	; 0x2c4c <vfprintf+0x2a8>
    2d94:	b7 01       	movw	r22, r14
    2d96:	80 e3       	ldi	r24, 0x30	; 48
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2d9e:	9a 94       	dec	r9
    2da0:	57 cf       	rjmp	.-338    	; 0x2c50 <vfprintf+0x2ac>
    2da2:	8f ef       	ldi	r24, 0xFF	; 255
    2da4:	9f ef       	ldi	r25, 0xFF	; 255
    2da6:	84 cf       	rjmp	.-248    	; 0x2cb0 <vfprintf+0x30c>

00002da8 <strnlen_P>:
strnlen_P():
    2da8:	fc 01       	movw	r30, r24
    2daa:	05 90       	lpm	r0, Z+
    2dac:	61 50       	subi	r22, 0x01	; 1
    2dae:	70 40       	sbci	r23, 0x00	; 0
    2db0:	01 10       	cpse	r0, r1
    2db2:	d8 f7       	brcc	.-10     	; 0x2daa <strnlen_P+0x2>
    2db4:	80 95       	com	r24
    2db6:	90 95       	com	r25
    2db8:	8e 0f       	add	r24, r30
    2dba:	9f 1f       	adc	r25, r31
    2dbc:	08 95       	ret

00002dbe <strnlen>:
strnlen():
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	61 50       	subi	r22, 0x01	; 1
    2dc2:	70 40       	sbci	r23, 0x00	; 0
    2dc4:	01 90       	ld	r0, Z+
    2dc6:	01 10       	cpse	r0, r1
    2dc8:	d8 f7       	brcc	.-10     	; 0x2dc0 <strnlen+0x2>
    2dca:	80 95       	com	r24
    2dcc:	90 95       	com	r25
    2dce:	8e 0f       	add	r24, r30
    2dd0:	9f 1f       	adc	r25, r31
    2dd2:	08 95       	ret

00002dd4 <fputc>:
fputc():
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	18 2f       	mov	r17, r24
    2dde:	09 2f       	mov	r16, r25
    2de0:	eb 01       	movw	r28, r22
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	81 fd       	sbrc	r24, 1
    2de6:	09 c0       	rjmp	.+18     	; 0x2dfa <fputc+0x26>
    2de8:	1f ef       	ldi	r17, 0xFF	; 255
    2dea:	0f ef       	ldi	r16, 0xFF	; 255
    2dec:	81 2f       	mov	r24, r17
    2dee:	90 2f       	mov	r25, r16
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	1f 91       	pop	r17
    2df6:	0f 91       	pop	r16
    2df8:	08 95       	ret
    2dfa:	82 ff       	sbrs	r24, 2
    2dfc:	14 c0       	rjmp	.+40     	; 0x2e26 <fputc+0x52>
    2dfe:	2e 81       	ldd	r18, Y+6	; 0x06
    2e00:	3f 81       	ldd	r19, Y+7	; 0x07
    2e02:	8c 81       	ldd	r24, Y+4	; 0x04
    2e04:	9d 81       	ldd	r25, Y+5	; 0x05
    2e06:	28 17       	cp	r18, r24
    2e08:	39 07       	cpc	r19, r25
    2e0a:	3c f4       	brge	.+14     	; 0x2e1a <fputc+0x46>
    2e0c:	e8 81       	ld	r30, Y
    2e0e:	f9 81       	ldd	r31, Y+1	; 0x01
    2e10:	cf 01       	movw	r24, r30
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	99 83       	std	Y+1, r25	; 0x01
    2e16:	88 83       	st	Y, r24
    2e18:	10 83       	st	Z, r17
    2e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	9f 83       	std	Y+7, r25	; 0x07
    2e22:	8e 83       	std	Y+6, r24	; 0x06
    2e24:	e3 cf       	rjmp	.-58     	; 0x2dec <fputc+0x18>
    2e26:	e8 85       	ldd	r30, Y+8	; 0x08
    2e28:	f9 85       	ldd	r31, Y+9	; 0x09
    2e2a:	81 2f       	mov	r24, r17
    2e2c:	19 95       	eicall
    2e2e:	89 2b       	or	r24, r25
    2e30:	a1 f3       	breq	.-24     	; 0x2e1a <fputc+0x46>
    2e32:	da cf       	rjmp	.-76     	; 0x2de8 <fputc+0x14>

00002e34 <__ultoa_invert>:
__ultoa_invert():
    2e34:	fa 01       	movw	r30, r20
    2e36:	aa 27       	eor	r26, r26
    2e38:	28 30       	cpi	r18, 0x08	; 8
    2e3a:	51 f1       	breq	.+84     	; 0x2e90 <__ultoa_invert+0x5c>
    2e3c:	20 31       	cpi	r18, 0x10	; 16
    2e3e:	81 f1       	breq	.+96     	; 0x2ea0 <__ultoa_invert+0x6c>
    2e40:	e8 94       	clt
    2e42:	6f 93       	push	r22
    2e44:	6e 7f       	andi	r22, 0xFE	; 254
    2e46:	6e 5f       	subi	r22, 0xFE	; 254
    2e48:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4e:	af 4f       	sbci	r26, 0xFF	; 255
    2e50:	b1 e0       	ldi	r27, 0x01	; 1
    2e52:	3e d0       	rcall	.+124    	; 0x2ed0 <__ultoa_invert+0x9c>
    2e54:	b4 e0       	ldi	r27, 0x04	; 4
    2e56:	3c d0       	rcall	.+120    	; 0x2ed0 <__ultoa_invert+0x9c>
    2e58:	67 0f       	add	r22, r23
    2e5a:	78 1f       	adc	r23, r24
    2e5c:	89 1f       	adc	r24, r25
    2e5e:	9a 1f       	adc	r25, r26
    2e60:	a1 1d       	adc	r26, r1
    2e62:	68 0f       	add	r22, r24
    2e64:	79 1f       	adc	r23, r25
    2e66:	8a 1f       	adc	r24, r26
    2e68:	91 1d       	adc	r25, r1
    2e6a:	a1 1d       	adc	r26, r1
    2e6c:	6a 0f       	add	r22, r26
    2e6e:	71 1d       	adc	r23, r1
    2e70:	81 1d       	adc	r24, r1
    2e72:	91 1d       	adc	r25, r1
    2e74:	a1 1d       	adc	r26, r1
    2e76:	20 d0       	rcall	.+64     	; 0x2eb8 <__ultoa_invert+0x84>
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <__ultoa_invert+0x48>
    2e7a:	68 94       	set
    2e7c:	3f 91       	pop	r19
    2e7e:	2a e0       	ldi	r18, 0x0A	; 10
    2e80:	26 9f       	mul	r18, r22
    2e82:	11 24       	eor	r1, r1
    2e84:	30 19       	sub	r19, r0
    2e86:	30 5d       	subi	r19, 0xD0	; 208
    2e88:	31 93       	st	Z+, r19
    2e8a:	de f6       	brtc	.-74     	; 0x2e42 <__ultoa_invert+0xe>
    2e8c:	cf 01       	movw	r24, r30
    2e8e:	08 95       	ret
    2e90:	46 2f       	mov	r20, r22
    2e92:	47 70       	andi	r20, 0x07	; 7
    2e94:	40 5d       	subi	r20, 0xD0	; 208
    2e96:	41 93       	st	Z+, r20
    2e98:	b3 e0       	ldi	r27, 0x03	; 3
    2e9a:	0f d0       	rcall	.+30     	; 0x2eba <__ultoa_invert+0x86>
    2e9c:	c9 f7       	brne	.-14     	; 0x2e90 <__ultoa_invert+0x5c>
    2e9e:	f6 cf       	rjmp	.-20     	; 0x2e8c <__ultoa_invert+0x58>
    2ea0:	46 2f       	mov	r20, r22
    2ea2:	4f 70       	andi	r20, 0x0F	; 15
    2ea4:	40 5d       	subi	r20, 0xD0	; 208
    2ea6:	4a 33       	cpi	r20, 0x3A	; 58
    2ea8:	18 f0       	brcs	.+6      	; 0x2eb0 <__ultoa_invert+0x7c>
    2eaa:	49 5d       	subi	r20, 0xD9	; 217
    2eac:	31 fd       	sbrc	r19, 1
    2eae:	40 52       	subi	r20, 0x20	; 32
    2eb0:	41 93       	st	Z+, r20
    2eb2:	02 d0       	rcall	.+4      	; 0x2eb8 <__ultoa_invert+0x84>
    2eb4:	a9 f7       	brne	.-22     	; 0x2ea0 <__ultoa_invert+0x6c>
    2eb6:	ea cf       	rjmp	.-44     	; 0x2e8c <__ultoa_invert+0x58>
    2eb8:	b4 e0       	ldi	r27, 0x04	; 4
    2eba:	a6 95       	lsr	r26
    2ebc:	97 95       	ror	r25
    2ebe:	87 95       	ror	r24
    2ec0:	77 95       	ror	r23
    2ec2:	67 95       	ror	r22
    2ec4:	ba 95       	dec	r27
    2ec6:	c9 f7       	brne	.-14     	; 0x2eba <__ultoa_invert+0x86>
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	61 05       	cpc	r22, r1
    2ecc:	71 05       	cpc	r23, r1
    2ece:	08 95       	ret
    2ed0:	9b 01       	movw	r18, r22
    2ed2:	ac 01       	movw	r20, r24
    2ed4:	0a 2e       	mov	r0, r26
    2ed6:	06 94       	lsr	r0
    2ed8:	57 95       	ror	r21
    2eda:	47 95       	ror	r20
    2edc:	37 95       	ror	r19
    2ede:	27 95       	ror	r18
    2ee0:	ba 95       	dec	r27
    2ee2:	c9 f7       	brne	.-14     	; 0x2ed6 <__ultoa_invert+0xa2>
    2ee4:	62 0f       	add	r22, r18
    2ee6:	73 1f       	adc	r23, r19
    2ee8:	84 1f       	adc	r24, r20
    2eea:	95 1f       	adc	r25, r21
    2eec:	a0 1d       	adc	r26, r0
    2eee:	08 95       	ret

00002ef0 <eeprom_read_byte>:
eeprom_read_byte():
    2ef0:	f9 99       	sbic	0x1f, 1	; 31
    2ef2:	fe cf       	rjmp	.-4      	; 0x2ef0 <eeprom_read_byte>
    2ef4:	92 bd       	out	0x22, r25	; 34
    2ef6:	81 bd       	out	0x21, r24	; 33
    2ef8:	f8 9a       	sbi	0x1f, 0	; 31
    2efa:	99 27       	eor	r25, r25
    2efc:	80 b5       	in	r24, 0x20	; 32
    2efe:	08 95       	ret

00002f00 <eeprom_write_byte>:
eeprom_write_byte():
    2f00:	26 2f       	mov	r18, r22

00002f02 <eeprom_write_r18>:
    2f02:	f9 99       	sbic	0x1f, 1	; 31
    2f04:	fe cf       	rjmp	.-4      	; 0x2f02 <eeprom_write_r18>
    2f06:	1f ba       	out	0x1f, r1	; 31
    2f08:	92 bd       	out	0x22, r25	; 34
    2f0a:	81 bd       	out	0x21, r24	; 33
    2f0c:	20 bd       	out	0x20, r18	; 32
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	fa 9a       	sbi	0x1f, 2	; 31
    2f14:	f9 9a       	sbi	0x1f, 1	; 31
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	08 95       	ret

00002f1c <__floatunsisf>:
__floatunsisf():
    2f1c:	e8 94       	clt
    2f1e:	09 c0       	rjmp	.+18     	; 0x2f32 <__floatsisf+0x12>

00002f20 <__floatsisf>:
    2f20:	97 fb       	bst	r25, 7
    2f22:	3e f4       	brtc	.+14     	; 0x2f32 <__floatsisf+0x12>
    2f24:	90 95       	com	r25
    2f26:	80 95       	com	r24
    2f28:	70 95       	com	r23
    2f2a:	61 95       	neg	r22
    2f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f30:	9f 4f       	sbci	r25, 0xFF	; 255
    2f32:	99 23       	and	r25, r25
    2f34:	a9 f0       	breq	.+42     	; 0x2f60 <__floatsisf+0x40>
    2f36:	f9 2f       	mov	r31, r25
    2f38:	96 e9       	ldi	r25, 0x96	; 150
    2f3a:	bb 27       	eor	r27, r27
    2f3c:	93 95       	inc	r25
    2f3e:	f6 95       	lsr	r31
    2f40:	87 95       	ror	r24
    2f42:	77 95       	ror	r23
    2f44:	67 95       	ror	r22
    2f46:	b7 95       	ror	r27
    2f48:	f1 11       	cpse	r31, r1
    2f4a:	f8 cf       	rjmp	.-16     	; 0x2f3c <__floatsisf+0x1c>
    2f4c:	fa f4       	brpl	.+62     	; 0x2f8c <__floatsisf+0x6c>
    2f4e:	bb 0f       	add	r27, r27
    2f50:	11 f4       	brne	.+4      	; 0x2f56 <__floatsisf+0x36>
    2f52:	60 ff       	sbrs	r22, 0
    2f54:	1b c0       	rjmp	.+54     	; 0x2f8c <__floatsisf+0x6c>
    2f56:	6f 5f       	subi	r22, 0xFF	; 255
    2f58:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5e:	16 c0       	rjmp	.+44     	; 0x2f8c <__floatsisf+0x6c>
    2f60:	88 23       	and	r24, r24
    2f62:	11 f0       	breq	.+4      	; 0x2f68 <__floatsisf+0x48>
    2f64:	96 e9       	ldi	r25, 0x96	; 150
    2f66:	11 c0       	rjmp	.+34     	; 0x2f8a <__floatsisf+0x6a>
    2f68:	77 23       	and	r23, r23
    2f6a:	21 f0       	breq	.+8      	; 0x2f74 <__floatsisf+0x54>
    2f6c:	9e e8       	ldi	r25, 0x8E	; 142
    2f6e:	87 2f       	mov	r24, r23
    2f70:	76 2f       	mov	r23, r22
    2f72:	05 c0       	rjmp	.+10     	; 0x2f7e <__floatsisf+0x5e>
    2f74:	66 23       	and	r22, r22
    2f76:	71 f0       	breq	.+28     	; 0x2f94 <__floatsisf+0x74>
    2f78:	96 e8       	ldi	r25, 0x86	; 134
    2f7a:	86 2f       	mov	r24, r22
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	2a f0       	brmi	.+10     	; 0x2f8c <__floatsisf+0x6c>
    2f82:	9a 95       	dec	r25
    2f84:	66 0f       	add	r22, r22
    2f86:	77 1f       	adc	r23, r23
    2f88:	88 1f       	adc	r24, r24
    2f8a:	da f7       	brpl	.-10     	; 0x2f82 <__floatsisf+0x62>
    2f8c:	88 0f       	add	r24, r24
    2f8e:	96 95       	lsr	r25
    2f90:	87 95       	ror	r24
    2f92:	97 f9       	bld	r25, 7
    2f94:	08 95       	ret

00002f96 <__gesf2>:
__gesf2():
    2f96:	0e 94 3d 18 	call	0x307a	; 0x307a <__fp_cmp>
    2f9a:	08 f4       	brcc	.+2      	; 0x2f9e <__gesf2+0x8>
    2f9c:	8f ef       	ldi	r24, 0xFF	; 255
    2f9e:	08 95       	ret

00002fa0 <__mulsf3>:
__mulsf3():
    2fa0:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__mulsf3x>
    2fa4:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__fp_round>
    2fa8:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__fp_pscA>
    2fac:	38 f0       	brcs	.+14     	; 0x2fbc <__mulsf3+0x1c>
    2fae:	0e 94 71 18 	call	0x30e2	; 0x30e2 <__fp_pscB>
    2fb2:	20 f0       	brcs	.+8      	; 0x2fbc <__mulsf3+0x1c>
    2fb4:	95 23       	and	r25, r21
    2fb6:	11 f0       	breq	.+4      	; 0x2fbc <__mulsf3+0x1c>
    2fb8:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__fp_inf>
    2fbc:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__fp_nan>
    2fc0:	11 24       	eor	r1, r1
    2fc2:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_szero>

00002fc6 <__mulsf3x>:
__mulsf3x():
    2fc6:	0e 94 89 18 	call	0x3112	; 0x3112 <__fp_split3>
    2fca:	70 f3       	brcs	.-36     	; 0x2fa8 <__mulsf3+0x8>

00002fcc <__mulsf3_pse>:
    2fcc:	95 9f       	mul	r25, r21
    2fce:	c1 f3       	breq	.-16     	; 0x2fc0 <__mulsf3+0x20>
    2fd0:	95 0f       	add	r25, r21
    2fd2:	50 e0       	ldi	r21, 0x00	; 0
    2fd4:	55 1f       	adc	r21, r21
    2fd6:	62 9f       	mul	r22, r18
    2fd8:	f0 01       	movw	r30, r0
    2fda:	72 9f       	mul	r23, r18
    2fdc:	bb 27       	eor	r27, r27
    2fde:	f0 0d       	add	r31, r0
    2fe0:	b1 1d       	adc	r27, r1
    2fe2:	63 9f       	mul	r22, r19
    2fe4:	aa 27       	eor	r26, r26
    2fe6:	f0 0d       	add	r31, r0
    2fe8:	b1 1d       	adc	r27, r1
    2fea:	aa 1f       	adc	r26, r26
    2fec:	64 9f       	mul	r22, r20
    2fee:	66 27       	eor	r22, r22
    2ff0:	b0 0d       	add	r27, r0
    2ff2:	a1 1d       	adc	r26, r1
    2ff4:	66 1f       	adc	r22, r22
    2ff6:	82 9f       	mul	r24, r18
    2ff8:	22 27       	eor	r18, r18
    2ffa:	b0 0d       	add	r27, r0
    2ffc:	a1 1d       	adc	r26, r1
    2ffe:	62 1f       	adc	r22, r18
    3000:	73 9f       	mul	r23, r19
    3002:	b0 0d       	add	r27, r0
    3004:	a1 1d       	adc	r26, r1
    3006:	62 1f       	adc	r22, r18
    3008:	83 9f       	mul	r24, r19
    300a:	a0 0d       	add	r26, r0
    300c:	61 1d       	adc	r22, r1
    300e:	22 1f       	adc	r18, r18
    3010:	74 9f       	mul	r23, r20
    3012:	33 27       	eor	r19, r19
    3014:	a0 0d       	add	r26, r0
    3016:	61 1d       	adc	r22, r1
    3018:	23 1f       	adc	r18, r19
    301a:	84 9f       	mul	r24, r20
    301c:	60 0d       	add	r22, r0
    301e:	21 1d       	adc	r18, r1
    3020:	82 2f       	mov	r24, r18
    3022:	76 2f       	mov	r23, r22
    3024:	6a 2f       	mov	r22, r26
    3026:	11 24       	eor	r1, r1
    3028:	9f 57       	subi	r25, 0x7F	; 127
    302a:	50 40       	sbci	r21, 0x00	; 0
    302c:	9a f0       	brmi	.+38     	; 0x3054 <__mulsf3_pse+0x88>
    302e:	f1 f0       	breq	.+60     	; 0x306c <__mulsf3_pse+0xa0>
    3030:	88 23       	and	r24, r24
    3032:	4a f0       	brmi	.+18     	; 0x3046 <__mulsf3_pse+0x7a>
    3034:	ee 0f       	add	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	bb 1f       	adc	r27, r27
    303a:	66 1f       	adc	r22, r22
    303c:	77 1f       	adc	r23, r23
    303e:	88 1f       	adc	r24, r24
    3040:	91 50       	subi	r25, 0x01	; 1
    3042:	50 40       	sbci	r21, 0x00	; 0
    3044:	a9 f7       	brne	.-22     	; 0x3030 <__mulsf3_pse+0x64>
    3046:	9e 3f       	cpi	r25, 0xFE	; 254
    3048:	51 05       	cpc	r21, r1
    304a:	80 f0       	brcs	.+32     	; 0x306c <__mulsf3_pse+0xa0>
    304c:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__fp_inf>
    3050:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_szero>
    3054:	5f 3f       	cpi	r21, 0xFF	; 255
    3056:	e4 f3       	brlt	.-8      	; 0x3050 <__mulsf3_pse+0x84>
    3058:	98 3e       	cpi	r25, 0xE8	; 232
    305a:	d4 f3       	brlt	.-12     	; 0x3050 <__mulsf3_pse+0x84>
    305c:	86 95       	lsr	r24
    305e:	77 95       	ror	r23
    3060:	67 95       	ror	r22
    3062:	b7 95       	ror	r27
    3064:	f7 95       	ror	r31
    3066:	e7 95       	ror	r30
    3068:	9f 5f       	subi	r25, 0xFF	; 255
    306a:	c1 f7       	brne	.-16     	; 0x305c <__mulsf3_pse+0x90>
    306c:	fe 2b       	or	r31, r30
    306e:	88 0f       	add	r24, r24
    3070:	91 1d       	adc	r25, r1
    3072:	96 95       	lsr	r25
    3074:	87 95       	ror	r24
    3076:	97 f9       	bld	r25, 7
    3078:	08 95       	ret

0000307a <__fp_cmp>:
    307a:	99 0f       	add	r25, r25
    307c:	00 08       	sbc	r0, r0
    307e:	55 0f       	add	r21, r21
    3080:	aa 0b       	sbc	r26, r26
    3082:	e0 e8       	ldi	r30, 0x80	; 128
    3084:	fe ef       	ldi	r31, 0xFE	; 254
    3086:	16 16       	cp	r1, r22
    3088:	17 06       	cpc	r1, r23
    308a:	e8 07       	cpc	r30, r24
    308c:	f9 07       	cpc	r31, r25
    308e:	c0 f0       	brcs	.+48     	; 0x30c0 <__fp_cmp+0x46>
    3090:	12 16       	cp	r1, r18
    3092:	13 06       	cpc	r1, r19
    3094:	e4 07       	cpc	r30, r20
    3096:	f5 07       	cpc	r31, r21
__fp_cmp():
    3098:	98 f0       	brcs	.+38     	; 0x30c0 <__fp_cmp+0x46>
    309a:	62 1b       	sub	r22, r18
    309c:	73 0b       	sbc	r23, r19
    309e:	84 0b       	sbc	r24, r20
    30a0:	95 0b       	sbc	r25, r21
    30a2:	39 f4       	brne	.+14     	; 0x30b2 <__fp_cmp+0x38>
    30a4:	0a 26       	eor	r0, r26
    30a6:	61 f0       	breq	.+24     	; 0x30c0 <__fp_cmp+0x46>
    30a8:	23 2b       	or	r18, r19
    30aa:	24 2b       	or	r18, r20
    30ac:	25 2b       	or	r18, r21
    30ae:	21 f4       	brne	.+8      	; 0x30b8 <__fp_cmp+0x3e>
    30b0:	08 95       	ret
    30b2:	0a 26       	eor	r0, r26
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <__fp_cmp+0x3e>
    30b6:	a1 40       	sbci	r26, 0x01	; 1
    30b8:	a6 95       	lsr	r26
    30ba:	8f ef       	ldi	r24, 0xFF	; 255
    30bc:	81 1d       	adc	r24, r1
    30be:	81 1d       	adc	r24, r1
    30c0:	08 95       	ret

000030c2 <__fp_inf>:
__fp_inf():
    30c2:	97 f9       	bld	r25, 7
    30c4:	9f 67       	ori	r25, 0x7F	; 127
    30c6:	80 e8       	ldi	r24, 0x80	; 128
    30c8:	70 e0       	ldi	r23, 0x00	; 0
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	08 95       	ret

000030ce <__fp_nan>:
__fp_nan():
    30ce:	9f ef       	ldi	r25, 0xFF	; 255
    30d0:	80 ec       	ldi	r24, 0xC0	; 192
    30d2:	08 95       	ret

000030d4 <__fp_pscA>:
__fp_pscA():
    30d4:	00 24       	eor	r0, r0
    30d6:	0a 94       	dec	r0
    30d8:	16 16       	cp	r1, r22
    30da:	17 06       	cpc	r1, r23
    30dc:	18 06       	cpc	r1, r24
    30de:	09 06       	cpc	r0, r25
    30e0:	08 95       	ret

000030e2 <__fp_pscB>:
__fp_pscB():
    30e2:	00 24       	eor	r0, r0
    30e4:	0a 94       	dec	r0
    30e6:	12 16       	cp	r1, r18
    30e8:	13 06       	cpc	r1, r19
    30ea:	14 06       	cpc	r1, r20
    30ec:	05 06       	cpc	r0, r21
    30ee:	08 95       	ret

000030f0 <__fp_round>:
__fp_round():
    30f0:	09 2e       	mov	r0, r25
    30f2:	03 94       	inc	r0
    30f4:	00 0c       	add	r0, r0
    30f6:	11 f4       	brne	.+4      	; 0x30fc <__fp_round+0xc>
    30f8:	88 23       	and	r24, r24
    30fa:	52 f0       	brmi	.+20     	; 0x3110 <__fp_round+0x20>
    30fc:	bb 0f       	add	r27, r27
    30fe:	40 f4       	brcc	.+16     	; 0x3110 <__fp_round+0x20>
    3100:	bf 2b       	or	r27, r31
    3102:	11 f4       	brne	.+4      	; 0x3108 <__fp_round+0x18>
    3104:	60 ff       	sbrs	r22, 0
    3106:	04 c0       	rjmp	.+8      	; 0x3110 <__fp_round+0x20>
    3108:	6f 5f       	subi	r22, 0xFF	; 255
    310a:	7f 4f       	sbci	r23, 0xFF	; 255
    310c:	8f 4f       	sbci	r24, 0xFF	; 255
    310e:	9f 4f       	sbci	r25, 0xFF	; 255
    3110:	08 95       	ret

00003112 <__fp_split3>:
__fp_split3():
    3112:	57 fd       	sbrc	r21, 7
    3114:	90 58       	subi	r25, 0x80	; 128
    3116:	44 0f       	add	r20, r20
    3118:	55 1f       	adc	r21, r21
    311a:	59 f0       	breq	.+22     	; 0x3132 <__fp_splitA+0x10>
    311c:	5f 3f       	cpi	r21, 0xFF	; 255
    311e:	71 f0       	breq	.+28     	; 0x313c <__fp_splitA+0x1a>
    3120:	47 95       	ror	r20

00003122 <__fp_splitA>:
    3122:	88 0f       	add	r24, r24
    3124:	97 fb       	bst	r25, 7
    3126:	99 1f       	adc	r25, r25
    3128:	61 f0       	breq	.+24     	; 0x3142 <__fp_splitA+0x20>
    312a:	9f 3f       	cpi	r25, 0xFF	; 255
    312c:	79 f0       	breq	.+30     	; 0x314c <__fp_splitA+0x2a>
    312e:	87 95       	ror	r24
    3130:	08 95       	ret
    3132:	12 16       	cp	r1, r18
    3134:	13 06       	cpc	r1, r19
    3136:	14 06       	cpc	r1, r20
    3138:	55 1f       	adc	r21, r21
    313a:	f2 cf       	rjmp	.-28     	; 0x3120 <__fp_split3+0xe>
    313c:	46 95       	lsr	r20
    313e:	f1 df       	rcall	.-30     	; 0x3122 <__fp_splitA>
    3140:	08 c0       	rjmp	.+16     	; 0x3152 <__fp_splitA+0x30>
    3142:	16 16       	cp	r1, r22
    3144:	17 06       	cpc	r1, r23
    3146:	18 06       	cpc	r1, r24
    3148:	99 1f       	adc	r25, r25
    314a:	f1 cf       	rjmp	.-30     	; 0x312e <__fp_splitA+0xc>
    314c:	86 95       	lsr	r24
    314e:	71 05       	cpc	r23, r1
    3150:	61 05       	cpc	r22, r1
    3152:	08 94       	sec
    3154:	08 95       	ret

00003156 <__fp_zero>:
__fp_zero():
    3156:	e8 94       	clt

00003158 <__fp_szero>:
    3158:	bb 27       	eor	r27, r27
    315a:	66 27       	eor	r22, r22
    315c:	77 27       	eor	r23, r23
    315e:	cb 01       	movw	r24, r22
    3160:	97 f9       	bld	r25, 7
    3162:	08 95       	ret

00003164 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3164:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    3166:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    3168:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    316a:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    316c:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    316e:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    3170:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    3172:	19 94       	eijmp

00003174 <malloc>:
malloc():
    3174:	0f 93       	push	r16
    3176:	1f 93       	push	r17
    3178:	cf 93       	push	r28
    317a:	df 93       	push	r29
    317c:	82 30       	cpi	r24, 0x02	; 2
    317e:	91 05       	cpc	r25, r1
    3180:	10 f4       	brcc	.+4      	; 0x3186 <malloc+0x12>
    3182:	82 e0       	ldi	r24, 0x02	; 2
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	e0 91 38 18 	lds	r30, 0x1838	; 0x801838 <__flp>
    318a:	f0 91 39 18 	lds	r31, 0x1839	; 0x801839 <__flp+0x1>
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	a0 e0       	ldi	r26, 0x00	; 0
    3196:	30 97       	sbiw	r30, 0x00	; 0
    3198:	99 f4       	brne	.+38     	; 0x31c0 <malloc+0x4c>
    319a:	21 15       	cp	r18, r1
    319c:	31 05       	cpc	r19, r1
    319e:	09 f4       	brne	.+2      	; 0x31a2 <malloc+0x2e>
    31a0:	4a c0       	rjmp	.+148    	; 0x3236 <malloc+0xc2>
    31a2:	28 1b       	sub	r18, r24
    31a4:	39 0b       	sbc	r19, r25
    31a6:	24 30       	cpi	r18, 0x04	; 4
    31a8:	31 05       	cpc	r19, r1
    31aa:	d8 f5       	brcc	.+118    	; 0x3222 <malloc+0xae>
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	9b 81       	ldd	r25, Y+3	; 0x03
    31b0:	61 15       	cp	r22, r1
    31b2:	71 05       	cpc	r23, r1
    31b4:	89 f1       	breq	.+98     	; 0x3218 <malloc+0xa4>
    31b6:	fb 01       	movw	r30, r22
    31b8:	93 83       	std	Z+3, r25	; 0x03
    31ba:	82 83       	std	Z+2, r24	; 0x02
    31bc:	fe 01       	movw	r30, r28
    31be:	11 c0       	rjmp	.+34     	; 0x31e2 <malloc+0x6e>
    31c0:	40 81       	ld	r20, Z
    31c2:	51 81       	ldd	r21, Z+1	; 0x01
    31c4:	02 81       	ldd	r16, Z+2	; 0x02
    31c6:	13 81       	ldd	r17, Z+3	; 0x03
    31c8:	48 17       	cp	r20, r24
    31ca:	59 07       	cpc	r21, r25
    31cc:	e0 f0       	brcs	.+56     	; 0x3206 <malloc+0x92>
    31ce:	48 17       	cp	r20, r24
    31d0:	59 07       	cpc	r21, r25
    31d2:	99 f4       	brne	.+38     	; 0x31fa <malloc+0x86>
    31d4:	10 97       	sbiw	r26, 0x00	; 0
    31d6:	61 f0       	breq	.+24     	; 0x31f0 <malloc+0x7c>
    31d8:	12 96       	adiw	r26, 0x02	; 2
    31da:	0c 93       	st	X, r16
    31dc:	12 97       	sbiw	r26, 0x02	; 2
    31de:	13 96       	adiw	r26, 0x03	; 3
    31e0:	1c 93       	st	X, r17
    31e2:	32 96       	adiw	r30, 0x02	; 2
    31e4:	cf 01       	movw	r24, r30
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	08 95       	ret
    31f0:	00 93 38 18 	sts	0x1838, r16	; 0x801838 <__flp>
    31f4:	10 93 39 18 	sts	0x1839, r17	; 0x801839 <__flp+0x1>
    31f8:	f4 cf       	rjmp	.-24     	; 0x31e2 <malloc+0x6e>
    31fa:	21 15       	cp	r18, r1
    31fc:	31 05       	cpc	r19, r1
    31fe:	51 f0       	breq	.+20     	; 0x3214 <malloc+0xa0>
    3200:	42 17       	cp	r20, r18
    3202:	53 07       	cpc	r21, r19
    3204:	38 f0       	brcs	.+14     	; 0x3214 <malloc+0xa0>
    3206:	a9 01       	movw	r20, r18
    3208:	db 01       	movw	r26, r22
    320a:	9a 01       	movw	r18, r20
    320c:	bd 01       	movw	r22, r26
    320e:	df 01       	movw	r26, r30
    3210:	f8 01       	movw	r30, r16
    3212:	c1 cf       	rjmp	.-126    	; 0x3196 <malloc+0x22>
    3214:	ef 01       	movw	r28, r30
    3216:	f9 cf       	rjmp	.-14     	; 0x320a <malloc+0x96>
    3218:	90 93 39 18 	sts	0x1839, r25	; 0x801839 <__flp+0x1>
    321c:	80 93 38 18 	sts	0x1838, r24	; 0x801838 <__flp>
    3220:	cd cf       	rjmp	.-102    	; 0x31bc <malloc+0x48>
    3222:	fe 01       	movw	r30, r28
    3224:	e2 0f       	add	r30, r18
    3226:	f3 1f       	adc	r31, r19
    3228:	81 93       	st	Z+, r24
    322a:	91 93       	st	Z+, r25
    322c:	22 50       	subi	r18, 0x02	; 2
    322e:	31 09       	sbc	r19, r1
    3230:	39 83       	std	Y+1, r19	; 0x01
    3232:	28 83       	st	Y, r18
    3234:	d7 cf       	rjmp	.-82     	; 0x31e4 <malloc+0x70>
    3236:	20 91 36 18 	lds	r18, 0x1836	; 0x801836 <__brkval>
    323a:	30 91 37 18 	lds	r19, 0x1837	; 0x801837 <__brkval+0x1>
    323e:	23 2b       	or	r18, r19
    3240:	41 f4       	brne	.+16     	; 0x3252 <malloc+0xde>
    3242:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <__malloc_heap_start>
    3246:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <__malloc_heap_start+0x1>
    324a:	30 93 37 18 	sts	0x1837, r19	; 0x801837 <__brkval+0x1>
    324e:	20 93 36 18 	sts	0x1836, r18	; 0x801836 <__brkval>
    3252:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <__malloc_heap_end>
    3256:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <__malloc_heap_end+0x1>
    325a:	21 15       	cp	r18, r1
    325c:	31 05       	cpc	r19, r1
    325e:	41 f4       	brne	.+16     	; 0x3270 <malloc+0xfc>
    3260:	2d b7       	in	r18, 0x3d	; 61
    3262:	3e b7       	in	r19, 0x3e	; 62
    3264:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <__malloc_margin>
    3268:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <__malloc_margin+0x1>
    326c:	24 1b       	sub	r18, r20
    326e:	35 0b       	sbc	r19, r21
    3270:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <__brkval>
    3274:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <__brkval+0x1>
    3278:	e2 17       	cp	r30, r18
    327a:	f3 07       	cpc	r31, r19
    327c:	a0 f4       	brcc	.+40     	; 0x32a6 <malloc+0x132>
    327e:	2e 1b       	sub	r18, r30
    3280:	3f 0b       	sbc	r19, r31
    3282:	28 17       	cp	r18, r24
    3284:	39 07       	cpc	r19, r25
    3286:	78 f0       	brcs	.+30     	; 0x32a6 <malloc+0x132>
    3288:	ac 01       	movw	r20, r24
    328a:	4e 5f       	subi	r20, 0xFE	; 254
    328c:	5f 4f       	sbci	r21, 0xFF	; 255
    328e:	24 17       	cp	r18, r20
    3290:	35 07       	cpc	r19, r21
    3292:	48 f0       	brcs	.+18     	; 0x32a6 <malloc+0x132>
    3294:	4e 0f       	add	r20, r30
    3296:	5f 1f       	adc	r21, r31
    3298:	50 93 37 18 	sts	0x1837, r21	; 0x801837 <__brkval+0x1>
    329c:	40 93 36 18 	sts	0x1836, r20	; 0x801836 <__brkval>
    32a0:	81 93       	st	Z+, r24
    32a2:	91 93       	st	Z+, r25
    32a4:	9f cf       	rjmp	.-194    	; 0x31e4 <malloc+0x70>
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	e0 e0       	ldi	r30, 0x00	; 0
    32aa:	9c cf       	rjmp	.-200    	; 0x31e4 <malloc+0x70>

000032ac <free>:
free():
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	e9 f0       	breq	.+58     	; 0x32ee <free+0x42>
    32b4:	fc 01       	movw	r30, r24
    32b6:	32 97       	sbiw	r30, 0x02	; 2
    32b8:	13 82       	std	Z+3, r1	; 0x03
    32ba:	12 82       	std	Z+2, r1	; 0x02
    32bc:	a0 91 38 18 	lds	r26, 0x1838	; 0x801838 <__flp>
    32c0:	b0 91 39 18 	lds	r27, 0x1839	; 0x801839 <__flp+0x1>
    32c4:	ed 01       	movw	r28, r26
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	10 97       	sbiw	r26, 0x00	; 0
    32cc:	a1 f4       	brne	.+40     	; 0x32f6 <free+0x4a>
    32ce:	20 81       	ld	r18, Z
    32d0:	31 81       	ldd	r19, Z+1	; 0x01
    32d2:	82 0f       	add	r24, r18
    32d4:	93 1f       	adc	r25, r19
    32d6:	20 91 36 18 	lds	r18, 0x1836	; 0x801836 <__brkval>
    32da:	30 91 37 18 	lds	r19, 0x1837	; 0x801837 <__brkval+0x1>
    32de:	28 17       	cp	r18, r24
    32e0:	39 07       	cpc	r19, r25
    32e2:	09 f0       	breq	.+2      	; 0x32e6 <free+0x3a>
    32e4:	61 c0       	rjmp	.+194    	; 0x33a8 <free+0xfc>
    32e6:	f0 93 37 18 	sts	0x1837, r31	; 0x801837 <__brkval+0x1>
    32ea:	e0 93 36 18 	sts	0x1836, r30	; 0x801836 <__brkval>
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret
    32f4:	ea 01       	movw	r28, r20
    32f6:	ce 17       	cp	r28, r30
    32f8:	df 07       	cpc	r29, r31
    32fa:	e8 f5       	brcc	.+122    	; 0x3376 <free+0xca>
    32fc:	4a 81       	ldd	r20, Y+2	; 0x02
    32fe:	5b 81       	ldd	r21, Y+3	; 0x03
    3300:	9e 01       	movw	r18, r28
    3302:	41 15       	cp	r20, r1
    3304:	51 05       	cpc	r21, r1
    3306:	b1 f7       	brne	.-20     	; 0x32f4 <free+0x48>
    3308:	e9 01       	movw	r28, r18
    330a:	fb 83       	std	Y+3, r31	; 0x03
    330c:	ea 83       	std	Y+2, r30	; 0x02
    330e:	49 91       	ld	r20, Y+
    3310:	59 91       	ld	r21, Y+
    3312:	c4 0f       	add	r28, r20
    3314:	d5 1f       	adc	r29, r21
    3316:	ec 17       	cp	r30, r28
    3318:	fd 07       	cpc	r31, r29
    331a:	61 f4       	brne	.+24     	; 0x3334 <free+0x88>
    331c:	80 81       	ld	r24, Z
    331e:	91 81       	ldd	r25, Z+1	; 0x01
    3320:	02 96       	adiw	r24, 0x02	; 2
    3322:	84 0f       	add	r24, r20
    3324:	95 1f       	adc	r25, r21
    3326:	e9 01       	movw	r28, r18
    3328:	99 83       	std	Y+1, r25	; 0x01
    332a:	88 83       	st	Y, r24
    332c:	82 81       	ldd	r24, Z+2	; 0x02
    332e:	93 81       	ldd	r25, Z+3	; 0x03
    3330:	9b 83       	std	Y+3, r25	; 0x03
    3332:	8a 83       	std	Y+2, r24	; 0x02
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	e0 e0       	ldi	r30, 0x00	; 0
    3338:	12 96       	adiw	r26, 0x02	; 2
    333a:	8d 91       	ld	r24, X+
    333c:	9c 91       	ld	r25, X
    333e:	13 97       	sbiw	r26, 0x03	; 3
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	b9 f5       	brne	.+110    	; 0x33b2 <free+0x106>
    3344:	2d 91       	ld	r18, X+
    3346:	3c 91       	ld	r19, X
    3348:	11 97       	sbiw	r26, 0x01	; 1
    334a:	cd 01       	movw	r24, r26
    334c:	02 96       	adiw	r24, 0x02	; 2
    334e:	82 0f       	add	r24, r18
    3350:	93 1f       	adc	r25, r19
    3352:	20 91 36 18 	lds	r18, 0x1836	; 0x801836 <__brkval>
    3356:	30 91 37 18 	lds	r19, 0x1837	; 0x801837 <__brkval+0x1>
    335a:	28 17       	cp	r18, r24
    335c:	39 07       	cpc	r19, r25
    335e:	39 f6       	brne	.-114    	; 0x32ee <free+0x42>
    3360:	30 97       	sbiw	r30, 0x00	; 0
    3362:	51 f5       	brne	.+84     	; 0x33b8 <free+0x10c>
    3364:	10 92 39 18 	sts	0x1839, r1	; 0x801839 <__flp+0x1>
    3368:	10 92 38 18 	sts	0x1838, r1	; 0x801838 <__flp>
    336c:	b0 93 37 18 	sts	0x1837, r27	; 0x801837 <__brkval+0x1>
    3370:	a0 93 36 18 	sts	0x1836, r26	; 0x801836 <__brkval>
    3374:	bc cf       	rjmp	.-136    	; 0x32ee <free+0x42>
    3376:	d3 83       	std	Z+3, r29	; 0x03
    3378:	c2 83       	std	Z+2, r28	; 0x02
    337a:	40 81       	ld	r20, Z
    337c:	51 81       	ldd	r21, Z+1	; 0x01
    337e:	84 0f       	add	r24, r20
    3380:	95 1f       	adc	r25, r21
    3382:	c8 17       	cp	r28, r24
    3384:	d9 07       	cpc	r29, r25
    3386:	61 f4       	brne	.+24     	; 0x33a0 <free+0xf4>
    3388:	4e 5f       	subi	r20, 0xFE	; 254
    338a:	5f 4f       	sbci	r21, 0xFF	; 255
    338c:	88 81       	ld	r24, Y
    338e:	99 81       	ldd	r25, Y+1	; 0x01
    3390:	48 0f       	add	r20, r24
    3392:	59 1f       	adc	r21, r25
    3394:	51 83       	std	Z+1, r21	; 0x01
    3396:	40 83       	st	Z, r20
    3398:	8a 81       	ldd	r24, Y+2	; 0x02
    339a:	9b 81       	ldd	r25, Y+3	; 0x03
    339c:	93 83       	std	Z+3, r25	; 0x03
    339e:	82 83       	std	Z+2, r24	; 0x02
    33a0:	21 15       	cp	r18, r1
    33a2:	31 05       	cpc	r19, r1
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <free+0xfc>
    33a6:	b0 cf       	rjmp	.-160    	; 0x3308 <free+0x5c>
    33a8:	f0 93 39 18 	sts	0x1839, r31	; 0x801839 <__flp+0x1>
    33ac:	e0 93 38 18 	sts	0x1838, r30	; 0x801838 <__flp>
    33b0:	9e cf       	rjmp	.-196    	; 0x32ee <free+0x42>
    33b2:	fd 01       	movw	r30, r26
    33b4:	dc 01       	movw	r26, r24
    33b6:	c0 cf       	rjmp	.-128    	; 0x3338 <free+0x8c>
    33b8:	13 82       	std	Z+3, r1	; 0x03
    33ba:	12 82       	std	Z+2, r1	; 0x02
    33bc:	d7 cf       	rjmp	.-82     	; 0x336c <free+0xc0>

000033be <strcat>:
strcat():
    33be:	fb 01       	movw	r30, r22
    33c0:	dc 01       	movw	r26, r24
    33c2:	0d 90       	ld	r0, X+
    33c4:	00 20       	and	r0, r0
    33c6:	e9 f7       	brne	.-6      	; 0x33c2 <strcat+0x4>
    33c8:	11 97       	sbiw	r26, 0x01	; 1
    33ca:	01 90       	ld	r0, Z+
    33cc:	0d 92       	st	X+, r0
    33ce:	00 20       	and	r0, r0
    33d0:	e1 f7       	brne	.-8      	; 0x33ca <strcat+0xc>
    33d2:	08 95       	ret

000033d4 <strchr>:
strchr():
    33d4:	fc 01       	movw	r30, r24
    33d6:	81 91       	ld	r24, Z+
    33d8:	86 17       	cp	r24, r22
    33da:	21 f0       	breq	.+8      	; 0x33e4 <strchr+0x10>
    33dc:	88 23       	and	r24, r24
    33de:	d9 f7       	brne	.-10     	; 0x33d6 <strchr+0x2>
    33e0:	99 27       	eor	r25, r25
    33e2:	08 95       	ret
    33e4:	31 97       	sbiw	r30, 0x01	; 1
    33e6:	cf 01       	movw	r24, r30
    33e8:	08 95       	ret

000033ea <strstr>:
strstr():
    33ea:	fb 01       	movw	r30, r22
    33ec:	51 91       	ld	r21, Z+
    33ee:	55 23       	and	r21, r21
    33f0:	a9 f0       	breq	.+42     	; 0x341c <strstr+0x32>
    33f2:	bf 01       	movw	r22, r30
    33f4:	dc 01       	movw	r26, r24
    33f6:	4d 91       	ld	r20, X+
    33f8:	45 17       	cp	r20, r21
    33fa:	41 11       	cpse	r20, r1
    33fc:	e1 f7       	brne	.-8      	; 0x33f6 <strstr+0xc>
    33fe:	59 f4       	brne	.+22     	; 0x3416 <strstr+0x2c>
    3400:	cd 01       	movw	r24, r26
    3402:	01 90       	ld	r0, Z+
    3404:	00 20       	and	r0, r0
    3406:	49 f0       	breq	.+18     	; 0x341a <strstr+0x30>
    3408:	4d 91       	ld	r20, X+
    340a:	40 15       	cp	r20, r0
    340c:	41 11       	cpse	r20, r1
    340e:	c9 f3       	breq	.-14     	; 0x3402 <strstr+0x18>
    3410:	fb 01       	movw	r30, r22
    3412:	41 11       	cpse	r20, r1
    3414:	ef cf       	rjmp	.-34     	; 0x33f4 <strstr+0xa>
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	08 95       	ret

0000341e <sprintf>:
sprintf():
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	2e 97       	sbiw	r28, 0x0e	; 14
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	0e 89       	ldd	r16, Y+22	; 0x16
    3438:	1f 89       	ldd	r17, Y+23	; 0x17
    343a:	86 e0       	ldi	r24, 0x06	; 6
    343c:	8c 83       	std	Y+4, r24	; 0x04
    343e:	1a 83       	std	Y+2, r17	; 0x02
    3440:	09 83       	std	Y+1, r16	; 0x01
    3442:	8f ef       	ldi	r24, 0xFF	; 255
    3444:	9f e7       	ldi	r25, 0x7F	; 127
    3446:	9e 83       	std	Y+6, r25	; 0x06
    3448:	8d 83       	std	Y+5, r24	; 0x05
    344a:	ae 01       	movw	r20, r28
    344c:	46 5e       	subi	r20, 0xE6	; 230
    344e:	5f 4f       	sbci	r21, 0xFF	; 255
    3450:	68 8d       	ldd	r22, Y+24	; 0x18
    3452:	79 8d       	ldd	r23, Y+25	; 0x19
    3454:	ce 01       	movw	r24, r28
    3456:	01 96       	adiw	r24, 0x01	; 1
    3458:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <vfprintf>
    345c:	2f 81       	ldd	r18, Y+7	; 0x07
    345e:	38 85       	ldd	r19, Y+8	; 0x08
    3460:	02 0f       	add	r16, r18
    3462:	13 1f       	adc	r17, r19
    3464:	f8 01       	movw	r30, r16
    3466:	10 82       	st	Z, r1
    3468:	2e 96       	adiw	r28, 0x0e	; 14
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	08 95       	ret

0000347e <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    347e:	f8 94       	cli

00003480 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3480:	ff cf       	rjmp	.-2      	; 0x3480 <__stop_program>
