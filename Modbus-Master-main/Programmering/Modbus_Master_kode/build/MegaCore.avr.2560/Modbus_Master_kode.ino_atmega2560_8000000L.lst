
C:\Users\mbt\AppData\Local\Temp\arduino\sketches\0968FC918386EC129B3DA3B7816825BD/Modbus_Master_kode.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
       8:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
       c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      10:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      14:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      18:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      1c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      20:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      24:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      28:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      2c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      30:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      34:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      38:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      3c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      40:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      44:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      48:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      4c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      50:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      54:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      58:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      5c:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__vector_23>
      60:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      64:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      68:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      6c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      70:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      74:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      78:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      7c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      80:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      84:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      88:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      8c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      90:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__vector_36>
      94:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__vector_37>
      98:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      9c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      a0:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      a4:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      a8:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      ac:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      b0:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      b4:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      b8:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      bc:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      c0:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      c4:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      c8:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      cc:	0c 94 af 12 	jmp	0x255e	; 0x255e <__vector_51>
      d0:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__vector_52>
      d4:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      d8:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      dc:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>
      e0:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <turnOffPWM+0xa4>
      e8:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <Serial1_available()>
      ec:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <turnOffPWM+0xb0>
      f0:	0c 94 46 13 	jmp	0x268c	; 0x268c <Print::write(unsigned char const*, unsigned int)>
      f4:	0c 94 df 10 	jmp	0x21be	; 0x21be <HardwareSerial::read()>
      f8:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <turnOffPWM+0x6c>
      fc:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <HardwareSerial::availableForWrite()>
     100:	0c 94 02 11 	jmp	0x2204	; 0x2204 <serialEventRun()>
     104:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <turnOffPWM+0x88>
     108:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <turnOffPWM+0x48>
     10c:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <turnOffPWM+0x58>
     110:	0c 94 c5 10 	jmp	0x218a	; 0x218a <HardwareSerial::available()>
     114:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <HardwareSerial::peek()>
     118:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <turnOffPWM+0xc6>
     11c:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <HardwareSerial::write(unsigned char)>
     120:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <turnOffPWM+0x9c>
     124:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <turnOffPWM+0x3c>
     128:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <turnOffPWM+0x64>
     12c:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <turnOffPWM+0x94>
     130:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <turnOffPWM+0xc8>
     134:	0c 94 0f 13 	jmp	0x261e	; 0x261e <Serial2_available()>
     138:	0c 94 19 13 	jmp	0x2632	; 0x2632 <_GLOBAL__sub_I___vector_51>
     13c:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <turnOffPWM+0xb8>
     140:	0c 94 82 12 	jmp	0x2504	; 0x2504 <_GLOBAL__sub_I___vector_36>
     144:	0c 94 b6 14 	jmp	0x296c	; 0x296c <turnOffPWM+0x50>
     148:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <turnOffPWM+0x78>
     14c:	0c 94 ce 14 	jmp	0x299c	; 0x299c <turnOffPWM+0x80>
     150:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <HardwareSerial::flush()>
     154:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <turnOffPWM+0xc0>
     158:	0c 94 90 07 	jmp	0xf20	; 0xf20 <_GLOBAL__sub_I_simBuffer>

0000015c <__trampolines_end>:
__trampolines_end():
     15c:	41 54       	subi	r20, 0x41	; 65
     15e:	2b 43       	sbci	r18, 0x3B	; 59
     160:	41 4f       	sbci	r20, 0xF1	; 241
     162:	50 45       	sbci	r21, 0x50	; 80
     164:	4e 3d       	cpi	r20, 0xDE	; 222
     166:	30 2c       	mov	r3, r0
     168:	30 2c       	mov	r3, r0
     16a:	22 55       	subi	r18, 0x52	; 82
     16c:	44 50       	subi	r20, 0x04	; 4
     16e:	22 2c       	mov	r2, r2
     170:	22 32       	cpi	r18, 0x22	; 34
     172:	30 37       	cpi	r19, 0x70	; 112
     174:	2e 31       	cpi	r18, 0x1E	; 30
     176:	35 34       	cpi	r19, 0x45	; 69
     178:	2e 32       	cpi	r18, 0x2E	; 46
     17a:	35 31       	cpi	r19, 0x15	; 21
     17c:	2e 31       	cpi	r18, 0x1E	; 30
     17e:	37 31       	cpi	r19, 0x17	; 23
     180:	22 2c       	mov	r2, r2
     182:	38 30       	cpi	r19, 0x08	; 8
     184:	38 30       	cpi	r19, 0x08	; 8
	...

00000187 <simSetup()::__c>:
     187:	41 54 2b 43 4e 41 43 54 3f 00                       AT+CNACT?.

00000191 <simSetup()::__c>:
     191:	41 54 2b 43 4e 41 43 54 3d 30 2c 31 00              AT+CNACT=0,1.

0000019e <simSetup()::__c>:
     19e:	41 54 2b 43 4e 43 46 47 3d 30 2c 31 2c 22 69 6f     AT+CNCFG=0,1,"io
     1ae:	74 2e 31 6e 63 65 2e 6e 65 74 22 00                 t.1nce.net".

000001ba <simSetup()::__c>:
     1ba:	41 54 2b 43 53 51 00                                AT+CSQ.

000001c1 <simSetup()::__c>:
     1c1:	41 54 2b 43 47 4e 41 50 4e 00                       AT+CGNAPN.

000001cb <simSetup()::__c>:
     1cb:	41 54 2b 43 4f 50 53 3f 00                          AT+COPS?.

000001d4 <simSetup()::__c>:
     1d4:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

000001de <simSetup()::__c>:
     1de:	41 54 2b 47 53 4e 00                                AT+GSN.

000001e5 <simSetup()::__c>:
     1e5:	41 54 00                                            AT.

000001e8 <loop::__c>:
     1e8:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

000001f9 <loop::__c>:
     1f9:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 38 00        AT+CASEND=0,18.

00000208 <loop::__c>:
     208:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

00000219 <setup::__c>:
     219:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

0000022a <setup::__c>:
     22a:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 31 00        AT+CASEND=0,11.

00000239 <setup::__c>:
     239:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

0000024a <setup::__c>:
     24a:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 35 00        AT+CASEND=0,15.

00000259 <digital_pin_to_timer_PGM>:
     259:	00 00 00 0a 0b 0c 00 00 00 00 00 0d 0e 0f 09 00     ................
     269:	00 00 00 08 04 05 06 00 00 00 00 00 00 11 12 13     ................
	...
     2ad:	00 03                                               ..

000002af <digital_pin_to_bit_mask_PGM>:
     2af:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 01     ..... @...... @.
     2bf:	02 04 08 10 20 40 80 80 08 10 01 02 04 08 10 20     .... @......... 
     2cf:	40 80 01 02 04 08 10 20 40 80 01 02 01 02 04 08     @...... @.......
     2df:	10 20 40 80 01 02 04 08 10 20 40 04 80 40 20 10     . @...... @..@ .
     2ef:	08 04 02 01 80 01 02 04 08 10 20 40 80 01 02 04     .......... @....
     2ff:	08 10 20 40 80 20                                   .. @. 

00000305 <digital_pin_to_port_PGM>:
     305:	05 05 05 05 05 05 05 05 08 08 08 08 08 08 08 02     ................
     315:	02 02 02 02 02 02 02 08 07 07 0c 0c 0c 0c 0c 0c     ................
     325:	0c 0c 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     335:	03 03 03 03 0a 0a 0a 0a 0a 0a 0a 07 01 01 01 01     ................
     345:	01 01 01 01 0a 06 06 06 06 06 06 06 06 0b 0b 0b     ................
     355:	0b 0b 0b 0b 0b 07                                   ......

0000035b <port_to_output_PGM>:
     35b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     36b:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000375 <port_to_mode_PGM>:
     375:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     385:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000390 <__ctors_start>:
__ctors_start():
     390:	90 07       	cpc	r25, r16
     392:	82 12       	cpse	r8, r18
     394:	19 13       	cpse	r17, r25

00000396 <__ctors_end>:
__dtors_end():
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d1 e2       	ldi	r29, 0x21	; 33
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	0c bf       	out	0x3c, r16	; 60

000003a6 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     3a6:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     3aa:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     3ac:	e0 ee       	ldi	r30, 0xE0	; 224
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     3ae:	f5 e3       	ldi	r31, 0x35	; 53
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     3b0:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     3b2:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     3b6:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     3b8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     3ba:	a0 36       	cpi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     3bc:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     3be:	d9 f7       	brne	.-10     	; 0x3b6 <__do_copy_data+0x10>

000003c0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     3c0:	28 e1       	ldi	r18, 0x18	; 24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     3c2:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     3c4:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     3c6:	01 c0       	rjmp	.+2      	; 0x3ca <.do_clear_bss_start>

000003c8 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     3c8:	1d 92       	st	X+, r1

000003ca <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     3ca:	a3 34       	cpi	r26, 0x43	; 67
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     3cc:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <.do_clear_bss_loop>

000003d0 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     3d0:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     3d2:	cb ec       	ldi	r28, 0xCB	; 203
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     3d4:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     3d6:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     3da:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     3dc:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     3de:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     3e0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     3e2:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     3e6:	c8 3c       	cpi	r28, 0xC8	; 200
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     3e8:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     3ea:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     3ec:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     3ee:	a9 f7       	brne	.-22     	; 0x3da <__do_global_ctors+0xa>
     3f0:	0e 94 bd 13 	call	0x277a	; 0x277a <main>
     3f4:	0c 94 ee 1a 	jmp	0x35dc	; 0x35dc <_exit>

000003f8 <__bad_interrupt>:
__vector_38():
     3f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003fc <Print::write(char const*, unsigned int)>:
_ZN5Print5writeEPKcj():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:808
  simSerial.write(msg, strlen(msg));  // Check if network is active to adress
  responseCheck("OK", 10000);

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
  responseCheck("00", 10000);
}
     3fc:	dc 01       	movw	r26, r24
     3fe:	ed 91       	ld	r30, X+
     400:	fc 91       	ld	r31, X
     402:	02 80       	ldd	r0, Z+2	; 0x02
     404:	f3 81       	ldd	r31, Z+3	; 0x03
     406:	e0 2d       	mov	r30, r0
     408:	19 94       	eijmp

0000040a <powerStatus()>:
_Z11powerStatusv():
     40a:	cf 93       	push	r28
     40c:	85 e4       	ldi	r24, 0x45	; 69
     40e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <analogRead>
     412:	90 93 8d 16 	sts	0x168D, r25	; 0x80168d <ADCValue+0x1>
     416:	80 93 8c 16 	sts	0x168C, r24	; 0x80168c <ADCValue>
     41a:	bc 01       	movw	r22, r24
     41c:	99 0f       	add	r25, r25
     41e:	88 0b       	sbc	r24, r24
     420:	99 0b       	sbc	r25, r25
     422:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__floatsisf>
     426:	2a e0       	ldi	r18, 0x0A	; 10
     428:	38 e2       	ldi	r19, 0x28	; 40
     42a:	40 ea       	ldi	r20, 0xA0	; 160
     42c:	5b e3       	ldi	r21, 0x3B	; 59
     42e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__mulsf3>
     432:	60 93 88 16 	sts	0x1688, r22	; 0x801688 <voltage>
     436:	70 93 89 16 	sts	0x1689, r23	; 0x801689 <voltage+0x1>
     43a:	80 93 8a 16 	sts	0x168A, r24	; 0x80168a <voltage+0x2>
     43e:	90 93 8b 16 	sts	0x168B, r25	; 0x80168b <voltage+0x3>
     442:	c1 e0       	ldi	r28, 0x01	; 1
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e4       	ldi	r21, 0x40	; 64
     44c:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__gesf2>
     450:	18 16       	cp	r1, r24
     452:	0c f0       	brlt	.+2      	; 0x456 <powerStatus()+0x4c>
     454:	c0 e0       	ldi	r28, 0x00	; 0
     456:	8c 2f       	mov	r24, r28
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <millisDelay(int)>:
_Z11millisDelayi():
     45c:	8f 92       	push	r8
     45e:	9f 92       	push	r9
     460:	af 92       	push	r10
     462:	bf 92       	push	r11
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	6c 01       	movw	r12, r24
     46e:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
     472:	4b 01       	movw	r8, r22
     474:	5c 01       	movw	r10, r24
     476:	0d 2c       	mov	r0, r13
     478:	00 0c       	add	r0, r0
     47a:	ee 08       	sbc	r14, r14
     47c:	ff 08       	sbc	r15, r15
     47e:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
     482:	68 19       	sub	r22, r8
     484:	79 09       	sbc	r23, r9
     486:	8a 09       	sbc	r24, r10
     488:	9b 09       	sbc	r25, r11
     48a:	6c 15       	cp	r22, r12
     48c:	7d 05       	cpc	r23, r13
     48e:	8e 05       	cpc	r24, r14
     490:	9f 05       	cpc	r25, r15
     492:	a8 f3       	brcs	.-22     	; 0x47e <millisDelay(int)+0x22>
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	bf 90       	pop	r11
     49e:	af 90       	pop	r10
     4a0:	9f 90       	pop	r9
     4a2:	8f 90       	pop	r8
     4a4:	08 95       	ret

000004a6 <sendToServer()>:
_Z12sendToServerv():
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	a8 97       	sbiw	r28, 0x28	; 40
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	8d e0       	ldi	r24, 0x0D	; 13
     4c4:	e8 e0       	ldi	r30, 0x08	; 8
     4c6:	f2 e0       	ldi	r31, 0x02	; 2
     4c8:	de 01       	movw	r26, r28
     4ca:	55 96       	adiw	r26, 0x15	; 21
     4cc:	01 90       	ld	r0, Z+
     4ce:	0d 92       	st	X+, r0
     4d0:	8a 95       	dec	r24
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <sendToServer()+0x26>
     4d4:	fe 01       	movw	r30, r28
     4d6:	b2 96       	adiw	r30, 0x22	; 34
     4d8:	87 e0       	ldi	r24, 0x07	; 7
     4da:	df 01       	movw	r26, r30
     4dc:	1d 92       	st	X+, r1
     4de:	8a 95       	dec	r24
     4e0:	e9 f7       	brne	.-6      	; 0x4dc <sendToServer()+0x36>
     4e2:	a0 91 f8 16 	lds	r26, 0x16F8	; 0x8016f8 <serverMessage>
     4e6:	b0 91 f9 16 	lds	r27, 0x16F9	; 0x8016f9 <serverMessage+0x1>
     4ea:	fd 01       	movw	r30, r26
     4ec:	01 90       	ld	r0, Z+
     4ee:	00 20       	and	r0, r0
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <sendToServer()+0x46>
     4f2:	31 97       	sbiw	r30, 0x01	; 1
     4f4:	ea 1b       	sub	r30, r26
     4f6:	fb 0b       	sbc	r31, r27
     4f8:	ff 93       	push	r31
     4fa:	ef 93       	push	r30
     4fc:	8c e1       	ldi	r24, 0x1C	; 28
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	7c 01       	movw	r14, r24
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	0e 94 02 18 	call	0x3004	; 0x3004 <sprintf>
     512:	8e 01       	movw	r16, r28
     514:	0b 5e       	subi	r16, 0xEB	; 235
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	b7 01       	movw	r22, r14
     51a:	c8 01       	movw	r24, r16
     51c:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <strcat>
     520:	f8 01       	movw	r30, r16
     522:	01 90       	ld	r0, Z+
     524:	00 20       	and	r0, r0
     526:	e9 f7       	brne	.-6      	; 0x522 <sendToServer()+0x7c>
     528:	31 97       	sbiw	r30, 0x01	; 1
     52a:	af 01       	movw	r20, r30
     52c:	40 1b       	sub	r20, r16
     52e:	51 0b       	sbc	r21, r17
     530:	b8 01       	movw	r22, r16
     532:	8c ef       	ldi	r24, 0xFC	; 252
     534:	96 e1       	ldi	r25, 0x16	; 22
     536:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Print::write(char const*, unsigned int)>
     53a:	8c ef       	ldi	r24, 0xFC	; 252
     53c:	96 e1       	ldi	r25, 0x16	; 22
     53e:	0e 94 a6 13 	call	0x274c	; 0x274c <Print::println()>
     542:	88 ec       	ldi	r24, 0xC8	; 200
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
     54a:	60 91 f8 16 	lds	r22, 0x16F8	; 0x8016f8 <serverMessage>
     54e:	70 91 f9 16 	lds	r23, 0x16F9	; 0x8016f9 <serverMessage+0x1>
     552:	fb 01       	movw	r30, r22
     554:	01 90       	ld	r0, Z+
     556:	00 20       	and	r0, r0
     558:	e9 f7       	brne	.-6      	; 0x554 <sendToServer()+0xae>
     55a:	31 97       	sbiw	r30, 0x01	; 1
     55c:	af 01       	movw	r20, r30
     55e:	46 1b       	sub	r20, r22
     560:	57 0b       	sbc	r21, r23
     562:	8c ef       	ldi	r24, 0xFC	; 252
     564:	96 e1       	ldi	r25, 0x16	; 22
     566:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Print::write(char const*, unsigned int)>
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	a8 96       	adiw	r28, 0x28	; 40
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <simpow()>:
_Z6simpowv():
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	8b e2       	ldi	r24, 0x2B	; 43
     594:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
     598:	88 ee       	ldi	r24, 0xE8	; 232
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	8b e2       	ldi	r24, 0x2B	; 43
     5a4:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <digitalWrite>

000005a8 <clrsimBuffer()>:
_Z12clrsimBufferv():
     5a8:	e0 91 fa 16 	lds	r30, 0x16FA	; 0x8016fa <simBuffer>
     5ac:	f0 91 fb 16 	lds	r31, 0x16FB	; 0x8016fb <simBuffer+0x1>
     5b0:	11 82       	std	Z+1, r1	; 0x01
     5b2:	10 82       	st	Z, r1
     5b4:	08 95       	ret

000005b6 <clrmodBuffer()>:
_Z12clrmodBufferv():
     5b6:	e6 ec       	ldi	r30, 0xC6	; 198
     5b8:	f6 e1       	ldi	r31, 0x16	; 22
     5ba:	82 e3       	ldi	r24, 0x32	; 50
     5bc:	df 01       	movw	r26, r30
     5be:	1d 92       	st	X+, r1
     5c0:	8a 95       	dec	r24
     5c2:	e9 f7       	brne	.-6      	; 0x5be <clrmodBuffer()+0x8>
     5c4:	08 95       	ret

000005c6 <CRC16_modbus(char*, int)>:
_Z12CRC16_modbusPci():
     5c6:	ac 01       	movw	r20, r24
     5c8:	fc 01       	movw	r30, r24
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
     5ce:	9f 01       	movw	r18, r30
     5d0:	24 1b       	sub	r18, r20
     5d2:	35 0b       	sbc	r19, r21
     5d4:	26 17       	cp	r18, r22
     5d6:	37 07       	cpc	r19, r23
     5d8:	bc f4       	brge	.+46     	; 0x608 <CRC16_modbus(char*, int)+0x42>
     5da:	21 91       	ld	r18, Z+
     5dc:	02 2e       	mov	r0, r18
     5de:	00 0c       	add	r0, r0
     5e0:	33 0b       	sbc	r19, r19
     5e2:	82 27       	eor	r24, r18
     5e4:	93 27       	eor	r25, r19
     5e6:	28 e0       	ldi	r18, 0x08	; 8
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	dc 01       	movw	r26, r24
     5ec:	a1 70       	andi	r26, 0x01	; 1
     5ee:	bb 27       	eor	r27, r27
     5f0:	96 95       	lsr	r25
     5f2:	87 95       	ror	r24
     5f4:	ab 2b       	or	r26, r27
     5f6:	21 f0       	breq	.+8      	; 0x600 <CRC16_modbus(char*, int)+0x3a>
     5f8:	a1 e0       	ldi	r26, 0x01	; 1
     5fa:	8a 27       	eor	r24, r26
     5fc:	a0 ea       	ldi	r26, 0xA0	; 160
     5fe:	9a 27       	eor	r25, r26
     600:	21 50       	subi	r18, 0x01	; 1
     602:	31 09       	sbc	r19, r1
     604:	91 f7       	brne	.-28     	; 0x5ea <CRC16_modbus(char*, int)+0x24>
     606:	e3 cf       	rjmp	.-58     	; 0x5ce <CRC16_modbus(char*, int)+0x8>
     608:	08 95       	ret

0000060a <modbusWrite()>:
_Z11modbusWritev():
     60a:	2f 92       	push	r2
     60c:	3f 92       	push	r3
     60e:	4f 92       	push	r4
     610:	5f 92       	push	r5
     612:	6f 92       	push	r6
     614:	7f 92       	push	r7
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	c4 51       	subi	r28, 0x14	; 20
     634:	df 40       	sbci	r29, 0x0F	; 15
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	e0 91 fa 16 	lds	r30, 0x16FA	; 0x8016fa <simBuffer>
     644:	f0 91 fb 16 	lds	r31, 0x16FB	; 0x8016fb <simBuffer+0x1>
     648:	81 81       	ldd	r24, Z+1	; 0x01
     64a:	92 81       	ldd	r25, Z+2	; 0x02
     64c:	58 2e       	mov	r5, r24
     64e:	49 2e       	mov	r4, r25
     650:	c9 5f       	subi	r28, 0xF9	; 249
     652:	d0 4f       	sbci	r29, 0xF0	; 240
     654:	59 82       	std	Y+1, r5	; 0x01
     656:	48 82       	st	Y, r4
     658:	c7 50       	subi	r28, 0x07	; 7
     65a:	df 40       	sbci	r29, 0x0F	; 15
     65c:	67 e0       	ldi	r22, 0x07	; 7
     65e:	66 2e       	mov	r6, r22
     660:	71 2c       	mov	r7, r1
     662:	b1 2c       	mov	r11, r1
     664:	a1 2c       	mov	r10, r1
     666:	91 2c       	mov	r9, r1
     668:	81 2c       	mov	r8, r1
     66a:	8e 01       	movw	r16, r28
     66c:	0b 53       	subi	r16, 0x3B	; 59
     66e:	11 4f       	sbci	r17, 0xF1	; 241
     670:	cd 5f       	subi	r28, 0xFD	; 253
     672:	d0 4f       	sbci	r29, 0xF0	; 240
     674:	19 83       	std	Y+1, r17	; 0x01
     676:	08 83       	st	Y, r16
     678:	c3 50       	subi	r28, 0x03	; 3
     67a:	df 40       	sbci	r29, 0x0F	; 15
     67c:	7e e7       	ldi	r23, 0x7E	; 126
     67e:	47 2e       	mov	r4, r23
_ZN11write_Slave5resetEv():
     680:	e0 e2       	ldi	r30, 0x20	; 32
     682:	3e 2e       	mov	r3, r30
_Z11modbusWritev():
     684:	ff e3       	ldi	r31, 0x3F	; 63
     686:	2f 2e       	mov	r2, r31
     688:	c9 5f       	subi	r28, 0xF9	; 249
     68a:	d0 4f       	sbci	r29, 0xF0	; 240
     68c:	c8 80       	ld	r12, Y
     68e:	d9 80       	ldd	r13, Y+1	; 0x01
     690:	c7 50       	subi	r28, 0x07	; 7
     692:	df 40       	sbci	r29, 0x0F	; 15
     694:	ac 14       	cp	r10, r12
     696:	bd 04       	cpc	r11, r13
     698:	09 f4       	brne	.+2      	; 0x69c <modbusWrite()+0x92>
     69a:	f3 c0       	rjmp	.+486    	; 0x882 <modbusWrite()+0x278>
     69c:	00 91 fa 16 	lds	r16, 0x16FA	; 0x8016fa <simBuffer>
     6a0:	10 91 fb 16 	lds	r17, 0x16FB	; 0x8016fb <simBuffer+0x1>
     6a4:	06 0d       	add	r16, r6
     6a6:	17 1d       	adc	r17, r7
     6a8:	f8 01       	movw	r30, r16
     6aa:	34 97       	sbiw	r30, 0x04	; 4
     6ac:	50 80       	ld	r5, Z
     6ae:	31 96       	adiw	r30, 0x01	; 1
     6b0:	e0 80       	ld	r14, Z
     6b2:	31 96       	adiw	r30, 0x01	; 1
     6b4:	80 81       	ld	r24, Z
     6b6:	fe 2c       	mov	r15, r14
     6b8:	e8 2e       	mov	r14, r24
     6ba:	d8 01       	movw	r26, r16
     6bc:	11 96       	adiw	r26, 0x01	; 1
     6be:	bc 91       	ld	r27, X
     6c0:	cb 5f       	subi	r28, 0xFB	; 251
     6c2:	d0 4f       	sbci	r29, 0xF0	; 240
     6c4:	b8 83       	st	Y, r27
     6c6:	c5 50       	subi	r28, 0x05	; 5
     6c8:	df 40       	sbci	r29, 0x0F	; 15
     6ca:	c5 2c       	mov	r12, r5
     6cc:	05 2c       	mov	r0, r5
     6ce:	00 0c       	add	r0, r0
     6d0:	dd 08       	sbc	r13, r13
     6d2:	b6 01       	movw	r22, r12
     6d4:	ce 01       	movw	r24, r28
     6d6:	8b 53       	subi	r24, 0x3B	; 59
     6d8:	91 4f       	sbci	r25, 0xF1	; 241
     6da:	0e 94 dd 17 	call	0x2fba	; 0x2fba <strchr>
     6de:	89 2b       	or	r24, r25
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <modbusWrite()+0xda>
     6e2:	54 c0       	rjmp	.+168    	; 0x78c <modbusWrite()+0x182>
     6e4:	e5 ec       	ldi	r30, 0xC5	; 197
     6e6:	fe e0       	ldi	r31, 0x0E	; 14
     6e8:	ec 0f       	add	r30, r28
     6ea:	fd 1f       	adc	r31, r29
     6ec:	e8 0d       	add	r30, r8
     6ee:	f9 1d       	adc	r31, r9
     6f0:	50 82       	st	Z, r5
     6f2:	e5 2d       	mov	r30, r5
     6f4:	f4 2d       	mov	r31, r4
     6f6:	ef 02       	muls	r30, r31
     6f8:	c0 01       	movw	r24, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	e1 e0       	ldi	r30, 0x01	; 1
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	ec 0f       	add	r30, r28
     702:	fd 1f       	adc	r31, r29
     704:	e8 0f       	add	r30, r24
     706:	f9 1f       	adc	r31, r25
_ZN11write_Slave5resetEv():
     708:	df 01       	movw	r26, r30
     70a:	53 2c       	mov	r5, r3
     70c:	1d 92       	st	X+, r1
     70e:	5a 94       	dec	r5
     710:	e9 f7       	brne	.-6      	; 0x70c <modbusWrite()+0x102>
     712:	fc 01       	movw	r30, r24
     714:	b0 96       	adiw	r30, 0x20	; 32
     716:	21 e0       	ldi	r18, 0x01	; 1
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	2c 0f       	add	r18, r28
     71c:	3d 1f       	adc	r19, r29
     71e:	e2 0f       	add	r30, r18
     720:	f3 1f       	adc	r31, r19
     722:	df 01       	movw	r26, r30
     724:	53 2c       	mov	r5, r3
     726:	1d 92       	st	X+, r1
     728:	5a 94       	dec	r5
     72a:	e9 f7       	brne	.-6      	; 0x726 <modbusWrite()+0x11c>
     72c:	fc 01       	movw	r30, r24
     72e:	e0 5c       	subi	r30, 0xC0	; 192
     730:	ff 4f       	sbci	r31, 0xFF	; 255
     732:	e2 0f       	add	r30, r18
     734:	f3 1f       	adc	r31, r19
     736:	df 01       	movw	r26, r30
     738:	53 2c       	mov	r5, r3
     73a:	1d 92       	st	X+, r1
     73c:	5a 94       	dec	r5
     73e:	e9 f7       	brne	.-6      	; 0x73a <modbusWrite()+0x130>
     740:	8c 59       	subi	r24, 0x9C	; 156
     742:	9f 4f       	sbci	r25, 0xFF	; 255
     744:	f9 01       	movw	r30, r18
     746:	e8 0f       	add	r30, r24
     748:	f9 1f       	adc	r31, r25
     74a:	df 01       	movw	r26, r30
     74c:	50 e1       	ldi	r21, 0x10	; 16
     74e:	55 2e       	mov	r5, r21
     750:	1d 92       	st	X+, r1
     752:	5a 94       	dec	r5
     754:	e9 f7       	brne	.-6      	; 0x750 <modbusWrite()+0x146>
     756:	4c 9c       	mul	r4, r12
     758:	c0 01       	movw	r24, r0
     75a:	4d 9c       	mul	r4, r13
     75c:	90 0d       	add	r25, r0
     75e:	11 24       	eor	r1, r1
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	2c 0f       	add	r18, r28
     766:	3d 1f       	adc	r19, r29
     768:	82 0f       	add	r24, r18
     76a:	93 1f       	adc	r25, r19
     76c:	fc 01       	movw	r30, r24
     76e:	e8 58       	subi	r30, 0x88	; 136
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	11 82       	std	Z+1, r1	; 0x01
     774:	10 82       	st	Z, r1
     776:	32 96       	adiw	r30, 0x02	; 2
     778:	11 82       	std	Z+1, r1	; 0x01
     77a:	10 82       	st	Z, r1
     77c:	84 58       	subi	r24, 0x84	; 132
     77e:	9f 4f       	sbci	r25, 0xFF	; 255
     780:	dc 01       	movw	r26, r24
     782:	1d 92       	st	X+, r1
     784:	1c 92       	st	X, r1
_Z11modbusWritev():
     786:	f4 01       	movw	r30, r8
     788:	31 96       	adiw	r30, 0x01	; 1
     78a:	4f 01       	movw	r8, r30
     78c:	cb 5f       	subi	r28, 0xFB	; 251
     78e:	d0 4f       	sbci	r29, 0xF0	; 240
     790:	f8 81       	ld	r31, Y
     792:	c5 50       	subi	r28, 0x05	; 5
     794:	df 40       	sbci	r29, 0x0F	; 15
     796:	f1 30       	cpi	r31, 0x01	; 1
     798:	b1 f5       	brne	.+108    	; 0x806 <modbusWrite()+0x1fc>
     79a:	4c 9c       	mul	r4, r12
     79c:	c0 01       	movw	r24, r0
     79e:	4d 9c       	mul	r4, r13
     7a0:	90 0d       	add	r25, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	2c 0f       	add	r18, r28
     7aa:	3d 1f       	adc	r19, r29
     7ac:	82 0f       	add	r24, r18
     7ae:	93 1f       	adc	r25, r19
     7b0:	fc 01       	movw	r30, r24
     7b2:	e6 58       	subi	r30, 0x86	; 134
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	20 81       	ld	r18, Z
     7b8:	31 81       	ldd	r19, Z+1	; 0x01
     7ba:	a9 01       	movw	r20, r18
     7bc:	4f 5f       	subi	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	51 83       	std	Z+1, r21	; 0x01
     7c2:	40 83       	st	Z, r20
     7c4:	2c 9c       	mul	r2, r12
     7c6:	f0 01       	movw	r30, r0
     7c8:	2d 9c       	mul	r2, r13
     7ca:	f0 0d       	add	r31, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	e2 0f       	add	r30, r18
     7d0:	f3 1f       	adc	r31, r19
     7d2:	70 96       	adiw	r30, 0x10	; 16
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	a1 e0       	ldi	r26, 0x01	; 1
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	ac 0f       	add	r26, r28
     7de:	bd 1f       	adc	r27, r29
     7e0:	ea 0f       	add	r30, r26
     7e2:	fb 1f       	adc	r31, r27
     7e4:	f1 82       	std	Z+1, r15	; 0x01
     7e6:	e0 82       	st	Z, r14
     7e8:	f8 01       	movw	r30, r16
     7ea:	20 81       	ld	r18, Z
     7ec:	e8 0e       	add	r14, r24
     7ee:	f9 1e       	adc	r15, r25
     7f0:	f7 01       	movw	r30, r14
     7f2:	ec 59       	subi	r30, 0x9C	; 156
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	20 83       	st	Z, r18
     7f8:	bf ef       	ldi	r27, 0xFF	; 255
     7fa:	ab 1a       	sub	r10, r27
     7fc:	bb 0a       	sbc	r11, r27
     7fe:	e6 e0       	ldi	r30, 0x06	; 6
     800:	6e 0e       	add	r6, r30
     802:	71 1c       	adc	r7, r1
     804:	41 cf       	rjmp	.-382    	; 0x688 <modbusWrite()+0x7e>
     806:	4c 9c       	mul	r4, r12
     808:	f0 01       	movw	r30, r0
     80a:	4d 9c       	mul	r4, r13
     80c:	f0 0d       	add	r31, r0
     80e:	11 24       	eor	r1, r1
     810:	21 e0       	ldi	r18, 0x01	; 1
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	2c 0f       	add	r18, r28
     816:	3d 1f       	adc	r19, r29
     818:	e2 0f       	add	r30, r18
     81a:	f3 1f       	adc	r31, r19
     81c:	e4 58       	subi	r30, 0x84	; 132
     81e:	ff 4f       	sbci	r31, 0xFF	; 255
     820:	a0 81       	ld	r26, Z
     822:	b1 81       	ldd	r27, Z+1	; 0x01
     824:	9d 01       	movw	r18, r26
     826:	2f 5f       	subi	r18, 0xFF	; 255
     828:	3f 4f       	sbci	r19, 0xFF	; 255
     82a:	31 83       	std	Z+1, r19	; 0x01
     82c:	20 83       	st	Z, r18
     82e:	2c 9c       	mul	r2, r12
     830:	f0 01       	movw	r30, r0
     832:	2d 9c       	mul	r2, r13
     834:	f0 0d       	add	r31, r0
     836:	11 24       	eor	r1, r1
     838:	ae 0f       	add	r26, r30
     83a:	bf 1f       	adc	r27, r31
     83c:	aa 0f       	add	r26, r26
     83e:	bb 1f       	adc	r27, r27
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	8c 0f       	add	r24, r28
     846:	9d 1f       	adc	r25, r29
     848:	a8 0f       	add	r26, r24
     84a:	b9 1f       	adc	r27, r25
     84c:	ed 92       	st	X+, r14
     84e:	fc 92       	st	X, r15
     850:	d8 01       	movw	r26, r16
     852:	11 97       	sbiw	r26, 0x01	; 1
     854:	8c 91       	ld	r24, X
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	98 2f       	mov	r25, r24
     85a:	88 27       	eor	r24, r24
     85c:	ee 0d       	add	r30, r14
     85e:	ff 1d       	adc	r31, r15
     860:	b0 96       	adiw	r30, 0x20	; 32
     862:	ee 0f       	add	r30, r30
     864:	ff 1f       	adc	r31, r31
     866:	a1 e0       	ldi	r26, 0x01	; 1
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	ac 0f       	add	r26, r28
     86c:	bd 1f       	adc	r27, r29
     86e:	ea 0f       	add	r30, r26
     870:	fb 1f       	adc	r31, r27
     872:	91 83       	std	Z+1, r25	; 0x01
     874:	80 83       	st	Z, r24
     876:	d8 01       	movw	r26, r16
     878:	2c 91       	ld	r18, X
     87a:	82 2b       	or	r24, r18
     87c:	91 83       	std	Z+1, r25	; 0x01
     87e:	80 83       	st	Z, r24
     880:	bb cf       	rjmp	.-138    	; 0x7f8 <modbusWrite()+0x1ee>
     882:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
     886:	8e 01       	movw	r16, r28
     888:	0b 53       	subi	r16, 0x3B	; 59
     88a:	11 4f       	sbci	r17, 0xF1	; 241
     88c:	18 01       	movw	r2, r16
     88e:	cf 5f       	subi	r28, 0xFF	; 255
     890:	d0 4f       	sbci	r29, 0xF0	; 240
     892:	19 83       	std	Y+1, r17	; 0x01
     894:	08 83       	st	Y, r16
     896:	c1 50       	subi	r28, 0x01	; 1
     898:	df 40       	sbci	r29, 0x0F	; 15
     89a:	8e e7       	ldi	r24, 0x7E	; 126
     89c:	f8 2e       	mov	r15, r24
     89e:	03 ee       	ldi	r16, 0xE3	; 227
     8a0:	1e e0       	ldi	r17, 0x0E	; 14
     8a2:	0c 0f       	add	r16, r28
     8a4:	1d 1f       	adc	r17, r29
     8a6:	0a 5f       	subi	r16, 0xFA	; 250
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	c5 5f       	subi	r28, 0xF5	; 245
     8ac:	d0 4f       	sbci	r29, 0xF0	; 240
     8ae:	19 83       	std	Y+1, r17	; 0x01
     8b0:	08 83       	st	Y, r16
     8b2:	cb 50       	subi	r28, 0x0B	; 11
     8b4:	df 40       	sbci	r29, 0x0F	; 15
     8b6:	cf 5f       	subi	r28, 0xFF	; 255
     8b8:	d0 4f       	sbci	r29, 0xF0	; 240
     8ba:	e8 81       	ld	r30, Y
     8bc:	f9 81       	ldd	r31, Y+1	; 0x01
     8be:	c1 50       	subi	r28, 0x01	; 1
     8c0:	df 40       	sbci	r29, 0x0F	; 15
     8c2:	01 90       	ld	r0, Z+
     8c4:	00 20       	and	r0, r0
     8c6:	e9 f7       	brne	.-6      	; 0x8c2 <modbusWrite()+0x2b8>
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	cf 5f       	subi	r28, 0xFF	; 255
     8cc:	d0 4f       	sbci	r29, 0xF0	; 240
     8ce:	48 80       	ld	r4, Y
     8d0:	59 80       	ldd	r5, Y+1	; 0x01
     8d2:	c1 50       	subi	r28, 0x01	; 1
     8d4:	df 40       	sbci	r29, 0x0F	; 15
     8d6:	e4 19       	sub	r30, r4
     8d8:	f5 09       	sbc	r31, r5
     8da:	c1 01       	movw	r24, r2
     8dc:	cd 5f       	subi	r28, 0xFD	; 253
     8de:	d0 4f       	sbci	r29, 0xF0	; 240
     8e0:	a8 80       	ld	r10, Y
     8e2:	b9 80       	ldd	r11, Y+1	; 0x01
     8e4:	c3 50       	subi	r28, 0x03	; 3
     8e6:	df 40       	sbci	r29, 0x0F	; 15
     8e8:	8a 19       	sub	r24, r10
     8ea:	9b 09       	sbc	r25, r11
     8ec:	8e 17       	cp	r24, r30
     8ee:	9f 07       	cpc	r25, r31
     8f0:	08 f0       	brcs	.+2      	; 0x8f4 <modbusWrite()+0x2ea>
     8f2:	e9 c2       	rjmp	.+1490   	; 0xec6 <modbusWrite()+0x8bc>
     8f4:	d1 01       	movw	r26, r2
     8f6:	ec 90       	ld	r14, X
     8f8:	4e 2d       	mov	r20, r14
     8fa:	0e 2c       	mov	r0, r14
     8fc:	00 0c       	add	r0, r0
     8fe:	55 0b       	sbc	r21, r21
     900:	f4 9e       	mul	r15, r20
     902:	f0 01       	movw	r30, r0
     904:	f5 9e       	mul	r15, r21
     906:	f0 0d       	add	r31, r0
     908:	11 24       	eor	r1, r1
     90a:	44 24       	eor	r4, r4
     90c:	43 94       	inc	r4
     90e:	51 2c       	mov	r5, r1
     910:	4c 0e       	add	r4, r28
     912:	5d 1e       	adc	r5, r29
     914:	e4 0d       	add	r30, r4
     916:	f5 1d       	adc	r31, r5
     918:	df 01       	movw	r26, r30
     91a:	a6 58       	subi	r26, 0x86	; 134
     91c:	bf 4f       	sbci	r27, 0xFF	; 255
     91e:	6d 91       	ld	r22, X+
     920:	7c 91       	ld	r23, X
     922:	11 97       	sbiw	r26, 0x01	; 1
     924:	0e 2d       	mov	r16, r14
     926:	1e e7       	ldi	r17, 0x7E	; 126
     928:	01 02       	muls	r16, r17
     92a:	20 01       	movw	r4, r0
     92c:	11 24       	eor	r1, r1
     92e:	16 16       	cp	r1, r22
     930:	17 06       	cpc	r1, r23
     932:	8c f5       	brge	.+98     	; 0x996 <modbusWrite()+0x38c>
     934:	80 a1       	ldd	r24, Z+32	; 0x20
     936:	91 a1       	ldd	r25, Z+33	; 0x21
     938:	16 97       	sbiw	r26, 0x06	; 6
     93a:	11 96       	adiw	r26, 0x01	; 1
     93c:	9c 93       	st	X, r25
     93e:	8e 93       	st	-X, r24
     940:	ea 58       	subi	r30, 0x8A	; 138
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	91 83       	std	Z+1, r25	; 0x01
     946:	80 83       	st	Z, r24
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	6f 01       	movw	r12, r30
     94e:	68 17       	cp	r22, r24
     950:	79 07       	cpc	r23, r25
     952:	09 f1       	breq	.+66     	; 0x996 <modbusWrite()+0x38c>
     954:	9c 01       	movw	r18, r24
     956:	22 0f       	add	r18, r18
     958:	33 1f       	adc	r19, r19
     95a:	24 0d       	add	r18, r4
     95c:	35 1d       	adc	r19, r5
     95e:	e1 e0       	ldi	r30, 0x01	; 1
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	ec 0f       	add	r30, r28
     964:	fd 1f       	adc	r31, r29
     966:	2e 0f       	add	r18, r30
     968:	3f 1f       	adc	r19, r31
     96a:	f9 01       	movw	r30, r18
     96c:	20 a1       	ldd	r18, Z+32	; 0x20
     96e:	31 a1       	ldd	r19, Z+33	; 0x21
     970:	0d 91       	ld	r16, X+
     972:	1c 91       	ld	r17, X
     974:	11 97       	sbiw	r26, 0x01	; 1
     976:	20 17       	cp	r18, r16
     978:	31 07       	cpc	r19, r17
     97a:	18 f4       	brcc	.+6      	; 0x982 <modbusWrite()+0x378>
     97c:	11 96       	adiw	r26, 0x01	; 1
     97e:	3c 93       	st	X, r19
     980:	2e 93       	st	-X, r18
     982:	f6 01       	movw	r30, r12
     984:	00 81       	ld	r16, Z
     986:	11 81       	ldd	r17, Z+1	; 0x01
     988:	02 17       	cp	r16, r18
     98a:	13 07       	cpc	r17, r19
     98c:	10 f4       	brcc	.+4      	; 0x992 <modbusWrite()+0x388>
     98e:	31 83       	std	Z+1, r19	; 0x01
     990:	20 83       	st	Z, r18
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	dc cf       	rjmp	.-72     	; 0x94e <modbusWrite()+0x344>
     996:	f4 9e       	mul	r15, r20
     998:	f0 01       	movw	r30, r0
     99a:	f5 9e       	mul	r15, r21
     99c:	f0 0d       	add	r31, r0
     99e:	11 24       	eor	r1, r1
     9a0:	aa 24       	eor	r10, r10
     9a2:	a3 94       	inc	r10
     9a4:	b1 2c       	mov	r11, r1
     9a6:	ac 0e       	add	r10, r28
     9a8:	bd 1e       	adc	r11, r29
     9aa:	ea 0d       	add	r30, r10
     9ac:	fb 1d       	adc	r31, r11
     9ae:	df 01       	movw	r26, r30
     9b0:	a4 58       	subi	r26, 0x84	; 132
     9b2:	bf 4f       	sbci	r27, 0xFF	; 255
     9b4:	0d 91       	ld	r16, X+
     9b6:	1c 91       	ld	r17, X
     9b8:	11 97       	sbiw	r26, 0x01	; 1
     9ba:	10 16       	cp	r1, r16
     9bc:	11 06       	cpc	r1, r17
     9be:	94 f5       	brge	.+100    	; 0xa24 <modbusWrite()+0x41a>
     9c0:	80 81       	ld	r24, Z
     9c2:	91 81       	ldd	r25, Z+1	; 0x01
     9c4:	5c 97       	sbiw	r26, 0x1c	; 28
     9c6:	11 96       	adiw	r26, 0x01	; 1
     9c8:	9c 93       	st	X, r25
     9ca:	8e 93       	st	-X, r24
     9cc:	ee 59       	subi	r30, 0x9E	; 158
     9ce:	ff 4f       	sbci	r31, 0xFF	; 255
     9d0:	91 83       	std	Z+1, r25	; 0x01
     9d2:	80 83       	st	Z, r24
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	5f 01       	movw	r10, r30
     9da:	08 17       	cp	r16, r24
     9dc:	19 07       	cpc	r17, r25
     9de:	11 f1       	breq	.+68     	; 0xa24 <modbusWrite()+0x41a>
     9e0:	9c 01       	movw	r18, r24
     9e2:	22 0f       	add	r18, r18
     9e4:	33 1f       	adc	r19, r19
     9e6:	24 0d       	add	r18, r4
     9e8:	35 1d       	adc	r19, r5
     9ea:	cc 24       	eor	r12, r12
     9ec:	c3 94       	inc	r12
     9ee:	d1 2c       	mov	r13, r1
     9f0:	cc 0e       	add	r12, r28
     9f2:	dd 1e       	adc	r13, r29
     9f4:	2c 0d       	add	r18, r12
     9f6:	3d 1d       	adc	r19, r13
     9f8:	f9 01       	movw	r30, r18
     9fa:	20 81       	ld	r18, Z
     9fc:	31 81       	ldd	r19, Z+1	; 0x01
     9fe:	cd 90       	ld	r12, X+
     a00:	dc 90       	ld	r13, X
     a02:	11 97       	sbiw	r26, 0x01	; 1
     a04:	2c 15       	cp	r18, r12
     a06:	3d 05       	cpc	r19, r13
     a08:	18 f4       	brcc	.+6      	; 0xa10 <modbusWrite()+0x406>
     a0a:	11 96       	adiw	r26, 0x01	; 1
     a0c:	3c 93       	st	X, r19
     a0e:	2e 93       	st	-X, r18
     a10:	f5 01       	movw	r30, r10
     a12:	c0 80       	ld	r12, Z
     a14:	d1 80       	ldd	r13, Z+1	; 0x01
     a16:	c2 16       	cp	r12, r18
     a18:	d3 06       	cpc	r13, r19
     a1a:	10 f4       	brcc	.+4      	; 0xa20 <modbusWrite()+0x416>
     a1c:	31 83       	std	Z+1, r19	; 0x01
     a1e:	20 83       	st	Z, r18
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	db cf       	rjmp	.-74     	; 0x9da <modbusWrite()+0x3d0>
     a24:	f4 9e       	mul	r15, r20
     a26:	c0 01       	movw	r24, r0
     a28:	f5 9e       	mul	r15, r21
     a2a:	90 0d       	add	r25, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	aa 24       	eor	r10, r10
     a30:	a3 94       	inc	r10
     a32:	b1 2c       	mov	r11, r1
     a34:	ac 0e       	add	r10, r28
     a36:	bd 1e       	adc	r11, r29
     a38:	8a 0d       	add	r24, r10
     a3a:	9b 1d       	adc	r25, r11
     a3c:	fc 01       	movw	r30, r24
     a3e:	e8 58       	subi	r30, 0x88	; 136
     a40:	ff 4f       	sbci	r31, 0xFF	; 255
     a42:	11 82       	std	Z+1, r1	; 0x01
     a44:	10 82       	st	Z, r1
     a46:	dc 01       	movw	r26, r24
     a48:	aa 58       	subi	r26, 0x8A	; 138
     a4a:	bf 4f       	sbci	r27, 0xFF	; 255
     a4c:	cd 90       	ld	r12, X+
     a4e:	dc 90       	ld	r13, X
     a50:	11 97       	sbiw	r26, 0x01	; 1
     a52:	cb 5f       	subi	r28, 0xFB	; 251
     a54:	d0 4f       	sbci	r29, 0xF0	; 240
     a56:	d9 82       	std	Y+1, r13	; 0x01
     a58:	c8 82       	st	Y, r12
     a5a:	c5 50       	subi	r28, 0x05	; 5
     a5c:	df 40       	sbci	r29, 0x0F	; 15
     a5e:	12 97       	sbiw	r26, 0x02	; 2
     a60:	6d 90       	ld	r6, X+
     a62:	7c 90       	ld	r7, X
     a64:	46 01       	movw	r8, r12
     a66:	0f ef       	ldi	r16, 0xFF	; 255
     a68:	80 1a       	sub	r8, r16
     a6a:	90 0a       	sbc	r9, r16
     a6c:	86 18       	sub	r8, r6
     a6e:	97 08       	sbc	r9, r7
     a70:	ac ea       	ldi	r26, 0xAC	; 172
     a72:	a4 9f       	mul	r26, r20
     a74:	90 01       	movw	r18, r0
     a76:	a5 9f       	mul	r26, r21
     a78:	30 0d       	add	r19, r0
     a7a:	11 24       	eor	r1, r1
     a7c:	c7 5f       	subi	r28, 0xF7	; 247
     a7e:	d0 4f       	sbci	r29, 0xF0	; 240
     a80:	39 83       	std	Y+1, r19	; 0x01
     a82:	28 83       	st	Y, r18
     a84:	c9 50       	subi	r28, 0x09	; 9
     a86:	df 40       	sbci	r29, 0x0F	; 15
     a88:	93 01       	movw	r18, r6
     a8a:	b1 2c       	mov	r11, r1
     a8c:	a1 2c       	mov	r10, r1
     a8e:	cf 5e       	subi	r28, 0xEF	; 239
     a90:	d0 4f       	sbci	r29, 0xF0	; 240
     a92:	99 83       	std	Y+1, r25	; 0x01
     a94:	88 83       	st	Y, r24
     a96:	c1 51       	subi	r28, 0x11	; 17
     a98:	df 40       	sbci	r29, 0x0F	; 15
     a9a:	c7 5f       	subi	r28, 0xF7	; 247
     a9c:	d0 4f       	sbci	r29, 0xF0	; 240
     a9e:	08 81       	ld	r16, Y
     aa0:	19 81       	ldd	r17, Y+1	; 0x01
     aa2:	c9 50       	subi	r28, 0x09	; 9
     aa4:	df 40       	sbci	r29, 0x0F	; 15
     aa6:	00 5a       	subi	r16, 0xA0	; 160
     aa8:	1d 4f       	sbci	r17, 0xFD	; 253
     aaa:	cd 5e       	subi	r28, 0xED	; 237
     aac:	d0 4f       	sbci	r29, 0xF0	; 240
     aae:	19 83       	std	Y+1, r17	; 0x01
     ab0:	08 83       	st	Y, r16
     ab2:	c3 51       	subi	r28, 0x13	; 19
     ab4:	df 40       	sbci	r29, 0x0F	; 15
     ab6:	8a 14       	cp	r8, r10
     ab8:	9b 04       	cpc	r9, r11
     aba:	09 f4       	brne	.+2      	; 0xabe <modbusWrite()+0x4b4>
     abc:	96 c0       	rjmp	.+300    	; 0xbea <modbusWrite()+0x5e0>
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	00 e0       	ldi	r16, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	c9 5f       	subi	r28, 0xF9	; 249
     ac8:	d0 4f       	sbci	r29, 0xF0	; 240
     aca:	18 82       	st	Y, r1
     acc:	c7 50       	subi	r28, 0x07	; 7
     ace:	df 40       	sbci	r29, 0x0F	; 15
     ad0:	cf 5e       	subi	r28, 0xEF	; 239
     ad2:	d0 4f       	sbci	r29, 0xF0	; 240
     ad4:	c8 80       	ld	r12, Y
     ad6:	d9 80       	ldd	r13, Y+1	; 0x01
     ad8:	c1 51       	subi	r28, 0x11	; 17
     ada:	df 40       	sbci	r29, 0x0F	; 15
     adc:	c2 0e       	add	r12, r18
     ade:	d3 1e       	adc	r13, r19
     ae0:	d6 01       	movw	r26, r12
     ae2:	ac 59       	subi	r26, 0x9C	; 156
     ae4:	bf 4f       	sbci	r27, 0xFF	; 255
     ae6:	c3 5f       	subi	r28, 0xF3	; 243
     ae8:	d0 4f       	sbci	r29, 0xF0	; 240
     aea:	b9 83       	std	Y+1, r27	; 0x01
     aec:	a8 83       	st	Y, r26
     aee:	cd 50       	subi	r28, 0x0D	; 13
     af0:	df 40       	sbci	r29, 0x0F	; 15
     af2:	cd 5e       	subi	r28, 0xED	; 237
     af4:	d0 4f       	sbci	r29, 0xF0	; 240
     af6:	c8 80       	ld	r12, Y
     af8:	d9 80       	ldd	r13, Y+1	; 0x01
     afa:	c3 51       	subi	r28, 0x13	; 19
     afc:	df 40       	sbci	r29, 0x0F	; 15
     afe:	c2 0e       	add	r12, r18
     b00:	d3 1e       	adc	r13, r19
     b02:	d6 01       	movw	r26, r12
     b04:	a4 56       	subi	r26, 0x64	; 100
     b06:	bf 4f       	sbci	r27, 0xFF	; 255
     b08:	c1 5f       	subi	r28, 0xF1	; 241
     b0a:	d0 4f       	sbci	r29, 0xF0	; 240
     b0c:	b9 83       	std	Y+1, r27	; 0x01
     b0e:	a8 83       	st	Y, r26
     b10:	cf 50       	subi	r28, 0x0F	; 15
     b12:	df 40       	sbci	r29, 0x0F	; 15
     b14:	06 17       	cp	r16, r22
     b16:	17 07       	cpc	r17, r23
     b18:	0c f0       	brlt	.+2      	; 0xb1c <modbusWrite()+0x512>
     b1a:	42 c0       	rjmp	.+132    	; 0xba0 <modbusWrite()+0x596>
     b1c:	d8 01       	movw	r26, r16
     b1e:	aa 0f       	add	r26, r26
     b20:	bb 1f       	adc	r27, r27
     b22:	a4 0d       	add	r26, r4
     b24:	b5 1d       	adc	r27, r5
     b26:	cc 24       	eor	r12, r12
     b28:	c3 94       	inc	r12
     b2a:	d1 2c       	mov	r13, r1
     b2c:	cc 0e       	add	r12, r28
     b2e:	dd 1e       	adc	r13, r29
     b30:	ac 0d       	add	r26, r12
     b32:	bd 1d       	adc	r27, r13
     b34:	90 96       	adiw	r26, 0x20	; 32
     b36:	0d 90       	ld	r0, X+
     b38:	bc 91       	ld	r27, X
     b3a:	a0 2d       	mov	r26, r0
     b3c:	a2 17       	cp	r26, r18
     b3e:	b3 07       	cpc	r27, r19
     b40:	61 f5       	brne	.+88     	; 0xb9a <modbusWrite()+0x590>
     b42:	c3 5f       	subi	r28, 0xF3	; 243
     b44:	d0 4f       	sbci	r29, 0xF0	; 240
     b46:	a8 81       	ld	r26, Y
     b48:	b9 81       	ldd	r27, Y+1	; 0x01
     b4a:	cd 50       	subi	r28, 0x0D	; 13
     b4c:	df 40       	sbci	r29, 0x0F	; 15
     b4e:	bc 91       	ld	r27, X
     b50:	c9 5f       	subi	r28, 0xF9	; 249
     b52:	d0 4f       	sbci	r29, 0xF0	; 240
     b54:	b8 83       	st	Y, r27
     b56:	c7 50       	subi	r28, 0x07	; 7
     b58:	df 40       	sbci	r29, 0x0F	; 15
     b5a:	8b 2b       	or	r24, r27
     b5c:	6c 01       	movw	r12, r24
     b5e:	0a 2c       	mov	r0, r10
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <modbusWrite()+0x55c>
     b62:	cc 0c       	add	r12, r12
     b64:	dd 1c       	adc	r13, r13
     b66:	0a 94       	dec	r0
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <modbusWrite()+0x558>
     b6a:	a0 81       	ld	r26, Z
     b6c:	b1 81       	ldd	r27, Z+1	; 0x01
     b6e:	ac 29       	or	r26, r12
     b70:	bd 29       	or	r27, r13
     b72:	b1 83       	std	Z+1, r27	; 0x01
     b74:	a0 83       	st	Z, r26
     b76:	c9 5f       	subi	r28, 0xF9	; 249
     b78:	d0 4f       	sbci	r29, 0xF0	; 240
     b7a:	c8 80       	ld	r12, Y
     b7c:	c7 50       	subi	r28, 0x07	; 7
     b7e:	df 40       	sbci	r29, 0x0F	; 15
     b80:	c1 5f       	subi	r28, 0xF1	; 241
     b82:	d0 4f       	sbci	r29, 0xF0	; 240
     b84:	a8 81       	ld	r26, Y
     b86:	b9 81       	ldd	r27, Y+1	; 0x01
     b88:	cf 50       	subi	r28, 0x0F	; 15
     b8a:	df 40       	sbci	r29, 0x0F	; 15
     b8c:	cc 92       	st	X, r12
     b8e:	a1 e0       	ldi	r26, 0x01	; 1
     b90:	c9 5f       	subi	r28, 0xF9	; 249
     b92:	d0 4f       	sbci	r29, 0xF0	; 240
     b94:	a8 83       	st	Y, r26
     b96:	c7 50       	subi	r28, 0x07	; 7
     b98:	df 40       	sbci	r29, 0x0F	; 15
     b9a:	0f 5f       	subi	r16, 0xFF	; 255
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	ba cf       	rjmp	.-140    	; 0xb14 <modbusWrite()+0x50a>
     ba0:	c9 5f       	subi	r28, 0xF9	; 249
     ba2:	d0 4f       	sbci	r29, 0xF0	; 240
     ba4:	b8 81       	ld	r27, Y
     ba6:	c7 50       	subi	r28, 0x07	; 7
     ba8:	df 40       	sbci	r29, 0x0F	; 15
     baa:	b1 11       	cpse	r27, r1
     bac:	18 c0       	rjmp	.+48     	; 0xbde <modbusWrite()+0x5d4>
     bae:	c7 5f       	subi	r28, 0xF7	; 247
     bb0:	d0 4f       	sbci	r29, 0xF0	; 240
     bb2:	a8 81       	ld	r26, Y
     bb4:	b9 81       	ldd	r27, Y+1	; 0x01
     bb6:	c9 50       	subi	r28, 0x09	; 9
     bb8:	df 40       	sbci	r29, 0x0F	; 15
     bba:	a2 0f       	add	r26, r18
     bbc:	b3 1f       	adc	r27, r19
     bbe:	a4 50       	subi	r26, 0x04	; 4
     bc0:	bd 4f       	sbci	r27, 0xFD	; 253
     bc2:	ac 91       	ld	r26, X
     bc4:	8a 2b       	or	r24, r26
     bc6:	0a 2c       	mov	r0, r10
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <modbusWrite()+0x5c4>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <modbusWrite()+0x5c0>
     bd2:	a0 81       	ld	r26, Z
     bd4:	b1 81       	ldd	r27, Z+1	; 0x01
     bd6:	8a 2b       	or	r24, r26
     bd8:	9b 2b       	or	r25, r27
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	80 83       	st	Z, r24
     bde:	0f ef       	ldi	r16, 0xFF	; 255
     be0:	a0 1a       	sub	r10, r16
     be2:	b0 0a       	sbc	r11, r16
     be4:	2f 5f       	subi	r18, 0xFF	; 255
     be6:	3f 4f       	sbci	r19, 0xFF	; 255
     be8:	66 cf       	rjmp	.-308    	; 0xab6 <modbusWrite()+0x4ac>
     bea:	16 16       	cp	r1, r22
     bec:	17 06       	cpc	r1, r23
     bee:	0c f0       	brlt	.+2      	; 0xbf2 <modbusWrite()+0x5e8>
     bf0:	6f c0       	rjmp	.+222    	; 0xcd0 <modbusWrite()+0x6c6>
     bf2:	88 e1       	ldi	r24, 0x18	; 24
     bf4:	c5 5f       	subi	r28, 0xF5	; 245
     bf6:	d0 4f       	sbci	r29, 0xF0	; 240
     bf8:	a8 81       	ld	r26, Y
     bfa:	b9 81       	ldd	r27, Y+1	; 0x01
     bfc:	cb 50       	subi	r28, 0x0B	; 11
     bfe:	df 40       	sbci	r29, 0x0F	; 15
     c00:	1d 92       	st	X+, r1
     c02:	8a 95       	dec	r24
     c04:	e9 f7       	brne	.-6      	; 0xc00 <modbusWrite()+0x5f6>
     c06:	cd 51       	subi	r28, 0x1D	; 29
     c08:	d1 4f       	sbci	r29, 0xF1	; 241
     c0a:	e8 82       	st	Y, r14
     c0c:	c3 5e       	subi	r28, 0xE3	; 227
     c0e:	de 40       	sbci	r29, 0x0E	; 14
     c10:	8f e0       	ldi	r24, 0x0F	; 15
     c12:	cc 51       	subi	r28, 0x1C	; 28
     c14:	d1 4f       	sbci	r29, 0xF1	; 241
     c16:	88 83       	st	Y, r24
     c18:	c4 5e       	subi	r28, 0xE4	; 228
     c1a:	de 40       	sbci	r29, 0x0E	; 14
     c1c:	cb 51       	subi	r28, 0x1B	; 27
     c1e:	d1 4f       	sbci	r29, 0xF1	; 241
     c20:	78 82       	st	Y, r7
     c22:	c5 5e       	subi	r28, 0xE5	; 229
     c24:	de 40       	sbci	r29, 0x0E	; 14
     c26:	ca 51       	subi	r28, 0x1A	; 26
     c28:	d1 4f       	sbci	r29, 0xF1	; 241
     c2a:	68 82       	st	Y, r6
     c2c:	c6 5e       	subi	r28, 0xE6	; 230
     c2e:	de 40       	sbci	r29, 0x0E	; 14
     c30:	c9 51       	subi	r28, 0x19	; 25
     c32:	d1 4f       	sbci	r29, 0xF1	; 241
     c34:	98 82       	st	Y, r9
     c36:	c7 5e       	subi	r28, 0xE7	; 231
     c38:	de 40       	sbci	r29, 0x0E	; 14
     c3a:	cb 5f       	subi	r28, 0xFB	; 251
     c3c:	d0 4f       	sbci	r29, 0xF0	; 240
     c3e:	88 81       	ld	r24, Y
     c40:	c5 50       	subi	r28, 0x05	; 5
     c42:	df 40       	sbci	r29, 0x0F	; 15
     c44:	8f 5f       	subi	r24, 0xFF	; 255
     c46:	86 19       	sub	r24, r6
     c48:	c8 51       	subi	r28, 0x18	; 24
     c4a:	d1 4f       	sbci	r29, 0xF1	; 241
     c4c:	88 83       	st	Y, r24
     c4e:	c8 5e       	subi	r28, 0xE8	; 232
     c50:	de 40       	sbci	r29, 0x0E	; 14
     c52:	f4 9e       	mul	r15, r20
     c54:	f0 01       	movw	r30, r0
     c56:	f5 9e       	mul	r15, r21
     c58:	f0 0d       	add	r31, r0
     c5a:	11 24       	eor	r1, r1
     c5c:	44 24       	eor	r4, r4
     c5e:	43 94       	inc	r4
     c60:	51 2c       	mov	r5, r1
     c62:	4c 0e       	add	r4, r28
     c64:	5d 1e       	adc	r5, r29
     c66:	e4 0d       	add	r30, r4
     c68:	f5 1d       	adc	r31, r5
     c6a:	e8 58       	subi	r30, 0x88	; 136
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	80 81       	ld	r24, Z
     c70:	91 81       	ldd	r25, Z+1	; 0x01
     c72:	09 e0       	ldi	r16, 0x09	; 9
     c74:	80 16       	cp	r8, r16
     c76:	91 04       	cpc	r9, r1
     c78:	08 f4       	brcc	.+2      	; 0xc7c <modbusWrite()+0x672>
     c7a:	fe c0       	rjmp	.+508    	; 0xe78 <modbusWrite()+0x86e>
     c7c:	22 e0       	ldi	r18, 0x02	; 2
     c7e:	c7 51       	subi	r28, 0x17	; 23
     c80:	d1 4f       	sbci	r29, 0xF1	; 241
     c82:	28 83       	st	Y, r18
     c84:	c9 5e       	subi	r28, 0xE9	; 233
     c86:	de 40       	sbci	r29, 0x0E	; 14
     c88:	c6 51       	subi	r28, 0x16	; 22
     c8a:	d1 4f       	sbci	r29, 0xF1	; 241
     c8c:	88 83       	st	Y, r24
     c8e:	ca 5e       	subi	r28, 0xEA	; 234
     c90:	de 40       	sbci	r29, 0x0E	; 14
     c92:	c5 51       	subi	r28, 0x15	; 21
     c94:	d1 4f       	sbci	r29, 0xF1	; 241
     c96:	98 83       	st	Y, r25
     c98:	cb 5e       	subi	r28, 0xEB	; 235
     c9a:	de 40       	sbci	r29, 0x0E	; 14
     c9c:	09 e0       	ldi	r16, 0x09	; 9
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	b8 01       	movw	r22, r16
     ca2:	ce 01       	movw	r24, r28
     ca4:	8d 51       	subi	r24, 0x1D	; 29
     ca6:	91 4f       	sbci	r25, 0xF1	; 241
     ca8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
     cac:	e3 ee       	ldi	r30, 0xE3	; 227
     cae:	fe e0       	ldi	r31, 0x0E	; 14
     cb0:	ec 0f       	add	r30, r28
     cb2:	fd 1f       	adc	r31, r29
     cb4:	e0 0f       	add	r30, r16
     cb6:	f1 1f       	adc	r31, r17
     cb8:	80 83       	st	Z, r24
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	a8 01       	movw	r20, r16
     cbe:	4e 5f       	subi	r20, 0xFE	; 254
     cc0:	5f 4f       	sbci	r21, 0xFF	; 255
     cc2:	be 01       	movw	r22, r28
     cc4:	6d 51       	subi	r22, 0x1D	; 29
     cc6:	71 4f       	sbci	r23, 0xF1	; 241
     cc8:	89 e9       	ldi	r24, 0x99	; 153
     cca:	97 e1       	ldi	r25, 0x17	; 23
     ccc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Print::write(char const*, unsigned int)>
     cd0:	d1 01       	movw	r26, r2
     cd2:	1d 91       	ld	r17, X+
     cd4:	1d 01       	movw	r2, r26
     cd6:	61 2f       	mov	r22, r17
     cd8:	01 2e       	mov	r0, r17
     cda:	00 0c       	add	r0, r0
     cdc:	77 0b       	sbc	r23, r23
     cde:	f6 9e       	mul	r15, r22
     ce0:	90 01       	movw	r18, r0
     ce2:	f7 9e       	mul	r15, r23
     ce4:	30 0d       	add	r19, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	e1 e0       	ldi	r30, 0x01	; 1
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	ec 0f       	add	r30, r28
     cee:	fd 1f       	adc	r31, r29
     cf0:	2e 0f       	add	r18, r30
     cf2:	3f 1f       	adc	r19, r31
     cf4:	d9 01       	movw	r26, r18
     cf6:	a4 58       	subi	r26, 0x84	; 132
     cf8:	bf 4f       	sbci	r27, 0xFF	; 255
     cfa:	4d 90       	ld	r4, X+
     cfc:	5c 90       	ld	r5, X
     cfe:	cb 5f       	subi	r28, 0xFB	; 251
     d00:	d0 4f       	sbci	r29, 0xF0	; 240
     d02:	59 82       	std	Y+1, r5	; 0x01
     d04:	48 82       	st	Y, r4
     d06:	c5 50       	subi	r28, 0x05	; 5
     d08:	df 40       	sbci	r29, 0x0F	; 15
     d0a:	14 14       	cp	r1, r4
     d0c:	15 04       	cpc	r1, r5
     d0e:	0c f0       	brlt	.+2      	; 0xd12 <modbusWrite()+0x708>
     d10:	d2 cd       	rjmp	.-1116   	; 0x8b6 <modbusWrite()+0x2ac>
     d12:	88 e1       	ldi	r24, 0x18	; 24
     d14:	c5 5f       	subi	r28, 0xF5	; 245
     d16:	d0 4f       	sbci	r29, 0xF0	; 240
     d18:	a8 81       	ld	r26, Y
     d1a:	b9 81       	ldd	r27, Y+1	; 0x01
     d1c:	cb 50       	subi	r28, 0x0B	; 11
     d1e:	df 40       	sbci	r29, 0x0F	; 15
     d20:	1d 92       	st	X+, r1
     d22:	8a 95       	dec	r24
     d24:	e9 f7       	brne	.-6      	; 0xd20 <modbusWrite()+0x716>
     d26:	cd 51       	subi	r28, 0x1D	; 29
     d28:	d1 4f       	sbci	r29, 0xF1	; 241
     d2a:	18 83       	st	Y, r17
     d2c:	c3 5e       	subi	r28, 0xE3	; 227
     d2e:	de 40       	sbci	r29, 0x0E	; 14
     d30:	80 e1       	ldi	r24, 0x10	; 16
     d32:	cc 51       	subi	r28, 0x1C	; 28
     d34:	d1 4f       	sbci	r29, 0xF1	; 241
     d36:	88 83       	st	Y, r24
     d38:	c4 5e       	subi	r28, 0xE4	; 228
     d3a:	de 40       	sbci	r29, 0x0E	; 14
     d3c:	c9 01       	movw	r24, r18
     d3e:	80 5a       	subi	r24, 0xA0	; 160
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	91 81       	ldd	r25, Z+1	; 0x01
     d48:	cb 51       	subi	r28, 0x1B	; 27
     d4a:	d1 4f       	sbci	r29, 0xF1	; 241
     d4c:	98 83       	st	Y, r25
     d4e:	c5 5e       	subi	r28, 0xE5	; 229
     d50:	de 40       	sbci	r29, 0x0E	; 14
     d52:	ca 51       	subi	r28, 0x1A	; 26
     d54:	d1 4f       	sbci	r29, 0xF1	; 241
     d56:	88 83       	st	Y, r24
     d58:	c6 5e       	subi	r28, 0xE6	; 230
     d5a:	de 40       	sbci	r29, 0x0E	; 14
     d5c:	2e 59       	subi	r18, 0x9E	; 158
     d5e:	3f 4f       	sbci	r19, 0xFF	; 255
     d60:	d9 01       	movw	r26, r18
     d62:	4d 91       	ld	r20, X+
     d64:	5c 91       	ld	r21, X
     d66:	9a 01       	movw	r18, r20
     d68:	2f 5f       	subi	r18, 0xFF	; 255
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	28 1b       	sub	r18, r24
     d6e:	39 0b       	sbc	r19, r25
     d70:	c9 51       	subi	r28, 0x19	; 25
     d72:	d1 4f       	sbci	r29, 0xF1	; 241
     d74:	38 83       	st	Y, r19
     d76:	c7 5e       	subi	r28, 0xE7	; 231
     d78:	de 40       	sbci	r29, 0x0E	; 14
     d7a:	4f 5f       	subi	r20, 0xFF	; 255
     d7c:	48 1b       	sub	r20, r24
     d7e:	c8 51       	subi	r28, 0x18	; 24
     d80:	d1 4f       	sbci	r29, 0xF1	; 241
     d82:	48 83       	st	Y, r20
     d84:	c8 5e       	subi	r28, 0xE8	; 232
     d86:	de 40       	sbci	r29, 0x0E	; 14
     d88:	42 2f       	mov	r20, r18
     d8a:	44 0f       	add	r20, r20
     d8c:	c7 51       	subi	r28, 0x17	; 23
     d8e:	d1 4f       	sbci	r29, 0xF1	; 241
     d90:	48 83       	st	Y, r20
     d92:	c9 5e       	subi	r28, 0xE9	; 233
     d94:	de 40       	sbci	r29, 0x0E	; 14
     d96:	bf 2d       	mov	r27, r15
     d98:	1b 02       	muls	r17, r27
     d9a:	40 01       	movw	r8, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	3c 01       	movw	r6, r24
     da0:	e6 e5       	ldi	r30, 0x56	; 86
     da2:	1e 02       	muls	r17, r30
     da4:	60 0c       	add	r6, r0
     da6:	71 1c       	adc	r7, r1
     da8:	11 24       	eor	r1, r1
     daa:	66 0c       	add	r6, r6
     dac:	77 1c       	adc	r7, r7
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	07 e0       	ldi	r16, 0x07	; 7
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	ef e3       	ldi	r30, 0x3F	; 63
     db8:	e6 9f       	mul	r30, r22
     dba:	60 01       	movw	r12, r0
     dbc:	e7 9f       	mul	r30, r23
     dbe:	d0 0c       	add	r13, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	42 17       	cp	r20, r18
     dc4:	53 07       	cpc	r21, r19
     dc6:	09 f4       	brne	.+2      	; 0xdca <modbusWrite()+0x7c0>
     dc8:	65 c0       	rjmp	.+202    	; 0xe94 <modbusWrite()+0x88a>
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	e1 2c       	mov	r14, r1
     dd0:	f6 01       	movw	r30, r12
     dd2:	e8 0f       	add	r30, r24
     dd4:	f9 1f       	adc	r31, r25
     dd6:	b0 96       	adiw	r30, 0x20	; 32
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	44 24       	eor	r4, r4
     dde:	43 94       	inc	r4
     de0:	51 2c       	mov	r5, r1
     de2:	4c 0e       	add	r4, r28
     de4:	5d 1e       	adc	r5, r29
     de6:	e4 0d       	add	r30, r4
     de8:	f5 1d       	adc	r31, r5
     dea:	5b 01       	movw	r10, r22
     dec:	aa 0c       	add	r10, r10
     dee:	bb 1c       	adc	r11, r11
     df0:	a8 0c       	add	r10, r8
     df2:	b9 1c       	adc	r11, r9
     df4:	a1 e0       	ldi	r26, 0x01	; 1
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	ac 0f       	add	r26, r28
     dfa:	bd 1f       	adc	r27, r29
     dfc:	aa 0e       	add	r10, r26
     dfe:	bb 1e       	adc	r11, r27
     e00:	d5 01       	movw	r26, r10
     e02:	ad 90       	ld	r10, X+
     e04:	bc 90       	ld	r11, X
     e06:	a8 16       	cp	r10, r24
     e08:	b9 06       	cpc	r11, r25
     e0a:	91 f4       	brne	.+36     	; 0xe30 <modbusWrite()+0x826>
     e0c:	e0 80       	ld	r14, Z
     e0e:	51 80       	ldd	r5, Z+1	; 0x01
     e10:	a3 ee       	ldi	r26, 0xE3	; 227
     e12:	aa 2e       	mov	r10, r26
     e14:	ae e0       	ldi	r26, 0x0E	; 14
     e16:	ba 2e       	mov	r11, r26
     e18:	ac 0e       	add	r10, r28
     e1a:	bd 1e       	adc	r11, r29
     e1c:	a0 0e       	add	r10, r16
     e1e:	b1 1e       	adc	r11, r17
     e20:	d5 01       	movw	r26, r10
     e22:	5c 92       	st	X, r5
     e24:	11 96       	adiw	r26, 0x01	; 1
     e26:	ec 92       	st	X, r14
     e28:	0e 5f       	subi	r16, 0xFE	; 254
     e2a:	1f 4f       	sbci	r17, 0xFF	; 255
     e2c:	ee 24       	eor	r14, r14
     e2e:	e3 94       	inc	r14
     e30:	6f 5f       	subi	r22, 0xFF	; 255
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	cb 5f       	subi	r28, 0xFB	; 251
     e36:	d0 4f       	sbci	r29, 0xF0	; 240
     e38:	48 80       	ld	r4, Y
     e3a:	59 80       	ldd	r5, Y+1	; 0x01
     e3c:	c5 50       	subi	r28, 0x05	; 5
     e3e:	df 40       	sbci	r29, 0x0F	; 15
     e40:	46 16       	cp	r4, r22
     e42:	57 06       	cpc	r5, r23
     e44:	91 f6       	brne	.-92     	; 0xdea <modbusWrite()+0x7e0>
     e46:	e1 10       	cpse	r14, r1
     e48:	13 c0       	rjmp	.+38     	; 0xe70 <modbusWrite()+0x866>
     e4a:	fa 01       	movw	r30, r20
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	e6 0d       	add	r30, r6
     e52:	f7 1d       	adc	r31, r7
     e54:	e4 52       	subi	r30, 0x24	; 36
     e56:	fd 4f       	sbci	r31, 0xFD	; 253
     e58:	60 81       	ld	r22, Z
     e5a:	71 81       	ldd	r23, Z+1	; 0x01
     e5c:	e3 ee       	ldi	r30, 0xE3	; 227
     e5e:	fe e0       	ldi	r31, 0x0E	; 14
     e60:	ec 0f       	add	r30, r28
     e62:	fd 1f       	adc	r31, r29
     e64:	e0 0f       	add	r30, r16
     e66:	f1 1f       	adc	r31, r17
     e68:	70 83       	st	Z, r23
     e6a:	61 83       	std	Z+1, r22	; 0x01
     e6c:	0e 5f       	subi	r16, 0xFE	; 254
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	4f 5f       	subi	r20, 0xFF	; 255
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	a5 cf       	rjmp	.-182    	; 0xdc2 <modbusWrite()+0x7b8>
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	c7 51       	subi	r28, 0x17	; 23
     e7c:	d1 4f       	sbci	r29, 0xF1	; 241
     e7e:	98 83       	st	Y, r25
     e80:	c9 5e       	subi	r28, 0xE9	; 233
     e82:	de 40       	sbci	r29, 0x0E	; 14
     e84:	c6 51       	subi	r28, 0x16	; 22
     e86:	d1 4f       	sbci	r29, 0xF1	; 241
     e88:	88 83       	st	Y, r24
     e8a:	ca 5e       	subi	r28, 0xEA	; 234
     e8c:	de 40       	sbci	r29, 0x0E	; 14
     e8e:	08 e0       	ldi	r16, 0x08	; 8
     e90:	10 e0       	ldi	r17, 0x00	; 0
     e92:	06 cf       	rjmp	.-500    	; 0xca0 <modbusWrite()+0x696>
     e94:	b8 01       	movw	r22, r16
     e96:	ce 01       	movw	r24, r28
     e98:	8d 51       	subi	r24, 0x1D	; 29
     e9a:	91 4f       	sbci	r25, 0xF1	; 241
     e9c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
     ea0:	e3 ee       	ldi	r30, 0xE3	; 227
     ea2:	fe e0       	ldi	r31, 0x0E	; 14
     ea4:	ec 0f       	add	r30, r28
     ea6:	fd 1f       	adc	r31, r29
     ea8:	e0 0f       	add	r30, r16
     eaa:	f1 1f       	adc	r31, r17
     eac:	80 83       	st	Z, r24
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	a8 01       	movw	r20, r16
     eb2:	4e 5f       	subi	r20, 0xFE	; 254
     eb4:	5f 4f       	sbci	r21, 0xFF	; 255
     eb6:	be 01       	movw	r22, r28
     eb8:	6d 51       	subi	r22, 0x1D	; 29
     eba:	71 4f       	sbci	r23, 0xF1	; 241
     ebc:	89 e9       	ldi	r24, 0x99	; 153
     ebe:	97 e1       	ldi	r25, 0x17	; 23
     ec0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Print::write(char const*, unsigned int)>
     ec4:	f8 cc       	rjmp	.-1552   	; 0x8b6 <modbusWrite()+0x2ac>
     ec6:	cc 5e       	subi	r28, 0xEC	; 236
     ec8:	d0 4f       	sbci	r29, 0xF0	; 240
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	9f 90       	pop	r9
     eea:	8f 90       	pop	r8
     eec:	7f 90       	pop	r7
     eee:	6f 90       	pop	r6
     ef0:	5f 90       	pop	r5
     ef2:	4f 90       	pop	r4
     ef4:	3f 90       	pop	r3
     ef6:	2f 90       	pop	r2
     ef8:	08 95       	ret

00000efa <arraycheck(unsigned short*, short, int)>:
_Z10arraycheckPtsi():
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	24 17       	cp	r18, r20
     f00:	35 07       	cpc	r19, r21
     f02:	54 f4       	brge	.+20     	; 0xf18 <arraycheck(unsigned short*, short, int)+0x1e>
     f04:	dc 01       	movw	r26, r24
     f06:	ed 91       	ld	r30, X+
     f08:	fd 91       	ld	r31, X+
     f0a:	cd 01       	movw	r24, r26
     f0c:	e6 17       	cp	r30, r22
     f0e:	f7 07       	cpc	r31, r23
     f10:	29 f0       	breq	.+10     	; 0xf1c <arraycheck(unsigned short*, short, int)+0x22>
     f12:	2f 5f       	subi	r18, 0xFF	; 255
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	f3 cf       	rjmp	.-26     	; 0xefe <arraycheck(unsigned short*, short, int)+0x4>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	08 95       	ret
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	08 95       	ret

00000f20 <_GLOBAL__sub_I_simBuffer>:
_GLOBAL__sub_I_simBuffer():
     f20:	88 ee       	ldi	r24, 0xE8	; 232
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <malloc>
     f28:	90 93 fb 16 	sts	0x16FB, r25	; 0x8016fb <simBuffer+0x1>
     f2c:	80 93 fa 16 	sts	0x16FA, r24	; 0x8016fa <simBuffer>
     f30:	80 ed       	ldi	r24, 0xD0	; 208
     f32:	97 e0       	ldi	r25, 0x07	; 7
     f34:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <malloc>
     f38:	90 93 f9 16 	sts	0x16F9, r25	; 0x8016f9 <serverMessage+0x1>
     f3c:	80 93 f8 16 	sts	0x16F8, r24	; 0x8016f8 <serverMessage>
     f40:	08 95       	ret

00000f42 <slaveRead()>:
_Z9slaveReadv():
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	84 e6       	ldi	r24, 0x64	; 100
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
     f52:	89 e9       	ldi	r24, 0x99	; 153
     f54:	97 e1       	ldi	r25, 0x17	; 23
     f56:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
     f5a:	89 2b       	or	r24, r25
     f5c:	99 f0       	breq	.+38     	; 0xf84 <slaveRead()+0x42>
     f5e:	89 e9       	ldi	r24, 0x99	; 153
     f60:	97 e1       	ldi	r25, 0x17	; 23
     f62:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
     f66:	8c 01       	movw	r16, r24
     f68:	c6 ec       	ldi	r28, 0xC6	; 198
     f6a:	d6 e1       	ldi	r29, 0x16	; 22
     f6c:	ce 01       	movw	r24, r28
     f6e:	86 5c       	subi	r24, 0xC6	; 198
     f70:	96 41       	sbci	r25, 0x16	; 22
     f72:	80 17       	cp	r24, r16
     f74:	91 07       	cpc	r25, r17
     f76:	6c f7       	brge	.-38     	; 0xf52 <slaveRead()+0x10>
     f78:	89 e9       	ldi	r24, 0x99	; 153
     f7a:	97 e1       	ldi	r25, 0x17	; 23
     f7c:	0e 94 df 10 	call	0x21be	; 0x21be <HardwareSerial::read()>
     f80:	89 93       	st	Y+, r24
     f82:	f4 cf       	rjmp	.-24     	; 0xf6c <slaveRead()+0x2a>
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <modbusRead()>:
_Z10modbusReadv():
     f8e:	2f 92       	push	r2
     f90:	3f 92       	push	r3
     f92:	4f 92       	push	r4
     f94:	5f 92       	push	r5
     f96:	6f 92       	push	r6
     f98:	7f 92       	push	r7
     f9a:	8f 92       	push	r8
     f9c:	9f 92       	push	r9
     f9e:	af 92       	push	r10
     fa0:	bf 92       	push	r11
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	cb 5a       	subi	r28, 0xAB	; 171
     fb8:	d5 40       	sbci	r29, 0x05	; 5
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <slaveSetupCheck>
     fc8:	81 11       	cpse	r24, r1
     fca:	6e c1       	rjmp	.+732    	; 0x12a8 <modbusRead()+0x31a>
     fcc:	e1 e9       	ldi	r30, 0x91	; 145
     fce:	f6 e1       	ldi	r31, 0x16	; 22
     fd0:	8e e1       	ldi	r24, 0x1E	; 30
     fd2:	df 01       	movw	r26, r30
     fd4:	1d 92       	st	X+, r1
     fd6:	8a 95       	dec	r24
     fd8:	e9 f7       	brne	.-6      	; 0xfd4 <modbusRead()+0x46>
     fda:	e0 91 fa 16 	lds	r30, 0x16FA	; 0x8016fa <simBuffer>
     fde:	f0 91 fb 16 	lds	r31, 0x16FB	; 0x8016fb <simBuffer+0x1>
     fe2:	81 81       	ldd	r24, Z+1	; 0x01
     fe4:	92 81       	ldd	r25, Z+2	; 0x02
     fe6:	f8 2f       	mov	r31, r24
     fe8:	e9 2f       	mov	r30, r25
     fea:	c6 55       	subi	r28, 0x56	; 86
     fec:	da 4f       	sbci	r29, 0xFA	; 250
     fee:	f9 83       	std	Y+1, r31	; 0x01
     ff0:	e8 83       	st	Y, r30
     ff2:	ca 5a       	subi	r28, 0xAA	; 170
     ff4:	d5 40       	sbci	r29, 0x05	; 5
     ff6:	03 e0       	ldi	r16, 0x03	; 3
     ff8:	e0 2e       	mov	r14, r16
     ffa:	f1 2c       	mov	r15, r1
     ffc:	d1 2c       	mov	r13, r1
     ffe:	c1 2c       	mov	r12, r1
    1000:	b1 2c       	mov	r11, r1
    1002:	a1 2c       	mov	r10, r1
    1004:	8c ea       	ldi	r24, 0xAC	; 172
    1006:	28 2e       	mov	r2, r24
    1008:	c6 55       	subi	r28, 0x56	; 86
    100a:	da 4f       	sbci	r29, 0xFA	; 250
    100c:	28 81       	ld	r18, Y
    100e:	39 81       	ldd	r19, Y+1	; 0x01
    1010:	ca 5a       	subi	r28, 0xAA	; 170
    1012:	d5 40       	sbci	r29, 0x05	; 5
    1014:	c2 16       	cp	r12, r18
    1016:	d3 06       	cpc	r13, r19
    1018:	09 f4       	brne	.+2      	; 0x101c <modbusRead()+0x8e>
    101a:	ab c0       	rjmp	.+342    	; 0x1172 <modbusRead()+0x1e4>
    101c:	e0 91 fa 16 	lds	r30, 0x16FA	; 0x8016fa <simBuffer>
    1020:	f0 91 fb 16 	lds	r31, 0x16FB	; 0x8016fb <simBuffer+0x1>
    1024:	ee 0d       	add	r30, r14
    1026:	ff 1d       	adc	r31, r15
    1028:	30 80       	ld	r3, Z
    102a:	81 81       	ldd	r24, Z+1	; 0x01
    102c:	42 80       	ldd	r4, Z+2	; 0x02
    102e:	58 2e       	mov	r5, r24
    1030:	33 81       	ldd	r19, Z+3	; 0x03
    1032:	c7 55       	subi	r28, 0x57	; 87
    1034:	da 4f       	sbci	r29, 0xFA	; 250
    1036:	38 83       	st	Y, r19
    1038:	c9 5a       	subi	r28, 0xA9	; 169
    103a:	d5 40       	sbci	r29, 0x05	; 5
    103c:	84 81       	ldd	r24, Z+4	; 0x04
    103e:	65 80       	ldd	r6, Z+5	; 0x05
    1040:	78 2e       	mov	r7, r24
    1042:	03 2d       	mov	r16, r3
    1044:	03 2c       	mov	r0, r3
    1046:	00 0c       	add	r0, r0
    1048:	11 0b       	sbc	r17, r17
_ZNK5EERefdeEv():
    104a:	c8 01       	movw	r24, r16
    104c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <eeprom_read_byte>
_ZN5EERef6updateEh():
    1050:	68 16       	cp	r6, r24
    1052:	21 f0       	breq	.+8      	; 0x105c <modbusRead()+0xce>
_ZN5EERefaSEh():
    1054:	66 2d       	mov	r22, r6
    1056:	c8 01       	movw	r24, r16
    1058:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <eeprom_write_byte>
_ZN5EEPtrppEv():
    105c:	48 01       	movw	r8, r16
    105e:	4f ef       	ldi	r20, 0xFF	; 255
    1060:	84 1a       	sub	r8, r20
    1062:	94 0a       	sbc	r9, r20
_ZNK5EERefdeEv():
    1064:	c4 01       	movw	r24, r8
    1066:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <eeprom_read_byte>
_ZN5EERef6updateEh():
    106a:	78 16       	cp	r7, r24
    106c:	21 f0       	breq	.+8      	; 0x1076 <modbusRead()+0xe8>
_ZN5EERefaSEh():
    106e:	67 2d       	mov	r22, r7
    1070:	c4 01       	movw	r24, r8
    1072:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <eeprom_write_byte>
_Z10modbusReadv():
    1076:	b8 01       	movw	r22, r16
    1078:	81 e9       	ldi	r24, 0x91	; 145
    107a:	96 e1       	ldi	r25, 0x16	; 22
    107c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <strchr>
    1080:	89 2b       	or	r24, r25
    1082:	a9 f5       	brne	.+106    	; 0x10ee <modbusRead()+0x160>
    1084:	f5 01       	movw	r30, r10
    1086:	ef 56       	subi	r30, 0x6F	; 111
    1088:	f9 4e       	sbci	r31, 0xE9	; 233
    108a:	30 82       	st	Z, r3
    108c:	20 9e       	mul	r2, r16
    108e:	c0 01       	movw	r24, r0
    1090:	21 9e       	mul	r2, r17
    1092:	90 0d       	add	r25, r0
    1094:	11 24       	eor	r1, r1
    1096:	80 5a       	subi	r24, 0xA0	; 160
    1098:	9d 4f       	sbci	r25, 0xFD	; 253
    109a:	fc 01       	movw	r30, r24
    109c:	e8 58       	subi	r30, 0x88	; 136
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	11 82       	std	Z+1, r1	; 0x01
    10a2:	10 82       	st	Z, r1
    10a4:	86 58       	subi	r24, 0x86	; 134
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	dc 01       	movw	r26, r24
    10aa:	1d 92       	st	X+, r1
    10ac:	1c 92       	st	X, r1
    10ae:	b3 2d       	mov	r27, r3
    10b0:	e0 e3       	ldi	r30, 0x30	; 48
    10b2:	be 02       	muls	r27, r30
    10b4:	c0 01       	movw	r24, r0
    10b6:	11 24       	eor	r1, r1
_ZN11slaves_info5resetEv():
    10b8:	e1 e0       	ldi	r30, 0x01	; 1
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	ec 0f       	add	r30, r28
    10be:	fd 1f       	adc	r31, r29
    10c0:	e8 0f       	add	r30, r24
    10c2:	f9 1f       	adc	r31, r25
    10c4:	df 01       	movw	r26, r30
    10c6:	20 e2       	ldi	r18, 0x20	; 32
    10c8:	1d 92       	st	X+, r1
    10ca:	2a 95       	dec	r18
    10cc:	e9 f7       	brne	.-6      	; 0x10c8 <modbusRead()+0x13a>
    10ce:	80 96       	adiw	r24, 0x20	; 32
    10d0:	e1 e0       	ldi	r30, 0x01	; 1
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	ec 0f       	add	r30, r28
    10d6:	fd 1f       	adc	r31, r29
    10d8:	e8 0f       	add	r30, r24
    10da:	f9 1f       	adc	r31, r25
    10dc:	df 01       	movw	r26, r30
    10de:	20 e1       	ldi	r18, 0x10	; 16
    10e0:	1d 92       	st	X+, r1
    10e2:	2a 95       	dec	r18
    10e4:	e9 f7       	brne	.-6      	; 0x10e0 <modbusRead()+0x152>
_Z10modbusReadv():
    10e6:	a5 01       	movw	r20, r10
    10e8:	4f 5f       	subi	r20, 0xFF	; 255
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255
    10ec:	5a 01       	movw	r10, r20
    10ee:	c7 55       	subi	r28, 0x57	; 87
    10f0:	da 4f       	sbci	r29, 0xFA	; 250
    10f2:	58 81       	ld	r21, Y
    10f4:	c9 5a       	subi	r28, 0xA9	; 169
    10f6:	d5 40       	sbci	r29, 0x05	; 5
    10f8:	20 9e       	mul	r2, r16
    10fa:	d0 01       	movw	r26, r0
    10fc:	21 9e       	mul	r2, r17
    10fe:	b0 0d       	add	r27, r0
    1100:	11 24       	eor	r1, r1
    1102:	51 30       	cpi	r21, 0x01	; 1
    1104:	f9 f4       	brne	.+62     	; 0x1144 <modbusRead()+0x1b6>
    1106:	a8 52       	subi	r26, 0x28	; 40
    1108:	bd 4f       	sbci	r27, 0xFD	; 253
    110a:	8d 91       	ld	r24, X+
    110c:	9c 91       	ld	r25, X
    110e:	11 97       	sbiw	r26, 0x01	; 1
    1110:	9c 01       	movw	r18, r24
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	2d 93       	st	X+, r18
    1118:	3c 93       	st	X, r19
    111a:	a6 e5       	ldi	r26, 0x56	; 86
    111c:	a0 9f       	mul	r26, r16
    111e:	f0 01       	movw	r30, r0
    1120:	a1 9f       	mul	r26, r17
    1122:	f0 0d       	add	r31, r0
    1124:	11 24       	eor	r1, r1
    1126:	e8 0f       	add	r30, r24
    1128:	f9 1f       	adc	r31, r25
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	e0 58       	subi	r30, 0x80	; 128
    1130:	fd 4f       	sbci	r31, 0xFD	; 253
    1132:	51 82       	std	Z+1, r5	; 0x01
    1134:	40 82       	st	Z, r4
    1136:	ef ef       	ldi	r30, 0xFF	; 255
    1138:	ce 1a       	sub	r12, r30
    113a:	de 0a       	sbc	r13, r30
    113c:	f6 e0       	ldi	r31, 0x06	; 6
    113e:	ef 0e       	add	r14, r31
    1140:	f1 1c       	adc	r15, r1
    1142:	62 cf       	rjmp	.-316    	; 0x1008 <modbusRead()+0x7a>
    1144:	a6 52       	subi	r26, 0x26	; 38
    1146:	bd 4f       	sbci	r27, 0xFD	; 253
    1148:	8d 91       	ld	r24, X+
    114a:	9c 91       	ld	r25, X
    114c:	11 97       	sbiw	r26, 0x01	; 1
    114e:	9c 01       	movw	r18, r24
    1150:	2f 5f       	subi	r18, 0xFF	; 255
    1152:	3f 4f       	sbci	r19, 0xFF	; 255
    1154:	2d 93       	st	X+, r18
    1156:	3c 93       	st	X, r19
    1158:	b6 e5       	ldi	r27, 0x56	; 86
    115a:	b0 9f       	mul	r27, r16
    115c:	f0 01       	movw	r30, r0
    115e:	b1 9f       	mul	r27, r17
    1160:	f0 0d       	add	r31, r0
    1162:	11 24       	eor	r1, r1
    1164:	e8 0f       	add	r30, r24
    1166:	f9 1f       	adc	r31, r25
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	e0 5a       	subi	r30, 0xA0	; 160
    116e:	fd 4f       	sbci	r31, 0xFD	; 253
    1170:	e0 cf       	rjmp	.-64     	; 0x1132 <modbusRead()+0x1a4>
    1172:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
    1176:	61 e9       	ldi	r22, 0x91	; 145
    1178:	76 e1       	ldi	r23, 0x16	; 22
    117a:	5b 01       	movw	r10, r22
    117c:	ac ea       	ldi	r26, 0xAC	; 172
    117e:	9a 2e       	mov	r9, r26
    1180:	d5 01       	movw	r26, r10
    1182:	0d 90       	ld	r0, X+
    1184:	00 20       	and	r0, r0
    1186:	e9 f7       	brne	.-6      	; 0x1182 <modbusRead()+0x1f4>
    1188:	cd 01       	movw	r24, r26
    118a:	82 59       	subi	r24, 0x92	; 146
    118c:	96 41       	sbci	r25, 0x16	; 22
    118e:	9b 01       	movw	r18, r22
    1190:	21 59       	subi	r18, 0x91	; 145
    1192:	36 41       	sbci	r19, 0x16	; 22
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	08 f0       	brcs	.+2      	; 0x119c <modbusRead()+0x20e>
    119a:	86 c0       	rjmp	.+268    	; 0x12a8 <modbusRead()+0x31a>
    119c:	fb 01       	movw	r30, r22
    119e:	81 91       	ld	r24, Z+
    11a0:	bf 01       	movw	r22, r30
    11a2:	08 2e       	mov	r0, r24
    11a4:	00 0c       	add	r0, r0
    11a6:	99 0b       	sbc	r25, r25
    11a8:	98 9e       	mul	r9, r24
    11aa:	70 01       	movw	r14, r0
    11ac:	99 9e       	mul	r9, r25
    11ae:	f0 0c       	add	r15, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	f7 01       	movw	r30, r14
    11b4:	e0 5a       	subi	r30, 0xA0	; 160
    11b6:	fd 4f       	sbci	r31, 0xFD	; 253
    11b8:	df 01       	movw	r26, r30
    11ba:	a8 58       	subi	r26, 0x88	; 136
    11bc:	bf 4f       	sbci	r27, 0xFF	; 255
    11be:	0d 91       	ld	r16, X+
    11c0:	1c 91       	ld	r17, X
    11c2:	11 97       	sbiw	r26, 0x01	; 1
    11c4:	10 16       	cp	r1, r16
    11c6:	11 06       	cpc	r1, r17
    11c8:	74 f5       	brge	.+92     	; 0x1226 <modbusRead()+0x298>
    11ca:	20 a1       	ldd	r18, Z+32	; 0x20
    11cc:	31 a1       	ldd	r19, Z+33	; 0x21
    11ce:	d4 97       	sbiw	r26, 0x34	; 52
    11d0:	11 96       	adiw	r26, 0x01	; 1
    11d2:	3c 93       	st	X, r19
    11d4:	2e 93       	st	-X, r18
    11d6:	ea 5b       	subi	r30, 0xBA	; 186
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	31 83       	std	Z+1, r19	; 0x01
    11dc:	20 83       	st	Z, r18
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	3f 01       	movw	r6, r30
    11e4:	02 17       	cp	r16, r18
    11e6:	13 07       	cpc	r17, r19
    11e8:	f1 f0       	breq	.+60     	; 0x1226 <modbusRead()+0x298>
    11ea:	a9 01       	movw	r20, r18
    11ec:	44 0f       	add	r20, r20
    11ee:	55 1f       	adc	r21, r21
    11f0:	4e 0d       	add	r20, r14
    11f2:	5f 1d       	adc	r21, r15
    11f4:	40 5a       	subi	r20, 0xA0	; 160
    11f6:	5d 4f       	sbci	r21, 0xFD	; 253
    11f8:	fa 01       	movw	r30, r20
    11fa:	40 a1       	ldd	r20, Z+32	; 0x20
    11fc:	51 a1       	ldd	r21, Z+33	; 0x21
    11fe:	cd 90       	ld	r12, X+
    1200:	dc 90       	ld	r13, X
    1202:	11 97       	sbiw	r26, 0x01	; 1
    1204:	4c 15       	cp	r20, r12
    1206:	5d 05       	cpc	r21, r13
    1208:	18 f4       	brcc	.+6      	; 0x1210 <modbusRead()+0x282>
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	5c 93       	st	X, r21
    120e:	4e 93       	st	-X, r20
    1210:	f3 01       	movw	r30, r6
    1212:	c0 80       	ld	r12, Z
    1214:	d1 80       	ldd	r13, Z+1	; 0x01
    1216:	c4 16       	cp	r12, r20
    1218:	d5 06       	cpc	r13, r21
    121a:	10 f4       	brcc	.+4      	; 0x1220 <modbusRead()+0x292>
    121c:	51 83       	std	Z+1, r21	; 0x01
    121e:	40 83       	st	Z, r20
    1220:	2f 5f       	subi	r18, 0xFF	; 255
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	df cf       	rjmp	.-66     	; 0x11e4 <modbusRead()+0x256>
    1226:	98 9e       	mul	r9, r24
    1228:	a0 01       	movw	r20, r0
    122a:	99 9e       	mul	r9, r25
    122c:	50 0d       	add	r21, r0
    122e:	11 24       	eor	r1, r1
    1230:	fa 01       	movw	r30, r20
    1232:	e0 5a       	subi	r30, 0xA0	; 160
    1234:	fd 4f       	sbci	r31, 0xFD	; 253
    1236:	df 01       	movw	r26, r30
    1238:	a6 58       	subi	r26, 0x86	; 134
    123a:	bf 4f       	sbci	r27, 0xFF	; 255
    123c:	0d 91       	ld	r16, X+
    123e:	1c 91       	ld	r17, X
    1240:	11 97       	sbiw	r26, 0x01	; 1
    1242:	10 16       	cp	r1, r16
    1244:	11 06       	cpc	r1, r17
    1246:	0c f0       	brlt	.+2      	; 0x124a <modbusRead()+0x2bc>
    1248:	9b cf       	rjmp	.-202    	; 0x1180 <modbusRead()+0x1f2>
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	da 97       	sbiw	r26, 0x3a	; 58
    1250:	11 96       	adiw	r26, 0x01	; 1
    1252:	9c 93       	st	X, r25
    1254:	8e 93       	st	-X, r24
    1256:	ee 5b       	subi	r30, 0xBE	; 190
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	80 83       	st	Z, r24
    125e:	21 e0       	ldi	r18, 0x01	; 1
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	6f 01       	movw	r12, r30
    1264:	02 17       	cp	r16, r18
    1266:	13 07       	cpc	r17, r19
    1268:	09 f4       	brne	.+2      	; 0x126c <modbusRead()+0x2de>
    126a:	8a cf       	rjmp	.-236    	; 0x1180 <modbusRead()+0x1f2>
    126c:	c9 01       	movw	r24, r18
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	84 0f       	add	r24, r20
    1274:	95 1f       	adc	r25, r21
    1276:	80 5a       	subi	r24, 0xA0	; 160
    1278:	9d 4f       	sbci	r25, 0xFD	; 253
    127a:	fc 01       	movw	r30, r24
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	ed 90       	ld	r14, X+
    1282:	fc 90       	ld	r15, X
    1284:	11 97       	sbiw	r26, 0x01	; 1
    1286:	8e 15       	cp	r24, r14
    1288:	9f 05       	cpc	r25, r15
    128a:	18 f4       	brcc	.+6      	; 0x1292 <modbusRead()+0x304>
    128c:	11 96       	adiw	r26, 0x01	; 1
    128e:	9c 93       	st	X, r25
    1290:	8e 93       	st	-X, r24
    1292:	f6 01       	movw	r30, r12
    1294:	e0 80       	ld	r14, Z
    1296:	f1 80       	ldd	r15, Z+1	; 0x01
    1298:	e8 16       	cp	r14, r24
    129a:	f9 06       	cpc	r15, r25
    129c:	10 f4       	brcc	.+4      	; 0x12a2 <modbusRead()+0x314>
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	de cf       	rjmp	.-68     	; 0x1264 <modbusRead()+0x2d6>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 90 16 	sts	0x1690, r24	; 0x801690 <slaveSetupCheck>
    12ae:	01 e9       	ldi	r16, 0x91	; 145
    12b0:	16 e1       	ldi	r17, 0x16	; 22
    12b2:	28 01       	movw	r4, r16
    12b4:	6c ea       	ldi	r22, 0xAC	; 172
    12b6:	76 2e       	mov	r7, r22
    12b8:	71 ea       	ldi	r23, 0xA1	; 161
    12ba:	87 2e       	mov	r8, r23
    12bc:	75 e0       	ldi	r23, 0x05	; 5
    12be:	97 2e       	mov	r9, r23
    12c0:	8c 0e       	add	r8, r28
    12c2:	9d 1e       	adc	r9, r29
    12c4:	f6 e0       	ldi	r31, 0x06	; 6
    12c6:	8f 0e       	add	r8, r31
    12c8:	91 1c       	adc	r9, r1
    12ca:	e0 e3       	ldi	r30, 0x30	; 48
    12cc:	6e 2e       	mov	r6, r30
    12ce:	aa 24       	eor	r10, r10
    12d0:	a3 94       	inc	r10
    12d2:	b1 2c       	mov	r11, r1
    12d4:	d2 01       	movw	r26, r4
    12d6:	0d 90       	ld	r0, X+
    12d8:	00 20       	and	r0, r0
    12da:	e9 f7       	brne	.-6      	; 0x12d6 <modbusRead()+0x348>
    12dc:	cd 01       	movw	r24, r26
    12de:	82 59       	subi	r24, 0x92	; 146
    12e0:	96 41       	sbci	r25, 0x16	; 22
    12e2:	98 01       	movw	r18, r16
    12e4:	21 59       	subi	r18, 0x91	; 145
    12e6:	36 41       	sbci	r19, 0x16	; 22
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <modbusRead()+0x362>
    12ee:	25 c1       	rjmp	.+586    	; 0x153a <modbusRead()+0x5ac>
    12f0:	f8 01       	movw	r30, r16
    12f2:	20 81       	ld	r18, Z
    12f4:	37 2d       	mov	r19, r7
    12f6:	23 03       	mulsu	r18, r19
    12f8:	c0 01       	movw	r24, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	80 5a       	subi	r24, 0xA0	; 160
    12fe:	9d 4f       	sbci	r25, 0xFD	; 253
    1300:	fc 01       	movw	r30, r24
    1302:	e8 58       	subi	r30, 0x88	; 136
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	40 81       	ld	r20, Z
    1308:	51 81       	ldd	r21, Z+1	; 0x01
    130a:	14 16       	cp	r1, r20
    130c:	15 06       	cpc	r1, r21
    130e:	0c f0       	brlt	.+2      	; 0x1312 <modbusRead()+0x384>
    1310:	8c c0       	rjmp	.+280    	; 0x142a <modbusRead()+0x49c>
    1312:	d4 01       	movw	r26, r8
    1314:	1d 92       	st	X+, r1
    1316:	1c 92       	st	X, r1
    1318:	cf 55       	subi	r28, 0x5F	; 95
    131a:	da 4f       	sbci	r29, 0xFA	; 250
    131c:	28 83       	st	Y, r18
    131e:	c1 5a       	subi	r28, 0xA1	; 161
    1320:	d5 40       	sbci	r29, 0x05	; 5
    1322:	22 e0       	ldi	r18, 0x02	; 2
    1324:	ce 55       	subi	r28, 0x5E	; 94
    1326:	da 4f       	sbci	r29, 0xFA	; 250
    1328:	28 83       	st	Y, r18
    132a:	c2 5a       	subi	r28, 0xA2	; 162
    132c:	d5 40       	sbci	r29, 0x05	; 5
    132e:	f4 97       	sbiw	r30, 0x34	; 52
    1330:	20 81       	ld	r18, Z
    1332:	31 81       	ldd	r19, Z+1	; 0x01
    1334:	cd 55       	subi	r28, 0x5D	; 93
    1336:	da 4f       	sbci	r29, 0xFA	; 250
    1338:	38 83       	st	Y, r19
    133a:	c3 5a       	subi	r28, 0xA3	; 163
    133c:	d5 40       	sbci	r29, 0x05	; 5
    133e:	cc 55       	subi	r28, 0x5C	; 92
    1340:	da 4f       	sbci	r29, 0xFA	; 250
    1342:	28 83       	st	Y, r18
    1344:	c4 5a       	subi	r28, 0xA4	; 164
    1346:	d5 40       	sbci	r29, 0x05	; 5
    1348:	8a 5b       	subi	r24, 0xBA	; 186
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	fc 01       	movw	r30, r24
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	ac 01       	movw	r20, r24
    1354:	4f 5f       	subi	r20, 0xFF	; 255
    1356:	5f 4f       	sbci	r21, 0xFF	; 255
    1358:	42 1b       	sub	r20, r18
    135a:	53 0b       	sbc	r21, r19
    135c:	cb 55       	subi	r28, 0x5B	; 91
    135e:	da 4f       	sbci	r29, 0xFA	; 250
    1360:	58 83       	st	Y, r21
    1362:	c5 5a       	subi	r28, 0xA5	; 165
    1364:	d5 40       	sbci	r29, 0x05	; 5
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	82 1b       	sub	r24, r18
    136a:	ca 55       	subi	r28, 0x5A	; 90
    136c:	da 4f       	sbci	r29, 0xFA	; 250
    136e:	88 83       	st	Y, r24
    1370:	c6 5a       	subi	r28, 0xA6	; 166
    1372:	d5 40       	sbci	r29, 0x05	; 5
    1374:	66 e0       	ldi	r22, 0x06	; 6
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	ce 01       	movw	r24, r28
    137a:	8f 55       	subi	r24, 0x5F	; 95
    137c:	9a 4f       	sbci	r25, 0xFA	; 250
    137e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
    1382:	c9 55       	subi	r28, 0x59	; 89
    1384:	da 4f       	sbci	r29, 0xFA	; 250
    1386:	88 83       	st	Y, r24
    1388:	c7 5a       	subi	r28, 0xA7	; 167
    138a:	d5 40       	sbci	r29, 0x05	; 5
    138c:	c8 55       	subi	r28, 0x58	; 88
    138e:	da 4f       	sbci	r29, 0xFA	; 250
    1390:	98 83       	st	Y, r25
    1392:	c8 5a       	subi	r28, 0xA8	; 168
    1394:	d5 40       	sbci	r29, 0x05	; 5
    1396:	48 e0       	ldi	r20, 0x08	; 8
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	be 01       	movw	r22, r28
    139c:	6f 55       	subi	r22, 0x5F	; 95
    139e:	7a 4f       	sbci	r23, 0xFA	; 250
    13a0:	89 e9       	ldi	r24, 0x99	; 153
    13a2:	97 e1       	ldi	r25, 0x17	; 23
    13a4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Print::write(char const*, unsigned int)>
    13a8:	0e 94 a1 07 	call	0xf42	; 0xf42 <slaveRead()>
    13ac:	60 91 c8 16 	lds	r22, 0x16C8	; 0x8016c8 <modBuffer+0x2>
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	7b 01       	movw	r14, r22
    13b4:	53 e0       	ldi	r21, 0x03	; 3
    13b6:	ee 0c       	add	r14, r14
    13b8:	ff 1c       	adc	r15, r15
    13ba:	5a 95       	dec	r21
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <modbusRead()+0x428>
    13be:	e6 ec       	ldi	r30, 0xC6	; 198
    13c0:	f6 e1       	ldi	r31, 0x16	; 22
    13c2:	cf 01       	movw	r24, r30
    13c4:	86 5c       	subi	r24, 0xC6	; 198
    13c6:	96 41       	sbci	r25, 0x16	; 22
    13c8:	86 17       	cp	r24, r22
    13ca:	97 07       	cpc	r25, r23
    13cc:	74 f5       	brge	.+92     	; 0x142a <modbusRead()+0x49c>
    13ce:	d3 80       	ldd	r13, Z+3	; 0x03
    13d0:	d8 01       	movw	r26, r16
    13d2:	4c 91       	ld	r20, X
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	26 2d       	mov	r18, r6
    13da:	42 03       	mulsu	r20, r18
    13dc:	a0 01       	movw	r20, r0
    13de:	11 24       	eor	r1, r1
    13e0:	a1 e0       	ldi	r26, 0x01	; 1
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ac 0f       	add	r26, r28
    13e6:	bd 1f       	adc	r27, r29
    13e8:	4a 0f       	add	r20, r26
    13ea:	5b 1f       	adc	r21, r27
    13ec:	2d 2c       	mov	r2, r13
    13ee:	dd 0c       	add	r13, r13
    13f0:	33 08       	sbc	r3, r3
    13f2:	8e 15       	cp	r24, r14
    13f4:	9f 05       	cpc	r25, r15
    13f6:	bc f4       	brge	.+46     	; 0x1426 <modbusRead()+0x498>
    13f8:	6a 01       	movw	r12, r20
    13fa:	c8 0e       	add	r12, r24
    13fc:	d9 1e       	adc	r13, r25
    13fe:	95 01       	movw	r18, r10
    1400:	08 2e       	mov	r0, r24
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <modbusRead()+0x47a>
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <modbusRead()+0x476>
    140c:	22 21       	and	r18, r2
    140e:	33 21       	and	r19, r3
    1410:	08 2e       	mov	r0, r24
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <modbusRead()+0x48a>
    1414:	35 95       	asr	r19
    1416:	27 95       	ror	r18
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <modbusRead()+0x486>
    141c:	d6 01       	movw	r26, r12
    141e:	90 96       	adiw	r26, 0x20	; 32
    1420:	2c 93       	st	X, r18
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	e6 cf       	rjmp	.-52     	; 0x13f2 <modbusRead()+0x464>
    1426:	31 96       	adiw	r30, 0x01	; 1
    1428:	cc cf       	rjmp	.-104    	; 0x13c2 <modbusRead()+0x434>
    142a:	f8 01       	movw	r30, r16
    142c:	20 81       	ld	r18, Z
    142e:	37 2d       	mov	r19, r7
    1430:	23 03       	mulsu	r18, r19
    1432:	c0 01       	movw	r24, r0
    1434:	11 24       	eor	r1, r1
    1436:	80 5a       	subi	r24, 0xA0	; 160
    1438:	9d 4f       	sbci	r25, 0xFD	; 253
    143a:	fc 01       	movw	r30, r24
    143c:	e6 58       	subi	r30, 0x86	; 134
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	40 81       	ld	r20, Z
    1442:	51 81       	ldd	r21, Z+1	; 0x01
    1444:	14 16       	cp	r1, r20
    1446:	15 06       	cpc	r1, r21
    1448:	0c f0       	brlt	.+2      	; 0x144c <modbusRead()+0x4be>
    144a:	74 c0       	rjmp	.+232    	; 0x1534 <modbusRead()+0x5a6>
    144c:	d4 01       	movw	r26, r8
    144e:	1d 92       	st	X+, r1
    1450:	1c 92       	st	X, r1
    1452:	cf 55       	subi	r28, 0x5F	; 95
    1454:	da 4f       	sbci	r29, 0xFA	; 250
    1456:	28 83       	st	Y, r18
    1458:	c1 5a       	subi	r28, 0xA1	; 161
    145a:	d5 40       	sbci	r29, 0x05	; 5
    145c:	23 e0       	ldi	r18, 0x03	; 3
    145e:	ce 55       	subi	r28, 0x5E	; 94
    1460:	da 4f       	sbci	r29, 0xFA	; 250
    1462:	28 83       	st	Y, r18
    1464:	c2 5a       	subi	r28, 0xA2	; 162
    1466:	d5 40       	sbci	r29, 0x05	; 5
    1468:	fa 97       	sbiw	r30, 0x3a	; 58
    146a:	20 81       	ld	r18, Z
    146c:	31 81       	ldd	r19, Z+1	; 0x01
    146e:	cd 55       	subi	r28, 0x5D	; 93
    1470:	da 4f       	sbci	r29, 0xFA	; 250
    1472:	38 83       	st	Y, r19
    1474:	c3 5a       	subi	r28, 0xA3	; 163
    1476:	d5 40       	sbci	r29, 0x05	; 5
    1478:	cc 55       	subi	r28, 0x5C	; 92
    147a:	da 4f       	sbci	r29, 0xFA	; 250
    147c:	28 83       	st	Y, r18
    147e:	c4 5a       	subi	r28, 0xA4	; 164
    1480:	d5 40       	sbci	r29, 0x05	; 5
    1482:	8e 5b       	subi	r24, 0xBE	; 190
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	fc 01       	movw	r30, r24
    1488:	80 81       	ld	r24, Z
    148a:	91 81       	ldd	r25, Z+1	; 0x01
    148c:	ac 01       	movw	r20, r24
    148e:	4f 5f       	subi	r20, 0xFF	; 255
    1490:	5f 4f       	sbci	r21, 0xFF	; 255
    1492:	42 1b       	sub	r20, r18
    1494:	53 0b       	sbc	r21, r19
    1496:	cb 55       	subi	r28, 0x5B	; 91
    1498:	da 4f       	sbci	r29, 0xFA	; 250
    149a:	58 83       	st	Y, r21
    149c:	c5 5a       	subi	r28, 0xA5	; 165
    149e:	d5 40       	sbci	r29, 0x05	; 5
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	82 1b       	sub	r24, r18
    14a4:	ca 55       	subi	r28, 0x5A	; 90
    14a6:	da 4f       	sbci	r29, 0xFA	; 250
    14a8:	88 83       	st	Y, r24
    14aa:	c6 5a       	subi	r28, 0xA6	; 166
    14ac:	d5 40       	sbci	r29, 0x05	; 5
    14ae:	66 e0       	ldi	r22, 0x06	; 6
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	ce 01       	movw	r24, r28
    14b4:	8f 55       	subi	r24, 0x5F	; 95
    14b6:	9a 4f       	sbci	r25, 0xFA	; 250
    14b8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
    14bc:	c9 55       	subi	r28, 0x59	; 89
    14be:	da 4f       	sbci	r29, 0xFA	; 250
    14c0:	88 83       	st	Y, r24
    14c2:	c7 5a       	subi	r28, 0xA7	; 167
    14c4:	d5 40       	sbci	r29, 0x05	; 5
    14c6:	c8 55       	subi	r28, 0x58	; 88
    14c8:	da 4f       	sbci	r29, 0xFA	; 250
    14ca:	98 83       	st	Y, r25
    14cc:	c8 5a       	subi	r28, 0xA8	; 168
    14ce:	d5 40       	sbci	r29, 0x05	; 5
    14d0:	48 e0       	ldi	r20, 0x08	; 8
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	be 01       	movw	r22, r28
    14d6:	6f 55       	subi	r22, 0x5F	; 95
    14d8:	7a 4f       	sbci	r23, 0xFA	; 250
    14da:	89 e9       	ldi	r24, 0x99	; 153
    14dc:	97 e1       	ldi	r25, 0x17	; 23
    14de:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Print::write(char const*, unsigned int)>
    14e2:	0e 94 a1 07 	call	0xf42	; 0xf42 <slaveRead()>
    14e6:	80 91 c8 16 	lds	r24, 0x16C8	; 0x8016c8 <modBuffer+0x2>
    14ea:	86 95       	lsr	r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a6 ec       	ldi	r26, 0xC6	; 198
    14f0:	b6 e1       	ldi	r27, 0x16	; 22
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	68 e1       	ldi	r22, 0x18	; 24
    14f8:	12 96       	adiw	r26, 0x02	; 2
    14fa:	28 17       	cp	r18, r24
    14fc:	39 07       	cpc	r19, r25
    14fe:	d4 f4       	brge	.+52     	; 0x1534 <modbusRead()+0x5a6>
    1500:	f8 01       	movw	r30, r16
    1502:	40 81       	ld	r20, Z
    1504:	46 03       	mulsu	r20, r22
    1506:	f0 01       	movw	r30, r0
    1508:	11 24       	eor	r1, r1
    150a:	e2 0f       	add	r30, r18
    150c:	f3 1f       	adc	r31, r19
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	4c 0f       	add	r20, r28
    1518:	5d 1f       	adc	r21, r29
    151a:	e4 0f       	add	r30, r20
    151c:	f5 1f       	adc	r31, r21
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	5c 91       	ld	r21, X
    1522:	11 97       	sbiw	r26, 0x01	; 1
    1524:	12 96       	adiw	r26, 0x02	; 2
    1526:	4c 91       	ld	r20, X
    1528:	12 97       	sbiw	r26, 0x02	; 2
    152a:	51 83       	std	Z+1, r21	; 0x01
    152c:	40 83       	st	Z, r20
    152e:	2f 5f       	subi	r18, 0xFF	; 255
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	e2 cf       	rjmp	.-60     	; 0x14f8 <modbusRead()+0x56a>
    1534:	0f 5f       	subi	r16, 0xFF	; 255
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	cd ce       	rjmp	.-614    	; 0x12d4 <modbusRead()+0x346>
    153a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <clrmodBuffer()>
    153e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <keyNumber>
    1542:	8f 5f       	subi	r24, 0xFF	; 255
    1544:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <keyNumber>
    1548:	e0 91 f8 16 	lds	r30, 0x16F8	; 0x8016f8 <serverMessage>
    154c:	f0 91 f9 16 	lds	r31, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    1550:	11 82       	std	Z+1, r1	; 0x01
    1552:	10 82       	st	Z, r1
    1554:	a2 eb       	ldi	r26, 0xB2	; 178
    1556:	b6 e1       	ldi	r27, 0x16	; 22
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	2d 91       	ld	r18, X+
    155e:	e0 91 f8 16 	lds	r30, 0x16F8	; 0x8016f8 <serverMessage>
    1562:	f0 91 f9 16 	lds	r31, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    1566:	e8 0f       	add	r30, r24
    1568:	f9 1f       	adc	r31, r25
    156a:	20 83       	st	Z, r18
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	8f 30       	cpi	r24, 0x0F	; 15
    1570:	91 05       	cpc	r25, r1
    1572:	a1 f7       	brne	.-24     	; 0x155c <modbusRead()+0x5ce>
    1574:	e0 91 f8 16 	lds	r30, 0x16F8	; 0x8016f8 <serverMessage>
    1578:	f0 91 f9 16 	lds	r31, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    157c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <keyNumber>
    1580:	87 87       	std	Z+15, r24	; 0x0f
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 8b       	std	Z+16, r24	; 0x10
    1586:	61 e9       	ldi	r22, 0x91	; 145
    1588:	e6 2e       	mov	r14, r22
    158a:	66 e1       	ldi	r22, 0x16	; 22
    158c:	f6 2e       	mov	r15, r22
    158e:	91 2c       	mov	r9, r1
    1590:	81 2c       	mov	r8, r1
    1592:	a1 2c       	mov	r10, r1
    1594:	03 e1       	ldi	r16, 0x13	; 19
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	7c ea       	ldi	r23, 0xAC	; 172
    159a:	b7 2e       	mov	r11, r23
    159c:	e0 e3       	ldi	r30, 0x30	; 48
    159e:	2e 2e       	mov	r2, r30
    15a0:	a1 e9       	ldi	r26, 0x91	; 145
    15a2:	b6 e1       	ldi	r27, 0x16	; 22
    15a4:	0d 90       	ld	r0, X+
    15a6:	00 20       	and	r0, r0
    15a8:	e9 f7       	brne	.-6      	; 0x15a4 <modbusRead()+0x616>
    15aa:	cd 01       	movw	r24, r26
    15ac:	82 59       	subi	r24, 0x92	; 146
    15ae:	96 41       	sbci	r25, 0x16	; 22
    15b0:	97 01       	movw	r18, r14
    15b2:	21 59       	subi	r18, 0x91	; 145
    15b4:	36 41       	sbci	r19, 0x16	; 22
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
    15ba:	08 f0       	brcs	.+2      	; 0x15be <modbusRead()+0x630>
    15bc:	aa c1       	rjmp	.+852    	; 0x1912 <modbusRead()+0x984>
    15be:	f7 01       	movw	r30, r14
    15c0:	20 81       	ld	r18, Z
    15c2:	3b 2d       	mov	r19, r11
    15c4:	23 03       	mulsu	r18, r19
    15c6:	f0 01       	movw	r30, r0
    15c8:	11 24       	eor	r1, r1
    15ca:	e8 52       	subi	r30, 0x28	; 40
    15cc:	fd 4f       	sbci	r31, 0xFD	; 253
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	18 16       	cp	r1, r24
    15d4:	19 06       	cpc	r1, r25
    15d6:	0c f0       	brlt	.+2      	; 0x15da <modbusRead()+0x64c>
    15d8:	b5 c0       	rjmp	.+362    	; 0x1744 <modbusRead()+0x7b6>
    15da:	d1 2c       	mov	r13, r1
    15dc:	c1 2c       	mov	r12, r1
    15de:	d7 01       	movw	r26, r14
    15e0:	3c 90       	ld	r3, X
    15e2:	43 2c       	mov	r4, r3
    15e4:	03 2c       	mov	r0, r3
    15e6:	00 0c       	add	r0, r0
    15e8:	55 08       	sbc	r5, r5
    15ea:	b4 9c       	mul	r11, r4
    15ec:	c0 01       	movw	r24, r0
    15ee:	b5 9c       	mul	r11, r5
    15f0:	90 0d       	add	r25, r0
    15f2:	11 24       	eor	r1, r1
    15f4:	fc 01       	movw	r30, r24
    15f6:	e0 5a       	subi	r30, 0xA0	; 160
    15f8:	fd 4f       	sbci	r31, 0xFD	; 253
    15fa:	3f 01       	movw	r6, r30
    15fc:	ec 5b       	subi	r30, 0xBC	; 188
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	32 96       	adiw	r30, 0x02	; 2
    1606:	20 81       	ld	r18, Z
    1608:	31 81       	ldd	r19, Z+1	; 0x01
    160a:	2f 5f       	subi	r18, 0xFF	; 255
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	26 1b       	sub	r18, r22
    1610:	37 0b       	sbc	r19, r23
    1612:	c2 16       	cp	r12, r18
    1614:	d3 06       	cpc	r13, r19
    1616:	08 f0       	brcs	.+2      	; 0x161a <modbusRead()+0x68c>
    1618:	95 c0       	rjmp	.+298    	; 0x1744 <modbusRead()+0x7b6>
    161a:	f2 96       	adiw	r30, 0x32	; 50
    161c:	40 81       	ld	r20, Z
    161e:	51 81       	ldd	r21, Z+1	; 0x01
    1620:	6c 0d       	add	r22, r12
    1622:	7d 1d       	adc	r23, r13
    1624:	80 58       	subi	r24, 0x80	; 128
    1626:	9d 4f       	sbci	r25, 0xFD	; 253
    1628:	0e 94 7d 07 	call	0xefa	; 0xefa <arraycheck(unsigned short*, short, int)>
    162c:	88 23       	and	r24, r24
    162e:	09 f4       	brne	.+2      	; 0x1632 <modbusRead()+0x6a4>
    1630:	83 c0       	rjmp	.+262    	; 0x1738 <modbusRead()+0x7aa>
    1632:	24 9c       	mul	r2, r4
    1634:	d0 01       	movw	r26, r0
    1636:	25 9c       	mul	r2, r5
    1638:	b0 0d       	add	r27, r0
    163a:	11 24       	eor	r1, r1
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	2c 0f       	add	r18, r28
    1642:	3d 1f       	adc	r19, r29
    1644:	a2 0f       	add	r26, r18
    1646:	b3 1f       	adc	r27, r19
    1648:	ac 0d       	add	r26, r12
    164a:	bd 1d       	adc	r27, r13
    164c:	6c 0c       	add	r6, r12
    164e:	7d 1c       	adc	r7, r13
    1650:	f3 01       	movw	r30, r6
    1652:	e8 5b       	subi	r30, 0xB8	; 184
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	90 96       	adiw	r26, 0x20	; 32
    1658:	2c 91       	ld	r18, X
    165a:	90 81       	ld	r25, Z
    165c:	a8 2e       	mov	r10, r24
    165e:	29 17       	cp	r18, r25
    1660:	09 f4       	brne	.+2      	; 0x1664 <modbusRead()+0x6d6>
    1662:	6c c0       	rjmp	.+216    	; 0x173c <modbusRead()+0x7ae>
    1664:	e0 91 f8 16 	lds	r30, 0x16F8	; 0x8016f8 <serverMessage>
    1668:	f0 91 f9 16 	lds	r31, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    166c:	e0 0f       	add	r30, r16
    166e:	f1 1f       	adc	r31, r17
    1670:	30 82       	st	Z, r3
    1672:	a0 91 f8 16 	lds	r26, 0x16F8	; 0x8016f8 <serverMessage>
    1676:	b0 91 f9 16 	lds	r27, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    167a:	a0 0f       	add	r26, r16
    167c:	b1 1f       	adc	r27, r17
    167e:	f7 01       	movw	r30, r14
    1680:	20 81       	ld	r18, Z
    1682:	3b 2d       	mov	r19, r11
    1684:	23 03       	mulsu	r18, r19
    1686:	f0 01       	movw	r30, r0
    1688:	11 24       	eor	r1, r1
    168a:	ec 55       	subi	r30, 0x5C	; 92
    168c:	fd 4f       	sbci	r31, 0xFD	; 253
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	8c 0d       	add	r24, r12
    1694:	9d 1d       	adc	r25, r13
    1696:	11 96       	adiw	r26, 0x01	; 1
    1698:	9c 93       	st	X, r25
    169a:	a0 91 f8 16 	lds	r26, 0x16F8	; 0x8016f8 <serverMessage>
    169e:	b0 91 f9 16 	lds	r27, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    16a2:	a0 0f       	add	r26, r16
    16a4:	b1 1f       	adc	r27, r17
    16a6:	f7 01       	movw	r30, r14
    16a8:	20 81       	ld	r18, Z
    16aa:	23 03       	mulsu	r18, r19
    16ac:	f0 01       	movw	r30, r0
    16ae:	11 24       	eor	r1, r1
    16b0:	ec 55       	subi	r30, 0x5C	; 92
    16b2:	fd 4f       	sbci	r31, 0xFD	; 253
    16b4:	80 81       	ld	r24, Z
    16b6:	8c 0d       	add	r24, r12
    16b8:	12 96       	adiw	r26, 0x02	; 2
    16ba:	8c 93       	st	X, r24
    16bc:	e0 91 f8 16 	lds	r30, 0x16F8	; 0x8016f8 <serverMessage>
    16c0:	f0 91 f9 16 	lds	r31, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    16c4:	e0 0f       	add	r30, r16
    16c6:	f1 1f       	adc	r31, r17
    16c8:	13 82       	std	Z+3, r1	; 0x03
    16ca:	d7 01       	movw	r26, r14
    16cc:	2c 91       	ld	r18, X
    16ce:	32 2d       	mov	r19, r2
    16d0:	23 03       	mulsu	r18, r19
    16d2:	f0 01       	movw	r30, r0
    16d4:	11 24       	eor	r1, r1
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	4c 0f       	add	r20, r28
    16dc:	5d 1f       	adc	r21, r29
    16de:	e4 0f       	add	r30, r20
    16e0:	f5 1f       	adc	r31, r21
    16e2:	ec 0d       	add	r30, r12
    16e4:	fd 1d       	adc	r31, r13
    16e6:	20 a1       	ldd	r18, Z+32	; 0x20
    16e8:	e0 91 f8 16 	lds	r30, 0x16F8	; 0x8016f8 <serverMessage>
    16ec:	f0 91 f9 16 	lds	r31, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    16f0:	c8 01       	movw	r24, r16
    16f2:	04 96       	adiw	r24, 0x04	; 4
    16f4:	e8 0f       	add	r30, r24
    16f6:	f9 1f       	adc	r31, r25
    16f8:	0b 5f       	subi	r16, 0xFB	; 251
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	20 83       	st	Z, r18
    16fe:	8c 91       	ld	r24, X
    1700:	08 2e       	mov	r0, r24
    1702:	00 0c       	add	r0, r0
    1704:	99 0b       	sbc	r25, r25
    1706:	b8 9e       	mul	r11, r24
    1708:	d0 01       	movw	r26, r0
    170a:	b9 9e       	mul	r11, r25
    170c:	b0 0d       	add	r27, r0
    170e:	11 24       	eor	r1, r1
    1710:	ac 0d       	add	r26, r12
    1712:	bd 1d       	adc	r27, r13
    1714:	a8 55       	subi	r26, 0x58	; 88
    1716:	bd 4f       	sbci	r27, 0xFD	; 253
    1718:	28 9e       	mul	r2, r24
    171a:	f0 01       	movw	r30, r0
    171c:	29 9e       	mul	r2, r25
    171e:	f0 0d       	add	r31, r0
    1720:	11 24       	eor	r1, r1
    1722:	e4 0f       	add	r30, r20
    1724:	f5 1f       	adc	r31, r21
    1726:	ec 0d       	add	r30, r12
    1728:	fd 1d       	adc	r31, r13
    172a:	80 a1       	ldd	r24, Z+32	; 0x20
    172c:	8c 93       	st	X, r24
    172e:	5f ef       	ldi	r21, 0xFF	; 255
    1730:	85 1a       	sub	r8, r21
    1732:	95 0a       	sbc	r9, r21
    1734:	a1 2c       	mov	r10, r1
    1736:	02 c0       	rjmp	.+4      	; 0x173c <modbusRead()+0x7ae>
    1738:	aa 20       	and	r10, r10
    173a:	c9 f3       	breq	.-14     	; 0x172e <modbusRead()+0x7a0>
    173c:	8f ef       	ldi	r24, 0xFF	; 255
    173e:	c8 1a       	sub	r12, r24
    1740:	d8 0a       	sbc	r13, r24
    1742:	4d cf       	rjmp	.-358    	; 0x15de <modbusRead()+0x650>
    1744:	d7 01       	movw	r26, r14
    1746:	2c 91       	ld	r18, X
    1748:	3b 2d       	mov	r19, r11
    174a:	23 03       	mulsu	r18, r19
    174c:	f0 01       	movw	r30, r0
    174e:	11 24       	eor	r1, r1
    1750:	e6 52       	subi	r30, 0x26	; 38
    1752:	fd 4f       	sbci	r31, 0xFD	; 253
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	18 16       	cp	r1, r24
    175a:	19 06       	cpc	r1, r25
    175c:	0c f0       	brlt	.+2      	; 0x1760 <modbusRead()+0x7d2>
    175e:	d5 c0       	rjmp	.+426    	; 0x190a <modbusRead()+0x97c>
    1760:	d1 2c       	mov	r13, r1
    1762:	c1 2c       	mov	r12, r1
    1764:	d7 01       	movw	r26, r14
    1766:	5c 90       	ld	r5, X
    1768:	65 2c       	mov	r6, r5
    176a:	05 2c       	mov	r0, r5
    176c:	00 0c       	add	r0, r0
    176e:	77 08       	sbc	r7, r7
    1770:	b6 9c       	mul	r11, r6
    1772:	c0 01       	movw	r24, r0
    1774:	b7 9c       	mul	r11, r7
    1776:	90 0d       	add	r25, r0
    1778:	11 24       	eor	r1, r1
    177a:	80 5a       	subi	r24, 0xA0	; 160
    177c:	9d 4f       	sbci	r25, 0xFD	; 253
    177e:	fc 01       	movw	r30, r24
    1780:	e0 5c       	subi	r30, 0xC0	; 192
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	32 96       	adiw	r30, 0x02	; 2
    178a:	20 81       	ld	r18, Z
    178c:	31 81       	ldd	r19, Z+1	; 0x01
    178e:	2f 5f       	subi	r18, 0xFF	; 255
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	26 1b       	sub	r18, r22
    1794:	37 0b       	sbc	r19, r23
    1796:	c2 16       	cp	r12, r18
    1798:	d3 06       	cpc	r13, r19
    179a:	08 f0       	brcs	.+2      	; 0x179e <modbusRead()+0x810>
    179c:	b6 c0       	rjmp	.+364    	; 0x190a <modbusRead()+0x97c>
    179e:	f8 96       	adiw	r30, 0x38	; 56
    17a0:	40 81       	ld	r20, Z
    17a2:	51 81       	ldd	r21, Z+1	; 0x01
    17a4:	6c 0d       	add	r22, r12
    17a6:	7d 1d       	adc	r23, r13
    17a8:	0e 94 7d 07 	call	0xefa	; 0xefa <arraycheck(unsigned short*, short, int)>
    17ac:	88 23       	and	r24, r24
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <modbusRead()+0x824>
    17b0:	a6 c0       	rjmp	.+332    	; 0x18fe <modbusRead()+0x970>
    17b2:	e8 e1       	ldi	r30, 0x18	; 24
    17b4:	e6 9d       	mul	r30, r6
    17b6:	d0 01       	movw	r26, r0
    17b8:	e7 9d       	mul	r30, r7
    17ba:	b0 0d       	add	r27, r0
    17bc:	11 24       	eor	r1, r1
    17be:	ac 0d       	add	r26, r12
    17c0:	bd 1d       	adc	r27, r13
    17c2:	aa 0f       	add	r26, r26
    17c4:	bb 1f       	adc	r27, r27
    17c6:	21 e0       	ldi	r18, 0x01	; 1
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	2c 0f       	add	r18, r28
    17cc:	3d 1f       	adc	r19, r29
    17ce:	a2 0f       	add	r26, r18
    17d0:	b3 1f       	adc	r27, r19
    17d2:	36 e5       	ldi	r19, 0x56	; 86
    17d4:	36 9d       	mul	r19, r6
    17d6:	f0 01       	movw	r30, r0
    17d8:	37 9d       	mul	r19, r7
    17da:	f0 0d       	add	r31, r0
    17dc:	11 24       	eor	r1, r1
    17de:	ec 0d       	add	r30, r12
    17e0:	fd 1d       	adc	r31, r13
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	e8 54       	subi	r30, 0x48	; 72
    17e8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ea:	4d 91       	ld	r20, X+
    17ec:	5c 91       	ld	r21, X
    17ee:	20 81       	ld	r18, Z
    17f0:	31 81       	ldd	r19, Z+1	; 0x01
    17f2:	a8 2e       	mov	r10, r24
    17f4:	42 17       	cp	r20, r18
    17f6:	53 07       	cpc	r21, r19
    17f8:	09 f4       	brne	.+2      	; 0x17fc <modbusRead()+0x86e>
    17fa:	83 c0       	rjmp	.+262    	; 0x1902 <modbusRead()+0x974>
    17fc:	e0 91 f8 16 	lds	r30, 0x16F8	; 0x8016f8 <serverMessage>
    1800:	f0 91 f9 16 	lds	r31, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    1804:	e0 0f       	add	r30, r16
    1806:	f1 1f       	adc	r31, r17
    1808:	50 82       	st	Z, r5
    180a:	a0 91 f8 16 	lds	r26, 0x16F8	; 0x8016f8 <serverMessage>
    180e:	b0 91 f9 16 	lds	r27, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    1812:	a0 0f       	add	r26, r16
    1814:	b1 1f       	adc	r27, r17
    1816:	f7 01       	movw	r30, r14
    1818:	20 81       	ld	r18, Z
    181a:	3b 2d       	mov	r19, r11
    181c:	23 03       	mulsu	r18, r19
    181e:	f0 01       	movw	r30, r0
    1820:	11 24       	eor	r1, r1
    1822:	e0 56       	subi	r30, 0x60	; 96
    1824:	fd 4f       	sbci	r31, 0xFD	; 253
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	8c 0d       	add	r24, r12
    182c:	9d 1d       	adc	r25, r13
    182e:	11 96       	adiw	r26, 0x01	; 1
    1830:	9c 93       	st	X, r25
    1832:	a0 91 f8 16 	lds	r26, 0x16F8	; 0x8016f8 <serverMessage>
    1836:	b0 91 f9 16 	lds	r27, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    183a:	a0 0f       	add	r26, r16
    183c:	b1 1f       	adc	r27, r17
    183e:	f7 01       	movw	r30, r14
    1840:	20 81       	ld	r18, Z
    1842:	23 03       	mulsu	r18, r19
    1844:	f0 01       	movw	r30, r0
    1846:	11 24       	eor	r1, r1
    1848:	e0 56       	subi	r30, 0x60	; 96
    184a:	fd 4f       	sbci	r31, 0xFD	; 253
    184c:	80 81       	ld	r24, Z
    184e:	8c 0d       	add	r24, r12
    1850:	12 96       	adiw	r26, 0x02	; 2
    1852:	8c 93       	st	X, r24
    1854:	a0 91 f8 16 	lds	r26, 0x16F8	; 0x8016f8 <serverMessage>
    1858:	b0 91 f9 16 	lds	r27, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    185c:	a0 0f       	add	r26, r16
    185e:	b1 1f       	adc	r27, r17
    1860:	f7 01       	movw	r30, r14
    1862:	20 81       	ld	r18, Z
    1864:	38 e1       	ldi	r19, 0x18	; 24
    1866:	23 03       	mulsu	r18, r19
    1868:	f0 01       	movw	r30, r0
    186a:	11 24       	eor	r1, r1
    186c:	ec 0d       	add	r30, r12
    186e:	fd 1d       	adc	r31, r13
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	4c 0f       	add	r20, r28
    187a:	5d 1f       	adc	r21, r29
    187c:	e4 0f       	add	r30, r20
    187e:	f5 1f       	adc	r31, r21
    1880:	81 81       	ldd	r24, Z+1	; 0x01
    1882:	13 96       	adiw	r26, 0x03	; 3
    1884:	8c 93       	st	X, r24
    1886:	a0 91 f8 16 	lds	r26, 0x16F8	; 0x8016f8 <serverMessage>
    188a:	b0 91 f9 16 	lds	r27, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    188e:	c8 01       	movw	r24, r16
    1890:	04 96       	adiw	r24, 0x04	; 4
    1892:	a8 0f       	add	r26, r24
    1894:	b9 1f       	adc	r27, r25
    1896:	0b 5f       	subi	r16, 0xFB	; 251
    1898:	1f 4f       	sbci	r17, 0xFF	; 255
    189a:	f7 01       	movw	r30, r14
    189c:	20 81       	ld	r18, Z
    189e:	23 03       	mulsu	r18, r19
    18a0:	f0 01       	movw	r30, r0
    18a2:	11 24       	eor	r1, r1
    18a4:	ec 0d       	add	r30, r12
    18a6:	fd 1d       	adc	r31, r13
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	e4 0f       	add	r30, r20
    18ae:	f5 1f       	adc	r31, r21
    18b0:	80 81       	ld	r24, Z
    18b2:	8c 93       	st	X, r24
    18b4:	d7 01       	movw	r26, r14
    18b6:	8c 91       	ld	r24, X
    18b8:	08 2e       	mov	r0, r24
    18ba:	00 0c       	add	r0, r0
    18bc:	99 0b       	sbc	r25, r25
    18be:	b6 e5       	ldi	r27, 0x56	; 86
    18c0:	b8 9f       	mul	r27, r24
    18c2:	f0 01       	movw	r30, r0
    18c4:	b9 9f       	mul	r27, r25
    18c6:	f0 0d       	add	r31, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	ec 0d       	add	r30, r12
    18cc:	fd 1d       	adc	r31, r13
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	e8 54       	subi	r30, 0x48	; 72
    18d4:	fd 4f       	sbci	r31, 0xFD	; 253
    18d6:	38 9f       	mul	r19, r24
    18d8:	d0 01       	movw	r26, r0
    18da:	39 9f       	mul	r19, r25
    18dc:	b0 0d       	add	r27, r0
    18de:	11 24       	eor	r1, r1
    18e0:	ac 0d       	add	r26, r12
    18e2:	bd 1d       	adc	r27, r13
    18e4:	aa 0f       	add	r26, r26
    18e6:	bb 1f       	adc	r27, r27
    18e8:	a4 0f       	add	r26, r20
    18ea:	b5 1f       	adc	r27, r21
    18ec:	8d 91       	ld	r24, X+
    18ee:	9c 91       	ld	r25, X
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	ef ef       	ldi	r30, 0xFF	; 255
    18f6:	8e 1a       	sub	r8, r30
    18f8:	9e 0a       	sbc	r9, r30
    18fa:	a1 2c       	mov	r10, r1
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <modbusRead()+0x974>
    18fe:	aa 20       	and	r10, r10
    1900:	c9 f3       	breq	.-14     	; 0x18f4 <modbusRead()+0x966>
    1902:	ff ef       	ldi	r31, 0xFF	; 255
    1904:	cf 1a       	sub	r12, r31
    1906:	df 0a       	sbc	r13, r31
    1908:	2d cf       	rjmp	.-422    	; 0x1764 <modbusRead()+0x7d6>
    190a:	2f ef       	ldi	r18, 0xFF	; 255
    190c:	e2 1a       	sub	r14, r18
    190e:	f2 0a       	sbc	r15, r18
    1910:	47 ce       	rjmp	.-882    	; 0x15a0 <modbusRead()+0x612>
    1912:	18 14       	cp	r1, r8
    1914:	19 04       	cpc	r1, r9
    1916:	0c f0       	brlt	.+2      	; 0x191a <modbusRead()+0x98c>
    1918:	41 c0       	rjmp	.+130    	; 0x199c <modbusRead()+0xa0e>
    191a:	e0 90 f8 16 	lds	r14, 0x16F8	; 0x8016f8 <serverMessage>
    191e:	f0 90 f9 16 	lds	r15, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    1922:	d7 01       	movw	r26, r14
    1924:	51 96       	adiw	r26, 0x11	; 17
    1926:	9c 92       	st	X, r9
    1928:	51 97       	sbiw	r26, 0x11	; 17
    192a:	52 96       	adiw	r26, 0x12	; 18
    192c:	8c 92       	st	X, r8
    192e:	f7 01       	movw	r30, r14
    1930:	01 90       	ld	r0, Z+
    1932:	00 20       	and	r0, r0
    1934:	e9 f7       	brne	.-6      	; 0x1930 <modbusRead()+0x9a2>
    1936:	31 97       	sbiw	r30, 0x01	; 1
    1938:	bf 01       	movw	r22, r30
    193a:	6e 19       	sub	r22, r14
    193c:	7f 09       	sbc	r23, r15
    193e:	c7 01       	movw	r24, r14
    1940:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
    1944:	f7 01       	movw	r30, r14
    1946:	e0 0f       	add	r30, r16
    1948:	f1 1f       	adc	r31, r17
    194a:	90 83       	st	Z, r25
    194c:	20 91 f8 16 	lds	r18, 0x16F8	; 0x8016f8 <serverMessage>
    1950:	30 91 f9 16 	lds	r19, 0x16F9	; 0x8016f9 <serverMessage+0x1>
    1954:	02 0f       	add	r16, r18
    1956:	13 1f       	adc	r17, r19
    1958:	f8 01       	movw	r30, r16
    195a:	81 83       	std	Z+1, r24	; 0x01
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	90 93 8f 16 	sts	0x168F, r25	; 0x80168f <state+0x1>
    1964:	80 93 8e 16 	sts	0x168E, r24	; 0x80168e <state>
    1968:	c5 55       	subi	r28, 0x55	; 85
    196a:	da 4f       	sbci	r29, 0xFA	; 250
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	df 90       	pop	r13
    1984:	cf 90       	pop	r12
    1986:	bf 90       	pop	r11
    1988:	af 90       	pop	r10
    198a:	9f 90       	pop	r9
    198c:	8f 90       	pop	r8
    198e:	7f 90       	pop	r7
    1990:	6f 90       	pop	r6
    1992:	5f 90       	pop	r5
    1994:	4f 90       	pop	r4
    1996:	3f 90       	pop	r3
    1998:	2f 90       	pop	r2
    199a:	08 95       	ret
    199c:	10 92 8f 16 	sts	0x168F, r1	; 0x80168f <state+0x1>
    19a0:	10 92 8e 16 	sts	0x168E, r1	; 0x80168e <state>
    19a4:	e1 cf       	rjmp	.-62     	; 0x1968 <modbusRead()+0x9da>

000019a6 <OKcomcheck(int)>:
_Z10OKcomchecki():
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    19b2:	8c ef       	ldi	r24, 0xFC	; 252
    19b4:	96 e1       	ldi	r25, 0x16	; 22
    19b6:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
    19ba:	89 2b       	or	r24, r25
    19bc:	b9 f0       	breq	.+46     	; 0x19ec <OKcomcheck(int)+0x46>
    19be:	8c ef       	ldi	r24, 0xFC	; 252
    19c0:	96 e1       	ldi	r25, 0x16	; 22
    19c2:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
    19c6:	8c 01       	movw	r16, r24
    19c8:	d0 e0       	ldi	r29, 0x00	; 0
    19ca:	c0 e0       	ldi	r28, 0x00	; 0
    19cc:	c0 17       	cp	r28, r16
    19ce:	d1 07       	cpc	r29, r17
    19d0:	84 f7       	brge	.-32     	; 0x19b2 <OKcomcheck(int)+0xc>
    19d2:	8c ef       	ldi	r24, 0xFC	; 252
    19d4:	96 e1       	ldi	r25, 0x16	; 22
    19d6:	0e 94 df 10 	call	0x21be	; 0x21be <HardwareSerial::read()>
    19da:	e0 91 fa 16 	lds	r30, 0x16FA	; 0x8016fa <simBuffer>
    19de:	f0 91 fb 16 	lds	r31, 0x16FB	; 0x8016fb <simBuffer+0x1>
    19e2:	ec 0f       	add	r30, r28
    19e4:	fd 1f       	adc	r31, r29
    19e6:	80 83       	st	Z, r24
    19e8:	21 96       	adiw	r28, 0x01	; 1
    19ea:	f0 cf       	rjmp	.-32     	; 0x19cc <OKcomcheck(int)+0x26>
    19ec:	6f e1       	ldi	r22, 0x1F	; 31
    19ee:	72 e0       	ldi	r23, 0x02	; 2
    19f0:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <simBuffer>
    19f4:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <simBuffer+0x1>
    19f8:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <strstr>
    19fc:	ec 01       	movw	r28, r24
    19fe:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	cd 2b       	or	r28, r29
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <OKcomcheck(int)+0x64>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	08 95       	ret

00001a14 <simRead()>:
_Z7simReadv():
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	88 ee       	ldi	r24, 0xE8	; 232
    1a1e:	93 e0       	ldi	r25, 0x03	; 3
    1a20:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1a24:	8c ef       	ldi	r24, 0xFC	; 252
    1a26:	96 e1       	ldi	r25, 0x16	; 22
    1a28:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
    1a2c:	89 2b       	or	r24, r25
    1a2e:	b9 f0       	breq	.+46     	; 0x1a5e <simRead()+0x4a>
    1a30:	8c ef       	ldi	r24, 0xFC	; 252
    1a32:	96 e1       	ldi	r25, 0x16	; 22
    1a34:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
    1a38:	8c 01       	movw	r16, r24
    1a3a:	d0 e0       	ldi	r29, 0x00	; 0
    1a3c:	c0 e0       	ldi	r28, 0x00	; 0
    1a3e:	c0 17       	cp	r28, r16
    1a40:	d1 07       	cpc	r29, r17
    1a42:	84 f7       	brge	.-32     	; 0x1a24 <simRead()+0x10>
    1a44:	8c ef       	ldi	r24, 0xFC	; 252
    1a46:	96 e1       	ldi	r25, 0x16	; 22
    1a48:	0e 94 df 10 	call	0x21be	; 0x21be <HardwareSerial::read()>
    1a4c:	e0 91 fa 16 	lds	r30, 0x16FA	; 0x8016fa <simBuffer>
    1a50:	f0 91 fb 16 	lds	r31, 0x16FB	; 0x8016fb <simBuffer+0x1>
    1a54:	ec 0f       	add	r30, r28
    1a56:	fd 1f       	adc	r31, r29
    1a58:	80 83       	st	Z, r24
    1a5a:	21 96       	adiw	r28, 0x01	; 1
    1a5c:	f0 cf       	rjmp	.-32     	; 0x1a3e <simRead()+0x2a>
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <responseCheck(char*, unsigned int)>:
_Z13responseCheckPcj():
    1a68:	6f 92       	push	r6
    1a6a:	7f 92       	push	r7
    1a6c:	8f 92       	push	r8
    1a6e:	9f 92       	push	r9
    1a70:	af 92       	push	r10
    1a72:	bf 92       	push	r11
    1a74:	cf 92       	push	r12
    1a76:	df 92       	push	r13
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	3c 01       	movw	r6, r24
    1a86:	6b 01       	movw	r12, r22
    1a88:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    1a8c:	4b 01       	movw	r8, r22
    1a8e:	5c 01       	movw	r10, r24
    1a90:	d0 e0       	ldi	r29, 0x00	; 0
    1a92:	c0 e0       	ldi	r28, 0x00	; 0
    1a94:	f1 2c       	mov	r15, r1
    1a96:	e1 2c       	mov	r14, r1
    1a98:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <simRead()>
    1a9c:	00 91 fa 16 	lds	r16, 0x16FA	; 0x8016fa <simBuffer>
    1aa0:	10 91 fb 16 	lds	r17, 0x16FB	; 0x8016fb <simBuffer+0x1>
    1aa4:	b3 01       	movw	r22, r6
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <strstr>
    1aac:	89 2b       	or	r24, r25
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <responseCheck(char*, unsigned int)+0x4a>
    1ab0:	64 c0       	rjmp	.+200    	; 0x1b7a <responseCheck(char*, unsigned int)+0x112>
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	81 e4       	ldi	r24, 0x41	; 65
    1ab6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1aba:	8d e7       	ldi	r24, 0x7D	; 125
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	81 e4       	ldi	r24, 0x41	; 65
    1ac6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1aca:	8d e7       	ldi	r24, 0x7D	; 125
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	81 e4       	ldi	r24, 0x41	; 65
    1ad6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1ada:	8d e7       	ldi	r24, 0x7D	; 125
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	81 e4       	ldi	r24, 0x41	; 65
    1ae6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1aea:	8d e7       	ldi	r24, 0x7D	; 125
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1af2:	11 e0       	ldi	r17, 0x01	; 1
    1af4:	c1 e0       	ldi	r28, 0x01	; 1
    1af6:	d0 e0       	ldi	r29, 0x00	; 0
    1af8:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    1afc:	68 19       	sub	r22, r8
    1afe:	79 09       	sbc	r23, r9
    1b00:	8a 09       	sbc	r24, r10
    1b02:	9b 09       	sbc	r25, r11
    1b04:	c6 16       	cp	r12, r22
    1b06:	d7 06       	cpc	r13, r23
    1b08:	e8 06       	cpc	r14, r24
    1b0a:	f9 06       	cpc	r15, r25
    1b0c:	18 f5       	brcc	.+70     	; 0x1b54 <responseCheck(char*, unsigned int)+0xec>
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	82 e4       	ldi	r24, 0x42	; 66
    1b12:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1b16:	8d e7       	ldi	r24, 0x7D	; 125
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	82 e4       	ldi	r24, 0x42	; 66
    1b22:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1b26:	8d e7       	ldi	r24, 0x7D	; 125
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	82 e4       	ldi	r24, 0x42	; 66
    1b32:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1b36:	8d e7       	ldi	r24, 0x7D	; 125
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	82 e4       	ldi	r24, 0x42	; 66
    1b42:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1b46:	8d e7       	ldi	r24, 0x7D	; 125
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1b4e:	d0 e0       	ldi	r29, 0x00	; 0
    1b50:	c0 e0       	ldi	r28, 0x00	; 0
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <responseCheck(char*, unsigned int)+0xf2>
    1b54:	11 23       	and	r17, r17
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <responseCheck(char*, unsigned int)+0xf2>
    1b58:	9f cf       	rjmp	.-194    	; 0x1a98 <responseCheck(char*, unsigned int)+0x30>
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	9f 90       	pop	r9
    1b72:	8f 90       	pop	r8
    1b74:	7f 90       	pop	r7
    1b76:	6f 90       	pop	r6
    1b78:	08 95       	ret
    1b7a:	62 e2       	ldi	r22, 0x22	; 34
    1b7c:	72 e0       	ldi	r23, 0x02	; 2
    1b7e:	c8 01       	movw	r24, r16
    1b80:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <strstr>
    1b84:	10 e0       	ldi	r17, 0x00	; 0
    1b86:	89 2b       	or	r24, r25
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <responseCheck(char*, unsigned int)+0x124>
    1b8a:	b6 cf       	rjmp	.-148    	; 0x1af8 <responseCheck(char*, unsigned int)+0x90>
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	80 e4       	ldi	r24, 0x40	; 64
    1b90:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1b94:	8d e7       	ldi	r24, 0x7D	; 125
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	80 e4       	ldi	r24, 0x40	; 64
    1ba0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1ba4:	8d e7       	ldi	r24, 0x7D	; 125
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	80 e4       	ldi	r24, 0x40	; 64
    1bb0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1bb4:	8d e7       	ldi	r24, 0x7D	; 125
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	80 e4       	ldi	r24, 0x40	; 64
    1bc0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
    1bc4:	8d e7       	ldi	r24, 0x7D	; 125
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1bcc:	11 e0       	ldi	r17, 0x01	; 1
    1bce:	c2 e0       	ldi	r28, 0x02	; 2
    1bd0:	d0 e0       	ldi	r29, 0x00	; 0
    1bd2:	92 cf       	rjmp	.-220    	; 0x1af8 <responseCheck(char*, unsigned int)+0x90>

00001bd4 <simSetup()>:
_Z8simSetupv():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:246
  if (powerStatus() == 0) {  //If power is still on
    state = poweroff;
  }
}

void simSetup() {
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	c4 e0       	ldi	r28, 0x04	; 4
    1bdc:	d0 e0       	ldi	r29, 0x00	; 0
    1bde:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:253
  bool start = 0;  // Start bit used in simSetup
  bool stop = 1;   // Stop bit used in simSetup

  while (stop) {                   // Stay in loop while stop is set
    for (int i = 0; i < 4; i++) {  // Check four times for OK response
      simSerial.println(F("AT"));  // Print AT
    1be0:	65 ee       	ldi	r22, 0xE5	; 229
    1be2:	71 e0       	ldi	r23, 0x01	; 1
    1be4:	8c ef       	ldi	r24, 0xFC	; 252
    1be6:	96 e1       	ldi	r25, 0x16	; 22
    1be8:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:254
      start = OKcomcheck(300);     // Check for OK
    1bec:	8c e2       	ldi	r24, 0x2C	; 44
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <OKcomcheck(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:255
      if (start) {                 // If start is set, stop while
    1bf4:	81 11       	cpse	r24, r1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:256
        stop = 0;
    1bf6:	10 e0       	ldi	r17, 0x00	; 0
    1bf8:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:252 (discriminator 2)

  bool start = 0;  // Start bit used in simSetup
  bool stop = 1;   // Stop bit used in simSetup

  while (stop) {                   // Stay in loop while stop is set
    for (int i = 0; i < 4; i++) {  // Check four times for OK response
    1bfa:	91 f7       	brne	.-28     	; 0x1be0 <simSetup()+0xc>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:259
      start = OKcomcheck(300);     // Check for OK
      if (start) {                 // If start is set, stop while
        stop = 0;
      }
    }
    if (!start) {  // If start is not set sim module is turned of, therefore turn on
    1bfc:	81 11       	cpse	r24, r1
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <simSetup()+0x30>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:260
      simpow();
    1c00:	0e 94 c8 02 	call	0x590	; 0x590 <simpow()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:251
void simSetup() {

  bool start = 0;  // Start bit used in simSetup
  bool stop = 1;   // Stop bit used in simSetup

  while (stop) {                   // Stay in loop while stop is set
    1c04:	11 11       	cpse	r17, r1
    1c06:	e9 cf       	rjmp	.-46     	; 0x1bda <simSetup()+0x6>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:265
      simpow();
    }
  }
  stop = 1;  // Set stop for next siminit call

  clrsimBuffer();
    1c08:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:267

  Serial1.println(F("AT+GSN"));  // Sent at command to get IMEI number
    1c0c:	6e ed       	ldi	r22, 0xDE	; 222
    1c0e:	71 e0       	ldi	r23, 0x01	; 1
    1c10:	8c ef       	ldi	r24, 0xFC	; 252
    1c12:	96 e1       	ldi	r25, 0x16	; 22
    1c14:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:268
  simRead();                     // Read response
    1c18:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <simRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:271

  for (int i = 0; i < 15; i++) {  // Put response into IMEI array
    IMEI[i] = simBuffer[i + 9];
    1c1c:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <simBuffer>
    1c20:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <simBuffer+0x1>
    1c24:	fc 01       	movw	r30, r24
    1c26:	39 96       	adiw	r30, 0x09	; 9
    1c28:	a2 eb       	ldi	r26, 0xB2	; 178
    1c2a:	b6 e1       	ldi	r27, 0x16	; 22
    1c2c:	48 96       	adiw	r24, 0x18	; 24
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:271 (discriminator 2)
    1c2e:	21 91       	ld	r18, Z+
    1c30:	2d 93       	st	X+, r18
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:270 (discriminator 2)
  clrsimBuffer();

  Serial1.println(F("AT+GSN"));  // Sent at command to get IMEI number
  simRead();                     // Read response

  for (int i = 0; i < 15; i++) {  // Put response into IMEI array
    1c32:	e8 17       	cp	r30, r24
    1c34:	f9 07       	cpc	r31, r25
    1c36:	d9 f7       	brne	.-10     	; 0x1c2e <simSetup()+0x5a>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:273
    IMEI[i] = simBuffer[i + 9];
  }
  clrsimBuffer();  // Clear sim response buffer
    1c38:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:275

  simSerial.println(F("AT+CGATT?"));  // Check operator. See operator e.g Telia and if connected to NB or CAT-M
    1c3c:	64 ed       	ldi	r22, 0xD4	; 212
    1c3e:	71 e0       	ldi	r23, 0x01	; 1
    1c40:	8c ef       	ldi	r24, 0xFC	; 252
    1c42:	96 e1       	ldi	r25, 0x16	; 22
    1c44:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:276
  responseCheck("1", 10000);
    1c48:	60 e1       	ldi	r22, 0x10	; 16
    1c4a:	77 e2       	ldi	r23, 0x27	; 39
    1c4c:	8b e2       	ldi	r24, 0x2B	; 43
    1c4e:	92 e0       	ldi	r25, 0x02	; 2
    1c50:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:277
  clrsimBuffer();
    1c54:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:279

  simSerial.println(F("AT+COPS?"));  // Check operator. See operator e.g Telia and if connected to NB or CAT-M
    1c58:	6b ec       	ldi	r22, 0xCB	; 203
    1c5a:	71 e0       	ldi	r23, 0x01	; 1
    1c5c:	8c ef       	ldi	r24, 0xFC	; 252
    1c5e:	96 e1       	ldi	r25, 0x16	; 22
    1c60:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:280
  if (responseCheck("9", 5000) != 1) {
    1c64:	68 e8       	ldi	r22, 0x88	; 136
    1c66:	73 e1       	ldi	r23, 0x13	; 19
    1c68:	8d e2       	ldi	r24, 0x2D	; 45
    1c6a:	92 e0       	ldi	r25, 0x02	; 2
    1c6c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	31 f0       	breq	.+12     	; 0x1c80 <simSetup()+0xac>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:281
    responseCheck("7", 5000);
    1c74:	68 e8       	ldi	r22, 0x88	; 136
    1c76:	73 e1       	ldi	r23, 0x13	; 19
    1c78:	8f e2       	ldi	r24, 0x2F	; 47
    1c7a:	92 e0       	ldi	r25, 0x02	; 2
    1c7c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:283
  }
  clrsimBuffer();
    1c80:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:285

  simSerial.println(F("AT+CGNAPN"));
    1c84:	61 ec       	ldi	r22, 0xC1	; 193
    1c86:	71 e0       	ldi	r23, 0x01	; 1
    1c88:	8c ef       	ldi	r24, 0xFC	; 252
    1c8a:	96 e1       	ldi	r25, 0x16	; 22
    1c8c:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:286
  responseCheck("1,\"iot.1nce.net\"", 10000);
    1c90:	60 e1       	ldi	r22, 0x10	; 16
    1c92:	77 e2       	ldi	r23, 0x27	; 39
    1c94:	81 e3       	ldi	r24, 0x31	; 49
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:287
  clrsimBuffer();  
    1c9c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:289
  
  simSerial.println(F("AT+CSQ"));  // Check signal quality
    1ca0:	6a eb       	ldi	r22, 0xBA	; 186
    1ca2:	71 e0       	ldi	r23, 0x01	; 1
    1ca4:	8c ef       	ldi	r24, 0xFC	; 252
    1ca6:	96 e1       	ldi	r25, 0x16	; 22
    1ca8:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:290
  simRead();                       // read response and print out
    1cac:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <simRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:292
  for (int i = 0; i < 2; i++) {  // Put response into IMEI array
    CSQ[i] = simBuffer[i + 7];
    1cb0:	e0 91 fa 16 	lds	r30, 0x16FA	; 0x8016fa <simBuffer>
    1cb4:	f0 91 fb 16 	lds	r31, 0x16FB	; 0x8016fb <simBuffer+0x1>
    1cb8:	87 81       	ldd	r24, Z+7	; 0x07
    1cba:	80 93 af 16 	sts	0x16AF, r24	; 0x8016af <CSQ>
    1cbe:	80 85       	ldd	r24, Z+8	; 0x08
    1cc0:	80 93 b0 16 	sts	0x16B0, r24	; 0x8016b0 <CSQ+0x1>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:294
  }
  clrsimBuffer();  // Clear sim response buffer
    1cc4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:296

  simSerial.println(F("AT+CNCFG=0,1,\"iot.1nce.net\""));  // Check if connected to the correct APN
    1cc8:	6e e9       	ldi	r22, 0x9E	; 158
    1cca:	71 e0       	ldi	r23, 0x01	; 1
    1ccc:	8c ef       	ldi	r24, 0xFC	; 252
    1cce:	96 e1       	ldi	r25, 0x16	; 22
    1cd0:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:297
  responseCheck("OK", 10000);
    1cd4:	60 e1       	ldi	r22, 0x10	; 16
    1cd6:	77 e2       	ldi	r23, 0x27	; 39
    1cd8:	8f e1       	ldi	r24, 0x1F	; 31
    1cda:	92 e0       	ldi	r25, 0x02	; 2
    1cdc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:298
  clrsimBuffer();
    1ce0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:300

  simSerial.println(F("AT+CNACT=0,1"));  // Activate network
    1ce4:	61 e9       	ldi	r22, 0x91	; 145
    1ce6:	71 e0       	ldi	r23, 0x01	; 1
    1ce8:	8c ef       	ldi	r24, 0xFC	; 252
    1cea:	96 e1       	ldi	r25, 0x16	; 22
    1cec:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:301
  responseCheck("0,ACTIVE", 10000);
    1cf0:	60 e1       	ldi	r22, 0x10	; 16
    1cf2:	77 e2       	ldi	r23, 0x27	; 39
    1cf4:	82 e4       	ldi	r24, 0x42	; 66
    1cf6:	92 e0       	ldi	r25, 0x02	; 2
    1cf8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:302
  clrsimBuffer();
    1cfc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:304

  simSerial.println(F("AT+CNACT?"));  // Check if network is active to adress
    1d00:	67 e8       	ldi	r22, 0x87	; 135
    1d02:	71 e0       	ldi	r23, 0x01	; 1
    1d04:	8c ef       	ldi	r24, 0xFC	; 252
    1d06:	96 e1       	ldi	r25, 0x16	; 22
    1d08:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:305
  responseCheck("OK", 10000);
    1d0c:	60 e1       	ldi	r22, 0x10	; 16
    1d0e:	77 e2       	ldi	r23, 0x27	; 39
    1d10:	8f e1       	ldi	r24, 0x1F	; 31
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:306
  clrsimBuffer();
    1d18:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:308

  simSerial.println(F("AT+CAOPEN=0,0,\"UDP\",\"207.154.251.171\",8080"));  // Open UDP connection/socket
    1d1c:	6c e5       	ldi	r22, 0x5C	; 92
    1d1e:	71 e0       	ldi	r23, 0x01	; 1
    1d20:	8c ef       	ldi	r24, 0xFC	; 252
    1d22:	96 e1       	ldi	r25, 0x16	; 22
    1d24:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:309
  responseCheck("OK", 10000);
    1d28:	60 e1       	ldi	r22, 0x10	; 16
    1d2a:	77 e2       	ldi	r23, 0x27	; 39
    1d2c:	8f e1       	ldi	r24, 0x1F	; 31
    1d2e:	92 e0       	ldi	r25, 0x02	; 2
    1d30:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:311
  clrsimBuffer();
}
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	1f 91       	pop	r17
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:310
  responseCheck("OK", 10000);
  clrsimBuffer();

  simSerial.println(F("AT+CAOPEN=0,0,\"UDP\",\"207.154.251.171\",8080"));  // Open UDP connection/socket
  responseCheck("OK", 10000);
  clrsimBuffer();
    1d3a:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <clrsimBuffer()>

00001d3e <serverRead()>:
_Z10serverReadv():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:877
      simBuffer[i] = simSerial.read();
    }
  }
}

void serverRead() {
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	c8 5e       	subi	r28, 0xE8	; 232
    1d54:	d3 40       	sbci	r29, 0x03	; 3
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:881
  unsigned char buftemp[1000];
  int len;
  int start;
  millisDelay(300);
    1d60:	8c e2       	ldi	r24, 0x2C	; 44
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	0e 94 2e 02 	call	0x45c	; 0x45c <millisDelay(int)>
    1d68:	8e 01       	movw	r16, r28
    1d6a:	0f 5f       	subi	r16, 0xFF	; 255
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:882
  while (simSerial.available()) {  // While data incomming: Read into buffer
    1d6e:	8c ef       	ldi	r24, 0xFC	; 252
    1d70:	96 e1       	ldi	r25, 0x16	; 22
    1d72:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	a1 f0       	breq	.+40     	; 0x1da2 <serverRead()+0x64>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:883
    int numBytes = simSerial.available();
    1d7a:	8c ef       	ldi	r24, 0xFC	; 252
    1d7c:	96 e1       	ldi	r25, 0x16	; 22
    1d7e:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
    1d82:	6c 01       	movw	r12, r24
    1d84:	78 01       	movw	r14, r16
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:884 (discriminator 3)
    for (int i = 0; i < numBytes; i++) {
    1d86:	c7 01       	movw	r24, r14
    1d88:	80 1b       	sub	r24, r16
    1d8a:	91 0b       	sbc	r25, r17
    1d8c:	8c 15       	cp	r24, r12
    1d8e:	9d 05       	cpc	r25, r13
    1d90:	74 f7       	brge	.-36     	; 0x1d6e <serverRead()+0x30>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:885 (discriminator 2)
      buftemp[i] = simSerial.read();
    1d92:	8c ef       	ldi	r24, 0xFC	; 252
    1d94:	96 e1       	ldi	r25, 0x16	; 22
    1d96:	0e 94 df 10 	call	0x21be	; 0x21be <HardwareSerial::read()>
    1d9a:	f7 01       	movw	r30, r14
    1d9c:	81 93       	st	Z+, r24
    1d9e:	7f 01       	movw	r14, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:884 (discriminator 2)
  int len;
  int start;
  millisDelay(300);
  while (simSerial.available()) {  // While data incomming: Read into buffer
    int numBytes = simSerial.available();
    for (int i = 0; i < numBytes; i++) {
    1da0:	f2 cf       	rjmp	.-28     	; 0x1d86 <serverRead()+0x48>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:889
      buftemp[i] = simSerial.read();
    }
  }

  if (buftemp[27] < 48) {
    1da2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1da4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1da6:	20 53       	subi	r18, 0x30	; 48
    1da8:	33 0b       	sbc	r19, r19
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:891
    len = buftemp[26] - 48;
    start = 28;
    1daa:	ec e1       	ldi	r30, 0x1C	; 28
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:889
    for (int i = 0; i < numBytes; i++) {
      buftemp[i] = simSerial.read();
    }
  }

  if (buftemp[27] < 48) {
    1dae:	40 33       	cpi	r20, 0x30	; 48
    1db0:	70 f0       	brcs	.+28     	; 0x1dce <serverRead()+0x90>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:893
    len = buftemp[26] - 48;
    start = 28;
  } else {
    len = ((buftemp[26] - 48) * 10) + (buftemp[27] - 48);
    1db2:	5a e0       	ldi	r21, 0x0A	; 10
    1db4:	52 9f       	mul	r21, r18
    1db6:	b0 01       	movw	r22, r0
    1db8:	53 9f       	mul	r21, r19
    1dba:	70 0d       	add	r23, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	e4 2f       	mov	r30, r20
    1dc0:	e0 53       	subi	r30, 0x30	; 48
    1dc2:	ff 0b       	sbc	r31, r31
    1dc4:	9f 01       	movw	r18, r30
    1dc6:	26 0f       	add	r18, r22
    1dc8:	37 1f       	adc	r19, r23
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:894
    start = 29;
    1dca:	ed e1       	ldi	r30, 0x1D	; 29
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	e0 0f       	add	r30, r16
    1dd0:	f1 1f       	adc	r31, r17
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:897 (discriminator 3)
  }

  for (int i = 0; i < len; i++) {
    1dd2:	82 17       	cp	r24, r18
    1dd4:	93 07       	cpc	r25, r19
    1dd6:	54 f4       	brge	.+20     	; 0x1dec <serverRead()+0xae>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:898 (discriminator 2)
    simBuffer[i] = buftemp[start + i];
    1dd8:	41 91       	ld	r20, Z+
    1dda:	a0 91 fa 16 	lds	r26, 0x16FA	; 0x8016fa <simBuffer>
    1dde:	b0 91 fb 16 	lds	r27, 0x16FB	; 0x8016fb <simBuffer+0x1>
    1de2:	a8 0f       	add	r26, r24
    1de4:	b9 1f       	adc	r27, r25
    1de6:	4c 93       	st	X, r20
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:897 (discriminator 2)
  } else {
    len = ((buftemp[26] - 48) * 10) + (buftemp[27] - 48);
    start = 29;
  }

  for (int i = 0; i < len; i++) {
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	f3 cf       	rjmp	.-26     	; 0x1dd2 <serverRead()+0x94>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:900
    simBuffer[i] = buftemp[start + i];
  }
}
    1dec:	c8 51       	subi	r28, 0x18	; 24
    1dee:	dc 4f       	sbci	r29, 0xFC	; 252
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	df 90       	pop	r13
    1e08:	cf 90       	pop	r12
    1e0a:	08 95       	ret

00001e0c <setup>:
setup():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:92
  }
};

struct saved_data slaveSaved[30];

void setup() {
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	6f 97       	sbiw	r28, 0x1f	; 31
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:94

  CLKPR = 1 << CLKPCE;  // Clock Prescaler Change Enable
    1e24:	80 e8       	ldi	r24, 0x80	; 128
    1e26:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:95
  CLKPR = 0;            // Change clock division factor to 1.
    1e2a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
_ZN14HardwareSerial5beginEm():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1e2e:	26 e0       	ldi	r18, 0x06	; 6
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	55 e2       	ldi	r21, 0x25	; 37
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	8c ef       	ldi	r24, 0xFC	; 252
    1e3a:	96 e1       	ldi	r25, 0x16	; 22
    1e3c:	0e 94 c6 11 	call	0x238c	; 0x238c <HardwareSerial::begin(unsigned long, unsigned char)>
    1e40:	26 e0       	ldi	r18, 0x06	; 6
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	55 e2       	ldi	r21, 0x25	; 37
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	89 e9       	ldi	r24, 0x99	; 153
    1e4c:	97 e1       	ldi	r25, 0x17	; 23
    1e4e:	0e 94 c6 11 	call	0x238c	; 0x238c <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:102
  //Begin serial communication
  simSerial.begin(9600);
  modbusSerial.begin(9600);

  //Setup mode of pins on master
  pinMode(DTR_E, OUTPUT);
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	8a e2       	ldi	r24, 0x2A	; 42
    1e56:	0e 94 f5 14 	call	0x29ea	; 0x29ea <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:103
  pinMode(PWRKEY, OUTPUT);
    1e5a:	61 e0       	ldi	r22, 0x01	; 1
    1e5c:	8b e2       	ldi	r24, 0x2B	; 43
    1e5e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:104
  pinMode(BLUE_LED, OUTPUT);
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	82 e4       	ldi	r24, 0x42	; 66
    1e66:	0e 94 f5 14 	call	0x29ea	; 0x29ea <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:105
  pinMode(GREEN_LED, OUTPUT);
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	81 e4       	ldi	r24, 0x41	; 65
    1e6e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:106
  pinMode(RED_LED, OUTPUT);
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	80 e4       	ldi	r24, 0x40	; 64
    1e76:	0e 94 f5 14 	call	0x29ea	; 0x29ea <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:107
  pinMode(Button, INPUT);
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	83 e4       	ldi	r24, 0x43	; 67
    1e7e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:109

  digitalWrite(PWRKEY, HIGH);
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	8b e2       	ldi	r24, 0x2B	; 43
    1e86:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:110
  digitalWrite(DTR_E, LOW);
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	8a e2       	ldi	r24, 0x2A	; 42
    1e8e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:112

  simSetup();  //Sim module setup
    1e92:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <simSetup()>
    1e96:	be 01       	movw	r22, r28
    1e98:	6f 5f       	subi	r22, 0xFF	; 255
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	a2 eb       	ldi	r26, 0xB2	; 178
    1e9e:	b6 e1       	ldi	r27, 0x16	; 22
    1ea0:	8b 01       	movw	r16, r22
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:120

  char modelAndFirmware[16];
  short model = 0x0001;     //Model nr.
  short firmware = 0x0001;  //Firmware nr.

  for (int i = 0; i < strlen(IMEI); i++) {
    1ea2:	9d 01       	movw	r18, r26
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:120 (discriminator 3)
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	01 90       	ld	r0, Z+
    1ea8:	00 20       	and	r0, r0
    1eaa:	e9 f7       	brne	.-6      	; 0x1ea6 <setup+0x9a>
    1eac:	cf 01       	movw	r24, r30
    1eae:	83 5b       	subi	r24, 0xB3	; 179
    1eb0:	96 41       	sbci	r25, 0x16	; 22
    1eb2:	ad 01       	movw	r20, r26
    1eb4:	42 5b       	subi	r20, 0xB2	; 178
    1eb6:	56 41       	sbci	r21, 0x16	; 22
    1eb8:	48 17       	cp	r20, r24
    1eba:	59 07       	cpc	r21, r25
    1ebc:	28 f4       	brcc	.+10     	; 0x1ec8 <setup+0xbc>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:121 (discriminator 2)
    modelAndFirmware[i] = IMEI[i];
    1ebe:	8d 91       	ld	r24, X+
    1ec0:	fb 01       	movw	r30, r22
    1ec2:	81 93       	st	Z+, r24
    1ec4:	bf 01       	movw	r22, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:120 (discriminator 2)

  char modelAndFirmware[16];
  short model = 0x0001;     //Model nr.
  short firmware = 0x0001;  //Firmware nr.

  for (int i = 0; i < strlen(IMEI); i++) {
    1ec6:	ee cf       	rjmp	.-36     	; 0x1ea4 <setup+0x98>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:123
    modelAndFirmware[i] = IMEI[i];
  }
  modelAndFirmware[8] = 0x02;
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	89 87       	std	Y+9, r24	; 0x09
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:125

  modelAndFirmware[9] = highByte(model);
    1ecc:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:126
  modelAndFirmware[10] = lowByte(model);
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	8b 87       	std	Y+11, r24	; 0x0b
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:128

  modelAndFirmware[11] = highByte(firmware);
    1ed2:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:129
  modelAndFirmware[12] = lowByte(firmware);
    1ed4:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:131

  modelAndFirmware[13] = lowByte(CRC16_modbus(modelAndFirmware, 13));
    1ed6:	6d e0       	ldi	r22, 0x0D	; 13
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	c8 01       	movw	r24, r16
    1edc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
    1ee0:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:132
  modelAndFirmware[14] = highByte(CRC16_modbus(modelAndFirmware, 13));
    1ee2:	6d e0       	ldi	r22, 0x0D	; 13
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	c8 01       	movw	r24, r16
    1ee8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
    1eec:	9f 87       	std	Y+15, r25	; 0x0f
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:134

  simSerial.println(F("AT+CASEND=0,15"));
    1eee:	6a e4       	ldi	r22, 0x4A	; 74
    1ef0:	72 e0       	ldi	r23, 0x02	; 2
    1ef2:	8c ef       	ldi	r24, 0xFC	; 252
    1ef4:	96 e1       	ldi	r25, 0x16	; 22
    1ef6:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:135
  responseCheck("OK", 10000);
    1efa:	60 e1       	ldi	r22, 0x10	; 16
    1efc:	77 e2       	ldi	r23, 0x27	; 39
    1efe:	8f e1       	ldi	r24, 0x1F	; 31
    1f00:	92 e0       	ldi	r25, 0x02	; 2
    1f02:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:136
  clrsimBuffer();
    1f06:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:138

  simSerial.write(modelAndFirmware, strlen(modelAndFirmware));  // Check if network is active to adress
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	01 90       	ld	r0, Z+
    1f0e:	00 20       	and	r0, r0
    1f10:	e9 f7       	brne	.-6      	; 0x1f0c <setup+0x100>
    1f12:	31 97       	sbiw	r30, 0x01	; 1
    1f14:	af 01       	movw	r20, r30
    1f16:	40 1b       	sub	r20, r16
    1f18:	51 0b       	sbc	r21, r17
    1f1a:	b8 01       	movw	r22, r16
    1f1c:	8c ef       	ldi	r24, 0xFC	; 252
    1f1e:	96 e1       	ldi	r25, 0x16	; 22
    1f20:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Print::write(char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:139
  responseCheck("OK", 10000);
    1f24:	60 e1       	ldi	r22, 0x10	; 16
    1f26:	77 e2       	ldi	r23, 0x27	; 39
    1f28:	8f e1       	ldi	r24, 0x1F	; 31
    1f2a:	92 e0       	ldi	r25, 0x02	; 2
    1f2c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:141

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    1f30:	69 e3       	ldi	r22, 0x39	; 57
    1f32:	72 e0       	ldi	r23, 0x02	; 2
    1f34:	8c ef       	ldi	r24, 0xFC	; 252
    1f36:	96 e1       	ldi	r25, 0x16	; 22
    1f38:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:142
  responseCheck("00", 10000);
    1f3c:	60 e1       	ldi	r22, 0x10	; 16
    1f3e:	77 e2       	ldi	r23, 0x27	; 39
    1f40:	88 e2       	ldi	r24, 0x28	; 40
    1f42:	92 e0       	ldi	r25, 0x02	; 2
    1f44:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
    1f48:	be 01       	movw	r22, r28
    1f4a:	6f 5e       	subi	r22, 0xEF	; 239
    1f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4e:	a2 eb       	ldi	r26, 0xB2	; 178
    1f50:	b6 e1       	ldi	r27, 0x16	; 22
    1f52:	8b 01       	movw	r16, r22
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:149
  /************************************************/

  /**********Ask for slave setup on startup********/
  char msg[15];

  for (int i = 0; i < strlen(IMEI); i++) {
    1f54:	9d 01       	movw	r18, r26
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:149 (discriminator 3)
    1f56:	f9 01       	movw	r30, r18
    1f58:	01 90       	ld	r0, Z+
    1f5a:	00 20       	and	r0, r0
    1f5c:	e9 f7       	brne	.-6      	; 0x1f58 <setup+0x14c>
    1f5e:	cf 01       	movw	r24, r30
    1f60:	83 5b       	subi	r24, 0xB3	; 179
    1f62:	96 41       	sbci	r25, 0x16	; 22
    1f64:	ad 01       	movw	r20, r26
    1f66:	42 5b       	subi	r20, 0xB2	; 178
    1f68:	56 41       	sbci	r21, 0x16	; 22
    1f6a:	48 17       	cp	r20, r24
    1f6c:	59 07       	cpc	r21, r25
    1f6e:	28 f4       	brcc	.+10     	; 0x1f7a <setup+0x16e>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:150 (discriminator 2)
    msg[i] = IMEI[i];
    1f70:	8d 91       	ld	r24, X+
    1f72:	fb 01       	movw	r30, r22
    1f74:	81 93       	st	Z+, r24
    1f76:	bf 01       	movw	r22, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:149 (discriminator 2)
  /************************************************/

  /**********Ask for slave setup on startup********/
  char msg[15];

  for (int i = 0; i < strlen(IMEI); i++) {
    1f78:	ee cf       	rjmp	.-36     	; 0x1f56 <setup+0x14a>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:152
    msg[i] = IMEI[i];
  }
  msg[8] = 0x03;
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	89 8f       	std	Y+25, r24	; 0x19
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:154

  msg[9] = lowByte(CRC16_modbus(msg, 9));
    1f7e:	69 e0       	ldi	r22, 0x09	; 9
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	c8 01       	movw	r24, r16
    1f84:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
    1f88:	8a 8f       	std	Y+26, r24	; 0x1a
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:155
  msg[10] = highByte(CRC16_modbus(msg, 9));
    1f8a:	69 e0       	ldi	r22, 0x09	; 9
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	c8 01       	movw	r24, r16
    1f90:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
    1f94:	9b 8f       	std	Y+27, r25	; 0x1b
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:157

  simSerial.println(F("AT+CASEND=0,11"));
    1f96:	6a e2       	ldi	r22, 0x2A	; 42
    1f98:	72 e0       	ldi	r23, 0x02	; 2
    1f9a:	8c ef       	ldi	r24, 0xFC	; 252
    1f9c:	96 e1       	ldi	r25, 0x16	; 22
    1f9e:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:158
  responseCheck("OK", 10000);
    1fa2:	60 e1       	ldi	r22, 0x10	; 16
    1fa4:	77 e2       	ldi	r23, 0x27	; 39
    1fa6:	8f e1       	ldi	r24, 0x1F	; 31
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:159
  clrsimBuffer();
    1fae:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:161

  simSerial.write(msg, strlen(msg));  // Check if network is active to adress
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	01 90       	ld	r0, Z+
    1fb6:	00 20       	and	r0, r0
    1fb8:	e9 f7       	brne	.-6      	; 0x1fb4 <setup+0x1a8>
    1fba:	31 97       	sbiw	r30, 0x01	; 1
    1fbc:	af 01       	movw	r20, r30
    1fbe:	40 1b       	sub	r20, r16
    1fc0:	51 0b       	sbc	r21, r17
    1fc2:	b8 01       	movw	r22, r16
    1fc4:	8c ef       	ldi	r24, 0xFC	; 252
    1fc6:	96 e1       	ldi	r25, 0x16	; 22
    1fc8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Print::write(char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:162
  responseCheck("OK", 10000);
    1fcc:	60 e1       	ldi	r22, 0x10	; 16
    1fce:	77 e2       	ldi	r23, 0x27	; 39
    1fd0:	8f e1       	ldi	r24, 0x1F	; 31
    1fd2:	92 e0       	ldi	r25, 0x02	; 2
    1fd4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:164

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    1fd8:	69 e1       	ldi	r22, 0x19	; 25
    1fda:	72 e0       	ldi	r23, 0x02	; 2
    1fdc:	8c ef       	ldi	r24, 0xFC	; 252
    1fde:	96 e1       	ldi	r25, 0x16	; 22
    1fe0:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:166

  serverRead();
    1fe4:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <serverRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:168
  /************************************************/
}
    1fe8:	6f 96       	adiw	r28, 0x1f	; 31
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	08 95       	ret

00001ffe <loop>:
loop():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:170

void loop() {
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	64 97       	sbiw	r28, 0x14	; 20
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:172

  switch (state) {
    2016:	00 91 8e 16 	lds	r16, 0x168E	; 0x80168e <state>
    201a:	10 91 8f 16 	lds	r17, 0x168F	; 0x80168f <state+0x1>
    201e:	01 30       	cpi	r16, 0x01	; 1
    2020:	11 05       	cpc	r17, r1
    2022:	d9 f1       	breq	.+118    	; 0x209a <loop+0x9c>
    2024:	bc f4       	brge	.+46     	; 0x2054 <loop+0x56>
    2026:	01 2b       	or	r16, r17
    2028:	a9 f1       	breq	.+106    	; 0x2094 <loop+0x96>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:241
      simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
      responseCheck("00", 10000);
      break;
  }

  if (powerStatus() == 0) {  //If power is still on
    202a:	0e 94 05 02 	call	0x40a	; 0x40a <powerStatus()>
    202e:	81 11       	cpse	r24, r1
    2030:	06 c0       	rjmp	.+12     	; 0x203e <loop+0x40>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:242
    state = poweroff;
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	90 93 8f 16 	sts	0x168F, r25	; 0x80168f <state+0x1>
    203a:	80 93 8e 16 	sts	0x168E, r24	; 0x80168e <state>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:244
  }
}
    203e:	64 96       	adiw	r28, 0x14	; 20
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:172
  /************************************************/
}

void loop() {

  switch (state) {
    2054:	02 30       	cpi	r16, 0x02	; 2
    2056:	11 05       	cpc	r17, r1
    2058:	09 f4       	brne	.+2      	; 0x205c <loop+0x5e>
    205a:	42 c0       	rjmp	.+132    	; 0x20e0 <loop+0xe2>
    205c:	03 30       	cpi	r16, 0x03	; 3
    205e:	11 05       	cpc	r17, r1
    2060:	21 f7       	brne	.-56     	; 0x202a <loop+0x2c>
    2062:	be 01       	movw	r22, r28
    2064:	6f 5f       	subi	r22, 0xFF	; 255
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	a2 eb       	ldi	r26, 0xB2	; 178
    206a:	b6 e1       	ldi	r27, 0x16	; 22
    206c:	8b 01       	movw	r16, r22
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:210

    case poweroff:  //Send power off to server

      char masterData[20];

      for (int i = 0; i < strlen(IMEI); i++) {
    206e:	9d 01       	movw	r18, r26
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:210 (discriminator 3)
    2070:	f9 01       	movw	r30, r18
    2072:	01 90       	ld	r0, Z+
    2074:	00 20       	and	r0, r0
    2076:	e9 f7       	brne	.-6      	; 0x2072 <loop+0x74>
    2078:	cf 01       	movw	r24, r30
    207a:	83 5b       	subi	r24, 0xB3	; 179
    207c:	96 41       	sbci	r25, 0x16	; 22
    207e:	ad 01       	movw	r20, r26
    2080:	42 5b       	subi	r20, 0xB2	; 178
    2082:	56 41       	sbci	r21, 0x16	; 22
    2084:	48 17       	cp	r20, r24
    2086:	59 07       	cpc	r21, r25
    2088:	e8 f5       	brcc	.+122    	; 0x2104 <loop+0x106>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:211 (discriminator 2)
        masterData[i] = IMEI[i];
    208a:	8d 91       	ld	r24, X+
    208c:	fb 01       	movw	r30, r22
    208e:	81 93       	st	Z+, r24
    2090:	bf 01       	movw	r22, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:210 (discriminator 2)

    case poweroff:  //Send power off to server

      char masterData[20];

      for (int i = 0; i < strlen(IMEI); i++) {
    2092:	ee cf       	rjmp	.-36     	; 0x2070 <loop+0x72>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:174

void loop() {

  switch (state) {
    case slaveread:  //Slavesetup and read data from slaves. Also check for change in data.
      modbusRead();
    2094:	0e 94 c7 07 	call	0xf8e	; 0xf8e <modbusRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:175
      break;
    2098:	c8 cf       	rjmp	.-112    	; 0x202a <loop+0x2c>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:179

    case serversend:

      sendToServer();  //Send message to server
    209a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sendToServer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:181

      simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    209e:	68 e0       	ldi	r22, 0x08	; 8
    20a0:	72 e0       	ldi	r23, 0x02	; 2
    20a2:	8c ef       	ldi	r24, 0xFC	; 252
    20a4:	96 e1       	ldi	r25, 0x16	; 22
    20a6:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:183

      serverRead();  //Read server message
    20aa:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <serverRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:185

      if (simBuffer[0] == keyNumber) {
    20ae:	e0 91 fa 16 	lds	r30, 0x16FA	; 0x8016fa <simBuffer>
    20b2:	f0 91 fb 16 	lds	r31, 0x16FB	; 0x8016fb <simBuffer+0x1>
    20b6:	90 81       	ld	r25, Z
    20b8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <keyNumber>
    20bc:	98 13       	cpse	r25, r24
    20be:	1d c0       	rjmp	.+58     	; 0x20fa <loop+0xfc>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:186
        if (simBuffer[1] == 0x00) {  //Go to different case depending on response
    20c0:	81 81       	ldd	r24, Z+1	; 0x01
    20c2:	81 11       	cpse	r24, r1
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <loop+0xd2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:194
          state = slavewrite;
        } else if (simBuffer[1] == 0x02) {
          state = slaveread;
        } else if (simBuffer[1] == 0x03) {
          slaveSetupCheck = 0;
          state = slaveread;
    20c6:	10 92 8f 16 	sts	0x168F, r1	; 0x80168f <state+0x1>
    20ca:	10 92 8e 16 	sts	0x168E, r1	; 0x80168e <state>
    20ce:	08 c0       	rjmp	.+16     	; 0x20e0 <loop+0xe2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:188
      serverRead();  //Read server message

      if (simBuffer[0] == keyNumber) {
        if (simBuffer[1] == 0x00) {  //Go to different case depending on response
          state = slaveread;
        } else if (simBuffer[1] == 0x01) {
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	49 f4       	brne	.+18     	; 0x20e6 <loop+0xe8>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:189
          state = slavewrite;
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	90 93 8f 16 	sts	0x168F, r25	; 0x80168f <state+0x1>
    20dc:	80 93 8e 16 	sts	0x168E, r24	; 0x80168e <state>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:203
      } else {
        state = serversend;
      }

    case slavewrite:
      modbusWrite();  //Write data response to slaves
    20e0:	0e 94 05 03 	call	0x60a	; 0x60a <modbusWrite()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:204
      break;
    20e4:	a2 cf       	rjmp	.-188    	; 0x202a <loop+0x2c>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:190
      if (simBuffer[0] == keyNumber) {
        if (simBuffer[1] == 0x00) {  //Go to different case depending on response
          state = slaveread;
        } else if (simBuffer[1] == 0x01) {
          state = slavewrite;
        } else if (simBuffer[1] == 0x02) {
    20e6:	82 30       	cpi	r24, 0x02	; 2
    20e8:	71 f3       	breq	.-36     	; 0x20c6 <loop+0xc8>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:192
          state = slaveread;
        } else if (simBuffer[1] == 0x03) {
    20ea:	83 30       	cpi	r24, 0x03	; 3
    20ec:	19 f4       	brne	.+6      	; 0x20f4 <loop+0xf6>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:193
          slaveSetupCheck = 0;
    20ee:	10 92 90 16 	sts	0x1690, r1	; 0x801690 <slaveSetupCheck>
    20f2:	e9 cf       	rjmp	.-46     	; 0x20c6 <loop+0xc8>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:195
          state = slaveread;
        } else if (simBuffer[1] == 0x04) {
    20f4:	84 30       	cpi	r24, 0x04	; 4
    20f6:	a1 f7       	brne	.-24     	; 0x20e0 <loop+0xe2>
    20f8:	e6 cf       	rjmp	.-52     	; 0x20c6 <loop+0xc8>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:199
          state = slaveread;
        }
      } else {
        state = serversend;
    20fa:	10 93 8f 16 	sts	0x168F, r17	; 0x80168f <state+0x1>
    20fe:	00 93 8e 16 	sts	0x168E, r16	; 0x80168e <state>
    2102:	ee cf       	rjmp	.-36     	; 0x20e0 <loop+0xe2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:213
      char masterData[20];

      for (int i = 0; i < strlen(IMEI); i++) {
        masterData[i] = IMEI[i];
      }
      masterData[8] = 0x01;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 87       	std	Y+9, r24	; 0x09
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:215

      masterData[9] = highByte(0x0001);
    2108:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:216
      masterData[10] = lowByte(0x0001);
    210a:	8b 87       	std	Y+11, r24	; 0x0b
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:218

      masterData[11] = 0x00;
    210c:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:220

      masterData[12] = highByte(0x0001);
    210e:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:221
      masterData[13] = lowByte(0x0001);
    2110:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:223

      masterData[14] = highByte(0x0001);
    2112:	1f 86       	std	Y+15, r1	; 0x0f
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:224
      masterData[15] = lowByte(0x0001);
    2114:	88 8b       	std	Y+16, r24	; 0x10
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:226

      masterData[16] = lowByte(CRC16_modbus(masterData, 16));
    2116:	60 e1       	ldi	r22, 0x10	; 16
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	c8 01       	movw	r24, r16
    211c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
    2120:	89 8b       	std	Y+17, r24	; 0x11
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:227
      masterData[17] = highByte(CRC16_modbus(masterData, 16));
    2122:	60 e1       	ldi	r22, 0x10	; 16
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	c8 01       	movw	r24, r16
    2128:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <CRC16_modbus(char*, int)>
    212c:	9a 8b       	std	Y+18, r25	; 0x12
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:229

      simSerial.println(F("AT+CASEND=0,18"));
    212e:	69 ef       	ldi	r22, 0xF9	; 249
    2130:	71 e0       	ldi	r23, 0x01	; 1
    2132:	8c ef       	ldi	r24, 0xFC	; 252
    2134:	96 e1       	ldi	r25, 0x16	; 22
    2136:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:230
      responseCheck("OK", 10000);
    213a:	60 e1       	ldi	r22, 0x10	; 16
    213c:	77 e2       	ldi	r23, 0x27	; 39
    213e:	8f e1       	ldi	r24, 0x1F	; 31
    2140:	92 e0       	ldi	r25, 0x02	; 2
    2142:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:231
      clrsimBuffer();
    2146:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:233

      simSerial.write(masterData, strlen(masterData));  // Check if network is active to adress
    214a:	f8 01       	movw	r30, r16
    214c:	01 90       	ld	r0, Z+
    214e:	00 20       	and	r0, r0
    2150:	e9 f7       	brne	.-6      	; 0x214c <loop+0x14e>
    2152:	31 97       	sbiw	r30, 0x01	; 1
    2154:	af 01       	movw	r20, r30
    2156:	40 1b       	sub	r20, r16
    2158:	51 0b       	sbc	r21, r17
    215a:	b8 01       	movw	r22, r16
    215c:	8c ef       	ldi	r24, 0xFC	; 252
    215e:	96 e1       	ldi	r25, 0x16	; 22
    2160:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Print::write(char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:234
      responseCheck("OK", 10000);
    2164:	60 e1       	ldi	r22, 0x10	; 16
    2166:	77 e2       	ldi	r23, 0x27	; 39
    2168:	8f e1       	ldi	r24, 0x1F	; 31
    216a:	92 e0       	ldi	r25, 0x02	; 2
    216c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:236

      simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    2170:	68 ee       	ldi	r22, 0xE8	; 232
    2172:	71 e0       	ldi	r23, 0x01	; 1
    2174:	8c ef       	ldi	r24, 0xFC	; 252
    2176:	96 e1       	ldi	r25, 0x16	; 22
    2178:	0e 94 aa 13 	call	0x2754	; 0x2754 <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:237
      responseCheck("00", 10000);
    217c:	60 e1       	ldi	r22, 0x10	; 16
    217e:	77 e2       	ldi	r23, 0x27	; 39
    2180:	88 e2       	ldi	r24, 0x28	; 40
    2182:	92 e0       	ldi	r25, 0x02	; 2
    2184:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:238
      break;
    2188:	50 cf       	rjmp	.-352    	; 0x202a <loop+0x2c>

0000218a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    218a:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    218c:	91 8d       	ldd	r25, Z+25	; 0x19
    218e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2190:	89 2f       	mov	r24, r25
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	80 5c       	subi	r24, 0xC0	; 192
    2196:	9f 4f       	sbci	r25, 0xFF	; 255
    2198:	82 1b       	sub	r24, r18
    219a:	91 09       	sbc	r25, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
    219c:	8f 73       	andi	r24, 0x3F	; 63
    219e:	99 27       	eor	r25, r25
    21a0:	08 95       	ret

000021a2 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    21a2:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    21a4:	91 8d       	ldd	r25, Z+25	; 0x19
    21a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    21a8:	98 17       	cp	r25, r24
    21aa:	31 f0       	breq	.+12     	; 0x21b8 <HardwareSerial::peek()+0x16>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    21ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    21ae:	e8 0f       	add	r30, r24
    21b0:	f1 1d       	adc	r31, r1
    21b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    21b8:	8f ef       	ldi	r24, 0xFF	; 255
    21ba:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    21bc:	08 95       	ret

000021be <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    21be:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    21c0:	91 8d       	ldd	r25, Z+25	; 0x19
    21c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    21c4:	98 17       	cp	r25, r24
    21c6:	61 f0       	breq	.+24     	; 0x21e0 <HardwareSerial::read()+0x22>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    21c8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21ca:	ae 0f       	add	r26, r30
    21cc:	bf 2f       	mov	r27, r31
    21ce:	b1 1d       	adc	r27, r1
    21d0:	5d 96       	adiw	r26, 0x1d	; 29
    21d2:	8c 91       	ld	r24, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    21d4:	92 8d       	ldd	r25, Z+26	; 0x1a
    21d6:	9f 5f       	subi	r25, 0xFF	; 255
    21d8:	9f 73       	andi	r25, 0x3F	; 63
    21da:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    21e4:	08 95       	ret

000021e6 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    21e6:	fc 01       	movw	r30, r24
    21e8:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    21ea:	44 8d       	ldd	r20, Z+28	; 0x1c
    21ec:	25 2f       	mov	r18, r21
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	84 2f       	mov	r24, r20
    21f2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    21f4:	82 1b       	sub	r24, r18
    21f6:	93 0b       	sbc	r25, r19
    21f8:	54 17       	cp	r21, r20
    21fa:	10 f0       	brcs	.+4      	; 0x2200 <__stack+0x1>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    21fc:	cf 96       	adiw	r24, 0x3f	; 63
    21fe:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    2200:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
    2202:	08 95       	ret

00002204 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	89 2b       	or	r24, r25
    220a:	49 f0       	breq	.+18     	; 0x221e <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	89 2b       	or	r24, r25
    2212:	29 f0       	breq	.+10     	; 0x221e <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    2214:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2218:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    221a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    221e:	88 e7       	ldi	r24, 0x78	; 120
    2220:	92 e1       	ldi	r25, 0x12	; 18
    2222:	89 2b       	or	r24, r25
    2224:	49 f0       	breq	.+18     	; 0x2238 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	89 2b       	or	r24, r25
    222c:	29 f0       	breq	.+10     	; 0x2238 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    222e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <Serial1_available()>
    2232:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
    2234:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    2238:	8f e0       	ldi	r24, 0x0F	; 15
    223a:	93 e1       	ldi	r25, 0x13	; 19
    223c:	89 2b       	or	r24, r25
    223e:	49 f0       	breq	.+18     	; 0x2252 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 1)
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	89 2b       	or	r24, r25
    2246:	29 f0       	breq	.+10     	; 0x2252 <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 3)
    2248:	0e 94 0f 13 	call	0x261e	; 0x261e <Serial2_available()>
    224c:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
    224e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	89 2b       	or	r24, r25
    2258:	49 f0       	breq	.+18     	; 0x226c <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 1)
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	89 2b       	or	r24, r25
    2260:	29 f0       	breq	.+10     	; 0x226c <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 3)
    2262:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2266:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
    2268:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
    226c:	08 95       	ret

0000226e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    226e:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2270:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2272:	a8 0f       	add	r26, r24
    2274:	b9 2f       	mov	r27, r25
    2276:	b1 1d       	adc	r27, r1
    2278:	a3 5a       	subi	r26, 0xA3	; 163
    227a:	bf 4f       	sbci	r27, 0xFF	; 255
    227c:	2c 91       	ld	r18, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    227e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	8f 73       	andi	r24, 0x3F	; 63
    2286:	99 27       	eor	r25, r25
    2288:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    228a:	a6 89       	ldd	r26, Z+22	; 0x16
    228c:	b7 89       	ldd	r27, Z+23	; 0x17
    228e:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2290:	a0 89       	ldd	r26, Z+16	; 0x10
    2292:	b1 89       	ldd	r27, Z+17	; 0x11
    2294:	8c 91       	ld	r24, X
    2296:	83 70       	andi	r24, 0x03	; 3
    2298:	80 64       	ori	r24, 0x40	; 64
    229a:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    229c:	93 8d       	ldd	r25, Z+27	; 0x1b
    229e:	84 8d       	ldd	r24, Z+28	; 0x1c
    22a0:	98 13       	cpse	r25, r24
    22a2:	06 c0       	rjmp	.+12     	; 0x22b0 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    22a4:	02 88       	ldd	r0, Z+18	; 0x12
    22a6:	f3 89       	ldd	r31, Z+19	; 0x13
    22a8:	e0 2d       	mov	r30, r0
    22aa:	80 81       	ld	r24, Z
    22ac:	8f 7d       	andi	r24, 0xDF	; 223
    22ae:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    22b0:	08 95       	ret

000022b2 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    22b8:	88 8d       	ldd	r24, Y+24	; 0x18
    22ba:	88 23       	and	r24, r24
    22bc:	b9 f0       	breq	.+46     	; 0x22ec <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    22be:	aa 89       	ldd	r26, Y+18	; 0x12
    22c0:	bb 89       	ldd	r27, Y+19	; 0x13
    22c2:	e8 89       	ldd	r30, Y+16	; 0x10
    22c4:	f9 89       	ldd	r31, Y+17	; 0x11
    22c6:	8c 91       	ld	r24, X
    22c8:	85 fd       	sbrc	r24, 5
    22ca:	03 c0       	rjmp	.+6      	; 0x22d2 <HardwareSerial::flush()+0x20>
    22cc:	80 81       	ld	r24, Z
    22ce:	86 fd       	sbrc	r24, 6
    22d0:	0d c0       	rjmp	.+26     	; 0x22ec <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	07 fc       	sbrc	r0, 7
    22d6:	f7 cf       	rjmp	.-18     	; 0x22c6 <HardwareSerial::flush()+0x14>
    22d8:	8c 91       	ld	r24, X
    22da:	85 ff       	sbrs	r24, 5
    22dc:	f2 cf       	rjmp	.-28     	; 0x22c2 <HardwareSerial::flush()+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    22de:	80 81       	ld	r24, Z
    22e0:	85 ff       	sbrs	r24, 5
    22e2:	ed cf       	rjmp	.-38     	; 0x22be <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    22e4:	ce 01       	movw	r24, r28
    22e6:	0e 94 37 11 	call	0x226e	; 0x226e <HardwareSerial::_tx_udr_empty_irq()>
    22ea:	e9 cf       	rjmp	.-46     	; 0x22be <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	08 95       	ret

000022f2 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2304:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2306:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2308:	98 13       	cpse	r25, r24
    230a:	1a c0       	rjmp	.+52     	; 0x2340 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    230c:	e8 89       	ldd	r30, Y+16	; 0x10
    230e:	f9 89       	ldd	r31, Y+17	; 0x11
    2310:	80 81       	ld	r24, Z
    2312:	85 ff       	sbrs	r24, 5
    2314:	15 c0       	rjmp	.+42     	; 0x2340 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2316:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2318:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    231a:	ee 89       	ldd	r30, Y+22	; 0x16
    231c:	ff 89       	ldd	r31, Y+23	; 0x17
    231e:	60 83       	st	Z, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2320:	e8 89       	ldd	r30, Y+16	; 0x10
    2322:	f9 89       	ldd	r31, Y+17	; 0x11
    2324:	80 81       	ld	r24, Z
    2326:	83 70       	andi	r24, 0x03	; 3
    2328:	80 64       	ori	r24, 0x40	; 64
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    232a:	80 83       	st	Z, r24
__iRestore():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    232c:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
    2338:	0f 91       	pop	r16
    233a:	ff 90       	pop	r15
    233c:	ef 90       	pop	r14
    233e:	08 95       	ret
    2340:	f6 2e       	mov	r15, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2342:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2344:	10 e0       	ldi	r17, 0x00	; 0
    2346:	0f 5f       	subi	r16, 0xFF	; 255
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	0f 73       	andi	r16, 0x3F	; 63
    234c:	11 27       	eor	r17, r17
    234e:	e0 2e       	mov	r14, r16
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2350:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2352:	8e 11       	cpse	r24, r14
    2354:	0c c0       	rjmp	.+24     	; 0x236e <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	07 fc       	sbrc	r0, 7
    235a:	fa cf       	rjmp	.-12     	; 0x2350 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    235c:	e8 89       	ldd	r30, Y+16	; 0x10
    235e:	f9 89       	ldd	r31, Y+17	; 0x11
    2360:	80 81       	ld	r24, Z
    2362:	85 ff       	sbrs	r24, 5
    2364:	f5 cf       	rjmp	.-22     	; 0x2350 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    2366:	ce 01       	movw	r24, r28
    2368:	0e 94 37 11 	call	0x226e	; 0x226e <HardwareSerial::_tx_udr_empty_irq()>
    236c:	f1 cf       	rjmp	.-30     	; 0x2350 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    236e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2370:	ec 0f       	add	r30, r28
    2372:	fd 2f       	mov	r31, r29
    2374:	f1 1d       	adc	r31, r1
    2376:	e3 5a       	subi	r30, 0xA3	; 163
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	f0 82       	st	Z, r15
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    237c:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    237e:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    2380:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    2382:	ea 89       	ldd	r30, Y+18	; 0x12
    2384:	fb 89       	ldd	r31, Y+19	; 0x13
    2386:	80 81       	ld	r24, Z
    2388:	80 62       	ori	r24, 0x20	; 32
    238a:	cf cf       	rjmp	.-98     	; 0x232a <HardwareSerial::write(unsigned char)+0x38>

0000238c <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    238c:	cf 92       	push	r12
    238e:	df 92       	push	r13
    2390:	ef 92       	push	r14
    2392:	ff 92       	push	r15
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	ec 01       	movw	r28, r24
    239c:	6a 01       	movw	r12, r20
    239e:	7b 01       	movw	r14, r22
    23a0:	12 2f       	mov	r17, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    23a2:	60 e8       	ldi	r22, 0x80	; 128
    23a4:	74 e8       	ldi	r23, 0x84	; 132
    23a6:	8e e1       	ldi	r24, 0x1E	; 30
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a7 01       	movw	r20, r14
    23ac:	96 01       	movw	r18, r12
    23ae:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__udivmodsi4>
    23b2:	21 50       	subi	r18, 0x01	; 1
    23b4:	31 09       	sbc	r19, r1
    23b6:	41 09       	sbc	r20, r1
    23b8:	51 09       	sbc	r21, r1
    23ba:	56 95       	lsr	r21
    23bc:	47 95       	ror	r20
    23be:	37 95       	ror	r19
    23c0:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    23c2:	e8 89       	ldd	r30, Y+16	; 0x10
    23c4:	f9 89       	ldd	r31, Y+17	; 0x11
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    23ca:	21 15       	cp	r18, r1
    23cc:	80 e1       	ldi	r24, 0x10	; 16
    23ce:	38 07       	cpc	r19, r24
    23d0:	98 f0       	brcs	.+38     	; 0x23f8 <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    23d2:	e8 89       	ldd	r30, Y+16	; 0x10
    23d4:	f9 89       	ldd	r31, Y+17	; 0x11
    23d6:	10 82       	st	Z, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    23d8:	60 e4       	ldi	r22, 0x40	; 64
    23da:	72 e4       	ldi	r23, 0x42	; 66
    23dc:	8f e0       	ldi	r24, 0x0F	; 15
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	a7 01       	movw	r20, r14
    23e2:	96 01       	movw	r18, r12
    23e4:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__udivmodsi4>
    23e8:	21 50       	subi	r18, 0x01	; 1
    23ea:	31 09       	sbc	r19, r1
    23ec:	41 09       	sbc	r20, r1
    23ee:	51 09       	sbc	r21, r1
    23f0:	56 95       	lsr	r21
    23f2:	47 95       	ror	r20
    23f4:	37 95       	ror	r19
    23f6:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    23f8:	ec 85       	ldd	r30, Y+12	; 0x0c
    23fa:	fd 85       	ldd	r31, Y+13	; 0x0d
    23fc:	30 83       	st	Z, r19
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    23fe:	ee 85       	ldd	r30, Y+14	; 0x0e
    2400:	ff 85       	ldd	r31, Y+15	; 0x0f
    2402:	20 83       	st	Z, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    2404:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2406:	ec 89       	ldd	r30, Y+20	; 0x14
    2408:	fd 89       	ldd	r31, Y+21	; 0x15
    240a:	10 83       	st	Z, r17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    240c:	ea 89       	ldd	r30, Y+18	; 0x12
    240e:	fb 89       	ldd	r31, Y+19	; 0x13
    2410:	80 81       	ld	r24, Z
    2412:	88 69       	ori	r24, 0x98	; 152
    2414:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    2416:	ea 89       	ldd	r30, Y+18	; 0x12
    2418:	fb 89       	ldd	r31, Y+19	; 0x13
    241a:	80 81       	ld	r24, Z
    241c:	8f 7d       	andi	r24, 0xDF	; 223
    241e:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	ff 90       	pop	r15
    2428:	ef 90       	pop	r14
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	08 95       	ret

00002430 <__vector_36>:
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2430:	1f 92       	push	r1
    2432:	0f 92       	push	r0
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	0f 92       	push	r0
    2438:	11 24       	eor	r1, r1
    243a:	0b b6       	in	r0, 0x3b	; 59
    243c:	0f 92       	push	r0
    243e:	2f 93       	push	r18
    2440:	8f 93       	push	r24
    2442:	9f 93       	push	r25
    2444:	ef 93       	push	r30
    2446:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2448:	e0 91 0c 17 	lds	r30, 0x170C	; 0x80170c <Serial1+0x10>
    244c:	f0 91 0d 17 	lds	r31, 0x170D	; 0x80170d <Serial1+0x11>
    2450:	80 81       	ld	r24, Z
    2452:	e0 91 12 17 	lds	r30, 0x1712	; 0x801712 <Serial1+0x16>
    2456:	f0 91 13 17 	lds	r31, 0x1713	; 0x801713 <Serial1+0x17>
    245a:	82 fd       	sbrc	r24, 2
    245c:	1d c0       	rjmp	.+58     	; 0x2498 <__vector_36+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    245e:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2460:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <Serial1+0x19>
    2464:	8f 5f       	subi	r24, 0xFF	; 255
    2466:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2468:	20 91 16 17 	lds	r18, 0x1716	; 0x801716 <Serial1+0x1a>
    246c:	82 17       	cp	r24, r18
    246e:	41 f0       	breq	.+16     	; 0x2480 <__vector_36+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    2470:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <Serial1+0x19>
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	e4 50       	subi	r30, 0x04	; 4
    2478:	f9 4e       	sbci	r31, 0xE9	; 233
    247a:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    247c:	80 93 15 17 	sts	0x1715, r24	; 0x801715 <Serial1+0x19>
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    2480:	ff 91       	pop	r31
    2482:	ef 91       	pop	r30
    2484:	9f 91       	pop	r25
    2486:	8f 91       	pop	r24
    2488:	2f 91       	pop	r18
    248a:	0f 90       	pop	r0
    248c:	0b be       	out	0x3b, r0	; 59
    248e:	0f 90       	pop	r0
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	0f 90       	pop	r0
    2494:	1f 90       	pop	r1
    2496:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2498:	80 81       	ld	r24, Z
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    249a:	f2 cf       	rjmp	.-28     	; 0x2480 <__vector_36+0x50>

0000249c <__vector_37>:
__vector_37():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    249c:	1f 92       	push	r1
    249e:	0f 92       	push	r0
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	0f 92       	push	r0
    24a4:	11 24       	eor	r1, r1
    24a6:	0b b6       	in	r0, 0x3b	; 59
    24a8:	0f 92       	push	r0
    24aa:	2f 93       	push	r18
    24ac:	3f 93       	push	r19
    24ae:	4f 93       	push	r20
    24b0:	5f 93       	push	r21
    24b2:	6f 93       	push	r22
    24b4:	7f 93       	push	r23
    24b6:	8f 93       	push	r24
    24b8:	9f 93       	push	r25
    24ba:	af 93       	push	r26
    24bc:	bf 93       	push	r27
    24be:	ef 93       	push	r30
    24c0:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    24c2:	8c ef       	ldi	r24, 0xFC	; 252
    24c4:	96 e1       	ldi	r25, 0x16	; 22
    24c6:	0e 94 37 11 	call	0x226e	; 0x226e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    24ca:	ff 91       	pop	r31
    24cc:	ef 91       	pop	r30
    24ce:	bf 91       	pop	r27
    24d0:	af 91       	pop	r26
    24d2:	9f 91       	pop	r25
    24d4:	8f 91       	pop	r24
    24d6:	7f 91       	pop	r23
    24d8:	6f 91       	pop	r22
    24da:	5f 91       	pop	r21
    24dc:	4f 91       	pop	r20
    24de:	3f 91       	pop	r19
    24e0:	2f 91       	pop	r18
    24e2:	0f 90       	pop	r0
    24e4:	0b be       	out	0x3b, r0	; 59
    24e6:	0f 90       	pop	r0
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	0f 90       	pop	r0
    24ec:	1f 90       	pop	r1
    24ee:	18 95       	reti

000024f0 <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    24f0:	8c ef       	ldi	r24, 0xFC	; 252
    24f2:	96 e1       	ldi	r25, 0x16	; 22
    24f4:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
    24f8:	21 e0       	ldi	r18, 0x01	; 1
    24fa:	89 2b       	or	r24, r25
    24fc:	09 f4       	brne	.+2      	; 0x2500 <Serial1_available()+0x10>
    24fe:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    2500:	82 2f       	mov	r24, r18
    2502:	08 95       	ret

00002504 <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2504:	ec ef       	ldi	r30, 0xFC	; 252
    2506:	f6 e1       	ldi	r31, 0x16	; 22
    2508:	13 82       	std	Z+3, r1	; 0x03
    250a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    250c:	88 ee       	ldi	r24, 0xE8	; 232
    250e:	93 e0       	ldi	r25, 0x03	; 3
    2510:	a0 e0       	ldi	r26, 0x00	; 0
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	84 83       	std	Z+4, r24	; 0x04
    2516:	95 83       	std	Z+5, r25	; 0x05
    2518:	a6 83       	std	Z+6, r26	; 0x06
    251a:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    251c:	8f e4       	ldi	r24, 0x4F	; 79
    251e:	92 e0       	ldi	r25, 0x02	; 2
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
    2524:	8d ec       	ldi	r24, 0xCD	; 205
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	95 87       	std	Z+13, r25	; 0x0d
    252a:	84 87       	std	Z+12, r24	; 0x0c
    252c:	8c ec       	ldi	r24, 0xCC	; 204
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	97 87       	std	Z+15, r25	; 0x0f
    2532:	86 87       	std	Z+14, r24	; 0x0e
    2534:	88 ec       	ldi	r24, 0xC8	; 200
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	91 8b       	std	Z+17, r25	; 0x11
    253a:	80 8b       	std	Z+16, r24	; 0x10
    253c:	89 ec       	ldi	r24, 0xC9	; 201
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	93 8b       	std	Z+19, r25	; 0x13
    2542:	82 8b       	std	Z+18, r24	; 0x12
    2544:	8a ec       	ldi	r24, 0xCA	; 202
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	95 8b       	std	Z+21, r25	; 0x15
    254a:	84 8b       	std	Z+20, r24	; 0x14
    254c:	8e ec       	ldi	r24, 0xCE	; 206
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	97 8b       	std	Z+23, r25	; 0x17
    2552:	86 8b       	std	Z+22, r24	; 0x16
    2554:	11 8e       	std	Z+25, r1	; 0x19
    2556:	12 8e       	std	Z+26, r1	; 0x1a
    2558:	13 8e       	std	Z+27, r1	; 0x1b
    255a:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    255c:	08 95       	ret

0000255e <__vector_51>:
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:40
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    255e:	1f 92       	push	r1
    2560:	0f 92       	push	r0
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	0f 92       	push	r0
    2566:	11 24       	eor	r1, r1
    2568:	0b b6       	in	r0, 0x3b	; 59
    256a:	0f 92       	push	r0
    256c:	2f 93       	push	r18
    256e:	8f 93       	push	r24
    2570:	9f 93       	push	r25
    2572:	ef 93       	push	r30
    2574:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2576:	e0 91 a9 17 	lds	r30, 0x17A9	; 0x8017a9 <Serial2+0x10>
    257a:	f0 91 aa 17 	lds	r31, 0x17AA	; 0x8017aa <Serial2+0x11>
    257e:	80 81       	ld	r24, Z
    2580:	e0 91 af 17 	lds	r30, 0x17AF	; 0x8017af <Serial2+0x16>
    2584:	f0 91 b0 17 	lds	r31, 0x17B0	; 0x8017b0 <Serial2+0x17>
    2588:	82 fd       	sbrc	r24, 2
    258a:	1d c0       	rjmp	.+58     	; 0x25c6 <__vector_51+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    258c:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    258e:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <Serial2+0x19>
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2596:	20 91 b3 17 	lds	r18, 0x17B3	; 0x8017b3 <Serial2+0x1a>
    259a:	82 17       	cp	r24, r18
    259c:	41 f0       	breq	.+16     	; 0x25ae <__vector_51+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    259e:	e0 91 b2 17 	lds	r30, 0x17B2	; 0x8017b2 <Serial2+0x19>
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	e7 56       	subi	r30, 0x67	; 103
    25a6:	f8 4e       	sbci	r31, 0xE8	; 232
    25a8:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    25aa:	80 93 b2 17 	sts	0x17B2, r24	; 0x8017b2 <Serial2+0x19>
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
  Serial2._rx_complete_irq();
}
    25ae:	ff 91       	pop	r31
    25b0:	ef 91       	pop	r30
    25b2:	9f 91       	pop	r25
    25b4:	8f 91       	pop	r24
    25b6:	2f 91       	pop	r18
    25b8:	0f 90       	pop	r0
    25ba:	0b be       	out	0x3b, r0	; 59
    25bc:	0f 90       	pop	r0
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	0f 90       	pop	r0
    25c2:	1f 90       	pop	r1
    25c4:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    25c6:	80 81       	ld	r24, Z
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
    25c8:	f2 cf       	rjmp	.-28     	; 0x25ae <__vector_51+0x50>

000025ca <__vector_52>:
__vector_52():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:45

ISR(USART2_UDRE_vect)
{
    25ca:	1f 92       	push	r1
    25cc:	0f 92       	push	r0
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	0f 92       	push	r0
    25d2:	11 24       	eor	r1, r1
    25d4:	0b b6       	in	r0, 0x3b	; 59
    25d6:	0f 92       	push	r0
    25d8:	2f 93       	push	r18
    25da:	3f 93       	push	r19
    25dc:	4f 93       	push	r20
    25de:	5f 93       	push	r21
    25e0:	6f 93       	push	r22
    25e2:	7f 93       	push	r23
    25e4:	8f 93       	push	r24
    25e6:	9f 93       	push	r25
    25e8:	af 93       	push	r26
    25ea:	bf 93       	push	r27
    25ec:	ef 93       	push	r30
    25ee:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:46
  Serial2._tx_udr_empty_irq();
    25f0:	89 e9       	ldi	r24, 0x99	; 153
    25f2:	97 e1       	ldi	r25, 0x17	; 23
    25f4:	0e 94 37 11 	call	0x226e	; 0x226e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:47
}
    25f8:	ff 91       	pop	r31
    25fa:	ef 91       	pop	r30
    25fc:	bf 91       	pop	r27
    25fe:	af 91       	pop	r26
    2600:	9f 91       	pop	r25
    2602:	8f 91       	pop	r24
    2604:	7f 91       	pop	r23
    2606:	6f 91       	pop	r22
    2608:	5f 91       	pop	r21
    260a:	4f 91       	pop	r20
    260c:	3f 91       	pop	r19
    260e:	2f 91       	pop	r18
    2610:	0f 90       	pop	r0
    2612:	0b be       	out	0x3b, r0	; 59
    2614:	0f 90       	pop	r0
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	0f 90       	pop	r0
    261a:	1f 90       	pop	r1
    261c:	18 95       	reti

0000261e <Serial2_available()>:
_Z17Serial2_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:54
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    261e:	89 e9       	ldi	r24, 0x99	; 153
    2620:	97 e1       	ldi	r25, 0x17	; 23
    2622:	0e 94 c5 10 	call	0x218a	; 0x218a <HardwareSerial::available()>
    2626:	21 e0       	ldi	r18, 0x01	; 1
    2628:	89 2b       	or	r24, r25
    262a:	09 f4       	brne	.+2      	; 0x262e <Serial2_available()+0x10>
    262c:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
}
    262e:	82 2f       	mov	r24, r18
    2630:	08 95       	ret

00002632 <_GLOBAL__sub_I___vector_51>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    2632:	e9 e9       	ldi	r30, 0x99	; 153
    2634:	f7 e1       	ldi	r31, 0x17	; 23
    2636:	13 82       	std	Z+3, r1	; 0x03
    2638:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
    263a:	88 ee       	ldi	r24, 0xE8	; 232
    263c:	93 e0       	ldi	r25, 0x03	; 3
    263e:	a0 e0       	ldi	r26, 0x00	; 0
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	84 83       	std	Z+4, r24	; 0x04
    2644:	95 83       	std	Z+5, r25	; 0x05
    2646:	a6 83       	std	Z+6, r26	; 0x06
    2648:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    264a:	8f e4       	ldi	r24, 0x4F	; 79
    264c:	92 e0       	ldi	r25, 0x02	; 2
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    2652:	85 ed       	ldi	r24, 0xD5	; 213
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	95 87       	std	Z+13, r25	; 0x0d
    2658:	84 87       	std	Z+12, r24	; 0x0c
    265a:	84 ed       	ldi	r24, 0xD4	; 212
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	97 87       	std	Z+15, r25	; 0x0f
    2660:	86 87       	std	Z+14, r24	; 0x0e
    2662:	80 ed       	ldi	r24, 0xD0	; 208
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	91 8b       	std	Z+17, r25	; 0x11
    2668:	80 8b       	std	Z+16, r24	; 0x10
    266a:	81 ed       	ldi	r24, 0xD1	; 209
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	93 8b       	std	Z+19, r25	; 0x13
    2670:	82 8b       	std	Z+18, r24	; 0x12
    2672:	82 ed       	ldi	r24, 0xD2	; 210
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	95 8b       	std	Z+21, r25	; 0x15
    2678:	84 8b       	std	Z+20, r24	; 0x14
    267a:	86 ed       	ldi	r24, 0xD6	; 214
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	97 8b       	std	Z+23, r25	; 0x17
    2680:	86 8b       	std	Z+22, r24	; 0x16
    2682:	11 8e       	std	Z+25, r1	; 0x19
    2684:	12 8e       	std	Z+26, r1	; 0x1a
    2686:	13 8e       	std	Z+27, r1	; 0x1b
    2688:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
    268a:	08 95       	ret

0000268c <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:123
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	cf 92       	push	r12
    2692:	df 92       	push	r13
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	6c 01       	movw	r12, r24
    26a2:	7b 01       	movw	r14, r22
    26a4:	8b 01       	movw	r16, r22
    26a6:	04 0f       	add	r16, r20
    26a8:	15 1f       	adc	r17, r21
    26aa:	eb 01       	movw	r28, r22
    26ac:	5e 01       	movw	r10, r28
    26ae:	ae 18       	sub	r10, r14
    26b0:	bf 08       	sbc	r11, r15
    26b2:	c0 17       	cp	r28, r16
    26b4:	d1 07       	cpc	r29, r17
    26b6:	59 f0       	breq	.+22     	; 0x26ce <Print::write(unsigned char const*, unsigned int)+0x42>
    26b8:	69 91       	ld	r22, Y+
    26ba:	d6 01       	movw	r26, r12
    26bc:	ed 91       	ld	r30, X+
    26be:	fc 91       	ld	r31, X
    26c0:	01 90       	ld	r0, Z+
    26c2:	f0 81       	ld	r31, Z
    26c4:	e0 2d       	mov	r30, r0
    26c6:	c6 01       	movw	r24, r12
    26c8:	19 95       	eicall
    26ca:	89 2b       	or	r24, r25
    26cc:	79 f7       	brne	.-34     	; 0x26ac <Print::write(unsigned char const*, unsigned int)+0x20>
    26ce:	c5 01       	movw	r24, r10
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	ff 90       	pop	r15
    26da:	ef 90       	pop	r14
    26dc:	df 90       	pop	r13
    26de:	cf 90       	pop	r12
    26e0:	bf 90       	pop	r11
    26e2:	af 90       	pop	r10
    26e4:	08 95       	ret

000026e6 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    26e6:	fb 01       	movw	r30, r22
    26e8:	01 90       	ld	r0, Z+
    26ea:	00 20       	and	r0, r0
    26ec:	e9 f7       	brne	.-6      	; 0x26e8 <Print::write(char const*) [clone .part.2]+0x2>
    26ee:	31 97       	sbiw	r30, 0x01	; 1
    26f0:	af 01       	movw	r20, r30
    26f2:	46 1b       	sub	r20, r22
    26f4:	57 0b       	sbc	r21, r23
    26f6:	dc 01       	movw	r26, r24
    26f8:	ed 91       	ld	r30, X+
    26fa:	fc 91       	ld	r31, X
    26fc:	02 80       	ldd	r0, Z+2	; 0x02
    26fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2700:	e0 2d       	mov	r30, r0
    2702:	19 94       	eijmp

00002704 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    2704:	ef 92       	push	r14
    2706:	ff 92       	push	r15
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	8c 01       	movw	r16, r24
    2712:	7b 01       	movw	r14, r22
    2714:	d0 e0       	ldi	r29, 0x00	; 0
    2716:	c0 e0       	ldi	r28, 0x00	; 0
    2718:	f7 01       	movw	r30, r14
    271a:	ec 0f       	add	r30, r28
    271c:	fd 1f       	adc	r31, r29
    271e:	64 91       	lpm	r22, Z
    2720:	66 23       	and	r22, r22
    2722:	61 f0       	breq	.+24     	; 0x273c <Print::print(__FlashStringHelper const*)+0x38>
    2724:	d8 01       	movw	r26, r16
    2726:	ed 91       	ld	r30, X+
    2728:	fc 91       	ld	r31, X
    272a:	01 90       	ld	r0, Z+
    272c:	f0 81       	ld	r31, Z
    272e:	e0 2d       	mov	r30, r0
    2730:	c8 01       	movw	r24, r16
    2732:	19 95       	eicall
    2734:	89 2b       	or	r24, r25
    2736:	11 f0       	breq	.+4      	; 0x273c <Print::print(__FlashStringHelper const*)+0x38>
    2738:	21 96       	adiw	r28, 0x01	; 1
    273a:	ee cf       	rjmp	.-36     	; 0x2718 <Print::print(__FlashStringHelper const*)+0x14>
    273c:	ce 01       	movw	r24, r28
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	1f 91       	pop	r17
    2744:	0f 91       	pop	r16
    2746:	ff 90       	pop	r15
    2748:	ef 90       	pop	r14
    274a:	08 95       	ret

0000274c <Print::println()>:
_ZN5Print5writeEPKc():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:127
}

size_t Print::println(void)
{
    274c:	6d e5       	ldi	r22, 0x5D	; 93
    274e:	72 e0       	ldi	r23, 0x02	; 2
    2750:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <Print::write(char const*) [clone .part.2]>

00002754 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:115
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:116
  size_t n = print(ifsh);
    275e:	0e 94 82 13 	call	0x2704	; 0x2704 <Print::print(__FlashStringHelper const*)>
    2762:	8c 01       	movw	r16, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:117
  n += println();
    2764:	ce 01       	movw	r24, r28
    2766:	0e 94 a6 13 	call	0x274c	; 0x274c <Print::println()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:119
  return n;
}
    276a:	80 0f       	add	r24, r16
    276c:	91 1f       	adc	r25, r17
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	08 95       	ret

00002778 <initVariant>:
initVariant():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2778:	08 95       	ret

0000277a <main>:
main():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    277a:	0e 94 22 14 	call	0x2844	; 0x2844 <init>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    277e:	0e 94 bc 13 	call	0x2778	; 0x2778 <initVariant>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    2782:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <setup>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2786:	c2 e0       	ldi	r28, 0x02	; 2
    2788:	d1 e1       	ldi	r29, 0x11	; 17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    278a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <loop>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    278e:	20 97       	sbiw	r28, 0x00	; 0
    2790:	e1 f3       	breq	.-8      	; 0x278a <main+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    2792:	0e 94 02 11 	call	0x2204	; 0x2204 <serialEventRun()>
    2796:	f9 cf       	rjmp	.-14     	; 0x278a <main+0x10>

00002798 <__vector_23>:
__vector_23():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    2798:	1f 92       	push	r1
    279a:	0f 92       	push	r0
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	0f 92       	push	r0
    27a0:	11 24       	eor	r1, r1
    27a2:	2f 93       	push	r18
    27a4:	3f 93       	push	r19
    27a6:	8f 93       	push	r24
    27a8:	9f 93       	push	r25
    27aa:	af 93       	push	r26
    27ac:	bf 93       	push	r27
    27ae:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <timer0_millis>
    27b2:	90 91 3c 18 	lds	r25, 0x183C	; 0x80183c <timer0_millis+0x1>
    27b6:	a0 91 3d 18 	lds	r26, 0x183D	; 0x80183d <timer0_millis+0x2>
    27ba:	b0 91 3e 18 	lds	r27, 0x183E	; 0x80183e <timer0_millis+0x3>
    27be:	30 91 3a 18 	lds	r19, 0x183A	; 0x80183a <timer0_fract>
    27c2:	26 e0       	ldi	r18, 0x06	; 6
    27c4:	23 0f       	add	r18, r19
    27c6:	2d 37       	cpi	r18, 0x7D	; 125
    27c8:	68 f1       	brcs	.+90     	; 0x2824 <__vector_23+0x8c>
    27ca:	29 e8       	ldi	r18, 0x89	; 137
    27cc:	23 0f       	add	r18, r19
    27ce:	03 96       	adiw	r24, 0x03	; 3
    27d0:	a1 1d       	adc	r26, r1
    27d2:	b1 1d       	adc	r27, r1
    27d4:	20 93 3a 18 	sts	0x183A, r18	; 0x80183a <timer0_fract>
    27d8:	80 93 3b 18 	sts	0x183B, r24	; 0x80183b <timer0_millis>
    27dc:	90 93 3c 18 	sts	0x183C, r25	; 0x80183c <timer0_millis+0x1>
    27e0:	a0 93 3d 18 	sts	0x183D, r26	; 0x80183d <timer0_millis+0x2>
    27e4:	b0 93 3e 18 	sts	0x183E, r27	; 0x80183e <timer0_millis+0x3>
    27e8:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <timer0_overflow_count>
    27ec:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <timer0_overflow_count+0x1>
    27f0:	a0 91 38 18 	lds	r26, 0x1838	; 0x801838 <timer0_overflow_count+0x2>
    27f4:	b0 91 39 18 	lds	r27, 0x1839	; 0x801839 <timer0_overflow_count+0x3>
    27f8:	01 96       	adiw	r24, 0x01	; 1
    27fa:	a1 1d       	adc	r26, r1
    27fc:	b1 1d       	adc	r27, r1
    27fe:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <timer0_overflow_count>
    2802:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <timer0_overflow_count+0x1>
    2806:	a0 93 38 18 	sts	0x1838, r26	; 0x801838 <timer0_overflow_count+0x2>
    280a:	b0 93 39 18 	sts	0x1839, r27	; 0x801839 <timer0_overflow_count+0x3>
    280e:	bf 91       	pop	r27
    2810:	af 91       	pop	r26
    2812:	9f 91       	pop	r25
    2814:	8f 91       	pop	r24
    2816:	3f 91       	pop	r19
    2818:	2f 91       	pop	r18
    281a:	0f 90       	pop	r0
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	0f 90       	pop	r0
    2820:	1f 90       	pop	r1
    2822:	18 95       	reti
    2824:	02 96       	adiw	r24, 0x02	; 2
    2826:	a1 1d       	adc	r26, r1
    2828:	b1 1d       	adc	r27, r1
    282a:	d4 cf       	rjmp	.-88     	; 0x27d4 <__vector_23+0x3c>

0000282c <millis>:
millis():
    282c:	2f b7       	in	r18, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	60 91 3b 18 	lds	r22, 0x183B	; 0x80183b <timer0_millis>
    2834:	70 91 3c 18 	lds	r23, 0x183C	; 0x80183c <timer0_millis+0x1>
    2838:	80 91 3d 18 	lds	r24, 0x183D	; 0x80183d <timer0_millis+0x2>
    283c:	90 91 3e 18 	lds	r25, 0x183E	; 0x80183e <timer0_millis+0x3>
    2840:	2f bf       	out	0x3f, r18	; 63
    2842:	08 95       	ret

00002844 <init>:
init():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2844:	78 94       	sei
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2846:	84 b5       	in	r24, 0x24	; 36
    2848:	83 60       	ori	r24, 0x03	; 3
    284a:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    284c:	85 b5       	in	r24, 0x25	; 37
    284e:	83 60       	ori	r24, 0x03	; 3
    2850:	85 bd       	out	0x25, r24	; 37
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2852:	ee e6       	ldi	r30, 0x6E	; 110
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	81 60       	ori	r24, 0x01	; 1
    285a:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    285c:	e1 e8       	ldi	r30, 0x81	; 129
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2864:	80 81       	ld	r24, Z
    2866:	81 60       	ori	r24, 0x01	; 1
    2868:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    286a:	e0 e8       	ldi	r30, 0x80	; 128
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	81 60       	ori	r24, 0x01	; 1
    2872:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2874:	e1 eb       	ldi	r30, 0xB1	; 177
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	84 60       	ori	r24, 0x04	; 4
    287c:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    287e:	e0 eb       	ldi	r30, 0xB0	; 176
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	81 60       	ori	r24, 0x01	; 1
    2886:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    2888:	e1 e9       	ldi	r30, 0x91	; 145
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	83 60       	ori	r24, 0x03	; 3
    2890:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    2892:	e0 e9       	ldi	r30, 0x90	; 144
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	81 60       	ori	r24, 0x01	; 1
    289a:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    289c:	e1 ea       	ldi	r30, 0xA1	; 161
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	83 60       	ori	r24, 0x03	; 3
    28a4:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    28a6:	e0 ea       	ldi	r30, 0xA0	; 160
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	81 60       	ori	r24, 0x01	; 1
    28ae:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    28b0:	e1 e2       	ldi	r30, 0x21	; 33
    28b2:	f1 e0       	ldi	r31, 0x01	; 1
    28b4:	80 81       	ld	r24, Z
    28b6:	83 60       	ori	r24, 0x03	; 3
    28b8:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    28ba:	e0 e2       	ldi	r30, 0x20	; 32
    28bc:	f1 e0       	ldi	r31, 0x01	; 1
    28be:	80 81       	ld	r24, Z
    28c0:	81 60       	ori	r24, 0x01	; 1
    28c2:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    28c4:	86 e8       	ldi	r24, 0x86	; 134
    28c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    28ca:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    28ce:	08 95       	ret

000028d0 <analogRead>:
analogRead():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    28d0:	80 31       	cpi	r24, 0x10	; 16
    28d2:	20 f0       	brcs	.+8      	; 0x28dc <analogRead+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:49 (discriminator 1)
    28d4:	84 34       	cpi	r24, 0x44	; 68
    28d6:	08 f4       	brcc	.+2      	; 0x28da <analogRead+0xa>
    28d8:	84 e4       	ldi	r24, 0x44	; 68
    28da:	85 54       	subi	r24, 0x45	; 69
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:61 (discriminator 4)
#endif

#if defined(ADCSRB) && defined(MUX5)
  // the MUX5 bit of ADCSRB selects whether we're reading from channels
  // 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
  ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    28dc:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    28e0:	98 2f       	mov	r25, r24
    28e2:	98 70       	andi	r25, 0x08	; 8
    28e4:	27 7f       	andi	r18, 0xF7	; 247
    28e6:	92 2b       	or	r25, r18
    28e8:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:68 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    28ec:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <analog_reference>
    28f0:	90 e4       	ldi	r25, 0x40	; 64
    28f2:	29 9f       	mul	r18, r25
    28f4:	90 01       	movw	r18, r0
    28f6:	11 24       	eor	r1, r1
    28f8:	87 70       	andi	r24, 0x07	; 7
    28fa:	82 2b       	or	r24, r18
    28fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:76 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    2900:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    2904:	80 64       	ori	r24, 0x40	; 64
    2906:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:79 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    290a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    290e:	86 fd       	sbrc	r24, 6
    2910:	fc cf       	rjmp	.-8      	; 0x290a <analogRead+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    2912:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    2916:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
    291a:	08 95       	ret

0000291c <turnOffPWM>:
turnOffPWM():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    291c:	82 50       	subi	r24, 0x02	; 2
    291e:	82 31       	cpi	r24, 0x12	; 18
    2920:	08 f0       	brcs	.+2      	; 0x2924 <turnOffPWM+0x8>
    2922:	5f c0       	rjmp	.+190    	; 0x29e2 <turnOffPWM+0xc6>
    2924:	e8 2f       	mov	r30, r24
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	88 27       	eor	r24, r24
    292a:	e6 56       	subi	r30, 0x66	; 102
    292c:	fb 4e       	sbci	r31, 0xEB	; 235
    292e:	8f 4f       	sbci	r24, 0xFF	; 255
    2930:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__tablejump2__>
    2934:	ee 14       	cp	r14, r14
    2936:	f2 14       	cp	r15, r2
    2938:	ac 14       	cp	r10, r12
    293a:	b2 14       	cp	r11, r2
    293c:	b6 14       	cp	r11, r6
    293e:	f1 14       	cp	r15, r1
    2940:	ba 14       	cp	r11, r10
    2942:	c0 14       	cp	r12, r0
    2944:	c4 14       	cp	r12, r4
    2946:	ca 14       	cp	r12, r10
    2948:	ce 14       	cp	r12, r14
    294a:	d2 14       	cp	r13, r2
    294c:	d8 14       	cp	r13, r8
    294e:	dc 14       	cp	r13, r12
    2950:	f1 14       	cp	r15, r1
    2952:	e0 14       	cp	r14, r0
    2954:	e6 14       	cp	r14, r6
    2956:	ea 14       	cp	r14, r10
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    2958:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    295c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    295e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    2962:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2964:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2968:	8f 7d       	andi	r24, 0xDF	; 223
    296a:	f9 cf       	rjmp	.-14     	; 0x295e <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    296c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2970:	87 7f       	andi	r24, 0xF7	; 247
    2972:	f5 cf       	rjmp	.-22     	; 0x295e <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2974:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2978:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    297a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    297e:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2980:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2984:	8f 7d       	andi	r24, 0xDF	; 223
    2986:	f9 cf       	rjmp	.-14     	; 0x297a <turnOffPWM+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2988:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    298c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    298e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    2992:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2994:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2998:	8f 7d       	andi	r24, 0xDF	; 223
    299a:	f9 cf       	rjmp	.-14     	; 0x298e <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    299c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    29a0:	87 7f       	andi	r24, 0xF7	; 247
    29a2:	f5 cf       	rjmp	.-22     	; 0x298e <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    29a4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    29a8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    29aa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    29ae:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    29b0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    29b4:	8f 7d       	andi	r24, 0xDF	; 223
    29b6:	f9 cf       	rjmp	.-14     	; 0x29aa <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    29b8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    29bc:	87 7f       	andi	r24, 0xF7	; 247
    29be:	f5 cf       	rjmp	.-22     	; 0x29aa <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    29c0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    29c4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    29c6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    29ca:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    29cc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    29d0:	8f 7d       	andi	r24, 0xDF	; 223
    29d2:	f9 cf       	rjmp	.-14     	; 0x29c6 <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    29d4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    29d8:	87 7f       	andi	r24, 0xF7	; 247
    29da:	f5 cf       	rjmp	.-22     	; 0x29c6 <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    29dc:	84 b5       	in	r24, 0x24	; 36
    29de:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    29e0:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    29e2:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    29e4:	84 b5       	in	r24, 0x24	; 36
    29e6:	8f 7d       	andi	r24, 0xDF	; 223
    29e8:	fb cf       	rjmp	.-10     	; 0x29e0 <turnOffPWM+0xc4>

000029ea <pinMode>:
pinMode():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	fc 01       	movw	r30, r24
    29f2:	e1 55       	subi	r30, 0x51	; 81
    29f4:	fd 4f       	sbci	r31, 0xFD	; 253
    29f6:	24 91       	lpm	r18, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    29f8:	8b 5f       	subi	r24, 0xFB	; 251
    29fa:	9c 4f       	sbci	r25, 0xFC	; 252
    29fc:	fc 01       	movw	r30, r24
    29fe:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    2a00:	88 23       	and	r24, r24
    2a02:	c9 f0       	breq	.+50     	; 0x2a36 <pinMode+0x4c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	eb 58       	subi	r30, 0x8B	; 139
    2a0e:	fc 4f       	sbci	r31, 0xFC	; 252
    2a10:	a5 91       	lpm	r26, Z+
    2a12:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    2a14:	fc 01       	movw	r30, r24
    2a16:	e5 5a       	subi	r30, 0xA5	; 165
    2a18:	fc 4f       	sbci	r31, 0xFC	; 252
    2a1a:	c5 91       	lpm	r28, Z+
    2a1c:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    2a1e:	61 11       	cpse	r22, r1
    2a20:	0d c0       	rjmp	.+26     	; 0x2a3c <pinMode+0x52>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2a22:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    2a24:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    2a26:	8c 91       	ld	r24, X
    2a28:	20 95       	com	r18
    2a2a:	82 23       	and	r24, r18
    2a2c:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    2a2e:	88 81       	ld	r24, Y
    2a30:	28 23       	and	r18, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2a32:	28 83       	st	Y, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2a34:	9f bf       	out	0x3f, r25	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    2a3c:	62 30       	cpi	r22, 0x02	; 2
    2a3e:	51 f4       	brne	.+20     	; 0x2a54 <pinMode+0x6a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    2a40:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    2a42:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2a44:	3c 91       	ld	r19, X
    2a46:	82 2f       	mov	r24, r18
    2a48:	80 95       	com	r24
    2a4a:	83 23       	and	r24, r19
    2a4c:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    2a4e:	e8 81       	ld	r30, Y
    2a50:	2e 2b       	or	r18, r30
    2a52:	ef cf       	rjmp	.-34     	; 0x2a32 <pinMode+0x48>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2a54:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    2a56:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2a58:	ec 91       	ld	r30, X
    2a5a:	2e 2b       	or	r18, r30
    2a5c:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    2a5e:	8f bf       	out	0x3f, r24	; 63
    2a60:	ea cf       	rjmp	.-44     	; 0x2a36 <pinMode+0x4c>

00002a62 <digitalWrite>:
digitalWrite():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2a62:	1f 93       	push	r17
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	f9 01       	movw	r30, r18
    2a6e:	e7 5a       	subi	r30, 0xA7	; 167
    2a70:	fd 4f       	sbci	r31, 0xFD	; 253
    2a72:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2a74:	f9 01       	movw	r30, r18
    2a76:	e1 55       	subi	r30, 0x51	; 81
    2a78:	fd 4f       	sbci	r31, 0xFD	; 253
    2a7a:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    2a7c:	f9 01       	movw	r30, r18
    2a7e:	eb 5f       	subi	r30, 0xFB	; 251
    2a80:	fc 4f       	sbci	r31, 0xFC	; 252
    2a82:	c4 91       	lpm	r28, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2a84:	cc 23       	and	r28, r28
    2a86:	a9 f0       	breq	.+42     	; 0x2ab2 <digitalWrite+0x50>
    2a88:	16 2f       	mov	r17, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2a8a:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2a8c:	0e 94 8e 14 	call	0x291c	; 0x291c <turnOffPWM>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2a90:	ec 2f       	mov	r30, r28
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	ee 0f       	add	r30, r30
    2a96:	ff 1f       	adc	r31, r31
    2a98:	e5 5a       	subi	r30, 0xA5	; 165
    2a9a:	fc 4f       	sbci	r31, 0xFC	; 252
    2a9c:	a5 91       	lpm	r26, Z+
    2a9e:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2aa0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    2aa2:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2aa4:	ec 91       	ld	r30, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2aa6:	11 11       	cpse	r17, r1
    2aa8:	08 c0       	rjmp	.+16     	; 0x2aba <digitalWrite+0x58>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2aaa:	d0 95       	com	r29
    2aac:	de 23       	and	r29, r30
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2aae:	dc 93       	st	X, r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2ab0:	8f bf       	out	0x3f, r24	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2aba:	de 2b       	or	r29, r30
    2abc:	f8 cf       	rjmp	.-16     	; 0x2aae <digitalWrite+0x4c>

00002abe <__floatunsisf>:
__floatunsisf():
    2abe:	e8 94       	clt
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <__floatsisf+0x12>

00002ac2 <__floatsisf>:
    2ac2:	97 fb       	bst	r25, 7
    2ac4:	3e f4       	brtc	.+14     	; 0x2ad4 <__floatsisf+0x12>
    2ac6:	90 95       	com	r25
    2ac8:	80 95       	com	r24
    2aca:	70 95       	com	r23
    2acc:	61 95       	neg	r22
    2ace:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad4:	99 23       	and	r25, r25
    2ad6:	a9 f0       	breq	.+42     	; 0x2b02 <__floatsisf+0x40>
    2ad8:	f9 2f       	mov	r31, r25
    2ada:	96 e9       	ldi	r25, 0x96	; 150
    2adc:	bb 27       	eor	r27, r27
    2ade:	93 95       	inc	r25
    2ae0:	f6 95       	lsr	r31
    2ae2:	87 95       	ror	r24
    2ae4:	77 95       	ror	r23
    2ae6:	67 95       	ror	r22
    2ae8:	b7 95       	ror	r27
    2aea:	f1 11       	cpse	r31, r1
    2aec:	f8 cf       	rjmp	.-16     	; 0x2ade <__floatsisf+0x1c>
    2aee:	fa f4       	brpl	.+62     	; 0x2b2e <__floatsisf+0x6c>
    2af0:	bb 0f       	add	r27, r27
    2af2:	11 f4       	brne	.+4      	; 0x2af8 <__floatsisf+0x36>
    2af4:	60 ff       	sbrs	r22, 0
    2af6:	1b c0       	rjmp	.+54     	; 0x2b2e <__floatsisf+0x6c>
    2af8:	6f 5f       	subi	r22, 0xFF	; 255
    2afa:	7f 4f       	sbci	r23, 0xFF	; 255
    2afc:	8f 4f       	sbci	r24, 0xFF	; 255
    2afe:	9f 4f       	sbci	r25, 0xFF	; 255
    2b00:	16 c0       	rjmp	.+44     	; 0x2b2e <__floatsisf+0x6c>
    2b02:	88 23       	and	r24, r24
    2b04:	11 f0       	breq	.+4      	; 0x2b0a <__floatsisf+0x48>
    2b06:	96 e9       	ldi	r25, 0x96	; 150
    2b08:	11 c0       	rjmp	.+34     	; 0x2b2c <__floatsisf+0x6a>
    2b0a:	77 23       	and	r23, r23
    2b0c:	21 f0       	breq	.+8      	; 0x2b16 <__floatsisf+0x54>
    2b0e:	9e e8       	ldi	r25, 0x8E	; 142
    2b10:	87 2f       	mov	r24, r23
    2b12:	76 2f       	mov	r23, r22
    2b14:	05 c0       	rjmp	.+10     	; 0x2b20 <__floatsisf+0x5e>
    2b16:	66 23       	and	r22, r22
    2b18:	71 f0       	breq	.+28     	; 0x2b36 <__floatsisf+0x74>
    2b1a:	96 e8       	ldi	r25, 0x86	; 134
    2b1c:	86 2f       	mov	r24, r22
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	2a f0       	brmi	.+10     	; 0x2b2e <__floatsisf+0x6c>
    2b24:	9a 95       	dec	r25
    2b26:	66 0f       	add	r22, r22
    2b28:	77 1f       	adc	r23, r23
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	da f7       	brpl	.-10     	; 0x2b24 <__floatsisf+0x62>
    2b2e:	88 0f       	add	r24, r24
    2b30:	96 95       	lsr	r25
    2b32:	87 95       	ror	r24
    2b34:	97 f9       	bld	r25, 7
    2b36:	08 95       	ret

00002b38 <__fp_cmp>:
__fp_cmp():
    2b38:	99 0f       	add	r25, r25
    2b3a:	00 08       	sbc	r0, r0
    2b3c:	55 0f       	add	r21, r21
    2b3e:	aa 0b       	sbc	r26, r26
    2b40:	e0 e8       	ldi	r30, 0x80	; 128
    2b42:	fe ef       	ldi	r31, 0xFE	; 254
    2b44:	16 16       	cp	r1, r22
    2b46:	17 06       	cpc	r1, r23
    2b48:	e8 07       	cpc	r30, r24
    2b4a:	f9 07       	cpc	r31, r25
    2b4c:	c0 f0       	brcs	.+48     	; 0x2b7e <__fp_cmp+0x46>
    2b4e:	12 16       	cp	r1, r18
    2b50:	13 06       	cpc	r1, r19
    2b52:	e4 07       	cpc	r30, r20
    2b54:	f5 07       	cpc	r31, r21
    2b56:	98 f0       	brcs	.+38     	; 0x2b7e <__fp_cmp+0x46>
    2b58:	62 1b       	sub	r22, r18
    2b5a:	73 0b       	sbc	r23, r19
    2b5c:	84 0b       	sbc	r24, r20
    2b5e:	95 0b       	sbc	r25, r21
    2b60:	39 f4       	brne	.+14     	; 0x2b70 <__fp_cmp+0x38>
    2b62:	0a 26       	eor	r0, r26
    2b64:	61 f0       	breq	.+24     	; 0x2b7e <__fp_cmp+0x46>
    2b66:	23 2b       	or	r18, r19
    2b68:	24 2b       	or	r18, r20
    2b6a:	25 2b       	or	r18, r21
    2b6c:	21 f4       	brne	.+8      	; 0x2b76 <__fp_cmp+0x3e>
    2b6e:	08 95       	ret
    2b70:	0a 26       	eor	r0, r26
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <__fp_cmp+0x3e>
    2b74:	a1 40       	sbci	r26, 0x01	; 1
    2b76:	a6 95       	lsr	r26
    2b78:	8f ef       	ldi	r24, 0xFF	; 255
    2b7a:	81 1d       	adc	r24, r1
    2b7c:	81 1d       	adc	r24, r1
    2b7e:	08 95       	ret

00002b80 <__fp_inf>:
__fp_inf():
    2b80:	97 f9       	bld	r25, 7
    2b82:	9f 67       	ori	r25, 0x7F	; 127
    2b84:	80 e8       	ldi	r24, 0x80	; 128
    2b86:	70 e0       	ldi	r23, 0x00	; 0
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	08 95       	ret

00002b8c <__fp_nan>:
__fp_nan():
    2b8c:	9f ef       	ldi	r25, 0xFF	; 255
    2b8e:	80 ec       	ldi	r24, 0xC0	; 192
    2b90:	08 95       	ret

00002b92 <__fp_pscA>:
__fp_pscA():
    2b92:	00 24       	eor	r0, r0
    2b94:	0a 94       	dec	r0
    2b96:	16 16       	cp	r1, r22
    2b98:	17 06       	cpc	r1, r23
    2b9a:	18 06       	cpc	r1, r24
    2b9c:	09 06       	cpc	r0, r25
    2b9e:	08 95       	ret

00002ba0 <__fp_pscB>:
__fp_pscB():
    2ba0:	00 24       	eor	r0, r0
    2ba2:	0a 94       	dec	r0
    2ba4:	12 16       	cp	r1, r18
    2ba6:	13 06       	cpc	r1, r19
    2ba8:	14 06       	cpc	r1, r20
    2baa:	05 06       	cpc	r0, r21
    2bac:	08 95       	ret

00002bae <__fp_round>:
__fp_round():
    2bae:	09 2e       	mov	r0, r25
    2bb0:	03 94       	inc	r0
    2bb2:	00 0c       	add	r0, r0
    2bb4:	11 f4       	brne	.+4      	; 0x2bba <__fp_round+0xc>
    2bb6:	88 23       	and	r24, r24
    2bb8:	52 f0       	brmi	.+20     	; 0x2bce <__fp_round+0x20>
    2bba:	bb 0f       	add	r27, r27
    2bbc:	40 f4       	brcc	.+16     	; 0x2bce <__fp_round+0x20>
    2bbe:	bf 2b       	or	r27, r31
    2bc0:	11 f4       	brne	.+4      	; 0x2bc6 <__fp_round+0x18>
    2bc2:	60 ff       	sbrs	r22, 0
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <__fp_round+0x20>
    2bc6:	6f 5f       	subi	r22, 0xFF	; 255
    2bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bca:	8f 4f       	sbci	r24, 0xFF	; 255
    2bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bce:	08 95       	ret

00002bd0 <__fp_split3>:
__fp_split3():
    2bd0:	57 fd       	sbrc	r21, 7
    2bd2:	90 58       	subi	r25, 0x80	; 128
    2bd4:	44 0f       	add	r20, r20
    2bd6:	55 1f       	adc	r21, r21
    2bd8:	59 f0       	breq	.+22     	; 0x2bf0 <__fp_splitA+0x10>
    2bda:	5f 3f       	cpi	r21, 0xFF	; 255
    2bdc:	71 f0       	breq	.+28     	; 0x2bfa <__fp_splitA+0x1a>
    2bde:	47 95       	ror	r20

00002be0 <__fp_splitA>:
    2be0:	88 0f       	add	r24, r24
    2be2:	97 fb       	bst	r25, 7
    2be4:	99 1f       	adc	r25, r25
    2be6:	61 f0       	breq	.+24     	; 0x2c00 <__fp_splitA+0x20>
    2be8:	9f 3f       	cpi	r25, 0xFF	; 255
    2bea:	79 f0       	breq	.+30     	; 0x2c0a <__fp_splitA+0x2a>
    2bec:	87 95       	ror	r24
    2bee:	08 95       	ret
    2bf0:	12 16       	cp	r1, r18
    2bf2:	13 06       	cpc	r1, r19
    2bf4:	14 06       	cpc	r1, r20
    2bf6:	55 1f       	adc	r21, r21
    2bf8:	f2 cf       	rjmp	.-28     	; 0x2bde <__fp_split3+0xe>
    2bfa:	46 95       	lsr	r20
    2bfc:	f1 df       	rcall	.-30     	; 0x2be0 <__fp_splitA>
    2bfe:	08 c0       	rjmp	.+16     	; 0x2c10 <__fp_splitA+0x30>
    2c00:	16 16       	cp	r1, r22
    2c02:	17 06       	cpc	r1, r23
    2c04:	18 06       	cpc	r1, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	f1 cf       	rjmp	.-30     	; 0x2bec <__fp_splitA+0xc>
    2c0a:	86 95       	lsr	r24
    2c0c:	71 05       	cpc	r23, r1
    2c0e:	61 05       	cpc	r22, r1
    2c10:	08 94       	sec
    2c12:	08 95       	ret

00002c14 <__fp_zero>:
__fp_zero():
    2c14:	e8 94       	clt

00002c16 <__fp_szero>:
    2c16:	bb 27       	eor	r27, r27
    2c18:	66 27       	eor	r22, r22
    2c1a:	77 27       	eor	r23, r23
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	97 f9       	bld	r25, 7
    2c20:	08 95       	ret

00002c22 <__gesf2>:
__gesf2():
    2c22:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__fp_cmp>
    2c26:	08 f4       	brcc	.+2      	; 0x2c2a <__gesf2+0x8>
    2c28:	8f ef       	ldi	r24, 0xFF	; 255
    2c2a:	08 95       	ret

00002c2c <__mulsf3>:
__mulsf3():
    2c2c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__mulsf3x>
    2c30:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__fp_round>
    2c34:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__fp_pscA>
    2c38:	38 f0       	brcs	.+14     	; 0x2c48 <__mulsf3+0x1c>
    2c3a:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fp_pscB>
    2c3e:	20 f0       	brcs	.+8      	; 0x2c48 <__mulsf3+0x1c>
    2c40:	95 23       	and	r25, r21
    2c42:	11 f0       	breq	.+4      	; 0x2c48 <__mulsf3+0x1c>
    2c44:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__fp_inf>
    2c48:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__fp_nan>
    2c4c:	11 24       	eor	r1, r1
    2c4e:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__fp_szero>

00002c52 <__mulsf3x>:
__mulsf3x():
    2c52:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__fp_split3>
    2c56:	70 f3       	brcs	.-36     	; 0x2c34 <__mulsf3+0x8>

00002c58 <__mulsf3_pse>:
    2c58:	95 9f       	mul	r25, r21
    2c5a:	c1 f3       	breq	.-16     	; 0x2c4c <__mulsf3+0x20>
    2c5c:	95 0f       	add	r25, r21
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	55 1f       	adc	r21, r21
    2c62:	62 9f       	mul	r22, r18
    2c64:	f0 01       	movw	r30, r0
    2c66:	72 9f       	mul	r23, r18
    2c68:	bb 27       	eor	r27, r27
    2c6a:	f0 0d       	add	r31, r0
    2c6c:	b1 1d       	adc	r27, r1
    2c6e:	63 9f       	mul	r22, r19
    2c70:	aa 27       	eor	r26, r26
    2c72:	f0 0d       	add	r31, r0
    2c74:	b1 1d       	adc	r27, r1
    2c76:	aa 1f       	adc	r26, r26
    2c78:	64 9f       	mul	r22, r20
    2c7a:	66 27       	eor	r22, r22
    2c7c:	b0 0d       	add	r27, r0
    2c7e:	a1 1d       	adc	r26, r1
    2c80:	66 1f       	adc	r22, r22
    2c82:	82 9f       	mul	r24, r18
    2c84:	22 27       	eor	r18, r18
    2c86:	b0 0d       	add	r27, r0
    2c88:	a1 1d       	adc	r26, r1
    2c8a:	62 1f       	adc	r22, r18
    2c8c:	73 9f       	mul	r23, r19
    2c8e:	b0 0d       	add	r27, r0
    2c90:	a1 1d       	adc	r26, r1
    2c92:	62 1f       	adc	r22, r18
    2c94:	83 9f       	mul	r24, r19
    2c96:	a0 0d       	add	r26, r0
    2c98:	61 1d       	adc	r22, r1
    2c9a:	22 1f       	adc	r18, r18
    2c9c:	74 9f       	mul	r23, r20
    2c9e:	33 27       	eor	r19, r19
    2ca0:	a0 0d       	add	r26, r0
    2ca2:	61 1d       	adc	r22, r1
    2ca4:	23 1f       	adc	r18, r19
    2ca6:	84 9f       	mul	r24, r20
    2ca8:	60 0d       	add	r22, r0
    2caa:	21 1d       	adc	r18, r1
    2cac:	82 2f       	mov	r24, r18
    2cae:	76 2f       	mov	r23, r22
    2cb0:	6a 2f       	mov	r22, r26
    2cb2:	11 24       	eor	r1, r1
    2cb4:	9f 57       	subi	r25, 0x7F	; 127
    2cb6:	50 40       	sbci	r21, 0x00	; 0
    2cb8:	9a f0       	brmi	.+38     	; 0x2ce0 <__mulsf3_pse+0x88>
    2cba:	f1 f0       	breq	.+60     	; 0x2cf8 <__mulsf3_pse+0xa0>
    2cbc:	88 23       	and	r24, r24
    2cbe:	4a f0       	brmi	.+18     	; 0x2cd2 <__mulsf3_pse+0x7a>
    2cc0:	ee 0f       	add	r30, r30
    2cc2:	ff 1f       	adc	r31, r31
    2cc4:	bb 1f       	adc	r27, r27
    2cc6:	66 1f       	adc	r22, r22
    2cc8:	77 1f       	adc	r23, r23
    2cca:	88 1f       	adc	r24, r24
    2ccc:	91 50       	subi	r25, 0x01	; 1
    2cce:	50 40       	sbci	r21, 0x00	; 0
    2cd0:	a9 f7       	brne	.-22     	; 0x2cbc <__mulsf3_pse+0x64>
    2cd2:	9e 3f       	cpi	r25, 0xFE	; 254
    2cd4:	51 05       	cpc	r21, r1
    2cd6:	80 f0       	brcs	.+32     	; 0x2cf8 <__mulsf3_pse+0xa0>
    2cd8:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__fp_inf>
    2cdc:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__fp_szero>
    2ce0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ce2:	e4 f3       	brlt	.-8      	; 0x2cdc <__mulsf3_pse+0x84>
    2ce4:	98 3e       	cpi	r25, 0xE8	; 232
    2ce6:	d4 f3       	brlt	.-12     	; 0x2cdc <__mulsf3_pse+0x84>
    2ce8:	86 95       	lsr	r24
    2cea:	77 95       	ror	r23
    2cec:	67 95       	ror	r22
    2cee:	b7 95       	ror	r27
    2cf0:	f7 95       	ror	r31
    2cf2:	e7 95       	ror	r30
    2cf4:	9f 5f       	subi	r25, 0xFF	; 255
    2cf6:	c1 f7       	brne	.-16     	; 0x2ce8 <__mulsf3_pse+0x90>
    2cf8:	fe 2b       	or	r31, r30
    2cfa:	88 0f       	add	r24, r24
    2cfc:	91 1d       	adc	r25, r1
    2cfe:	96 95       	lsr	r25
    2d00:	87 95       	ror	r24
    2d02:	97 f9       	bld	r25, 7
    2d04:	08 95       	ret

00002d06 <__udivmodsi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    2d06:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2d08:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2d0a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2d0c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2d0e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2d10:	0d c0       	rjmp	.+26     	; 0x2d2c <__udivmodsi4_ep>

00002d12 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    2d12:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    2d14:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    2d16:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2d18:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2d1a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2d1c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2d1e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2d20:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    2d22:	20 f0       	brcs	.+8      	; 0x2d2c <__udivmodsi4_ep>
__udivmodsi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    2d24:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    2d26:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2d28:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2d2a:	f5 0b       	sbc	r31, r21

00002d2c <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2d2c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2d2e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2d30:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    2d32:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    2d34:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    2d36:	69 f7       	brne	.-38     	; 0x2d12 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    2d38:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2d3a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2d3c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2d3e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    2d40:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    2d42:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    2d44:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    2d46:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    2d48:	08 95       	ret

00002d4a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2d4a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2d4c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    2d4e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    2d50:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    2d52:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    2d54:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    2d56:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2d58:	19 94       	eijmp

00002d5a <malloc>:
malloc():
    2d5a:	0f 93       	push	r16
    2d5c:	1f 93       	push	r17
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	82 30       	cpi	r24, 0x02	; 2
    2d64:	91 05       	cpc	r25, r1
    2d66:	10 f4       	brcc	.+4      	; 0x2d6c <malloc+0x12>
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	e0 91 41 18 	lds	r30, 0x1841	; 0x801841 <__flp>
    2d70:	f0 91 42 18 	lds	r31, 0x1842	; 0x801842 <__flp+0x1>
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	a0 e0       	ldi	r26, 0x00	; 0
    2d7c:	30 97       	sbiw	r30, 0x00	; 0
    2d7e:	99 f4       	brne	.+38     	; 0x2da6 <malloc+0x4c>
    2d80:	21 15       	cp	r18, r1
    2d82:	31 05       	cpc	r19, r1
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <malloc+0x2e>
    2d86:	4a c0       	rjmp	.+148    	; 0x2e1c <malloc+0xc2>
    2d88:	28 1b       	sub	r18, r24
    2d8a:	39 0b       	sbc	r19, r25
    2d8c:	24 30       	cpi	r18, 0x04	; 4
    2d8e:	31 05       	cpc	r19, r1
    2d90:	d8 f5       	brcc	.+118    	; 0x2e08 <malloc+0xae>
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	9b 81       	ldd	r25, Y+3	; 0x03
    2d96:	61 15       	cp	r22, r1
    2d98:	71 05       	cpc	r23, r1
    2d9a:	89 f1       	breq	.+98     	; 0x2dfe <malloc+0xa4>
    2d9c:	fb 01       	movw	r30, r22
    2d9e:	93 83       	std	Z+3, r25	; 0x03
    2da0:	82 83       	std	Z+2, r24	; 0x02
    2da2:	fe 01       	movw	r30, r28
    2da4:	11 c0       	rjmp	.+34     	; 0x2dc8 <malloc+0x6e>
    2da6:	40 81       	ld	r20, Z
    2da8:	51 81       	ldd	r21, Z+1	; 0x01
    2daa:	02 81       	ldd	r16, Z+2	; 0x02
    2dac:	13 81       	ldd	r17, Z+3	; 0x03
    2dae:	48 17       	cp	r20, r24
    2db0:	59 07       	cpc	r21, r25
    2db2:	e0 f0       	brcs	.+56     	; 0x2dec <malloc+0x92>
    2db4:	48 17       	cp	r20, r24
    2db6:	59 07       	cpc	r21, r25
    2db8:	99 f4       	brne	.+38     	; 0x2de0 <malloc+0x86>
    2dba:	10 97       	sbiw	r26, 0x00	; 0
    2dbc:	61 f0       	breq	.+24     	; 0x2dd6 <malloc+0x7c>
    2dbe:	12 96       	adiw	r26, 0x02	; 2
    2dc0:	0c 93       	st	X, r16
    2dc2:	12 97       	sbiw	r26, 0x02	; 2
    2dc4:	13 96       	adiw	r26, 0x03	; 3
    2dc6:	1c 93       	st	X, r17
    2dc8:	32 96       	adiw	r30, 0x02	; 2
    2dca:	cf 01       	movw	r24, r30
    2dcc:	df 91       	pop	r29
    2dce:	cf 91       	pop	r28
    2dd0:	1f 91       	pop	r17
    2dd2:	0f 91       	pop	r16
    2dd4:	08 95       	ret
    2dd6:	00 93 41 18 	sts	0x1841, r16	; 0x801841 <__flp>
    2dda:	10 93 42 18 	sts	0x1842, r17	; 0x801842 <__flp+0x1>
    2dde:	f4 cf       	rjmp	.-24     	; 0x2dc8 <malloc+0x6e>
    2de0:	21 15       	cp	r18, r1
    2de2:	31 05       	cpc	r19, r1
    2de4:	51 f0       	breq	.+20     	; 0x2dfa <malloc+0xa0>
    2de6:	42 17       	cp	r20, r18
    2de8:	53 07       	cpc	r21, r19
    2dea:	38 f0       	brcs	.+14     	; 0x2dfa <malloc+0xa0>
    2dec:	a9 01       	movw	r20, r18
    2dee:	db 01       	movw	r26, r22
    2df0:	9a 01       	movw	r18, r20
    2df2:	bd 01       	movw	r22, r26
    2df4:	df 01       	movw	r26, r30
    2df6:	f8 01       	movw	r30, r16
    2df8:	c1 cf       	rjmp	.-126    	; 0x2d7c <malloc+0x22>
    2dfa:	ef 01       	movw	r28, r30
    2dfc:	f9 cf       	rjmp	.-14     	; 0x2df0 <malloc+0x96>
    2dfe:	90 93 42 18 	sts	0x1842, r25	; 0x801842 <__flp+0x1>
    2e02:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <__flp>
    2e06:	cd cf       	rjmp	.-102    	; 0x2da2 <malloc+0x48>
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e2 0f       	add	r30, r18
    2e0c:	f3 1f       	adc	r31, r19
    2e0e:	81 93       	st	Z+, r24
    2e10:	91 93       	st	Z+, r25
    2e12:	22 50       	subi	r18, 0x02	; 2
    2e14:	31 09       	sbc	r19, r1
    2e16:	39 83       	std	Y+1, r19	; 0x01
    2e18:	28 83       	st	Y, r18
    2e1a:	d7 cf       	rjmp	.-82     	; 0x2dca <malloc+0x70>
    2e1c:	20 91 3f 18 	lds	r18, 0x183F	; 0x80183f <__brkval>
    2e20:	30 91 40 18 	lds	r19, 0x1840	; 0x801840 <__brkval+0x1>
    2e24:	23 2b       	or	r18, r19
    2e26:	41 f4       	brne	.+16     	; 0x2e38 <malloc+0xde>
    2e28:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2e2c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2e30:	30 93 40 18 	sts	0x1840, r19	; 0x801840 <__brkval+0x1>
    2e34:	20 93 3f 18 	sts	0x183F, r18	; 0x80183f <__brkval>
    2e38:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2e3c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2e40:	21 15       	cp	r18, r1
    2e42:	31 05       	cpc	r19, r1
    2e44:	41 f4       	brne	.+16     	; 0x2e56 <malloc+0xfc>
    2e46:	2d b7       	in	r18, 0x3d	; 61
    2e48:	3e b7       	in	r19, 0x3e	; 62
    2e4a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2e4e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2e52:	24 1b       	sub	r18, r20
    2e54:	35 0b       	sbc	r19, r21
    2e56:	e0 91 3f 18 	lds	r30, 0x183F	; 0x80183f <__brkval>
    2e5a:	f0 91 40 18 	lds	r31, 0x1840	; 0x801840 <__brkval+0x1>
    2e5e:	e2 17       	cp	r30, r18
    2e60:	f3 07       	cpc	r31, r19
    2e62:	a0 f4       	brcc	.+40     	; 0x2e8c <malloc+0x132>
    2e64:	2e 1b       	sub	r18, r30
    2e66:	3f 0b       	sbc	r19, r31
    2e68:	28 17       	cp	r18, r24
    2e6a:	39 07       	cpc	r19, r25
    2e6c:	78 f0       	brcs	.+30     	; 0x2e8c <malloc+0x132>
    2e6e:	ac 01       	movw	r20, r24
    2e70:	4e 5f       	subi	r20, 0xFE	; 254
    2e72:	5f 4f       	sbci	r21, 0xFF	; 255
    2e74:	24 17       	cp	r18, r20
    2e76:	35 07       	cpc	r19, r21
    2e78:	48 f0       	brcs	.+18     	; 0x2e8c <malloc+0x132>
    2e7a:	4e 0f       	add	r20, r30
    2e7c:	5f 1f       	adc	r21, r31
    2e7e:	50 93 40 18 	sts	0x1840, r21	; 0x801840 <__brkval+0x1>
    2e82:	40 93 3f 18 	sts	0x183F, r20	; 0x80183f <__brkval>
    2e86:	81 93       	st	Z+, r24
    2e88:	91 93       	st	Z+, r25
    2e8a:	9f cf       	rjmp	.-194    	; 0x2dca <malloc+0x70>
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	e0 e0       	ldi	r30, 0x00	; 0
    2e90:	9c cf       	rjmp	.-200    	; 0x2dca <malloc+0x70>

00002e92 <free>:
free():
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	e9 f0       	breq	.+58     	; 0x2ed4 <free+0x42>
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	32 97       	sbiw	r30, 0x02	; 2
    2e9e:	13 82       	std	Z+3, r1	; 0x03
    2ea0:	12 82       	std	Z+2, r1	; 0x02
    2ea2:	a0 91 41 18 	lds	r26, 0x1841	; 0x801841 <__flp>
    2ea6:	b0 91 42 18 	lds	r27, 0x1842	; 0x801842 <__flp+0x1>
    2eaa:	ed 01       	movw	r28, r26
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	10 97       	sbiw	r26, 0x00	; 0
    2eb2:	a1 f4       	brne	.+40     	; 0x2edc <free+0x4a>
    2eb4:	20 81       	ld	r18, Z
    2eb6:	31 81       	ldd	r19, Z+1	; 0x01
    2eb8:	82 0f       	add	r24, r18
    2eba:	93 1f       	adc	r25, r19
    2ebc:	20 91 3f 18 	lds	r18, 0x183F	; 0x80183f <__brkval>
    2ec0:	30 91 40 18 	lds	r19, 0x1840	; 0x801840 <__brkval+0x1>
    2ec4:	28 17       	cp	r18, r24
    2ec6:	39 07       	cpc	r19, r25
    2ec8:	09 f0       	breq	.+2      	; 0x2ecc <free+0x3a>
    2eca:	61 c0       	rjmp	.+194    	; 0x2f8e <free+0xfc>
    2ecc:	f0 93 40 18 	sts	0x1840, r31	; 0x801840 <__brkval+0x1>
    2ed0:	e0 93 3f 18 	sts	0x183F, r30	; 0x80183f <__brkval>
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	08 95       	ret
    2eda:	ea 01       	movw	r28, r20
    2edc:	ce 17       	cp	r28, r30
    2ede:	df 07       	cpc	r29, r31
    2ee0:	e8 f5       	brcc	.+122    	; 0x2f5c <free+0xca>
    2ee2:	4a 81       	ldd	r20, Y+2	; 0x02
    2ee4:	5b 81       	ldd	r21, Y+3	; 0x03
    2ee6:	9e 01       	movw	r18, r28
    2ee8:	41 15       	cp	r20, r1
    2eea:	51 05       	cpc	r21, r1
    2eec:	b1 f7       	brne	.-20     	; 0x2eda <free+0x48>
    2eee:	e9 01       	movw	r28, r18
    2ef0:	fb 83       	std	Y+3, r31	; 0x03
    2ef2:	ea 83       	std	Y+2, r30	; 0x02
    2ef4:	49 91       	ld	r20, Y+
    2ef6:	59 91       	ld	r21, Y+
    2ef8:	c4 0f       	add	r28, r20
    2efa:	d5 1f       	adc	r29, r21
    2efc:	ec 17       	cp	r30, r28
    2efe:	fd 07       	cpc	r31, r29
    2f00:	61 f4       	brne	.+24     	; 0x2f1a <free+0x88>
    2f02:	80 81       	ld	r24, Z
    2f04:	91 81       	ldd	r25, Z+1	; 0x01
    2f06:	02 96       	adiw	r24, 0x02	; 2
    2f08:	84 0f       	add	r24, r20
    2f0a:	95 1f       	adc	r25, r21
    2f0c:	e9 01       	movw	r28, r18
    2f0e:	99 83       	std	Y+1, r25	; 0x01
    2f10:	88 83       	st	Y, r24
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	9b 83       	std	Y+3, r25	; 0x03
    2f18:	8a 83       	std	Y+2, r24	; 0x02
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	e0 e0       	ldi	r30, 0x00	; 0
    2f1e:	12 96       	adiw	r26, 0x02	; 2
    2f20:	8d 91       	ld	r24, X+
    2f22:	9c 91       	ld	r25, X
    2f24:	13 97       	sbiw	r26, 0x03	; 3
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	b9 f5       	brne	.+110    	; 0x2f98 <free+0x106>
    2f2a:	2d 91       	ld	r18, X+
    2f2c:	3c 91       	ld	r19, X
    2f2e:	11 97       	sbiw	r26, 0x01	; 1
    2f30:	cd 01       	movw	r24, r26
    2f32:	02 96       	adiw	r24, 0x02	; 2
    2f34:	82 0f       	add	r24, r18
    2f36:	93 1f       	adc	r25, r19
    2f38:	20 91 3f 18 	lds	r18, 0x183F	; 0x80183f <__brkval>
    2f3c:	30 91 40 18 	lds	r19, 0x1840	; 0x801840 <__brkval+0x1>
    2f40:	28 17       	cp	r18, r24
    2f42:	39 07       	cpc	r19, r25
    2f44:	39 f6       	brne	.-114    	; 0x2ed4 <free+0x42>
    2f46:	30 97       	sbiw	r30, 0x00	; 0
    2f48:	51 f5       	brne	.+84     	; 0x2f9e <free+0x10c>
    2f4a:	10 92 42 18 	sts	0x1842, r1	; 0x801842 <__flp+0x1>
    2f4e:	10 92 41 18 	sts	0x1841, r1	; 0x801841 <__flp>
    2f52:	b0 93 40 18 	sts	0x1840, r27	; 0x801840 <__brkval+0x1>
    2f56:	a0 93 3f 18 	sts	0x183F, r26	; 0x80183f <__brkval>
    2f5a:	bc cf       	rjmp	.-136    	; 0x2ed4 <free+0x42>
    2f5c:	d3 83       	std	Z+3, r29	; 0x03
    2f5e:	c2 83       	std	Z+2, r28	; 0x02
    2f60:	40 81       	ld	r20, Z
    2f62:	51 81       	ldd	r21, Z+1	; 0x01
    2f64:	84 0f       	add	r24, r20
    2f66:	95 1f       	adc	r25, r21
    2f68:	c8 17       	cp	r28, r24
    2f6a:	d9 07       	cpc	r29, r25
    2f6c:	61 f4       	brne	.+24     	; 0x2f86 <free+0xf4>
    2f6e:	4e 5f       	subi	r20, 0xFE	; 254
    2f70:	5f 4f       	sbci	r21, 0xFF	; 255
    2f72:	88 81       	ld	r24, Y
    2f74:	99 81       	ldd	r25, Y+1	; 0x01
    2f76:	48 0f       	add	r20, r24
    2f78:	59 1f       	adc	r21, r25
    2f7a:	51 83       	std	Z+1, r21	; 0x01
    2f7c:	40 83       	st	Z, r20
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	9b 81       	ldd	r25, Y+3	; 0x03
    2f82:	93 83       	std	Z+3, r25	; 0x03
    2f84:	82 83       	std	Z+2, r24	; 0x02
    2f86:	21 15       	cp	r18, r1
    2f88:	31 05       	cpc	r19, r1
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <free+0xfc>
    2f8c:	b0 cf       	rjmp	.-160    	; 0x2eee <free+0x5c>
    2f8e:	f0 93 42 18 	sts	0x1842, r31	; 0x801842 <__flp+0x1>
    2f92:	e0 93 41 18 	sts	0x1841, r30	; 0x801841 <__flp>
    2f96:	9e cf       	rjmp	.-196    	; 0x2ed4 <free+0x42>
    2f98:	fd 01       	movw	r30, r26
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	c0 cf       	rjmp	.-128    	; 0x2f1e <free+0x8c>
    2f9e:	13 82       	std	Z+3, r1	; 0x03
    2fa0:	12 82       	std	Z+2, r1	; 0x02
    2fa2:	d7 cf       	rjmp	.-82     	; 0x2f52 <free+0xc0>

00002fa4 <strcat>:
strcat():
    2fa4:	fb 01       	movw	r30, r22
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	0d 90       	ld	r0, X+
    2faa:	00 20       	and	r0, r0
    2fac:	e9 f7       	brne	.-6      	; 0x2fa8 <strcat+0x4>
    2fae:	11 97       	sbiw	r26, 0x01	; 1
    2fb0:	01 90       	ld	r0, Z+
    2fb2:	0d 92       	st	X+, r0
    2fb4:	00 20       	and	r0, r0
    2fb6:	e1 f7       	brne	.-8      	; 0x2fb0 <strcat+0xc>
    2fb8:	08 95       	ret

00002fba <strchr>:
strchr():
    2fba:	fc 01       	movw	r30, r24
    2fbc:	81 91       	ld	r24, Z+
    2fbe:	86 17       	cp	r24, r22
    2fc0:	21 f0       	breq	.+8      	; 0x2fca <strchr+0x10>
    2fc2:	88 23       	and	r24, r24
    2fc4:	d9 f7       	brne	.-10     	; 0x2fbc <strchr+0x2>
    2fc6:	99 27       	eor	r25, r25
    2fc8:	08 95       	ret
    2fca:	31 97       	sbiw	r30, 0x01	; 1
    2fcc:	cf 01       	movw	r24, r30
    2fce:	08 95       	ret

00002fd0 <strstr>:
strstr():
    2fd0:	fb 01       	movw	r30, r22
    2fd2:	51 91       	ld	r21, Z+
    2fd4:	55 23       	and	r21, r21
    2fd6:	a9 f0       	breq	.+42     	; 0x3002 <strstr+0x32>
    2fd8:	bf 01       	movw	r22, r30
    2fda:	dc 01       	movw	r26, r24
    2fdc:	4d 91       	ld	r20, X+
    2fde:	45 17       	cp	r20, r21
    2fe0:	41 11       	cpse	r20, r1
    2fe2:	e1 f7       	brne	.-8      	; 0x2fdc <strstr+0xc>
    2fe4:	59 f4       	brne	.+22     	; 0x2ffc <strstr+0x2c>
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	01 90       	ld	r0, Z+
    2fea:	00 20       	and	r0, r0
    2fec:	49 f0       	breq	.+18     	; 0x3000 <strstr+0x30>
    2fee:	4d 91       	ld	r20, X+
    2ff0:	40 15       	cp	r20, r0
    2ff2:	41 11       	cpse	r20, r1
    2ff4:	c9 f3       	breq	.-14     	; 0x2fe8 <strstr+0x18>
    2ff6:	fb 01       	movw	r30, r22
    2ff8:	41 11       	cpse	r20, r1
    2ffa:	ef cf       	rjmp	.-34     	; 0x2fda <strstr+0xa>
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	08 95       	ret

00003004 <sprintf>:
sprintf():
    3004:	0f 93       	push	r16
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	2e 97       	sbiw	r28, 0x0e	; 14
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	0e 89       	ldd	r16, Y+22	; 0x16
    301e:	1f 89       	ldd	r17, Y+23	; 0x17
    3020:	86 e0       	ldi	r24, 0x06	; 6
    3022:	8c 83       	std	Y+4, r24	; 0x04
    3024:	1a 83       	std	Y+2, r17	; 0x02
    3026:	09 83       	std	Y+1, r16	; 0x01
    3028:	8f ef       	ldi	r24, 0xFF	; 255
    302a:	9f e7       	ldi	r25, 0x7F	; 127
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
    3030:	ae 01       	movw	r20, r28
    3032:	46 5e       	subi	r20, 0xE6	; 230
    3034:	5f 4f       	sbci	r21, 0xFF	; 255
    3036:	68 8d       	ldd	r22, Y+24	; 0x18
    3038:	79 8d       	ldd	r23, Y+25	; 0x19
    303a:	ce 01       	movw	r24, r28
    303c:	01 96       	adiw	r24, 0x01	; 1
    303e:	0e 94 32 18 	call	0x3064	; 0x3064 <vfprintf>
    3042:	2f 81       	ldd	r18, Y+7	; 0x07
    3044:	38 85       	ldd	r19, Y+8	; 0x08
    3046:	02 0f       	add	r16, r18
    3048:	13 1f       	adc	r17, r19
    304a:	f8 01       	movw	r30, r16
    304c:	10 82       	st	Z, r1
    304e:	2e 96       	adiw	r28, 0x0e	; 14
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	df 91       	pop	r29
    305c:	cf 91       	pop	r28
    305e:	1f 91       	pop	r17
    3060:	0f 91       	pop	r16
    3062:	08 95       	ret

00003064 <vfprintf>:
vfprintf():
    3064:	2f 92       	push	r2
    3066:	3f 92       	push	r3
    3068:	4f 92       	push	r4
    306a:	5f 92       	push	r5
    306c:	6f 92       	push	r6
    306e:	7f 92       	push	r7
    3070:	8f 92       	push	r8
    3072:	9f 92       	push	r9
    3074:	af 92       	push	r10
    3076:	bf 92       	push	r11
    3078:	cf 92       	push	r12
    307a:	df 92       	push	r13
    307c:	ef 92       	push	r14
    307e:	ff 92       	push	r15
    3080:	0f 93       	push	r16
    3082:	1f 93       	push	r17
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
    3088:	00 d0       	rcall	.+0      	; 0x308a <vfprintf+0x26>
    308a:	00 d0       	rcall	.+0      	; 0x308c <vfprintf+0x28>
    308c:	00 d0       	rcall	.+0      	; 0x308e <vfprintf+0x2a>
    308e:	1f 92       	push	r1
    3090:	1f 92       	push	r1
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    3096:	7c 01       	movw	r14, r24
    3098:	3b 01       	movw	r6, r22
    309a:	8a 01       	movw	r16, r20
    309c:	fc 01       	movw	r30, r24
    309e:	17 82       	std	Z+7, r1	; 0x07
    30a0:	16 82       	std	Z+6, r1	; 0x06
    30a2:	83 81       	ldd	r24, Z+3	; 0x03
    30a4:	81 ff       	sbrs	r24, 1
    30a6:	dd c1       	rjmp	.+954    	; 0x3462 <vfprintf+0x3fe>
    30a8:	ce 01       	movw	r24, r28
    30aa:	01 96       	adiw	r24, 0x01	; 1
    30ac:	5c 01       	movw	r10, r24
    30ae:	f7 01       	movw	r30, r14
    30b0:	93 81       	ldd	r25, Z+3	; 0x03
    30b2:	f3 01       	movw	r30, r6
    30b4:	93 fd       	sbrc	r25, 3
    30b6:	85 91       	lpm	r24, Z+
    30b8:	93 ff       	sbrs	r25, 3
    30ba:	81 91       	ld	r24, Z+
    30bc:	3f 01       	movw	r6, r30
    30be:	88 23       	and	r24, r24
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <vfprintf+0x60>
    30c2:	53 c1       	rjmp	.+678    	; 0x336a <vfprintf+0x306>
    30c4:	85 32       	cpi	r24, 0x25	; 37
    30c6:	39 f4       	brne	.+14     	; 0x30d6 <vfprintf+0x72>
    30c8:	93 fd       	sbrc	r25, 3
    30ca:	85 91       	lpm	r24, Z+
    30cc:	93 ff       	sbrs	r25, 3
    30ce:	81 91       	ld	r24, Z+
    30d0:	3f 01       	movw	r6, r30
    30d2:	85 32       	cpi	r24, 0x25	; 37
    30d4:	29 f4       	brne	.+10     	; 0x30e0 <vfprintf+0x7c>
    30d6:	b7 01       	movw	r22, r14
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	0e 94 4a 1a 	call	0x3494	; 0x3494 <fputc>
    30de:	e7 cf       	rjmp	.-50     	; 0x30ae <vfprintf+0x4a>
    30e0:	91 2c       	mov	r9, r1
    30e2:	21 2c       	mov	r2, r1
    30e4:	31 2c       	mov	r3, r1
    30e6:	ff e1       	ldi	r31, 0x1F	; 31
    30e8:	f3 15       	cp	r31, r3
    30ea:	38 f0       	brcs	.+14     	; 0x30fa <vfprintf+0x96>
    30ec:	8b 32       	cpi	r24, 0x2B	; 43
    30ee:	11 f1       	breq	.+68     	; 0x3134 <vfprintf+0xd0>
    30f0:	90 f4       	brcc	.+36     	; 0x3116 <vfprintf+0xb2>
    30f2:	80 32       	cpi	r24, 0x20	; 32
    30f4:	09 f1       	breq	.+66     	; 0x3138 <vfprintf+0xd4>
    30f6:	83 32       	cpi	r24, 0x23	; 35
    30f8:	29 f1       	breq	.+74     	; 0x3144 <vfprintf+0xe0>
    30fa:	37 fc       	sbrc	r3, 7
    30fc:	3c c0       	rjmp	.+120    	; 0x3176 <vfprintf+0x112>
    30fe:	20 ed       	ldi	r18, 0xD0	; 208
    3100:	28 0f       	add	r18, r24
    3102:	2a 30       	cpi	r18, 0x0A	; 10
    3104:	50 f5       	brcc	.+84     	; 0x315a <vfprintf+0xf6>
    3106:	36 fe       	sbrs	r3, 6
    3108:	20 c0       	rjmp	.+64     	; 0x314a <vfprintf+0xe6>
    310a:	8a e0       	ldi	r24, 0x0A	; 10
    310c:	98 9e       	mul	r9, r24
    310e:	20 0d       	add	r18, r0
    3110:	11 24       	eor	r1, r1
    3112:	92 2e       	mov	r9, r18
    3114:	06 c0       	rjmp	.+12     	; 0x3122 <vfprintf+0xbe>
    3116:	8d 32       	cpi	r24, 0x2D	; 45
    3118:	91 f0       	breq	.+36     	; 0x313e <vfprintf+0xda>
    311a:	80 33       	cpi	r24, 0x30	; 48
    311c:	71 f7       	brne	.-36     	; 0x30fa <vfprintf+0x96>
    311e:	68 94       	set
    3120:	30 f8       	bld	r3, 0
    3122:	f3 01       	movw	r30, r6
    3124:	93 fd       	sbrc	r25, 3
    3126:	85 91       	lpm	r24, Z+
    3128:	93 ff       	sbrs	r25, 3
    312a:	81 91       	ld	r24, Z+
    312c:	3f 01       	movw	r6, r30
    312e:	81 11       	cpse	r24, r1
    3130:	da cf       	rjmp	.-76     	; 0x30e6 <vfprintf+0x82>
    3132:	21 c0       	rjmp	.+66     	; 0x3176 <vfprintf+0x112>
    3134:	68 94       	set
    3136:	31 f8       	bld	r3, 1
    3138:	68 94       	set
    313a:	32 f8       	bld	r3, 2
    313c:	f2 cf       	rjmp	.-28     	; 0x3122 <vfprintf+0xbe>
    313e:	68 94       	set
    3140:	33 f8       	bld	r3, 3
    3142:	ef cf       	rjmp	.-34     	; 0x3122 <vfprintf+0xbe>
    3144:	68 94       	set
    3146:	34 f8       	bld	r3, 4
    3148:	ec cf       	rjmp	.-40     	; 0x3122 <vfprintf+0xbe>
    314a:	ea e0       	ldi	r30, 0x0A	; 10
    314c:	2e 9e       	mul	r2, r30
    314e:	20 0d       	add	r18, r0
    3150:	11 24       	eor	r1, r1
    3152:	22 2e       	mov	r2, r18
    3154:	68 94       	set
    3156:	35 f8       	bld	r3, 5
    3158:	e4 cf       	rjmp	.-56     	; 0x3122 <vfprintf+0xbe>
    315a:	8e 32       	cpi	r24, 0x2E	; 46
    315c:	29 f4       	brne	.+10     	; 0x3168 <vfprintf+0x104>
    315e:	36 fc       	sbrc	r3, 6
    3160:	04 c1       	rjmp	.+520    	; 0x336a <vfprintf+0x306>
    3162:	68 94       	set
    3164:	36 f8       	bld	r3, 6
    3166:	dd cf       	rjmp	.-70     	; 0x3122 <vfprintf+0xbe>
    3168:	8c 36       	cpi	r24, 0x6C	; 108
    316a:	19 f4       	brne	.+6      	; 0x3172 <vfprintf+0x10e>
    316c:	68 94       	set
    316e:	37 f8       	bld	r3, 7
    3170:	d8 cf       	rjmp	.-80     	; 0x3122 <vfprintf+0xbe>
    3172:	88 36       	cpi	r24, 0x68	; 104
    3174:	b1 f2       	breq	.-84     	; 0x3122 <vfprintf+0xbe>
    3176:	98 2f       	mov	r25, r24
    3178:	9f 7d       	andi	r25, 0xDF	; 223
    317a:	95 54       	subi	r25, 0x45	; 69
    317c:	93 30       	cpi	r25, 0x03	; 3
    317e:	e0 f0       	brcs	.+56     	; 0x31b8 <vfprintf+0x154>
    3180:	83 36       	cpi	r24, 0x63	; 99
    3182:	a1 f1       	breq	.+104    	; 0x31ec <vfprintf+0x188>
    3184:	83 37       	cpi	r24, 0x73	; 115
    3186:	c1 f1       	breq	.+112    	; 0x31f8 <vfprintf+0x194>
    3188:	83 35       	cpi	r24, 0x53	; 83
    318a:	09 f0       	breq	.+2      	; 0x318e <vfprintf+0x12a>
    318c:	63 c0       	rjmp	.+198    	; 0x3254 <vfprintf+0x1f0>
    318e:	28 01       	movw	r4, r16
    3190:	f2 e0       	ldi	r31, 0x02	; 2
    3192:	4f 0e       	add	r4, r31
    3194:	51 1c       	adc	r5, r1
    3196:	f8 01       	movw	r30, r16
    3198:	c0 80       	ld	r12, Z
    319a:	d1 80       	ldd	r13, Z+1	; 0x01
    319c:	69 2d       	mov	r22, r9
    319e:	70 e0       	ldi	r23, 0x00	; 0
    31a0:	36 fc       	sbrc	r3, 6
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <vfprintf+0x144>
    31a4:	6f ef       	ldi	r22, 0xFF	; 255
    31a6:	7f ef       	ldi	r23, 0xFF	; 255
    31a8:	c6 01       	movw	r24, r12
    31aa:	0e 94 34 1a 	call	0x3468	; 0x3468 <strnlen_P>
    31ae:	4c 01       	movw	r8, r24
    31b0:	68 94       	set
    31b2:	37 f8       	bld	r3, 7
    31b4:	82 01       	movw	r16, r4
    31b6:	0a c0       	rjmp	.+20     	; 0x31cc <vfprintf+0x168>
    31b8:	0c 5f       	subi	r16, 0xFC	; 252
    31ba:	1f 4f       	sbci	r17, 0xFF	; 255
    31bc:	ff e3       	ldi	r31, 0x3F	; 63
    31be:	f9 83       	std	Y+1, r31	; 0x01
    31c0:	88 24       	eor	r8, r8
    31c2:	83 94       	inc	r8
    31c4:	91 2c       	mov	r9, r1
    31c6:	65 01       	movw	r12, r10
    31c8:	e8 94       	clt
    31ca:	37 f8       	bld	r3, 7
    31cc:	33 fe       	sbrs	r3, 3
    31ce:	2d c0       	rjmp	.+90     	; 0x322a <vfprintf+0x1c6>
    31d0:	52 2c       	mov	r5, r2
    31d2:	81 14       	cp	r8, r1
    31d4:	91 04       	cpc	r9, r1
    31d6:	71 f5       	brne	.+92     	; 0x3234 <vfprintf+0x1d0>
    31d8:	55 20       	and	r5, r5
    31da:	09 f4       	brne	.+2      	; 0x31de <vfprintf+0x17a>
    31dc:	68 cf       	rjmp	.-304    	; 0x30ae <vfprintf+0x4a>
    31de:	b7 01       	movw	r22, r14
    31e0:	80 e2       	ldi	r24, 0x20	; 32
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	0e 94 4a 1a 	call	0x3494	; 0x3494 <fputc>
    31e8:	5a 94       	dec	r5
    31ea:	f6 cf       	rjmp	.-20     	; 0x31d8 <vfprintf+0x174>
    31ec:	f8 01       	movw	r30, r16
    31ee:	80 81       	ld	r24, Z
    31f0:	89 83       	std	Y+1, r24	; 0x01
    31f2:	0e 5f       	subi	r16, 0xFE	; 254
    31f4:	1f 4f       	sbci	r17, 0xFF	; 255
    31f6:	e4 cf       	rjmp	.-56     	; 0x31c0 <vfprintf+0x15c>
    31f8:	28 01       	movw	r4, r16
    31fa:	f2 e0       	ldi	r31, 0x02	; 2
    31fc:	4f 0e       	add	r4, r31
    31fe:	51 1c       	adc	r5, r1
    3200:	f8 01       	movw	r30, r16
    3202:	c0 80       	ld	r12, Z
    3204:	d1 80       	ldd	r13, Z+1	; 0x01
    3206:	69 2d       	mov	r22, r9
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	36 fc       	sbrc	r3, 6
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <vfprintf+0x1ae>
    320e:	6f ef       	ldi	r22, 0xFF	; 255
    3210:	7f ef       	ldi	r23, 0xFF	; 255
    3212:	c6 01       	movw	r24, r12
    3214:	0e 94 3f 1a 	call	0x347e	; 0x347e <strnlen>
    3218:	4c 01       	movw	r8, r24
    321a:	82 01       	movw	r16, r4
    321c:	d5 cf       	rjmp	.-86     	; 0x31c8 <vfprintf+0x164>
    321e:	b7 01       	movw	r22, r14
    3220:	80 e2       	ldi	r24, 0x20	; 32
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0e 94 4a 1a 	call	0x3494	; 0x3494 <fputc>
    3228:	2a 94       	dec	r2
    322a:	28 14       	cp	r2, r8
    322c:	19 04       	cpc	r1, r9
    322e:	09 f0       	breq	.+2      	; 0x3232 <vfprintf+0x1ce>
    3230:	b0 f7       	brcc	.-20     	; 0x321e <vfprintf+0x1ba>
    3232:	ce cf       	rjmp	.-100    	; 0x31d0 <vfprintf+0x16c>
    3234:	f6 01       	movw	r30, r12
    3236:	37 fc       	sbrc	r3, 7
    3238:	85 91       	lpm	r24, Z+
    323a:	37 fe       	sbrs	r3, 7
    323c:	81 91       	ld	r24, Z+
    323e:	6f 01       	movw	r12, r30
    3240:	b7 01       	movw	r22, r14
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	0e 94 4a 1a 	call	0x3494	; 0x3494 <fputc>
    3248:	51 10       	cpse	r5, r1
    324a:	5a 94       	dec	r5
    324c:	f1 e0       	ldi	r31, 0x01	; 1
    324e:	8f 1a       	sub	r8, r31
    3250:	91 08       	sbc	r9, r1
    3252:	bf cf       	rjmp	.-130    	; 0x31d2 <vfprintf+0x16e>
    3254:	84 36       	cpi	r24, 0x64	; 100
    3256:	19 f0       	breq	.+6      	; 0x325e <vfprintf+0x1fa>
    3258:	89 36       	cpi	r24, 0x69	; 105
    325a:	09 f0       	breq	.+2      	; 0x325e <vfprintf+0x1fa>
    325c:	77 c0       	rjmp	.+238    	; 0x334c <vfprintf+0x2e8>
    325e:	f8 01       	movw	r30, r16
    3260:	37 fe       	sbrs	r3, 7
    3262:	6b c0       	rjmp	.+214    	; 0x333a <vfprintf+0x2d6>
    3264:	60 81       	ld	r22, Z
    3266:	71 81       	ldd	r23, Z+1	; 0x01
    3268:	82 81       	ldd	r24, Z+2	; 0x02
    326a:	93 81       	ldd	r25, Z+3	; 0x03
    326c:	0c 5f       	subi	r16, 0xFC	; 252
    326e:	1f 4f       	sbci	r17, 0xFF	; 255
    3270:	f3 2d       	mov	r31, r3
    3272:	ff 76       	andi	r31, 0x6F	; 111
    3274:	3f 2e       	mov	r3, r31
    3276:	97 ff       	sbrs	r25, 7
    3278:	09 c0       	rjmp	.+18     	; 0x328c <vfprintf+0x228>
    327a:	90 95       	com	r25
    327c:	80 95       	com	r24
    327e:	70 95       	com	r23
    3280:	61 95       	neg	r22
    3282:	7f 4f       	sbci	r23, 0xFF	; 255
    3284:	8f 4f       	sbci	r24, 0xFF	; 255
    3286:	9f 4f       	sbci	r25, 0xFF	; 255
    3288:	68 94       	set
    328a:	37 f8       	bld	r3, 7
    328c:	2a e0       	ldi	r18, 0x0A	; 10
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	a5 01       	movw	r20, r10
    3292:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__ultoa_invert>
    3296:	c8 2e       	mov	r12, r24
    3298:	ca 18       	sub	r12, r10
    329a:	8c 2c       	mov	r8, r12
    329c:	43 2c       	mov	r4, r3
    329e:	36 fe       	sbrs	r3, 6
    32a0:	0c c0       	rjmp	.+24     	; 0x32ba <vfprintf+0x256>
    32a2:	e8 94       	clt
    32a4:	40 f8       	bld	r4, 0
    32a6:	c9 14       	cp	r12, r9
    32a8:	40 f4       	brcc	.+16     	; 0x32ba <vfprintf+0x256>
    32aa:	34 fe       	sbrs	r3, 4
    32ac:	05 c0       	rjmp	.+10     	; 0x32b8 <vfprintf+0x254>
    32ae:	32 fc       	sbrc	r3, 2
    32b0:	03 c0       	rjmp	.+6      	; 0x32b8 <vfprintf+0x254>
    32b2:	f3 2d       	mov	r31, r3
    32b4:	fe 7e       	andi	r31, 0xEE	; 238
    32b6:	4f 2e       	mov	r4, r31
    32b8:	89 2c       	mov	r8, r9
    32ba:	44 fe       	sbrs	r4, 4
    32bc:	aa c0       	rjmp	.+340    	; 0x3412 <vfprintf+0x3ae>
    32be:	fe 01       	movw	r30, r28
    32c0:	ec 0d       	add	r30, r12
    32c2:	f1 1d       	adc	r31, r1
    32c4:	80 81       	ld	r24, Z
    32c6:	80 33       	cpi	r24, 0x30	; 48
    32c8:	09 f0       	breq	.+2      	; 0x32cc <vfprintf+0x268>
    32ca:	9c c0       	rjmp	.+312    	; 0x3404 <vfprintf+0x3a0>
    32cc:	24 2d       	mov	r18, r4
    32ce:	29 7e       	andi	r18, 0xE9	; 233
    32d0:	42 2e       	mov	r4, r18
    32d2:	84 2d       	mov	r24, r4
    32d4:	88 70       	andi	r24, 0x08	; 8
    32d6:	58 2e       	mov	r5, r24
    32d8:	43 fc       	sbrc	r4, 3
    32da:	aa c0       	rjmp	.+340    	; 0x3430 <vfprintf+0x3cc>
    32dc:	40 fe       	sbrs	r4, 0
    32de:	a4 c0       	rjmp	.+328    	; 0x3428 <vfprintf+0x3c4>
    32e0:	9c 2c       	mov	r9, r12
    32e2:	82 14       	cp	r8, r2
    32e4:	18 f4       	brcc	.+6      	; 0x32ec <vfprintf+0x288>
    32e6:	2c 0c       	add	r2, r12
    32e8:	92 2c       	mov	r9, r2
    32ea:	98 18       	sub	r9, r8
    32ec:	44 fe       	sbrs	r4, 4
    32ee:	a6 c0       	rjmp	.+332    	; 0x343c <vfprintf+0x3d8>
    32f0:	b7 01       	movw	r22, r14
    32f2:	80 e3       	ldi	r24, 0x30	; 48
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	0e 94 4a 1a 	call	0x3494	; 0x3494 <fputc>
    32fa:	42 fe       	sbrs	r4, 2
    32fc:	09 c0       	rjmp	.+18     	; 0x3310 <vfprintf+0x2ac>
    32fe:	88 e7       	ldi	r24, 0x78	; 120
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	41 fe       	sbrs	r4, 1
    3304:	02 c0       	rjmp	.+4      	; 0x330a <vfprintf+0x2a6>
    3306:	88 e5       	ldi	r24, 0x58	; 88
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	b7 01       	movw	r22, r14
    330c:	0e 94 4a 1a 	call	0x3494	; 0x3494 <fputc>
    3310:	c9 14       	cp	r12, r9
    3312:	08 f4       	brcc	.+2      	; 0x3316 <vfprintf+0x2b2>
    3314:	9f c0       	rjmp	.+318    	; 0x3454 <vfprintf+0x3f0>
    3316:	ca 94       	dec	r12
    3318:	d1 2c       	mov	r13, r1
    331a:	9f ef       	ldi	r25, 0xFF	; 255
    331c:	c9 1a       	sub	r12, r25
    331e:	d9 0a       	sbc	r13, r25
    3320:	ca 0c       	add	r12, r10
    3322:	db 1c       	adc	r13, r11
    3324:	f6 01       	movw	r30, r12
    3326:	82 91       	ld	r24, -Z
    3328:	6f 01       	movw	r12, r30
    332a:	b7 01       	movw	r22, r14
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <fputc>
    3332:	ac 14       	cp	r10, r12
    3334:	bd 04       	cpc	r11, r13
    3336:	b1 f7       	brne	.-20     	; 0x3324 <vfprintf+0x2c0>
    3338:	4f cf       	rjmp	.-354    	; 0x31d8 <vfprintf+0x174>
    333a:	60 81       	ld	r22, Z
    333c:	71 81       	ldd	r23, Z+1	; 0x01
    333e:	07 2e       	mov	r0, r23
    3340:	00 0c       	add	r0, r0
    3342:	88 0b       	sbc	r24, r24
    3344:	99 0b       	sbc	r25, r25
    3346:	0e 5f       	subi	r16, 0xFE	; 254
    3348:	1f 4f       	sbci	r17, 0xFF	; 255
    334a:	92 cf       	rjmp	.-220    	; 0x3270 <vfprintf+0x20c>
    334c:	d3 2c       	mov	r13, r3
    334e:	e8 94       	clt
    3350:	d4 f8       	bld	r13, 4
    3352:	2a e0       	ldi	r18, 0x0A	; 10
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	85 37       	cpi	r24, 0x75	; 117
    3358:	e1 f1       	breq	.+120    	; 0x33d2 <vfprintf+0x36e>
    335a:	23 2d       	mov	r18, r3
    335c:	29 7f       	andi	r18, 0xF9	; 249
    335e:	d2 2e       	mov	r13, r18
    3360:	8f 36       	cpi	r24, 0x6F	; 111
    3362:	a9 f1       	breq	.+106    	; 0x33ce <vfprintf+0x36a>
    3364:	f0 f4       	brcc	.+60     	; 0x33a2 <vfprintf+0x33e>
    3366:	88 35       	cpi	r24, 0x58	; 88
    3368:	51 f1       	breq	.+84     	; 0x33be <vfprintf+0x35a>
    336a:	f7 01       	movw	r30, r14
    336c:	86 81       	ldd	r24, Z+6	; 0x06
    336e:	97 81       	ldd	r25, Z+7	; 0x07
    3370:	2b 96       	adiw	r28, 0x0b	; 11
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	df 91       	pop	r29
    337e:	cf 91       	pop	r28
    3380:	1f 91       	pop	r17
    3382:	0f 91       	pop	r16
    3384:	ff 90       	pop	r15
    3386:	ef 90       	pop	r14
    3388:	df 90       	pop	r13
    338a:	cf 90       	pop	r12
    338c:	bf 90       	pop	r11
    338e:	af 90       	pop	r10
    3390:	9f 90       	pop	r9
    3392:	8f 90       	pop	r8
    3394:	7f 90       	pop	r7
    3396:	6f 90       	pop	r6
    3398:	5f 90       	pop	r5
    339a:	4f 90       	pop	r4
    339c:	3f 90       	pop	r3
    339e:	2f 90       	pop	r2
    33a0:	08 95       	ret
    33a2:	80 37       	cpi	r24, 0x70	; 112
    33a4:	49 f0       	breq	.+18     	; 0x33b8 <vfprintf+0x354>
    33a6:	88 37       	cpi	r24, 0x78	; 120
    33a8:	01 f7       	brne	.-64     	; 0x336a <vfprintf+0x306>
    33aa:	d4 fe       	sbrs	r13, 4
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <vfprintf+0x34e>
    33ae:	68 94       	set
    33b0:	d2 f8       	bld	r13, 2
    33b2:	20 e1       	ldi	r18, 0x10	; 16
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	0d c0       	rjmp	.+26     	; 0x33d2 <vfprintf+0x36e>
    33b8:	68 94       	set
    33ba:	d4 f8       	bld	r13, 4
    33bc:	f6 cf       	rjmp	.-20     	; 0x33aa <vfprintf+0x346>
    33be:	34 fe       	sbrs	r3, 4
    33c0:	03 c0       	rjmp	.+6      	; 0x33c8 <vfprintf+0x364>
    33c2:	82 2f       	mov	r24, r18
    33c4:	86 60       	ori	r24, 0x06	; 6
    33c6:	d8 2e       	mov	r13, r24
    33c8:	20 e1       	ldi	r18, 0x10	; 16
    33ca:	32 e0       	ldi	r19, 0x02	; 2
    33cc:	02 c0       	rjmp	.+4      	; 0x33d2 <vfprintf+0x36e>
    33ce:	28 e0       	ldi	r18, 0x08	; 8
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	f8 01       	movw	r30, r16
    33d4:	d7 fe       	sbrs	r13, 7
    33d6:	0f c0       	rjmp	.+30     	; 0x33f6 <vfprintf+0x392>
    33d8:	60 81       	ld	r22, Z
    33da:	71 81       	ldd	r23, Z+1	; 0x01
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	93 81       	ldd	r25, Z+3	; 0x03
    33e0:	0c 5f       	subi	r16, 0xFC	; 252
    33e2:	1f 4f       	sbci	r17, 0xFF	; 255
    33e4:	a5 01       	movw	r20, r10
    33e6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__ultoa_invert>
    33ea:	c8 2e       	mov	r12, r24
    33ec:	ca 18       	sub	r12, r10
    33ee:	3d 2c       	mov	r3, r13
    33f0:	e8 94       	clt
    33f2:	37 f8       	bld	r3, 7
    33f4:	52 cf       	rjmp	.-348    	; 0x329a <vfprintf+0x236>
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	0e 5f       	subi	r16, 0xFE	; 254
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	f0 cf       	rjmp	.-32     	; 0x33e4 <vfprintf+0x380>
    3404:	42 fc       	sbrc	r4, 2
    3406:	02 c0       	rjmp	.+4      	; 0x340c <vfprintf+0x3a8>
    3408:	83 94       	inc	r8
    340a:	63 cf       	rjmp	.-314    	; 0x32d2 <vfprintf+0x26e>
    340c:	83 94       	inc	r8
    340e:	83 94       	inc	r8
    3410:	60 cf       	rjmp	.-320    	; 0x32d2 <vfprintf+0x26e>
    3412:	84 2d       	mov	r24, r4
    3414:	86 78       	andi	r24, 0x86	; 134
    3416:	09 f4       	brne	.+2      	; 0x341a <vfprintf+0x3b6>
    3418:	5c cf       	rjmp	.-328    	; 0x32d2 <vfprintf+0x26e>
    341a:	f6 cf       	rjmp	.-20     	; 0x3408 <vfprintf+0x3a4>
    341c:	b7 01       	movw	r22, r14
    341e:	80 e2       	ldi	r24, 0x20	; 32
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	0e 94 4a 1a 	call	0x3494	; 0x3494 <fputc>
    3426:	83 94       	inc	r8
    3428:	82 14       	cp	r8, r2
    342a:	c0 f3       	brcs	.-16     	; 0x341c <vfprintf+0x3b8>
    342c:	51 2c       	mov	r5, r1
    342e:	5e cf       	rjmp	.-324    	; 0x32ec <vfprintf+0x288>
    3430:	52 2c       	mov	r5, r2
    3432:	58 18       	sub	r5, r8
    3434:	82 14       	cp	r8, r2
    3436:	08 f4       	brcc	.+2      	; 0x343a <vfprintf+0x3d6>
    3438:	59 cf       	rjmp	.-334    	; 0x32ec <vfprintf+0x288>
    343a:	f8 cf       	rjmp	.-16     	; 0x342c <vfprintf+0x3c8>
    343c:	84 2d       	mov	r24, r4
    343e:	86 78       	andi	r24, 0x86	; 134
    3440:	09 f4       	brne	.+2      	; 0x3444 <vfprintf+0x3e0>
    3442:	66 cf       	rjmp	.-308    	; 0x3310 <vfprintf+0x2ac>
    3444:	8b e2       	ldi	r24, 0x2B	; 43
    3446:	41 fe       	sbrs	r4, 1
    3448:	80 e2       	ldi	r24, 0x20	; 32
    344a:	47 fc       	sbrc	r4, 7
    344c:	8d e2       	ldi	r24, 0x2D	; 45
    344e:	b7 01       	movw	r22, r14
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	5c cf       	rjmp	.-328    	; 0x330c <vfprintf+0x2a8>
    3454:	b7 01       	movw	r22, r14
    3456:	80 e3       	ldi	r24, 0x30	; 48
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	0e 94 4a 1a 	call	0x3494	; 0x3494 <fputc>
    345e:	9a 94       	dec	r9
    3460:	57 cf       	rjmp	.-338    	; 0x3310 <vfprintf+0x2ac>
    3462:	8f ef       	ldi	r24, 0xFF	; 255
    3464:	9f ef       	ldi	r25, 0xFF	; 255
    3466:	84 cf       	rjmp	.-248    	; 0x3370 <vfprintf+0x30c>

00003468 <strnlen_P>:
strnlen_P():
    3468:	fc 01       	movw	r30, r24
    346a:	05 90       	lpm	r0, Z+
    346c:	61 50       	subi	r22, 0x01	; 1
    346e:	70 40       	sbci	r23, 0x00	; 0
    3470:	01 10       	cpse	r0, r1
    3472:	d8 f7       	brcc	.-10     	; 0x346a <strnlen_P+0x2>
    3474:	80 95       	com	r24
    3476:	90 95       	com	r25
    3478:	8e 0f       	add	r24, r30
    347a:	9f 1f       	adc	r25, r31
    347c:	08 95       	ret

0000347e <strnlen>:
strnlen():
    347e:	fc 01       	movw	r30, r24
    3480:	61 50       	subi	r22, 0x01	; 1
    3482:	70 40       	sbci	r23, 0x00	; 0
    3484:	01 90       	ld	r0, Z+
    3486:	01 10       	cpse	r0, r1
    3488:	d8 f7       	brcc	.-10     	; 0x3480 <strnlen+0x2>
    348a:	80 95       	com	r24
    348c:	90 95       	com	r25
    348e:	8e 0f       	add	r24, r30
    3490:	9f 1f       	adc	r25, r31
    3492:	08 95       	ret

00003494 <fputc>:
fputc():
    3494:	0f 93       	push	r16
    3496:	1f 93       	push	r17
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	18 2f       	mov	r17, r24
    349e:	09 2f       	mov	r16, r25
    34a0:	eb 01       	movw	r28, r22
    34a2:	8b 81       	ldd	r24, Y+3	; 0x03
    34a4:	81 fd       	sbrc	r24, 1
    34a6:	09 c0       	rjmp	.+18     	; 0x34ba <fputc+0x26>
    34a8:	1f ef       	ldi	r17, 0xFF	; 255
    34aa:	0f ef       	ldi	r16, 0xFF	; 255
    34ac:	81 2f       	mov	r24, r17
    34ae:	90 2f       	mov	r25, r16
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    34b8:	08 95       	ret
    34ba:	82 ff       	sbrs	r24, 2
    34bc:	14 c0       	rjmp	.+40     	; 0x34e6 <fputc+0x52>
    34be:	2e 81       	ldd	r18, Y+6	; 0x06
    34c0:	3f 81       	ldd	r19, Y+7	; 0x07
    34c2:	8c 81       	ldd	r24, Y+4	; 0x04
    34c4:	9d 81       	ldd	r25, Y+5	; 0x05
    34c6:	28 17       	cp	r18, r24
    34c8:	39 07       	cpc	r19, r25
    34ca:	3c f4       	brge	.+14     	; 0x34da <fputc+0x46>
    34cc:	e8 81       	ld	r30, Y
    34ce:	f9 81       	ldd	r31, Y+1	; 0x01
    34d0:	cf 01       	movw	r24, r30
    34d2:	01 96       	adiw	r24, 0x01	; 1
    34d4:	99 83       	std	Y+1, r25	; 0x01
    34d6:	88 83       	st	Y, r24
    34d8:	10 83       	st	Z, r17
    34da:	8e 81       	ldd	r24, Y+6	; 0x06
    34dc:	9f 81       	ldd	r25, Y+7	; 0x07
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	9f 83       	std	Y+7, r25	; 0x07
    34e2:	8e 83       	std	Y+6, r24	; 0x06
    34e4:	e3 cf       	rjmp	.-58     	; 0x34ac <fputc+0x18>
    34e6:	e8 85       	ldd	r30, Y+8	; 0x08
    34e8:	f9 85       	ldd	r31, Y+9	; 0x09
    34ea:	81 2f       	mov	r24, r17
    34ec:	19 95       	eicall
    34ee:	89 2b       	or	r24, r25
    34f0:	a1 f3       	breq	.-24     	; 0x34da <fputc+0x46>
    34f2:	da cf       	rjmp	.-76     	; 0x34a8 <fputc+0x14>

000034f4 <__ultoa_invert>:
__ultoa_invert():
    34f4:	fa 01       	movw	r30, r20
    34f6:	aa 27       	eor	r26, r26
    34f8:	28 30       	cpi	r18, 0x08	; 8
    34fa:	51 f1       	breq	.+84     	; 0x3550 <__ultoa_invert+0x5c>
    34fc:	20 31       	cpi	r18, 0x10	; 16
    34fe:	81 f1       	breq	.+96     	; 0x3560 <__ultoa_invert+0x6c>
    3500:	e8 94       	clt
    3502:	6f 93       	push	r22
    3504:	6e 7f       	andi	r22, 0xFE	; 254
    3506:	6e 5f       	subi	r22, 0xFE	; 254
    3508:	7f 4f       	sbci	r23, 0xFF	; 255
    350a:	8f 4f       	sbci	r24, 0xFF	; 255
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	af 4f       	sbci	r26, 0xFF	; 255
    3510:	b1 e0       	ldi	r27, 0x01	; 1
    3512:	3e d0       	rcall	.+124    	; 0x3590 <__ultoa_invert+0x9c>
    3514:	b4 e0       	ldi	r27, 0x04	; 4
    3516:	3c d0       	rcall	.+120    	; 0x3590 <__ultoa_invert+0x9c>
    3518:	67 0f       	add	r22, r23
    351a:	78 1f       	adc	r23, r24
    351c:	89 1f       	adc	r24, r25
    351e:	9a 1f       	adc	r25, r26
    3520:	a1 1d       	adc	r26, r1
    3522:	68 0f       	add	r22, r24
    3524:	79 1f       	adc	r23, r25
    3526:	8a 1f       	adc	r24, r26
    3528:	91 1d       	adc	r25, r1
    352a:	a1 1d       	adc	r26, r1
    352c:	6a 0f       	add	r22, r26
    352e:	71 1d       	adc	r23, r1
    3530:	81 1d       	adc	r24, r1
    3532:	91 1d       	adc	r25, r1
    3534:	a1 1d       	adc	r26, r1
    3536:	20 d0       	rcall	.+64     	; 0x3578 <__ultoa_invert+0x84>
    3538:	09 f4       	brne	.+2      	; 0x353c <__ultoa_invert+0x48>
    353a:	68 94       	set
    353c:	3f 91       	pop	r19
    353e:	2a e0       	ldi	r18, 0x0A	; 10
    3540:	26 9f       	mul	r18, r22
    3542:	11 24       	eor	r1, r1
    3544:	30 19       	sub	r19, r0
    3546:	30 5d       	subi	r19, 0xD0	; 208
    3548:	31 93       	st	Z+, r19
    354a:	de f6       	brtc	.-74     	; 0x3502 <__ultoa_invert+0xe>
    354c:	cf 01       	movw	r24, r30
    354e:	08 95       	ret
    3550:	46 2f       	mov	r20, r22
    3552:	47 70       	andi	r20, 0x07	; 7
    3554:	40 5d       	subi	r20, 0xD0	; 208
    3556:	41 93       	st	Z+, r20
    3558:	b3 e0       	ldi	r27, 0x03	; 3
    355a:	0f d0       	rcall	.+30     	; 0x357a <__ultoa_invert+0x86>
    355c:	c9 f7       	brne	.-14     	; 0x3550 <__ultoa_invert+0x5c>
    355e:	f6 cf       	rjmp	.-20     	; 0x354c <__ultoa_invert+0x58>
    3560:	46 2f       	mov	r20, r22
    3562:	4f 70       	andi	r20, 0x0F	; 15
    3564:	40 5d       	subi	r20, 0xD0	; 208
    3566:	4a 33       	cpi	r20, 0x3A	; 58
    3568:	18 f0       	brcs	.+6      	; 0x3570 <__ultoa_invert+0x7c>
    356a:	49 5d       	subi	r20, 0xD9	; 217
    356c:	31 fd       	sbrc	r19, 1
    356e:	40 52       	subi	r20, 0x20	; 32
    3570:	41 93       	st	Z+, r20
    3572:	02 d0       	rcall	.+4      	; 0x3578 <__ultoa_invert+0x84>
    3574:	a9 f7       	brne	.-22     	; 0x3560 <__ultoa_invert+0x6c>
    3576:	ea cf       	rjmp	.-44     	; 0x354c <__ultoa_invert+0x58>
    3578:	b4 e0       	ldi	r27, 0x04	; 4
    357a:	a6 95       	lsr	r26
    357c:	97 95       	ror	r25
    357e:	87 95       	ror	r24
    3580:	77 95       	ror	r23
    3582:	67 95       	ror	r22
    3584:	ba 95       	dec	r27
    3586:	c9 f7       	brne	.-14     	; 0x357a <__ultoa_invert+0x86>
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	61 05       	cpc	r22, r1
    358c:	71 05       	cpc	r23, r1
    358e:	08 95       	ret
    3590:	9b 01       	movw	r18, r22
    3592:	ac 01       	movw	r20, r24
    3594:	0a 2e       	mov	r0, r26
    3596:	06 94       	lsr	r0
    3598:	57 95       	ror	r21
    359a:	47 95       	ror	r20
    359c:	37 95       	ror	r19
    359e:	27 95       	ror	r18
    35a0:	ba 95       	dec	r27
    35a2:	c9 f7       	brne	.-14     	; 0x3596 <__ultoa_invert+0xa2>
    35a4:	62 0f       	add	r22, r18
    35a6:	73 1f       	adc	r23, r19
    35a8:	84 1f       	adc	r24, r20
    35aa:	95 1f       	adc	r25, r21
    35ac:	a0 1d       	adc	r26, r0
    35ae:	08 95       	ret

000035b0 <eeprom_read_byte>:
eeprom_read_byte():
    35b0:	f9 99       	sbic	0x1f, 1	; 31
    35b2:	fe cf       	rjmp	.-4      	; 0x35b0 <eeprom_read_byte>
    35b4:	92 bd       	out	0x22, r25	; 34
    35b6:	81 bd       	out	0x21, r24	; 33
    35b8:	f8 9a       	sbi	0x1f, 0	; 31
    35ba:	99 27       	eor	r25, r25
    35bc:	80 b5       	in	r24, 0x20	; 32
    35be:	08 95       	ret

000035c0 <eeprom_write_byte>:
eeprom_write_byte():
    35c0:	26 2f       	mov	r18, r22

000035c2 <eeprom_write_r18>:
    35c2:	f9 99       	sbic	0x1f, 1	; 31
    35c4:	fe cf       	rjmp	.-4      	; 0x35c2 <eeprom_write_r18>
    35c6:	1f ba       	out	0x1f, r1	; 31
    35c8:	92 bd       	out	0x22, r25	; 34
    35ca:	81 bd       	out	0x21, r24	; 33
    35cc:	20 bd       	out	0x20, r18	; 32
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	fa 9a       	sbi	0x1f, 2	; 31
    35d4:	f9 9a       	sbi	0x1f, 1	; 31
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	08 95       	ret

000035dc <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    35dc:	f8 94       	cli

000035de <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    35de:	ff cf       	rjmp	.-2      	; 0x35de <__stop_program>
