
C:\Users\mbt\AppData\Local\Temp\arduino\sketches\0968FC918386EC129B3DA3B7816825BD/Modbus_Master_kode.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__ctors_end>
       4:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
       8:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
       c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      10:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      14:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      18:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      1c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      20:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      24:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      28:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      2c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      30:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      34:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      38:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      3c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      40:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      44:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      48:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      4c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      50:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      54:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      58:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      5c:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__vector_23>
      60:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      64:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      68:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      6c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      70:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      74:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      78:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      7c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      80:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      84:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      88:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      8c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      90:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__vector_36>
      94:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__vector_37>
      98:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      9c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      a0:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      a4:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      a8:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      ac:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      b0:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      b4:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      b8:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      bc:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      c0:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      c4:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      c8:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      cc:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__vector_51>
      d0:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__vector_52>
      d4:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      d8:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      dc:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
      e0:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <turnOffPWM+0x94>
      e8:	0c 94 b5 11 	jmp	0x236a	; 0x236a <HardwareSerial::flush()>
      ec:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <turnOffPWM+0x9c>
      f0:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <Serial2_available()>
      f4:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <Print::write(unsigned char const*, unsigned int)>
      f8:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <turnOffPWM+0xb8>
      fc:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <turnOffPWM+0x3c>
     100:	0c 94 2d 11 	jmp	0x225a	; 0x225a <HardwareSerial::peek()>
     104:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <Serial1_available()>
     108:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <turnOffPWM+0x78>
     10c:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <turnOffPWM+0x64>
     110:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <turnOffPWM+0x80>
     114:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <turnOffPWM+0xb0>
     118:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <HardwareSerial::write(unsigned char)>
     11c:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <turnOffPWM+0xc6>
     120:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <serialEventRun()>
     124:	0c 94 4f 11 	jmp	0x229e	; 0x229e <HardwareSerial::availableForWrite()>
     128:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <turnOffPWM+0x50>
     12c:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <turnOffPWM+0x88>
     130:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <turnOffPWM+0xc0>
     134:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <turnOffPWM+0xa4>
     138:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <turnOffPWM+0x6c>
     13c:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <_GLOBAL__sub_I___vector_36>
     140:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <turnOffPWM+0x58>
     144:	0c 94 21 11 	jmp	0x2242	; 0x2242 <HardwareSerial::available()>
     148:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <turnOffPWM+0x48>
     14c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <HardwareSerial::read()>
     150:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <turnOffPWM+0xc8>
     154:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <_GLOBAL__sub_I___vector_51>
     158:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <_GLOBAL__sub_I_simBuffer>

0000015c <__trampolines_end>:
__trampolines_end():
     15c:	41 54       	subi	r20, 0x41	; 65
     15e:	2b 43       	sbci	r18, 0x3B	; 59
     160:	41 4f       	sbci	r20, 0xF1	; 241
     162:	50 45       	sbci	r21, 0x50	; 80
     164:	4e 3d       	cpi	r20, 0xDE	; 222
     166:	30 2c       	mov	r3, r0
     168:	30 2c       	mov	r3, r0
     16a:	22 55       	subi	r18, 0x52	; 82
     16c:	44 50       	subi	r20, 0x04	; 4
     16e:	22 2c       	mov	r2, r2
     170:	22 31       	cpi	r18, 0x12	; 18
     172:	36 34       	cpi	r19, 0x46	; 70
     174:	2e 39       	cpi	r18, 0x9E	; 158
     176:	32 2e       	mov	r3, r18
     178:	31 36       	cpi	r19, 0x61	; 97
     17a:	34 2e       	mov	r3, r20
     17c:	31 36       	cpi	r19, 0x61	; 97
     17e:	38 22       	and	r3, r24
     180:	2c 38       	cpi	r18, 0x8C	; 140
     182:	30 38       	cpi	r19, 0x80	; 128
     184:	30 00       	.word	0x0030	; ????

00000186 <_ZZ8simSetupvE3__c__10_>:
     186:	41 54 2b 43 4e 41 43 54 3f 00                       AT+CNACT?.

00000190 <simSetup()::__c>:
     190:	41 54 2b 43 4e 41 43 54 3d 30 2c 31 00              AT+CNACT=0,1.

0000019d <simSetup()::__c>:
     19d:	41 54 2b 43 53 51 00                                AT+CSQ.

000001a4 <simSetup()::__c>:
     1a4:	41 54 2b 43 47 4e 41 50 4e 00                       AT+CGNAPN.

000001ae <simSetup()::__c>:
     1ae:	41 54 2b 43 4f 50 53 3f 00                          AT+COPS?.

000001b7 <simSetup()::__c>:
     1b7:	41 54 2b 43 46 55 4e 3d 31 00                       AT+CFUN=1.

000001c1 <simSetup()::__c>:
     1c1:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     1d1:	22 2c 22 69 6f 74 2e 31 6e 63 65 2e 6e 65 74 22     ","iot.1nce.net"
	...

000001e2 <simSetup()::__c>:
     1e2:	41 54 2b 43 46 55 4e 3d 30 00                       AT+CFUN=0.

000001ec <simSetup()::__c>:
     1ec:	41 54 2b 43 4e 43 46 47 3d 30 2c 31 2c 22 69 6f     AT+CNCFG=0,1,"io
     1fc:	74 2e 31 6e 63 65 2e 6e 65 74 22 00                 t.1nce.net".

00000208 <simSetup()::__c>:
     208:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

00000212 <simSetup()::__c>:
     212:	41 54 2b 47 53 4e 00                                AT+GSN.

00000219 <simSetup()::__c>:
     219:	41 54 00                                            AT.

0000021c <loop::__c>:
     21c:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

0000022d <loop::__c>:
     22d:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 39 00        AT+CASEND=0,19.

0000023c <loop::__c>:
     23c:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

0000024d <setup::__c>:
     24d:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

0000025e <setup::__c>:
     25e:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 32 00        AT+CASEND=0,12.

0000026d <setup::__c>:
     26d:	41 54 2b 43 41 52 45 43 56 3d 30 2c 31 34 36 30     AT+CARECV=0,1460
	...

0000027e <setup::__c>:
     27e:	41 54 2b 43 41 53 45 4e 44 3d 30 2c 31 36 00        AT+CASEND=0,16.

0000028d <digital_pin_to_timer_PGM>:
     28d:	00 00 00 0a 0b 0c 00 00 00 00 00 0d 0e 0f 09 00     ................
     29d:	00 00 00 08 04 05 06 00 00 00 00 00 00 11 12 13     ................
	...
     2e1:	00 03                                               ..

000002e3 <digital_pin_to_bit_mask_PGM>:
     2e3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 01     ..... @...... @.
     2f3:	02 04 08 10 20 40 80 80 08 10 01 02 04 08 10 20     .... @......... 
     303:	40 80 01 02 04 08 10 20 40 80 01 02 01 02 04 08     @...... @.......
     313:	10 20 40 80 01 02 04 08 10 20 40 04 80 40 20 10     . @...... @..@ .
     323:	08 04 02 01 80 01 02 04 08 10 20 40 80 01 02 04     .......... @....
     333:	08 10 20 40 80 20                                   .. @. 

00000339 <digital_pin_to_port_PGM>:
     339:	05 05 05 05 05 05 05 05 08 08 08 08 08 08 08 02     ................
     349:	02 02 02 02 02 02 02 08 07 07 0c 0c 0c 0c 0c 0c     ................
     359:	0c 0c 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     369:	03 03 03 03 0a 0a 0a 0a 0a 0a 0a 07 01 01 01 01     ................
     379:	01 01 01 01 0a 06 06 06 06 06 06 06 06 0b 0b 0b     ................
     389:	0b 0b 0b 0b 0b 07                                   ......

0000038f <port_to_output_PGM>:
     38f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     39f:	02 01 00 00 05 01 08 01 0b 01                       ..........

000003a9 <port_to_mode_PGM>:
     3a9:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     3b9:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

000003c4 <__ctors_start>:
__ctors_start():
     3c4:	a2 07       	cpc	r26, r18
     3c6:	de 12       	cpse	r13, r30
     3c8:	75 13       	cpse	r23, r21

000003ca <__ctors_end>:
__dtors_end():
     3ca:	11 24       	eor	r1, r1
     3cc:	1f be       	out	0x3f, r1	; 63
     3ce:	cf ef       	ldi	r28, 0xFF	; 255
     3d0:	d1 e2       	ldi	r29, 0x21	; 33
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	00 e0       	ldi	r16, 0x00	; 0
     3d8:	0c bf       	out	0x3c, r16	; 60

000003da <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     3da:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     3dc:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     3de:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     3e0:	e8 e9       	ldi	r30, 0x98	; 152
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     3e2:	f6 e3       	ldi	r31, 0x36	; 54
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     3e4:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     3e6:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     3ea:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     3ec:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     3ee:	a2 38       	cpi	r26, 0x82	; 130
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     3f0:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     3f2:	d9 f7       	brne	.-10     	; 0x3ea <__do_copy_data+0x10>

000003f4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     3f4:	2a e1       	ldi	r18, 0x1A	; 26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     3f6:	a2 e8       	ldi	r26, 0x82	; 130
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <.do_clear_bss_start>

000003fc <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     3fc:	1d 92       	st	X+, r1

000003fe <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     3fe:	af 34       	cpi	r26, 0x4F	; 79
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     400:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     402:	e1 f7       	brne	.-8      	; 0x3fc <.do_clear_bss_loop>

00000404 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     404:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     406:	c5 ee       	ldi	r28, 0xE5	; 229
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     408:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     40a:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     40c:	06 c0       	rjmp	.+12     	; 0x41a <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     40e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     410:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     412:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     414:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     416:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     41a:	c2 3e       	cpi	r28, 0xE2	; 226
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     41c:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     41e:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     420:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     422:	a9 f7       	brne	.-22     	; 0x40e <__do_global_ctors+0xa>
     424:	0e 94 19 14 	call	0x2832	; 0x2832 <main>
     428:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <_exit>

0000042c <__bad_interrupt>:
__vector_38():
     42c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000430 <CRC16_modbus(char*, int)>:
_ZL12CRC16_modbusPci():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:910
  simSerial.write(msg, strlen(msg));  // Check if network is active to adress
  responseCheck("OK", 10000);

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
  responseCheck("00", 10000);
}
     430:	ac 01       	movw	r20, r24
     432:	fc 01       	movw	r30, r24
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	9f ef       	ldi	r25, 0xFF	; 255
     438:	9f 01       	movw	r18, r30
     43a:	24 1b       	sub	r18, r20
     43c:	35 0b       	sbc	r19, r21
     43e:	26 17       	cp	r18, r22
     440:	37 07       	cpc	r19, r23
     442:	bc f4       	brge	.+46     	; 0x472 <CRC16_modbus(char*, int)+0x42>
     444:	21 91       	ld	r18, Z+
     446:	02 2e       	mov	r0, r18
     448:	00 0c       	add	r0, r0
     44a:	33 0b       	sbc	r19, r19
     44c:	82 27       	eor	r24, r18
     44e:	93 27       	eor	r25, r19
     450:	28 e0       	ldi	r18, 0x08	; 8
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	dc 01       	movw	r26, r24
     456:	a1 70       	andi	r26, 0x01	; 1
     458:	bb 27       	eor	r27, r27
     45a:	96 95       	lsr	r25
     45c:	87 95       	ror	r24
     45e:	ab 2b       	or	r26, r27
     460:	21 f0       	breq	.+8      	; 0x46a <CRC16_modbus(char*, int)+0x3a>
     462:	a1 e0       	ldi	r26, 0x01	; 1
     464:	8a 27       	eor	r24, r26
     466:	a0 ea       	ldi	r26, 0xA0	; 160
     468:	9a 27       	eor	r25, r26
     46a:	21 50       	subi	r18, 0x01	; 1
     46c:	31 09       	sbc	r19, r1
     46e:	91 f7       	brne	.-28     	; 0x454 <CRC16_modbus(char*, int)+0x24>
     470:	e3 cf       	rjmp	.-58     	; 0x438 <CRC16_modbus(char*, int)+0x8>
     472:	08 95       	ret

00000474 <Print::write(char const*, unsigned int)>:
_ZN5Print5writeEPKcj():
     474:	dc 01       	movw	r26, r24
     476:	ed 91       	ld	r30, X+
     478:	fc 91       	ld	r31, X
     47a:	02 80       	ldd	r0, Z+2	; 0x02
     47c:	f3 81       	ldd	r31, Z+3	; 0x03
     47e:	e0 2d       	mov	r30, r0
     480:	19 94       	eijmp

00000482 <powerStatus()>:
_Z11powerStatusv():
     482:	cf 93       	push	r28
     484:	85 e4       	ldi	r24, 0x45	; 69
     486:	0e 94 c4 14 	call	0x2988	; 0x2988 <analogRead>
     48a:	90 93 b1 16 	sts	0x16B1, r25	; 0x8016b1 <ADCValue+0x1>
     48e:	80 93 b0 16 	sts	0x16B0, r24	; 0x8016b0 <ADCValue>
     492:	bc 01       	movw	r22, r24
     494:	99 0f       	add	r25, r25
     496:	88 0b       	sbc	r24, r24
     498:	99 0b       	sbc	r25, r25
     49a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__floatsisf>
     49e:	2a e0       	ldi	r18, 0x0A	; 10
     4a0:	38 e2       	ldi	r19, 0x28	; 40
     4a2:	40 ea       	ldi	r20, 0xA0	; 160
     4a4:	5b e3       	ldi	r21, 0x3B	; 59
     4a6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__mulsf3>
     4aa:	60 93 ac 16 	sts	0x16AC, r22	; 0x8016ac <voltage>
     4ae:	70 93 ad 16 	sts	0x16AD, r23	; 0x8016ad <voltage+0x1>
     4b2:	80 93 ae 16 	sts	0x16AE, r24	; 0x8016ae <voltage+0x2>
     4b6:	90 93 af 16 	sts	0x16AF, r25	; 0x8016af <voltage+0x3>
     4ba:	c1 e0       	ldi	r28, 0x01	; 1
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e4       	ldi	r21, 0x40	; 64
     4c4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__gesf2>
     4c8:	18 16       	cp	r1, r24
     4ca:	0c f0       	brlt	.+2      	; 0x4ce <powerStatus()+0x4c>
     4cc:	c0 e0       	ldi	r28, 0x00	; 0
     4ce:	8c 2f       	mov	r24, r28
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <millisDelay(int)>:
_Z11millisDelayi():
     4d4:	8f 92       	push	r8
     4d6:	9f 92       	push	r9
     4d8:	af 92       	push	r10
     4da:	bf 92       	push	r11
     4dc:	cf 92       	push	r12
     4de:	df 92       	push	r13
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	6c 01       	movw	r12, r24
     4e6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <millis>
     4ea:	4b 01       	movw	r8, r22
     4ec:	5c 01       	movw	r10, r24
     4ee:	0d 2c       	mov	r0, r13
     4f0:	00 0c       	add	r0, r0
     4f2:	ee 08       	sbc	r14, r14
     4f4:	ff 08       	sbc	r15, r15
     4f6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <millis>
     4fa:	68 19       	sub	r22, r8
     4fc:	79 09       	sbc	r23, r9
     4fe:	8a 09       	sbc	r24, r10
     500:	9b 09       	sbc	r25, r11
     502:	6c 15       	cp	r22, r12
     504:	7d 05       	cpc	r23, r13
     506:	8e 05       	cpc	r24, r14
     508:	9f 05       	cpc	r25, r15
     50a:	a8 f3       	brcs	.-22     	; 0x4f6 <millisDelay(int)+0x22>
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	df 90       	pop	r13
     512:	cf 90       	pop	r12
     514:	bf 90       	pop	r11
     516:	af 90       	pop	r10
     518:	9f 90       	pop	r9
     51a:	8f 90       	pop	r8
     51c:	08 95       	ret

0000051e <sendToServer()>:
_Z12sendToServerv():
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	a8 97       	sbiw	r28, 0x28	; 40
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	8d e0       	ldi	r24, 0x0D	; 13
     538:	e4 e1       	ldi	r30, 0x14	; 20
     53a:	f2 e0       	ldi	r31, 0x02	; 2
     53c:	de 01       	movw	r26, r28
     53e:	55 96       	adiw	r26, 0x15	; 21
     540:	01 90       	ld	r0, Z+
     542:	0d 92       	st	X+, r0
     544:	8a 95       	dec	r24
     546:	e1 f7       	brne	.-8      	; 0x540 <sendToServer()+0x22>
     548:	fe 01       	movw	r30, r28
     54a:	b2 96       	adiw	r30, 0x22	; 34
     54c:	87 e0       	ldi	r24, 0x07	; 7
     54e:	df 01       	movw	r26, r30
     550:	1d 92       	st	X+, r1
     552:	8a 95       	dec	r24
     554:	e9 f7       	brne	.-6      	; 0x550 <sendToServer()+0x32>
     556:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <msgPos>
     55a:	90 91 ab 16 	lds	r25, 0x16AB	; 0x8016ab <msgPos+0x1>
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	8a e3       	ldi	r24, 0x3A	; 58
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	9f 93       	push	r25
     56a:	8f 93       	push	r24
     56c:	8e 01       	movw	r16, r28
     56e:	0f 5f       	subi	r16, 0xFF	; 255
     570:	1f 4f       	sbci	r17, 0xFF	; 255
     572:	1f 93       	push	r17
     574:	0f 93       	push	r16
     576:	0e 94 5e 18 	call	0x30bc	; 0x30bc <sprintf>
     57a:	b8 01       	movw	r22, r16
     57c:	ce 01       	movw	r24, r28
     57e:	45 96       	adiw	r24, 0x15	; 21
     580:	0e 94 2e 18 	call	0x305c	; 0x305c <strcat>
     584:	44 e1       	ldi	r20, 0x14	; 20
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	be 01       	movw	r22, r28
     58a:	6b 5e       	subi	r22, 0xEB	; 235
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	88 e0       	ldi	r24, 0x08	; 8
     590:	99 e1       	ldi	r25, 0x19	; 25
     592:	0e 94 3a 02 	call	0x474	; 0x474 <Print::write(char const*, unsigned int)>
     596:	88 e0       	ldi	r24, 0x08	; 8
     598:	99 e1       	ldi	r25, 0x19	; 25
     59a:	0e 94 02 14 	call	0x2804	; 0x2804 <Print::println()>
     59e:	8c e2       	ldi	r24, 0x2C	; 44
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
     5a6:	40 91 aa 16 	lds	r20, 0x16AA	; 0x8016aa <msgPos>
     5aa:	50 91 ab 16 	lds	r21, 0x16AB	; 0x8016ab <msgPos+0x1>
     5ae:	4f 5f       	subi	r20, 0xFF	; 255
     5b0:	5f 4f       	sbci	r21, 0xFF	; 255
     5b2:	62 e1       	ldi	r22, 0x12	; 18
     5b4:	77 e1       	ldi	r23, 0x17	; 23
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	99 e1       	ldi	r25, 0x19	; 25
     5ba:	0e 94 3a 02 	call	0x474	; 0x474 <Print::write(char const*, unsigned int)>
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	a8 96       	adiw	r28, 0x28	; 40
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <simpow()>:
_Z6simpowv():
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	8b e2       	ldi	r24, 0x2B	; 43
     5e4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
     5e8:	8c ed       	ldi	r24, 0xDC	; 220
     5ea:	95 e0       	ldi	r25, 0x05	; 5
     5ec:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	8b e2       	ldi	r24, 0x2B	; 43
     5f4:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <digitalWrite>

000005f8 <clrsimBuffer()>:
_Z12clrsimBufferv():
     5f8:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
     5fc:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
     600:	11 82       	std	Z+1, r1	; 0x01
     602:	10 82       	st	Z, r1
     604:	08 95       	ret

00000606 <modbusWrite()>:
_Z11modbusWritev():
     606:	2f 92       	push	r2
     608:	3f 92       	push	r3
     60a:	4f 92       	push	r4
     60c:	5f 92       	push	r5
     60e:	6f 92       	push	r6
     610:	7f 92       	push	r7
     612:	8f 92       	push	r8
     614:	9f 92       	push	r9
     616:	af 92       	push	r10
     618:	bf 92       	push	r11
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	c3 51       	subi	r28, 0x13	; 19
     630:	df 40       	sbci	r29, 0x0F	; 15
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
     640:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	93 81       	ldd	r25, Z+3	; 0x03
     648:	58 2e       	mov	r5, r24
     64a:	49 2e       	mov	r4, r25
     64c:	c9 5f       	subi	r28, 0xF9	; 249
     64e:	d0 4f       	sbci	r29, 0xF0	; 240
     650:	59 82       	std	Y+1, r5	; 0x01
     652:	48 82       	st	Y, r4
     654:	c7 50       	subi	r28, 0x07	; 7
     656:	df 40       	sbci	r29, 0x0F	; 15
     658:	68 e0       	ldi	r22, 0x08	; 8
     65a:	66 2e       	mov	r6, r22
     65c:	71 2c       	mov	r7, r1
     65e:	b1 2c       	mov	r11, r1
     660:	a1 2c       	mov	r10, r1
     662:	91 2c       	mov	r9, r1
     664:	81 2c       	mov	r8, r1
     666:	8e 01       	movw	r16, r28
     668:	0b 53       	subi	r16, 0x3B	; 59
     66a:	11 4f       	sbci	r17, 0xF1	; 241
     66c:	cd 5f       	subi	r28, 0xFD	; 253
     66e:	d0 4f       	sbci	r29, 0xF0	; 240
     670:	19 83       	std	Y+1, r17	; 0x01
     672:	08 83       	st	Y, r16
     674:	c3 50       	subi	r28, 0x03	; 3
     676:	df 40       	sbci	r29, 0x0F	; 15
     678:	7e e7       	ldi	r23, 0x7E	; 126
     67a:	47 2e       	mov	r4, r23
_ZN11write_Slave5resetEv():
     67c:	e0 e2       	ldi	r30, 0x20	; 32
     67e:	3e 2e       	mov	r3, r30
_Z11modbusWritev():
     680:	ff e3       	ldi	r31, 0x3F	; 63
     682:	2f 2e       	mov	r2, r31
     684:	c9 5f       	subi	r28, 0xF9	; 249
     686:	d0 4f       	sbci	r29, 0xF0	; 240
     688:	c8 80       	ld	r12, Y
     68a:	d9 80       	ldd	r13, Y+1	; 0x01
     68c:	c7 50       	subi	r28, 0x07	; 7
     68e:	df 40       	sbci	r29, 0x0F	; 15
     690:	ac 14       	cp	r10, r12
     692:	bd 04       	cpc	r11, r13
     694:	09 f4       	brne	.+2      	; 0x698 <modbusWrite()+0x92>
     696:	f3 c0       	rjmp	.+486    	; 0x87e <modbusWrite()+0x278>
     698:	00 91 06 19 	lds	r16, 0x1906	; 0x801906 <simBuffer>
     69c:	10 91 07 19 	lds	r17, 0x1907	; 0x801907 <simBuffer+0x1>
     6a0:	06 0d       	add	r16, r6
     6a2:	17 1d       	adc	r17, r7
     6a4:	f8 01       	movw	r30, r16
     6a6:	34 97       	sbiw	r30, 0x04	; 4
     6a8:	50 80       	ld	r5, Z
     6aa:	31 96       	adiw	r30, 0x01	; 1
     6ac:	e0 80       	ld	r14, Z
     6ae:	31 96       	adiw	r30, 0x01	; 1
     6b0:	80 81       	ld	r24, Z
     6b2:	fe 2c       	mov	r15, r14
     6b4:	e8 2e       	mov	r14, r24
     6b6:	d8 01       	movw	r26, r16
     6b8:	11 96       	adiw	r26, 0x01	; 1
     6ba:	bc 91       	ld	r27, X
     6bc:	cb 5f       	subi	r28, 0xFB	; 251
     6be:	d0 4f       	sbci	r29, 0xF0	; 240
     6c0:	b8 83       	st	Y, r27
     6c2:	c5 50       	subi	r28, 0x05	; 5
     6c4:	df 40       	sbci	r29, 0x0F	; 15
     6c6:	c5 2c       	mov	r12, r5
     6c8:	05 2c       	mov	r0, r5
     6ca:	00 0c       	add	r0, r0
     6cc:	dd 08       	sbc	r13, r13
     6ce:	b6 01       	movw	r22, r12
     6d0:	ce 01       	movw	r24, r28
     6d2:	8b 53       	subi	r24, 0x3B	; 59
     6d4:	91 4f       	sbci	r25, 0xF1	; 241
     6d6:	0e 94 39 18 	call	0x3072	; 0x3072 <strchr>
     6da:	89 2b       	or	r24, r25
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <modbusWrite()+0xda>
     6de:	54 c0       	rjmp	.+168    	; 0x788 <modbusWrite()+0x182>
     6e0:	e5 ec       	ldi	r30, 0xC5	; 197
     6e2:	fe e0       	ldi	r31, 0x0E	; 14
     6e4:	ec 0f       	add	r30, r28
     6e6:	fd 1f       	adc	r31, r29
     6e8:	e8 0d       	add	r30, r8
     6ea:	f9 1d       	adc	r31, r9
     6ec:	50 82       	st	Z, r5
     6ee:	e5 2d       	mov	r30, r5
     6f0:	f4 2d       	mov	r31, r4
     6f2:	ef 02       	muls	r30, r31
     6f4:	c0 01       	movw	r24, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	e1 e0       	ldi	r30, 0x01	; 1
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	ec 0f       	add	r30, r28
     6fe:	fd 1f       	adc	r31, r29
     700:	e8 0f       	add	r30, r24
     702:	f9 1f       	adc	r31, r25
_ZN11write_Slave5resetEv():
     704:	df 01       	movw	r26, r30
     706:	53 2c       	mov	r5, r3
     708:	1d 92       	st	X+, r1
     70a:	5a 94       	dec	r5
     70c:	e9 f7       	brne	.-6      	; 0x708 <modbusWrite()+0x102>
     70e:	fc 01       	movw	r30, r24
     710:	b0 96       	adiw	r30, 0x20	; 32
     712:	21 e0       	ldi	r18, 0x01	; 1
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	2c 0f       	add	r18, r28
     718:	3d 1f       	adc	r19, r29
     71a:	e2 0f       	add	r30, r18
     71c:	f3 1f       	adc	r31, r19
     71e:	df 01       	movw	r26, r30
     720:	53 2c       	mov	r5, r3
     722:	1d 92       	st	X+, r1
     724:	5a 94       	dec	r5
     726:	e9 f7       	brne	.-6      	; 0x722 <modbusWrite()+0x11c>
     728:	fc 01       	movw	r30, r24
     72a:	e0 5c       	subi	r30, 0xC0	; 192
     72c:	ff 4f       	sbci	r31, 0xFF	; 255
     72e:	e2 0f       	add	r30, r18
     730:	f3 1f       	adc	r31, r19
     732:	df 01       	movw	r26, r30
     734:	53 2c       	mov	r5, r3
     736:	1d 92       	st	X+, r1
     738:	5a 94       	dec	r5
     73a:	e9 f7       	brne	.-6      	; 0x736 <modbusWrite()+0x130>
     73c:	80 5a       	subi	r24, 0xA0	; 160
     73e:	9f 4f       	sbci	r25, 0xFF	; 255
     740:	f9 01       	movw	r30, r18
     742:	e8 0f       	add	r30, r24
     744:	f9 1f       	adc	r31, r25
     746:	df 01       	movw	r26, r30
     748:	50 e1       	ldi	r21, 0x10	; 16
     74a:	55 2e       	mov	r5, r21
     74c:	1d 92       	st	X+, r1
     74e:	5a 94       	dec	r5
     750:	e9 f7       	brne	.-6      	; 0x74c <modbusWrite()+0x146>
     752:	4c 9c       	mul	r4, r12
     754:	c0 01       	movw	r24, r0
     756:	4d 9c       	mul	r4, r13
     758:	90 0d       	add	r25, r0
     75a:	11 24       	eor	r1, r1
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	2c 0f       	add	r18, r28
     762:	3d 1f       	adc	r19, r29
     764:	82 0f       	add	r24, r18
     766:	93 1f       	adc	r25, r19
     768:	fc 01       	movw	r30, r24
     76a:	e8 58       	subi	r30, 0x88	; 136
     76c:	ff 4f       	sbci	r31, 0xFF	; 255
     76e:	11 82       	std	Z+1, r1	; 0x01
     770:	10 82       	st	Z, r1
     772:	32 96       	adiw	r30, 0x02	; 2
     774:	11 82       	std	Z+1, r1	; 0x01
     776:	10 82       	st	Z, r1
     778:	84 58       	subi	r24, 0x84	; 132
     77a:	9f 4f       	sbci	r25, 0xFF	; 255
     77c:	dc 01       	movw	r26, r24
     77e:	1d 92       	st	X+, r1
     780:	1c 92       	st	X, r1
_Z11modbusWritev():
     782:	f4 01       	movw	r30, r8
     784:	31 96       	adiw	r30, 0x01	; 1
     786:	4f 01       	movw	r8, r30
     788:	cb 5f       	subi	r28, 0xFB	; 251
     78a:	d0 4f       	sbci	r29, 0xF0	; 240
     78c:	f8 81       	ld	r31, Y
     78e:	c5 50       	subi	r28, 0x05	; 5
     790:	df 40       	sbci	r29, 0x0F	; 15
     792:	f1 30       	cpi	r31, 0x01	; 1
     794:	b1 f5       	brne	.+108    	; 0x802 <modbusWrite()+0x1fc>
     796:	4c 9c       	mul	r4, r12
     798:	c0 01       	movw	r24, r0
     79a:	4d 9c       	mul	r4, r13
     79c:	90 0d       	add	r25, r0
     79e:	11 24       	eor	r1, r1
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	2c 0f       	add	r18, r28
     7a6:	3d 1f       	adc	r19, r29
     7a8:	82 0f       	add	r24, r18
     7aa:	93 1f       	adc	r25, r19
     7ac:	fc 01       	movw	r30, r24
     7ae:	e6 58       	subi	r30, 0x86	; 134
     7b0:	ff 4f       	sbci	r31, 0xFF	; 255
     7b2:	20 81       	ld	r18, Z
     7b4:	31 81       	ldd	r19, Z+1	; 0x01
     7b6:	a9 01       	movw	r20, r18
     7b8:	4f 5f       	subi	r20, 0xFF	; 255
     7ba:	5f 4f       	sbci	r21, 0xFF	; 255
     7bc:	51 83       	std	Z+1, r21	; 0x01
     7be:	40 83       	st	Z, r20
     7c0:	2c 9c       	mul	r2, r12
     7c2:	f0 01       	movw	r30, r0
     7c4:	2d 9c       	mul	r2, r13
     7c6:	f0 0d       	add	r31, r0
     7c8:	11 24       	eor	r1, r1
     7ca:	e2 0f       	add	r30, r18
     7cc:	f3 1f       	adc	r31, r19
     7ce:	70 96       	adiw	r30, 0x10	; 16
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	a1 e0       	ldi	r26, 0x01	; 1
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	ac 0f       	add	r26, r28
     7da:	bd 1f       	adc	r27, r29
     7dc:	ea 0f       	add	r30, r26
     7de:	fb 1f       	adc	r31, r27
     7e0:	f1 82       	std	Z+1, r15	; 0x01
     7e2:	e0 82       	st	Z, r14
     7e4:	f8 01       	movw	r30, r16
     7e6:	20 81       	ld	r18, Z
     7e8:	e8 0e       	add	r14, r24
     7ea:	f9 1e       	adc	r15, r25
     7ec:	f7 01       	movw	r30, r14
     7ee:	e0 5a       	subi	r30, 0xA0	; 160
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	20 83       	st	Z, r18
     7f4:	bf ef       	ldi	r27, 0xFF	; 255
     7f6:	ab 1a       	sub	r10, r27
     7f8:	bb 0a       	sbc	r11, r27
     7fa:	e6 e0       	ldi	r30, 0x06	; 6
     7fc:	6e 0e       	add	r6, r30
     7fe:	71 1c       	adc	r7, r1
     800:	41 cf       	rjmp	.-382    	; 0x684 <modbusWrite()+0x7e>
     802:	4c 9c       	mul	r4, r12
     804:	f0 01       	movw	r30, r0
     806:	4d 9c       	mul	r4, r13
     808:	f0 0d       	add	r31, r0
     80a:	11 24       	eor	r1, r1
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	2c 0f       	add	r18, r28
     812:	3d 1f       	adc	r19, r29
     814:	e2 0f       	add	r30, r18
     816:	f3 1f       	adc	r31, r19
     818:	e4 58       	subi	r30, 0x84	; 132
     81a:	ff 4f       	sbci	r31, 0xFF	; 255
     81c:	a0 81       	ld	r26, Z
     81e:	b1 81       	ldd	r27, Z+1	; 0x01
     820:	9d 01       	movw	r18, r26
     822:	2f 5f       	subi	r18, 0xFF	; 255
     824:	3f 4f       	sbci	r19, 0xFF	; 255
     826:	31 83       	std	Z+1, r19	; 0x01
     828:	20 83       	st	Z, r18
     82a:	2c 9c       	mul	r2, r12
     82c:	f0 01       	movw	r30, r0
     82e:	2d 9c       	mul	r2, r13
     830:	f0 0d       	add	r31, r0
     832:	11 24       	eor	r1, r1
     834:	ae 0f       	add	r26, r30
     836:	bf 1f       	adc	r27, r31
     838:	aa 0f       	add	r26, r26
     83a:	bb 1f       	adc	r27, r27
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	8c 0f       	add	r24, r28
     842:	9d 1f       	adc	r25, r29
     844:	a8 0f       	add	r26, r24
     846:	b9 1f       	adc	r27, r25
     848:	ed 92       	st	X+, r14
     84a:	fc 92       	st	X, r15
     84c:	d8 01       	movw	r26, r16
     84e:	11 97       	sbiw	r26, 0x01	; 1
     850:	8c 91       	ld	r24, X
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	98 2f       	mov	r25, r24
     856:	88 27       	eor	r24, r24
     858:	ee 0d       	add	r30, r14
     85a:	ff 1d       	adc	r31, r15
     85c:	b0 96       	adiw	r30, 0x20	; 32
     85e:	ee 0f       	add	r30, r30
     860:	ff 1f       	adc	r31, r31
     862:	a1 e0       	ldi	r26, 0x01	; 1
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	ac 0f       	add	r26, r28
     868:	bd 1f       	adc	r27, r29
     86a:	ea 0f       	add	r30, r26
     86c:	fb 1f       	adc	r31, r27
     86e:	91 83       	std	Z+1, r25	; 0x01
     870:	80 83       	st	Z, r24
     872:	d8 01       	movw	r26, r16
     874:	2c 91       	ld	r18, X
     876:	82 2b       	or	r24, r18
     878:	91 83       	std	Z+1, r25	; 0x01
     87a:	80 83       	st	Z, r24
     87c:	bb cf       	rjmp	.-138    	; 0x7f4 <modbusWrite()+0x1ee>
     87e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
     882:	8e 01       	movw	r16, r28
     884:	0b 53       	subi	r16, 0x3B	; 59
     886:	11 4f       	sbci	r17, 0xF1	; 241
     888:	18 01       	movw	r2, r16
     88a:	cf 5f       	subi	r28, 0xFF	; 255
     88c:	d0 4f       	sbci	r29, 0xF0	; 240
     88e:	19 83       	std	Y+1, r17	; 0x01
     890:	08 83       	st	Y, r16
     892:	c1 50       	subi	r28, 0x01	; 1
     894:	df 40       	sbci	r29, 0x0F	; 15
     896:	8e e7       	ldi	r24, 0x7E	; 126
     898:	f8 2e       	mov	r15, r24
     89a:	03 ee       	ldi	r16, 0xE3	; 227
     89c:	1e e0       	ldi	r17, 0x0E	; 14
     89e:	0c 0f       	add	r16, r28
     8a0:	1d 1f       	adc	r17, r29
     8a2:	0a 5f       	subi	r16, 0xFA	; 250
     8a4:	1f 4f       	sbci	r17, 0xFF	; 255
     8a6:	c6 5f       	subi	r28, 0xF6	; 246
     8a8:	d0 4f       	sbci	r29, 0xF0	; 240
     8aa:	19 83       	std	Y+1, r17	; 0x01
     8ac:	08 83       	st	Y, r16
     8ae:	ca 50       	subi	r28, 0x0A	; 10
     8b0:	df 40       	sbci	r29, 0x0F	; 15
     8b2:	cf 5f       	subi	r28, 0xFF	; 255
     8b4:	d0 4f       	sbci	r29, 0xF0	; 240
     8b6:	e8 81       	ld	r30, Y
     8b8:	f9 81       	ldd	r31, Y+1	; 0x01
     8ba:	c1 50       	subi	r28, 0x01	; 1
     8bc:	df 40       	sbci	r29, 0x0F	; 15
     8be:	01 90       	ld	r0, Z+
     8c0:	00 20       	and	r0, r0
     8c2:	e9 f7       	brne	.-6      	; 0x8be <modbusWrite()+0x2b8>
     8c4:	31 97       	sbiw	r30, 0x01	; 1
     8c6:	cf 5f       	subi	r28, 0xFF	; 255
     8c8:	d0 4f       	sbci	r29, 0xF0	; 240
     8ca:	48 80       	ld	r4, Y
     8cc:	59 80       	ldd	r5, Y+1	; 0x01
     8ce:	c1 50       	subi	r28, 0x01	; 1
     8d0:	df 40       	sbci	r29, 0x0F	; 15
     8d2:	e4 19       	sub	r30, r4
     8d4:	f5 09       	sbc	r31, r5
     8d6:	c1 01       	movw	r24, r2
     8d8:	cd 5f       	subi	r28, 0xFD	; 253
     8da:	d0 4f       	sbci	r29, 0xF0	; 240
     8dc:	a8 80       	ld	r10, Y
     8de:	b9 80       	ldd	r11, Y+1	; 0x01
     8e0:	c3 50       	subi	r28, 0x03	; 3
     8e2:	df 40       	sbci	r29, 0x0F	; 15
     8e4:	8a 19       	sub	r24, r10
     8e6:	9b 09       	sbc	r25, r11
     8e8:	8e 17       	cp	r24, r30
     8ea:	9f 07       	cpc	r25, r31
     8ec:	08 f0       	brcs	.+2      	; 0x8f0 <modbusWrite()+0x2ea>
     8ee:	f1 c2       	rjmp	.+1506   	; 0xed2 <modbusWrite()+0x8cc>
     8f0:	d1 01       	movw	r26, r2
     8f2:	ec 90       	ld	r14, X
     8f4:	4e 2d       	mov	r20, r14
     8f6:	0e 2c       	mov	r0, r14
     8f8:	00 0c       	add	r0, r0
     8fa:	55 0b       	sbc	r21, r21
     8fc:	f4 9e       	mul	r15, r20
     8fe:	f0 01       	movw	r30, r0
     900:	f5 9e       	mul	r15, r21
     902:	f0 0d       	add	r31, r0
     904:	11 24       	eor	r1, r1
     906:	44 24       	eor	r4, r4
     908:	43 94       	inc	r4
     90a:	51 2c       	mov	r5, r1
     90c:	4c 0e       	add	r4, r28
     90e:	5d 1e       	adc	r5, r29
     910:	e4 0d       	add	r30, r4
     912:	f5 1d       	adc	r31, r5
     914:	df 01       	movw	r26, r30
     916:	a6 58       	subi	r26, 0x86	; 134
     918:	bf 4f       	sbci	r27, 0xFF	; 255
     91a:	6d 91       	ld	r22, X+
     91c:	7c 91       	ld	r23, X
     91e:	11 97       	sbiw	r26, 0x01	; 1
     920:	0e 2d       	mov	r16, r14
     922:	1e e7       	ldi	r17, 0x7E	; 126
     924:	01 02       	muls	r16, r17
     926:	20 01       	movw	r4, r0
     928:	11 24       	eor	r1, r1
     92a:	16 16       	cp	r1, r22
     92c:	17 06       	cpc	r1, r23
     92e:	8c f5       	brge	.+98     	; 0x992 <modbusWrite()+0x38c>
     930:	80 a1       	ldd	r24, Z+32	; 0x20
     932:	91 a1       	ldd	r25, Z+33	; 0x21
     934:	16 97       	sbiw	r26, 0x06	; 6
     936:	11 96       	adiw	r26, 0x01	; 1
     938:	9c 93       	st	X, r25
     93a:	8e 93       	st	-X, r24
     93c:	ea 58       	subi	r30, 0x8A	; 138
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	91 83       	std	Z+1, r25	; 0x01
     942:	80 83       	st	Z, r24
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	6f 01       	movw	r12, r30
     94a:	68 17       	cp	r22, r24
     94c:	79 07       	cpc	r23, r25
     94e:	09 f1       	breq	.+66     	; 0x992 <modbusWrite()+0x38c>
     950:	9c 01       	movw	r18, r24
     952:	22 0f       	add	r18, r18
     954:	33 1f       	adc	r19, r19
     956:	24 0d       	add	r18, r4
     958:	35 1d       	adc	r19, r5
     95a:	e1 e0       	ldi	r30, 0x01	; 1
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	ec 0f       	add	r30, r28
     960:	fd 1f       	adc	r31, r29
     962:	2e 0f       	add	r18, r30
     964:	3f 1f       	adc	r19, r31
     966:	f9 01       	movw	r30, r18
     968:	20 a1       	ldd	r18, Z+32	; 0x20
     96a:	31 a1       	ldd	r19, Z+33	; 0x21
     96c:	0d 91       	ld	r16, X+
     96e:	1c 91       	ld	r17, X
     970:	11 97       	sbiw	r26, 0x01	; 1
     972:	20 17       	cp	r18, r16
     974:	31 07       	cpc	r19, r17
     976:	18 f4       	brcc	.+6      	; 0x97e <modbusWrite()+0x378>
     978:	11 96       	adiw	r26, 0x01	; 1
     97a:	3c 93       	st	X, r19
     97c:	2e 93       	st	-X, r18
     97e:	f6 01       	movw	r30, r12
     980:	00 81       	ld	r16, Z
     982:	11 81       	ldd	r17, Z+1	; 0x01
     984:	02 17       	cp	r16, r18
     986:	13 07       	cpc	r17, r19
     988:	10 f4       	brcc	.+4      	; 0x98e <modbusWrite()+0x388>
     98a:	31 83       	std	Z+1, r19	; 0x01
     98c:	20 83       	st	Z, r18
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	dc cf       	rjmp	.-72     	; 0x94a <modbusWrite()+0x344>
     992:	f4 9e       	mul	r15, r20
     994:	f0 01       	movw	r30, r0
     996:	f5 9e       	mul	r15, r21
     998:	f0 0d       	add	r31, r0
     99a:	11 24       	eor	r1, r1
     99c:	aa 24       	eor	r10, r10
     99e:	a3 94       	inc	r10
     9a0:	b1 2c       	mov	r11, r1
     9a2:	ac 0e       	add	r10, r28
     9a4:	bd 1e       	adc	r11, r29
     9a6:	ea 0d       	add	r30, r10
     9a8:	fb 1d       	adc	r31, r11
     9aa:	df 01       	movw	r26, r30
     9ac:	a4 58       	subi	r26, 0x84	; 132
     9ae:	bf 4f       	sbci	r27, 0xFF	; 255
     9b0:	0d 91       	ld	r16, X+
     9b2:	1c 91       	ld	r17, X
     9b4:	11 97       	sbiw	r26, 0x01	; 1
     9b6:	10 16       	cp	r1, r16
     9b8:	11 06       	cpc	r1, r17
     9ba:	94 f5       	brge	.+100    	; 0xa20 <modbusWrite()+0x41a>
     9bc:	80 81       	ld	r24, Z
     9be:	91 81       	ldd	r25, Z+1	; 0x01
     9c0:	1c 97       	sbiw	r26, 0x0c	; 12
     9c2:	11 96       	adiw	r26, 0x01	; 1
     9c4:	9c 93       	st	X, r25
     9c6:	8e 93       	st	-X, r24
     9c8:	ee 58       	subi	r30, 0x8E	; 142
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	80 83       	st	Z, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	5f 01       	movw	r10, r30
     9d6:	08 17       	cp	r16, r24
     9d8:	19 07       	cpc	r17, r25
     9da:	11 f1       	breq	.+68     	; 0xa20 <modbusWrite()+0x41a>
     9dc:	9c 01       	movw	r18, r24
     9de:	22 0f       	add	r18, r18
     9e0:	33 1f       	adc	r19, r19
     9e2:	24 0d       	add	r18, r4
     9e4:	35 1d       	adc	r19, r5
     9e6:	cc 24       	eor	r12, r12
     9e8:	c3 94       	inc	r12
     9ea:	d1 2c       	mov	r13, r1
     9ec:	cc 0e       	add	r12, r28
     9ee:	dd 1e       	adc	r13, r29
     9f0:	2c 0d       	add	r18, r12
     9f2:	3d 1d       	adc	r19, r13
     9f4:	f9 01       	movw	r30, r18
     9f6:	20 81       	ld	r18, Z
     9f8:	31 81       	ldd	r19, Z+1	; 0x01
     9fa:	cd 90       	ld	r12, X+
     9fc:	dc 90       	ld	r13, X
     9fe:	11 97       	sbiw	r26, 0x01	; 1
     a00:	2c 15       	cp	r18, r12
     a02:	3d 05       	cpc	r19, r13
     a04:	18 f4       	brcc	.+6      	; 0xa0c <modbusWrite()+0x406>
     a06:	11 96       	adiw	r26, 0x01	; 1
     a08:	3c 93       	st	X, r19
     a0a:	2e 93       	st	-X, r18
     a0c:	f5 01       	movw	r30, r10
     a0e:	c0 80       	ld	r12, Z
     a10:	d1 80       	ldd	r13, Z+1	; 0x01
     a12:	c2 16       	cp	r12, r18
     a14:	d3 06       	cpc	r13, r19
     a16:	10 f4       	brcc	.+4      	; 0xa1c <modbusWrite()+0x416>
     a18:	31 83       	std	Z+1, r19	; 0x01
     a1a:	20 83       	st	Z, r18
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	db cf       	rjmp	.-74     	; 0x9d6 <modbusWrite()+0x3d0>
     a20:	f4 9e       	mul	r15, r20
     a22:	c0 01       	movw	r24, r0
     a24:	f5 9e       	mul	r15, r21
     a26:	90 0d       	add	r25, r0
     a28:	11 24       	eor	r1, r1
     a2a:	aa 24       	eor	r10, r10
     a2c:	a3 94       	inc	r10
     a2e:	b1 2c       	mov	r11, r1
     a30:	ac 0e       	add	r10, r28
     a32:	bd 1e       	adc	r11, r29
     a34:	8a 0d       	add	r24, r10
     a36:	9b 1d       	adc	r25, r11
     a38:	fc 01       	movw	r30, r24
     a3a:	e8 58       	subi	r30, 0x88	; 136
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	11 82       	std	Z+1, r1	; 0x01
     a40:	10 82       	st	Z, r1
     a42:	dc 01       	movw	r26, r24
     a44:	aa 58       	subi	r26, 0x8A	; 138
     a46:	bf 4f       	sbci	r27, 0xFF	; 255
     a48:	cd 90       	ld	r12, X+
     a4a:	dc 90       	ld	r13, X
     a4c:	11 97       	sbiw	r26, 0x01	; 1
     a4e:	c9 5f       	subi	r28, 0xF9	; 249
     a50:	d0 4f       	sbci	r29, 0xF0	; 240
     a52:	d9 82       	std	Y+1, r13	; 0x01
     a54:	c8 82       	st	Y, r12
     a56:	c7 50       	subi	r28, 0x07	; 7
     a58:	df 40       	sbci	r29, 0x0F	; 15
     a5a:	12 97       	sbiw	r26, 0x02	; 2
     a5c:	6d 90       	ld	r6, X+
     a5e:	7c 90       	ld	r7, X
     a60:	46 01       	movw	r8, r12
     a62:	0f ef       	ldi	r16, 0xFF	; 255
     a64:	80 1a       	sub	r8, r16
     a66:	90 0a       	sbc	r9, r16
     a68:	86 18       	sub	r8, r6
     a6a:	97 08       	sbc	r9, r7
     a6c:	ac ea       	ldi	r26, 0xAC	; 172
     a6e:	a4 9f       	mul	r26, r20
     a70:	90 01       	movw	r18, r0
     a72:	a5 9f       	mul	r26, r21
     a74:	30 0d       	add	r19, r0
     a76:	11 24       	eor	r1, r1
     a78:	cb 5f       	subi	r28, 0xFB	; 251
     a7a:	d0 4f       	sbci	r29, 0xF0	; 240
     a7c:	39 83       	std	Y+1, r19	; 0x01
     a7e:	28 83       	st	Y, r18
     a80:	c5 50       	subi	r28, 0x05	; 5
     a82:	df 40       	sbci	r29, 0x0F	; 15
     a84:	93 01       	movw	r18, r6
     a86:	b1 2c       	mov	r11, r1
     a88:	a1 2c       	mov	r10, r1
     a8a:	c0 5f       	subi	r28, 0xF0	; 240
     a8c:	d0 4f       	sbci	r29, 0xF0	; 240
     a8e:	99 83       	std	Y+1, r25	; 0x01
     a90:	88 83       	st	Y, r24
     a92:	c0 51       	subi	r28, 0x10	; 16
     a94:	df 40       	sbci	r29, 0x0F	; 15
     a96:	cb 5f       	subi	r28, 0xFB	; 251
     a98:	d0 4f       	sbci	r29, 0xF0	; 240
     a9a:	08 81       	ld	r16, Y
     a9c:	19 81       	ldd	r17, Y+1	; 0x01
     a9e:	c5 50       	subi	r28, 0x05	; 5
     aa0:	df 40       	sbci	r29, 0x0F	; 15
     aa2:	0e 57       	subi	r16, 0x7E	; 126
     aa4:	1d 4f       	sbci	r17, 0xFD	; 253
     aa6:	ce 5e       	subi	r28, 0xEE	; 238
     aa8:	d0 4f       	sbci	r29, 0xF0	; 240
     aaa:	19 83       	std	Y+1, r17	; 0x01
     aac:	08 83       	st	Y, r16
     aae:	c2 51       	subi	r28, 0x12	; 18
     ab0:	df 40       	sbci	r29, 0x0F	; 15
     ab2:	8a 14       	cp	r8, r10
     ab4:	9b 04       	cpc	r9, r11
     ab6:	09 f4       	brne	.+2      	; 0xaba <modbusWrite()+0x4b4>
     ab8:	96 c0       	rjmp	.+300    	; 0xbe6 <modbusWrite()+0x5e0>
     aba:	10 e0       	ldi	r17, 0x00	; 0
     abc:	00 e0       	ldi	r16, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	c7 5f       	subi	r28, 0xF7	; 247
     ac4:	d0 4f       	sbci	r29, 0xF0	; 240
     ac6:	18 82       	st	Y, r1
     ac8:	c9 50       	subi	r28, 0x09	; 9
     aca:	df 40       	sbci	r29, 0x0F	; 15
     acc:	c0 5f       	subi	r28, 0xF0	; 240
     ace:	d0 4f       	sbci	r29, 0xF0	; 240
     ad0:	c8 80       	ld	r12, Y
     ad2:	d9 80       	ldd	r13, Y+1	; 0x01
     ad4:	c0 51       	subi	r28, 0x10	; 16
     ad6:	df 40       	sbci	r29, 0x0F	; 15
     ad8:	c2 0e       	add	r12, r18
     ada:	d3 1e       	adc	r13, r19
     adc:	d6 01       	movw	r26, r12
     ade:	a0 5a       	subi	r26, 0xA0	; 160
     ae0:	bf 4f       	sbci	r27, 0xFF	; 255
     ae2:	c4 5f       	subi	r28, 0xF4	; 244
     ae4:	d0 4f       	sbci	r29, 0xF0	; 240
     ae6:	b9 83       	std	Y+1, r27	; 0x01
     ae8:	a8 83       	st	Y, r26
     aea:	cc 50       	subi	r28, 0x0C	; 12
     aec:	df 40       	sbci	r29, 0x0F	; 15
     aee:	ce 5e       	subi	r28, 0xEE	; 238
     af0:	d0 4f       	sbci	r29, 0xF0	; 240
     af2:	c8 80       	ld	r12, Y
     af4:	d9 80       	ldd	r13, Y+1	; 0x01
     af6:	c2 51       	subi	r28, 0x12	; 18
     af8:	df 40       	sbci	r29, 0x0F	; 15
     afa:	c2 0e       	add	r12, r18
     afc:	d3 1e       	adc	r13, r19
     afe:	d6 01       	movw	r26, r12
     b00:	a4 56       	subi	r26, 0x64	; 100
     b02:	bf 4f       	sbci	r27, 0xFF	; 255
     b04:	c2 5f       	subi	r28, 0xF2	; 242
     b06:	d0 4f       	sbci	r29, 0xF0	; 240
     b08:	b9 83       	std	Y+1, r27	; 0x01
     b0a:	a8 83       	st	Y, r26
     b0c:	ce 50       	subi	r28, 0x0E	; 14
     b0e:	df 40       	sbci	r29, 0x0F	; 15
     b10:	06 17       	cp	r16, r22
     b12:	17 07       	cpc	r17, r23
     b14:	0c f0       	brlt	.+2      	; 0xb18 <modbusWrite()+0x512>
     b16:	42 c0       	rjmp	.+132    	; 0xb9c <modbusWrite()+0x596>
     b18:	d8 01       	movw	r26, r16
     b1a:	aa 0f       	add	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	a4 0d       	add	r26, r4
     b20:	b5 1d       	adc	r27, r5
     b22:	cc 24       	eor	r12, r12
     b24:	c3 94       	inc	r12
     b26:	d1 2c       	mov	r13, r1
     b28:	cc 0e       	add	r12, r28
     b2a:	dd 1e       	adc	r13, r29
     b2c:	ac 0d       	add	r26, r12
     b2e:	bd 1d       	adc	r27, r13
     b30:	90 96       	adiw	r26, 0x20	; 32
     b32:	0d 90       	ld	r0, X+
     b34:	bc 91       	ld	r27, X
     b36:	a0 2d       	mov	r26, r0
     b38:	2a 17       	cp	r18, r26
     b3a:	3b 07       	cpc	r19, r27
     b3c:	61 f5       	brne	.+88     	; 0xb96 <modbusWrite()+0x590>
     b3e:	c4 5f       	subi	r28, 0xF4	; 244
     b40:	d0 4f       	sbci	r29, 0xF0	; 240
     b42:	a8 81       	ld	r26, Y
     b44:	b9 81       	ldd	r27, Y+1	; 0x01
     b46:	cc 50       	subi	r28, 0x0C	; 12
     b48:	df 40       	sbci	r29, 0x0F	; 15
     b4a:	bc 91       	ld	r27, X
     b4c:	c7 5f       	subi	r28, 0xF7	; 247
     b4e:	d0 4f       	sbci	r29, 0xF0	; 240
     b50:	b8 83       	st	Y, r27
     b52:	c9 50       	subi	r28, 0x09	; 9
     b54:	df 40       	sbci	r29, 0x0F	; 15
     b56:	8b 2b       	or	r24, r27
     b58:	6c 01       	movw	r12, r24
     b5a:	0a 2c       	mov	r0, r10
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <modbusWrite()+0x55c>
     b5e:	cc 0c       	add	r12, r12
     b60:	dd 1c       	adc	r13, r13
     b62:	0a 94       	dec	r0
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <modbusWrite()+0x558>
     b66:	a0 81       	ld	r26, Z
     b68:	b1 81       	ldd	r27, Z+1	; 0x01
     b6a:	ac 29       	or	r26, r12
     b6c:	bd 29       	or	r27, r13
     b6e:	b1 83       	std	Z+1, r27	; 0x01
     b70:	a0 83       	st	Z, r26
     b72:	c7 5f       	subi	r28, 0xF7	; 247
     b74:	d0 4f       	sbci	r29, 0xF0	; 240
     b76:	c8 80       	ld	r12, Y
     b78:	c9 50       	subi	r28, 0x09	; 9
     b7a:	df 40       	sbci	r29, 0x0F	; 15
     b7c:	c2 5f       	subi	r28, 0xF2	; 242
     b7e:	d0 4f       	sbci	r29, 0xF0	; 240
     b80:	a8 81       	ld	r26, Y
     b82:	b9 81       	ldd	r27, Y+1	; 0x01
     b84:	ce 50       	subi	r28, 0x0E	; 14
     b86:	df 40       	sbci	r29, 0x0F	; 15
     b88:	cc 92       	st	X, r12
     b8a:	a1 e0       	ldi	r26, 0x01	; 1
     b8c:	c7 5f       	subi	r28, 0xF7	; 247
     b8e:	d0 4f       	sbci	r29, 0xF0	; 240
     b90:	a8 83       	st	Y, r26
     b92:	c9 50       	subi	r28, 0x09	; 9
     b94:	df 40       	sbci	r29, 0x0F	; 15
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	ba cf       	rjmp	.-140    	; 0xb10 <modbusWrite()+0x50a>
     b9c:	c7 5f       	subi	r28, 0xF7	; 247
     b9e:	d0 4f       	sbci	r29, 0xF0	; 240
     ba0:	b8 81       	ld	r27, Y
     ba2:	c9 50       	subi	r28, 0x09	; 9
     ba4:	df 40       	sbci	r29, 0x0F	; 15
     ba6:	b1 11       	cpse	r27, r1
     ba8:	18 c0       	rjmp	.+48     	; 0xbda <modbusWrite()+0x5d4>
     baa:	cb 5f       	subi	r28, 0xFB	; 251
     bac:	d0 4f       	sbci	r29, 0xF0	; 240
     bae:	a8 81       	ld	r26, Y
     bb0:	b9 81       	ldd	r27, Y+1	; 0x01
     bb2:	c5 50       	subi	r28, 0x05	; 5
     bb4:	df 40       	sbci	r29, 0x0F	; 15
     bb6:	a2 0f       	add	r26, r18
     bb8:	b3 1f       	adc	r27, r19
     bba:	a2 5e       	subi	r26, 0xE2	; 226
     bbc:	bc 4f       	sbci	r27, 0xFC	; 252
     bbe:	ac 91       	ld	r26, X
     bc0:	8a 2b       	or	r24, r26
     bc2:	0a 2c       	mov	r0, r10
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <modbusWrite()+0x5c4>
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	0a 94       	dec	r0
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <modbusWrite()+0x5c0>
     bce:	a0 81       	ld	r26, Z
     bd0:	b1 81       	ldd	r27, Z+1	; 0x01
     bd2:	8a 2b       	or	r24, r26
     bd4:	9b 2b       	or	r25, r27
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	80 83       	st	Z, r24
     bda:	0f ef       	ldi	r16, 0xFF	; 255
     bdc:	a0 1a       	sub	r10, r16
     bde:	b0 0a       	sbc	r11, r16
     be0:	2f 5f       	subi	r18, 0xFF	; 255
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	66 cf       	rjmp	.-308    	; 0xab2 <modbusWrite()+0x4ac>
     be6:	16 16       	cp	r1, r22
     be8:	17 06       	cpc	r1, r23
     bea:	0c f0       	brlt	.+2      	; 0xbee <modbusWrite()+0x5e8>
     bec:	73 c0       	rjmp	.+230    	; 0xcd4 <modbusWrite()+0x6ce>
     bee:	88 e1       	ldi	r24, 0x18	; 24
     bf0:	c6 5f       	subi	r28, 0xF6	; 246
     bf2:	d0 4f       	sbci	r29, 0xF0	; 240
     bf4:	a8 81       	ld	r26, Y
     bf6:	b9 81       	ldd	r27, Y+1	; 0x01
     bf8:	ca 50       	subi	r28, 0x0A	; 10
     bfa:	df 40       	sbci	r29, 0x0F	; 15
     bfc:	1d 92       	st	X+, r1
     bfe:	8a 95       	dec	r24
     c00:	e9 f7       	brne	.-6      	; 0xbfc <modbusWrite()+0x5f6>
     c02:	cd 51       	subi	r28, 0x1D	; 29
     c04:	d1 4f       	sbci	r29, 0xF1	; 241
     c06:	e8 82       	st	Y, r14
     c08:	c3 5e       	subi	r28, 0xE3	; 227
     c0a:	de 40       	sbci	r29, 0x0E	; 14
     c0c:	8f e0       	ldi	r24, 0x0F	; 15
     c0e:	cc 51       	subi	r28, 0x1C	; 28
     c10:	d1 4f       	sbci	r29, 0xF1	; 241
     c12:	88 83       	st	Y, r24
     c14:	c4 5e       	subi	r28, 0xE4	; 228
     c16:	de 40       	sbci	r29, 0x0E	; 14
     c18:	cb 51       	subi	r28, 0x1B	; 27
     c1a:	d1 4f       	sbci	r29, 0xF1	; 241
     c1c:	78 82       	st	Y, r7
     c1e:	c5 5e       	subi	r28, 0xE5	; 229
     c20:	de 40       	sbci	r29, 0x0E	; 14
     c22:	ca 51       	subi	r28, 0x1A	; 26
     c24:	d1 4f       	sbci	r29, 0xF1	; 241
     c26:	68 82       	st	Y, r6
     c28:	c6 5e       	subi	r28, 0xE6	; 230
     c2a:	de 40       	sbci	r29, 0x0E	; 14
     c2c:	c9 51       	subi	r28, 0x19	; 25
     c2e:	d1 4f       	sbci	r29, 0xF1	; 241
     c30:	98 82       	st	Y, r9
     c32:	c7 5e       	subi	r28, 0xE7	; 231
     c34:	de 40       	sbci	r29, 0x0E	; 14
     c36:	c9 5f       	subi	r28, 0xF9	; 249
     c38:	d0 4f       	sbci	r29, 0xF0	; 240
     c3a:	88 81       	ld	r24, Y
     c3c:	c7 50       	subi	r28, 0x07	; 7
     c3e:	df 40       	sbci	r29, 0x0F	; 15
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	86 19       	sub	r24, r6
     c44:	c8 51       	subi	r28, 0x18	; 24
     c46:	d1 4f       	sbci	r29, 0xF1	; 241
     c48:	88 83       	st	Y, r24
     c4a:	c8 5e       	subi	r28, 0xE8	; 232
     c4c:	de 40       	sbci	r29, 0x0E	; 14
     c4e:	f4 9e       	mul	r15, r20
     c50:	f0 01       	movw	r30, r0
     c52:	f5 9e       	mul	r15, r21
     c54:	f0 0d       	add	r31, r0
     c56:	11 24       	eor	r1, r1
     c58:	44 24       	eor	r4, r4
     c5a:	43 94       	inc	r4
     c5c:	51 2c       	mov	r5, r1
     c5e:	4c 0e       	add	r4, r28
     c60:	5d 1e       	adc	r5, r29
     c62:	e4 0d       	add	r30, r4
     c64:	f5 1d       	adc	r31, r5
     c66:	e8 58       	subi	r30, 0x88	; 136
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	80 81       	ld	r24, Z
     c6c:	91 81       	ldd	r25, Z+1	; 0x01
     c6e:	09 e0       	ldi	r16, 0x09	; 9
     c70:	80 16       	cp	r8, r16
     c72:	91 04       	cpc	r9, r1
     c74:	08 f4       	brcc	.+2      	; 0xc78 <modbusWrite()+0x672>
     c76:	02 c1       	rjmp	.+516    	; 0xe7c <modbusWrite()+0x876>
     c78:	22 e0       	ldi	r18, 0x02	; 2
     c7a:	c7 51       	subi	r28, 0x17	; 23
     c7c:	d1 4f       	sbci	r29, 0xF1	; 241
     c7e:	28 83       	st	Y, r18
     c80:	c9 5e       	subi	r28, 0xE9	; 233
     c82:	de 40       	sbci	r29, 0x0E	; 14
     c84:	c6 51       	subi	r28, 0x16	; 22
     c86:	d1 4f       	sbci	r29, 0xF1	; 241
     c88:	88 83       	st	Y, r24
     c8a:	ca 5e       	subi	r28, 0xEA	; 234
     c8c:	de 40       	sbci	r29, 0x0E	; 14
     c8e:	c5 51       	subi	r28, 0x15	; 21
     c90:	d1 4f       	sbci	r29, 0xF1	; 241
     c92:	98 83       	st	Y, r25
     c94:	cb 5e       	subi	r28, 0xEB	; 235
     c96:	de 40       	sbci	r29, 0x0E	; 14
     c98:	09 e0       	ldi	r16, 0x09	; 9
     c9a:	10 e0       	ldi	r17, 0x00	; 0
     c9c:	b8 01       	movw	r22, r16
     c9e:	ce 01       	movw	r24, r28
     ca0:	8d 51       	subi	r24, 0x1D	; 29
     ca2:	91 4f       	sbci	r25, 0xF1	; 241
     ca4:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
     ca8:	e3 ee       	ldi	r30, 0xE3	; 227
     caa:	fe e0       	ldi	r31, 0x0E	; 14
     cac:	ec 0f       	add	r30, r28
     cae:	fd 1f       	adc	r31, r29
     cb0:	e0 0f       	add	r30, r16
     cb2:	f1 1f       	adc	r31, r17
     cb4:	80 83       	st	Z, r24
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	a8 01       	movw	r20, r16
     cba:	4e 5f       	subi	r20, 0xFE	; 254
     cbc:	5f 4f       	sbci	r21, 0xFF	; 255
     cbe:	be 01       	movw	r22, r28
     cc0:	6d 51       	subi	r22, 0x1D	; 29
     cc2:	71 4f       	sbci	r23, 0xF1	; 241
     cc4:	85 ea       	ldi	r24, 0xA5	; 165
     cc6:	99 e1       	ldi	r25, 0x19	; 25
     cc8:	0e 94 3a 02 	call	0x474	; 0x474 <Print::write(char const*, unsigned int)>
     ccc:	8c e2       	ldi	r24, 0x2C	; 44
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
     cd4:	d1 01       	movw	r26, r2
     cd6:	1d 91       	ld	r17, X+
     cd8:	1d 01       	movw	r2, r26
     cda:	61 2f       	mov	r22, r17
     cdc:	01 2e       	mov	r0, r17
     cde:	00 0c       	add	r0, r0
     ce0:	77 0b       	sbc	r23, r23
     ce2:	f6 9e       	mul	r15, r22
     ce4:	90 01       	movw	r18, r0
     ce6:	f7 9e       	mul	r15, r23
     ce8:	30 0d       	add	r19, r0
     cea:	11 24       	eor	r1, r1
     cec:	e1 e0       	ldi	r30, 0x01	; 1
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	ec 0f       	add	r30, r28
     cf2:	fd 1f       	adc	r31, r29
     cf4:	2e 0f       	add	r18, r30
     cf6:	3f 1f       	adc	r19, r31
     cf8:	d9 01       	movw	r26, r18
     cfa:	a4 58       	subi	r26, 0x84	; 132
     cfc:	bf 4f       	sbci	r27, 0xFF	; 255
     cfe:	4d 90       	ld	r4, X+
     d00:	5c 90       	ld	r5, X
     d02:	cb 5f       	subi	r28, 0xFB	; 251
     d04:	d0 4f       	sbci	r29, 0xF0	; 240
     d06:	59 82       	std	Y+1, r5	; 0x01
     d08:	48 82       	st	Y, r4
     d0a:	c5 50       	subi	r28, 0x05	; 5
     d0c:	df 40       	sbci	r29, 0x0F	; 15
     d0e:	14 14       	cp	r1, r4
     d10:	15 04       	cpc	r1, r5
     d12:	0c f0       	brlt	.+2      	; 0xd16 <modbusWrite()+0x710>
     d14:	ce cd       	rjmp	.-1124   	; 0x8b2 <modbusWrite()+0x2ac>
     d16:	88 e1       	ldi	r24, 0x18	; 24
     d18:	c6 5f       	subi	r28, 0xF6	; 246
     d1a:	d0 4f       	sbci	r29, 0xF0	; 240
     d1c:	a8 81       	ld	r26, Y
     d1e:	b9 81       	ldd	r27, Y+1	; 0x01
     d20:	ca 50       	subi	r28, 0x0A	; 10
     d22:	df 40       	sbci	r29, 0x0F	; 15
     d24:	1d 92       	st	X+, r1
     d26:	8a 95       	dec	r24
     d28:	e9 f7       	brne	.-6      	; 0xd24 <modbusWrite()+0x71e>
     d2a:	cd 51       	subi	r28, 0x1D	; 29
     d2c:	d1 4f       	sbci	r29, 0xF1	; 241
     d2e:	18 83       	st	Y, r17
     d30:	c3 5e       	subi	r28, 0xE3	; 227
     d32:	de 40       	sbci	r29, 0x0E	; 14
     d34:	80 e1       	ldi	r24, 0x10	; 16
     d36:	cc 51       	subi	r28, 0x1C	; 28
     d38:	d1 4f       	sbci	r29, 0xF1	; 241
     d3a:	88 83       	st	Y, r24
     d3c:	c4 5e       	subi	r28, 0xE4	; 228
     d3e:	de 40       	sbci	r29, 0x0E	; 14
     d40:	c9 01       	movw	r24, r18
     d42:	80 59       	subi	r24, 0x90	; 144
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	fc 01       	movw	r30, r24
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	cb 51       	subi	r28, 0x1B	; 27
     d4e:	d1 4f       	sbci	r29, 0xF1	; 241
     d50:	98 83       	st	Y, r25
     d52:	c5 5e       	subi	r28, 0xE5	; 229
     d54:	de 40       	sbci	r29, 0x0E	; 14
     d56:	ca 51       	subi	r28, 0x1A	; 26
     d58:	d1 4f       	sbci	r29, 0xF1	; 241
     d5a:	88 83       	st	Y, r24
     d5c:	c6 5e       	subi	r28, 0xE6	; 230
     d5e:	de 40       	sbci	r29, 0x0E	; 14
     d60:	2e 58       	subi	r18, 0x8E	; 142
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	d9 01       	movw	r26, r18
     d66:	4d 91       	ld	r20, X+
     d68:	5c 91       	ld	r21, X
     d6a:	9a 01       	movw	r18, r20
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	28 1b       	sub	r18, r24
     d72:	39 0b       	sbc	r19, r25
     d74:	c9 51       	subi	r28, 0x19	; 25
     d76:	d1 4f       	sbci	r29, 0xF1	; 241
     d78:	38 83       	st	Y, r19
     d7a:	c7 5e       	subi	r28, 0xE7	; 231
     d7c:	de 40       	sbci	r29, 0x0E	; 14
     d7e:	4f 5f       	subi	r20, 0xFF	; 255
     d80:	48 1b       	sub	r20, r24
     d82:	c8 51       	subi	r28, 0x18	; 24
     d84:	d1 4f       	sbci	r29, 0xF1	; 241
     d86:	48 83       	st	Y, r20
     d88:	c8 5e       	subi	r28, 0xE8	; 232
     d8a:	de 40       	sbci	r29, 0x0E	; 14
     d8c:	42 2f       	mov	r20, r18
     d8e:	44 0f       	add	r20, r20
     d90:	c7 51       	subi	r28, 0x17	; 23
     d92:	d1 4f       	sbci	r29, 0xF1	; 241
     d94:	48 83       	st	Y, r20
     d96:	c9 5e       	subi	r28, 0xE9	; 233
     d98:	de 40       	sbci	r29, 0x0E	; 14
     d9a:	bf 2d       	mov	r27, r15
     d9c:	1b 02       	muls	r17, r27
     d9e:	40 01       	movw	r8, r0
     da0:	11 24       	eor	r1, r1
     da2:	3c 01       	movw	r6, r24
     da4:	e6 e5       	ldi	r30, 0x56	; 86
     da6:	1e 02       	muls	r17, r30
     da8:	60 0c       	add	r6, r0
     daa:	71 1c       	adc	r7, r1
     dac:	11 24       	eor	r1, r1
     dae:	66 0c       	add	r6, r6
     db0:	77 1c       	adc	r7, r7
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	07 e0       	ldi	r16, 0x07	; 7
     db8:	10 e0       	ldi	r17, 0x00	; 0
     dba:	ef e3       	ldi	r30, 0x3F	; 63
     dbc:	e6 9f       	mul	r30, r22
     dbe:	60 01       	movw	r12, r0
     dc0:	e7 9f       	mul	r30, r23
     dc2:	d0 0c       	add	r13, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	42 17       	cp	r20, r18
     dc8:	53 07       	cpc	r21, r19
     dca:	09 f4       	brne	.+2      	; 0xdce <modbusWrite()+0x7c8>
     dcc:	65 c0       	rjmp	.+202    	; 0xe98 <modbusWrite()+0x892>
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	e1 2c       	mov	r14, r1
     dd4:	f6 01       	movw	r30, r12
     dd6:	e8 0f       	add	r30, r24
     dd8:	f9 1f       	adc	r31, r25
     dda:	b0 96       	adiw	r30, 0x20	; 32
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	44 24       	eor	r4, r4
     de2:	43 94       	inc	r4
     de4:	51 2c       	mov	r5, r1
     de6:	4c 0e       	add	r4, r28
     de8:	5d 1e       	adc	r5, r29
     dea:	e4 0d       	add	r30, r4
     dec:	f5 1d       	adc	r31, r5
     dee:	5b 01       	movw	r10, r22
     df0:	aa 0c       	add	r10, r10
     df2:	bb 1c       	adc	r11, r11
     df4:	a8 0c       	add	r10, r8
     df6:	b9 1c       	adc	r11, r9
     df8:	a1 e0       	ldi	r26, 0x01	; 1
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ac 0f       	add	r26, r28
     dfe:	bd 1f       	adc	r27, r29
     e00:	aa 0e       	add	r10, r26
     e02:	bb 1e       	adc	r11, r27
     e04:	d5 01       	movw	r26, r10
     e06:	ad 90       	ld	r10, X+
     e08:	bc 90       	ld	r11, X
     e0a:	a8 16       	cp	r10, r24
     e0c:	b9 06       	cpc	r11, r25
     e0e:	91 f4       	brne	.+36     	; 0xe34 <modbusWrite()+0x82e>
     e10:	e0 80       	ld	r14, Z
     e12:	51 80       	ldd	r5, Z+1	; 0x01
     e14:	a3 ee       	ldi	r26, 0xE3	; 227
     e16:	aa 2e       	mov	r10, r26
     e18:	ae e0       	ldi	r26, 0x0E	; 14
     e1a:	ba 2e       	mov	r11, r26
     e1c:	ac 0e       	add	r10, r28
     e1e:	bd 1e       	adc	r11, r29
     e20:	a0 0e       	add	r10, r16
     e22:	b1 1e       	adc	r11, r17
     e24:	d5 01       	movw	r26, r10
     e26:	5c 92       	st	X, r5
     e28:	11 96       	adiw	r26, 0x01	; 1
     e2a:	ec 92       	st	X, r14
     e2c:	0e 5f       	subi	r16, 0xFE	; 254
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	ee 24       	eor	r14, r14
     e32:	e3 94       	inc	r14
     e34:	6f 5f       	subi	r22, 0xFF	; 255
     e36:	7f 4f       	sbci	r23, 0xFF	; 255
     e38:	cb 5f       	subi	r28, 0xFB	; 251
     e3a:	d0 4f       	sbci	r29, 0xF0	; 240
     e3c:	48 80       	ld	r4, Y
     e3e:	59 80       	ldd	r5, Y+1	; 0x01
     e40:	c5 50       	subi	r28, 0x05	; 5
     e42:	df 40       	sbci	r29, 0x0F	; 15
     e44:	46 16       	cp	r4, r22
     e46:	57 06       	cpc	r5, r23
     e48:	91 f6       	brne	.-92     	; 0xdee <modbusWrite()+0x7e8>
     e4a:	e1 10       	cpse	r14, r1
     e4c:	13 c0       	rjmp	.+38     	; 0xe74 <modbusWrite()+0x86e>
     e4e:	fa 01       	movw	r30, r20
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	e6 0d       	add	r30, r6
     e56:	f7 1d       	adc	r31, r7
     e58:	e2 50       	subi	r30, 0x02	; 2
     e5a:	fd 4f       	sbci	r31, 0xFD	; 253
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	e3 ee       	ldi	r30, 0xE3	; 227
     e62:	fe e0       	ldi	r31, 0x0E	; 14
     e64:	ec 0f       	add	r30, r28
     e66:	fd 1f       	adc	r31, r29
     e68:	e0 0f       	add	r30, r16
     e6a:	f1 1f       	adc	r31, r17
     e6c:	70 83       	st	Z, r23
     e6e:	61 83       	std	Z+1, r22	; 0x01
     e70:	0e 5f       	subi	r16, 0xFE	; 254
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
     e74:	4f 5f       	subi	r20, 0xFF	; 255
     e76:	5f 4f       	sbci	r21, 0xFF	; 255
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	a5 cf       	rjmp	.-182    	; 0xdc6 <modbusWrite()+0x7c0>
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	c7 51       	subi	r28, 0x17	; 23
     e80:	d1 4f       	sbci	r29, 0xF1	; 241
     e82:	98 83       	st	Y, r25
     e84:	c9 5e       	subi	r28, 0xE9	; 233
     e86:	de 40       	sbci	r29, 0x0E	; 14
     e88:	c6 51       	subi	r28, 0x16	; 22
     e8a:	d1 4f       	sbci	r29, 0xF1	; 241
     e8c:	88 83       	st	Y, r24
     e8e:	ca 5e       	subi	r28, 0xEA	; 234
     e90:	de 40       	sbci	r29, 0x0E	; 14
     e92:	08 e0       	ldi	r16, 0x08	; 8
     e94:	10 e0       	ldi	r17, 0x00	; 0
     e96:	02 cf       	rjmp	.-508    	; 0xc9c <modbusWrite()+0x696>
     e98:	b8 01       	movw	r22, r16
     e9a:	ce 01       	movw	r24, r28
     e9c:	8d 51       	subi	r24, 0x1D	; 29
     e9e:	91 4f       	sbci	r25, 0xF1	; 241
     ea0:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
     ea4:	e3 ee       	ldi	r30, 0xE3	; 227
     ea6:	fe e0       	ldi	r31, 0x0E	; 14
     ea8:	ec 0f       	add	r30, r28
     eaa:	fd 1f       	adc	r31, r29
     eac:	e0 0f       	add	r30, r16
     eae:	f1 1f       	adc	r31, r17
     eb0:	80 83       	st	Z, r24
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	a8 01       	movw	r20, r16
     eb6:	4e 5f       	subi	r20, 0xFE	; 254
     eb8:	5f 4f       	sbci	r21, 0xFF	; 255
     eba:	be 01       	movw	r22, r28
     ebc:	6d 51       	subi	r22, 0x1D	; 29
     ebe:	71 4f       	sbci	r23, 0xF1	; 241
     ec0:	85 ea       	ldi	r24, 0xA5	; 165
     ec2:	99 e1       	ldi	r25, 0x19	; 25
     ec4:	0e 94 3a 02 	call	0x474	; 0x474 <Print::write(char const*, unsigned int)>
     ec8:	8c e2       	ldi	r24, 0x2C	; 44
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
     ed0:	f0 cc       	rjmp	.-1568   	; 0x8b2 <modbusWrite()+0x2ac>
     ed2:	10 92 b3 16 	sts	0x16B3, r1	; 0x8016b3 <state+0x1>
     ed6:	10 92 b2 16 	sts	0x16B2, r1	; 0x8016b2 <state>
     eda:	cd 5e       	subi	r28, 0xED	; 237
     edc:	d0 4f       	sbci	r29, 0xF0	; 240
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	bf 90       	pop	r11
     efa:	af 90       	pop	r10
     efc:	9f 90       	pop	r9
     efe:	8f 90       	pop	r8
     f00:	7f 90       	pop	r7
     f02:	6f 90       	pop	r6
     f04:	5f 90       	pop	r5
     f06:	4f 90       	pop	r4
     f08:	3f 90       	pop	r3
     f0a:	2f 90       	pop	r2
     f0c:	08 95       	ret

00000f0e <clrmodBuffer()>:
_Z12clrmodBufferv():
     f0e:	e0 ee       	ldi	r30, 0xE0	; 224
     f10:	f6 e1       	ldi	r31, 0x16	; 22
     f12:	82 e3       	ldi	r24, 0x32	; 50
     f14:	df 01       	movw	r26, r30
     f16:	1d 92       	st	X+, r1
     f18:	8a 95       	dec	r24
     f1a:	e9 f7       	brne	.-6      	; 0xf16 <clrmodBuffer()+0x8>
     f1c:	08 95       	ret

00000f1e <arraycheck(unsigned short*, short, int)>:
_Z10arraycheckPtsi():
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	24 17       	cp	r18, r20
     f24:	35 07       	cpc	r19, r21
     f26:	54 f4       	brge	.+20     	; 0xf3c <arraycheck(unsigned short*, short, int)+0x1e>
     f28:	dc 01       	movw	r26, r24
     f2a:	ed 91       	ld	r30, X+
     f2c:	fd 91       	ld	r31, X+
     f2e:	cd 01       	movw	r24, r26
     f30:	e6 17       	cp	r30, r22
     f32:	f7 07       	cpc	r31, r23
     f34:	29 f0       	breq	.+10     	; 0xf40 <arraycheck(unsigned short*, short, int)+0x22>
     f36:	2f 5f       	subi	r18, 0xFF	; 255
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	f3 cf       	rjmp	.-26     	; 0xf22 <arraycheck(unsigned short*, short, int)+0x4>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	08 95       	ret
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	08 95       	ret

00000f44 <_GLOBAL__sub_I_simBuffer>:
_GLOBAL__sub_I_simBuffer():
     f44:	88 ee       	ldi	r24, 0xE8	; 232
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	0e 94 09 17 	call	0x2e12	; 0x2e12 <malloc>
     f4c:	90 93 07 19 	sts	0x1907, r25	; 0x801907 <simBuffer+0x1>
     f50:	80 93 06 19 	sts	0x1906, r24	; 0x801906 <simBuffer>
     f54:	08 95       	ret

00000f56 <slaveRead()>:
_Z9slaveReadv():
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	8c e2       	ldi	r24, 0x2C	; 44
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
     f66:	85 ea       	ldi	r24, 0xA5	; 165
     f68:	99 e1       	ldi	r25, 0x19	; 25
     f6a:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
     f6e:	89 2b       	or	r24, r25
     f70:	99 f0       	breq	.+38     	; 0xf98 <slaveRead()+0x42>
     f72:	85 ea       	ldi	r24, 0xA5	; 165
     f74:	99 e1       	ldi	r25, 0x19	; 25
     f76:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
     f7a:	8c 01       	movw	r16, r24
     f7c:	c0 ee       	ldi	r28, 0xE0	; 224
     f7e:	d6 e1       	ldi	r29, 0x16	; 22
     f80:	ce 01       	movw	r24, r28
     f82:	80 5e       	subi	r24, 0xE0	; 224
     f84:	96 41       	sbci	r25, 0x16	; 22
     f86:	80 17       	cp	r24, r16
     f88:	91 07       	cpc	r25, r17
     f8a:	6c f7       	brge	.-38     	; 0xf66 <slaveRead()+0x10>
     f8c:	85 ea       	ldi	r24, 0xA5	; 165
     f8e:	99 e1       	ldi	r25, 0x19	; 25
     f90:	0e 94 3b 11 	call	0x2276	; 0x2276 <HardwareSerial::read()>
     f94:	89 93       	st	Y+, r24
     f96:	f4 cf       	rjmp	.-24     	; 0xf80 <slaveRead()+0x2a>
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	08 95       	ret

00000fa2 <modbusRead()>:
_Z10modbusReadv():
     fa2:	2f 92       	push	r2
     fa4:	3f 92       	push	r3
     fa6:	4f 92       	push	r4
     fa8:	5f 92       	push	r5
     faa:	6f 92       	push	r6
     fac:	7f 92       	push	r7
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	cc 5a       	subi	r28, 0xAC	; 172
     fcc:	d5 40       	sbci	r29, 0x05	; 5
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <slaveSetupCheck>
     fdc:	81 11       	cpse	r24, r1
     fde:	6e c1       	rjmp	.+732    	; 0x12bc <modbusRead()+0x31a>
     fe0:	e5 eb       	ldi	r30, 0xB5	; 181
     fe2:	f6 e1       	ldi	r31, 0x16	; 22
     fe4:	8e e1       	ldi	r24, 0x1E	; 30
     fe6:	df 01       	movw	r26, r30
     fe8:	1d 92       	st	X+, r1
     fea:	8a 95       	dec	r24
     fec:	e9 f7       	brne	.-6      	; 0xfe8 <modbusRead()+0x46>
     fee:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
     ff2:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	93 81       	ldd	r25, Z+3	; 0x03
     ffa:	f8 2f       	mov	r31, r24
     ffc:	e9 2f       	mov	r30, r25
     ffe:	c5 55       	subi	r28, 0x55	; 85
    1000:	da 4f       	sbci	r29, 0xFA	; 250
    1002:	f9 83       	std	Y+1, r31	; 0x01
    1004:	e8 83       	st	Y, r30
    1006:	cb 5a       	subi	r28, 0xAB	; 171
    1008:	d5 40       	sbci	r29, 0x05	; 5
    100a:	04 e0       	ldi	r16, 0x04	; 4
    100c:	e0 2e       	mov	r14, r16
    100e:	f1 2c       	mov	r15, r1
    1010:	d1 2c       	mov	r13, r1
    1012:	c1 2c       	mov	r12, r1
    1014:	b1 2c       	mov	r11, r1
    1016:	a1 2c       	mov	r10, r1
    1018:	8c ea       	ldi	r24, 0xAC	; 172
    101a:	28 2e       	mov	r2, r24
    101c:	c5 55       	subi	r28, 0x55	; 85
    101e:	da 4f       	sbci	r29, 0xFA	; 250
    1020:	28 81       	ld	r18, Y
    1022:	39 81       	ldd	r19, Y+1	; 0x01
    1024:	cb 5a       	subi	r28, 0xAB	; 171
    1026:	d5 40       	sbci	r29, 0x05	; 5
    1028:	c2 16       	cp	r12, r18
    102a:	d3 06       	cpc	r13, r19
    102c:	09 f4       	brne	.+2      	; 0x1030 <modbusRead()+0x8e>
    102e:	ab c0       	rjmp	.+342    	; 0x1186 <modbusRead()+0x1e4>
    1030:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
    1034:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
    1038:	ee 0d       	add	r30, r14
    103a:	ff 1d       	adc	r31, r15
    103c:	30 80       	ld	r3, Z
    103e:	81 81       	ldd	r24, Z+1	; 0x01
    1040:	42 80       	ldd	r4, Z+2	; 0x02
    1042:	58 2e       	mov	r5, r24
    1044:	33 81       	ldd	r19, Z+3	; 0x03
    1046:	c7 55       	subi	r28, 0x57	; 87
    1048:	da 4f       	sbci	r29, 0xFA	; 250
    104a:	38 83       	st	Y, r19
    104c:	c9 5a       	subi	r28, 0xA9	; 169
    104e:	d5 40       	sbci	r29, 0x05	; 5
    1050:	84 81       	ldd	r24, Z+4	; 0x04
    1052:	65 80       	ldd	r6, Z+5	; 0x05
    1054:	78 2e       	mov	r7, r24
    1056:	03 2d       	mov	r16, r3
    1058:	03 2c       	mov	r0, r3
    105a:	00 0c       	add	r0, r0
    105c:	11 0b       	sbc	r17, r17
_ZNK5EERefdeEv():
    105e:	c8 01       	movw	r24, r16
    1060:	0e 94 34 1b 	call	0x3668	; 0x3668 <eeprom_read_byte>
_ZN5EERef6updateEh():
    1064:	68 16       	cp	r6, r24
    1066:	21 f0       	breq	.+8      	; 0x1070 <modbusRead()+0xce>
_ZN5EERefaSEh():
    1068:	66 2d       	mov	r22, r6
    106a:	c8 01       	movw	r24, r16
    106c:	0e 94 3c 1b 	call	0x3678	; 0x3678 <eeprom_write_byte>
_ZN5EEPtrppEv():
    1070:	48 01       	movw	r8, r16
    1072:	4f ef       	ldi	r20, 0xFF	; 255
    1074:	84 1a       	sub	r8, r20
    1076:	94 0a       	sbc	r9, r20
_ZNK5EERefdeEv():
    1078:	c4 01       	movw	r24, r8
    107a:	0e 94 34 1b 	call	0x3668	; 0x3668 <eeprom_read_byte>
_ZN5EERef6updateEh():
    107e:	78 16       	cp	r7, r24
    1080:	21 f0       	breq	.+8      	; 0x108a <modbusRead()+0xe8>
_ZN5EERefaSEh():
    1082:	67 2d       	mov	r22, r7
    1084:	c4 01       	movw	r24, r8
    1086:	0e 94 3c 1b 	call	0x3678	; 0x3678 <eeprom_write_byte>
_Z10modbusReadv():
    108a:	b8 01       	movw	r22, r16
    108c:	85 eb       	ldi	r24, 0xB5	; 181
    108e:	96 e1       	ldi	r25, 0x16	; 22
    1090:	0e 94 39 18 	call	0x3072	; 0x3072 <strchr>
    1094:	89 2b       	or	r24, r25
    1096:	a9 f5       	brne	.+106    	; 0x1102 <modbusRead()+0x160>
    1098:	f5 01       	movw	r30, r10
    109a:	eb 54       	subi	r30, 0x4B	; 75
    109c:	f9 4e       	sbci	r31, 0xE9	; 233
    109e:	30 82       	st	Z, r3
    10a0:	20 9e       	mul	r2, r16
    10a2:	c0 01       	movw	r24, r0
    10a4:	21 9e       	mul	r2, r17
    10a6:	90 0d       	add	r25, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	8e 57       	subi	r24, 0x7E	; 126
    10ac:	9d 4f       	sbci	r25, 0xFD	; 253
    10ae:	fc 01       	movw	r30, r24
    10b0:	e8 58       	subi	r30, 0x88	; 136
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	11 82       	std	Z+1, r1	; 0x01
    10b6:	10 82       	st	Z, r1
    10b8:	86 58       	subi	r24, 0x86	; 134
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	dc 01       	movw	r26, r24
    10be:	1d 92       	st	X+, r1
    10c0:	1c 92       	st	X, r1
    10c2:	b3 2d       	mov	r27, r3
    10c4:	e0 e3       	ldi	r30, 0x30	; 48
    10c6:	be 02       	muls	r27, r30
    10c8:	c0 01       	movw	r24, r0
    10ca:	11 24       	eor	r1, r1
_ZN11slaves_info5resetEv():
    10cc:	e1 e0       	ldi	r30, 0x01	; 1
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	ec 0f       	add	r30, r28
    10d2:	fd 1f       	adc	r31, r29
    10d4:	e8 0f       	add	r30, r24
    10d6:	f9 1f       	adc	r31, r25
    10d8:	df 01       	movw	r26, r30
    10da:	20 e2       	ldi	r18, 0x20	; 32
    10dc:	1d 92       	st	X+, r1
    10de:	2a 95       	dec	r18
    10e0:	e9 f7       	brne	.-6      	; 0x10dc <modbusRead()+0x13a>
    10e2:	80 96       	adiw	r24, 0x20	; 32
    10e4:	e1 e0       	ldi	r30, 0x01	; 1
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	ec 0f       	add	r30, r28
    10ea:	fd 1f       	adc	r31, r29
    10ec:	e8 0f       	add	r30, r24
    10ee:	f9 1f       	adc	r31, r25
    10f0:	df 01       	movw	r26, r30
    10f2:	20 e1       	ldi	r18, 0x10	; 16
    10f4:	1d 92       	st	X+, r1
    10f6:	2a 95       	dec	r18
    10f8:	e9 f7       	brne	.-6      	; 0x10f4 <modbusRead()+0x152>
_Z10modbusReadv():
    10fa:	a5 01       	movw	r20, r10
    10fc:	4f 5f       	subi	r20, 0xFF	; 255
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	5a 01       	movw	r10, r20
    1102:	c7 55       	subi	r28, 0x57	; 87
    1104:	da 4f       	sbci	r29, 0xFA	; 250
    1106:	58 81       	ld	r21, Y
    1108:	c9 5a       	subi	r28, 0xA9	; 169
    110a:	d5 40       	sbci	r29, 0x05	; 5
    110c:	20 9e       	mul	r2, r16
    110e:	d0 01       	movw	r26, r0
    1110:	21 9e       	mul	r2, r17
    1112:	b0 0d       	add	r27, r0
    1114:	11 24       	eor	r1, r1
    1116:	51 30       	cpi	r21, 0x01	; 1
    1118:	f9 f4       	brne	.+62     	; 0x1158 <modbusRead()+0x1b6>
    111a:	a6 50       	subi	r26, 0x06	; 6
    111c:	bd 4f       	sbci	r27, 0xFD	; 253
    111e:	8d 91       	ld	r24, X+
    1120:	9c 91       	ld	r25, X
    1122:	11 97       	sbiw	r26, 0x01	; 1
    1124:	9c 01       	movw	r18, r24
    1126:	2f 5f       	subi	r18, 0xFF	; 255
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	2d 93       	st	X+, r18
    112c:	3c 93       	st	X, r19
    112e:	a6 e5       	ldi	r26, 0x56	; 86
    1130:	a0 9f       	mul	r26, r16
    1132:	f0 01       	movw	r30, r0
    1134:	a1 9f       	mul	r26, r17
    1136:	f0 0d       	add	r31, r0
    1138:	11 24       	eor	r1, r1
    113a:	e8 0f       	add	r30, r24
    113c:	f9 1f       	adc	r31, r25
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	ee 55       	subi	r30, 0x5E	; 94
    1144:	fd 4f       	sbci	r31, 0xFD	; 253
    1146:	51 82       	std	Z+1, r5	; 0x01
    1148:	40 82       	st	Z, r4
    114a:	ef ef       	ldi	r30, 0xFF	; 255
    114c:	ce 1a       	sub	r12, r30
    114e:	de 0a       	sbc	r13, r30
    1150:	f6 e0       	ldi	r31, 0x06	; 6
    1152:	ef 0e       	add	r14, r31
    1154:	f1 1c       	adc	r15, r1
    1156:	62 cf       	rjmp	.-316    	; 0x101c <modbusRead()+0x7a>
    1158:	a4 50       	subi	r26, 0x04	; 4
    115a:	bd 4f       	sbci	r27, 0xFD	; 253
    115c:	8d 91       	ld	r24, X+
    115e:	9c 91       	ld	r25, X
    1160:	11 97       	sbiw	r26, 0x01	; 1
    1162:	9c 01       	movw	r18, r24
    1164:	2f 5f       	subi	r18, 0xFF	; 255
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	2d 93       	st	X+, r18
    116a:	3c 93       	st	X, r19
    116c:	b6 e5       	ldi	r27, 0x56	; 86
    116e:	b0 9f       	mul	r27, r16
    1170:	f0 01       	movw	r30, r0
    1172:	b1 9f       	mul	r27, r17
    1174:	f0 0d       	add	r31, r0
    1176:	11 24       	eor	r1, r1
    1178:	e8 0f       	add	r30, r24
    117a:	f9 1f       	adc	r31, r25
    117c:	ee 0f       	add	r30, r30
    117e:	ff 1f       	adc	r31, r31
    1180:	ee 57       	subi	r30, 0x7E	; 126
    1182:	fd 4f       	sbci	r31, 0xFD	; 253
    1184:	e0 cf       	rjmp	.-64     	; 0x1146 <modbusRead()+0x1a4>
    1186:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    118a:	65 eb       	ldi	r22, 0xB5	; 181
    118c:	76 e1       	ldi	r23, 0x16	; 22
    118e:	5b 01       	movw	r10, r22
    1190:	ac ea       	ldi	r26, 0xAC	; 172
    1192:	9a 2e       	mov	r9, r26
    1194:	d5 01       	movw	r26, r10
    1196:	0d 90       	ld	r0, X+
    1198:	00 20       	and	r0, r0
    119a:	e9 f7       	brne	.-6      	; 0x1196 <modbusRead()+0x1f4>
    119c:	cd 01       	movw	r24, r26
    119e:	86 5b       	subi	r24, 0xB6	; 182
    11a0:	96 41       	sbci	r25, 0x16	; 22
    11a2:	9b 01       	movw	r18, r22
    11a4:	25 5b       	subi	r18, 0xB5	; 181
    11a6:	36 41       	sbci	r19, 0x16	; 22
    11a8:	28 17       	cp	r18, r24
    11aa:	39 07       	cpc	r19, r25
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <modbusRead()+0x20e>
    11ae:	86 c0       	rjmp	.+268    	; 0x12bc <modbusRead()+0x31a>
    11b0:	fb 01       	movw	r30, r22
    11b2:	81 91       	ld	r24, Z+
    11b4:	bf 01       	movw	r22, r30
    11b6:	08 2e       	mov	r0, r24
    11b8:	00 0c       	add	r0, r0
    11ba:	99 0b       	sbc	r25, r25
    11bc:	98 9e       	mul	r9, r24
    11be:	70 01       	movw	r14, r0
    11c0:	99 9e       	mul	r9, r25
    11c2:	f0 0c       	add	r15, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	f7 01       	movw	r30, r14
    11c8:	ee 57       	subi	r30, 0x7E	; 126
    11ca:	fd 4f       	sbci	r31, 0xFD	; 253
    11cc:	df 01       	movw	r26, r30
    11ce:	a8 58       	subi	r26, 0x88	; 136
    11d0:	bf 4f       	sbci	r27, 0xFF	; 255
    11d2:	0d 91       	ld	r16, X+
    11d4:	1c 91       	ld	r17, X
    11d6:	11 97       	sbiw	r26, 0x01	; 1
    11d8:	10 16       	cp	r1, r16
    11da:	11 06       	cpc	r1, r17
    11dc:	74 f5       	brge	.+92     	; 0x123a <modbusRead()+0x298>
    11de:	20 a1       	ldd	r18, Z+32	; 0x20
    11e0:	31 a1       	ldd	r19, Z+33	; 0x21
    11e2:	d4 97       	sbiw	r26, 0x34	; 52
    11e4:	11 96       	adiw	r26, 0x01	; 1
    11e6:	3c 93       	st	X, r19
    11e8:	2e 93       	st	-X, r18
    11ea:	ea 5b       	subi	r30, 0xBA	; 186
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	31 83       	std	Z+1, r19	; 0x01
    11f0:	20 83       	st	Z, r18
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3f 01       	movw	r6, r30
    11f8:	02 17       	cp	r16, r18
    11fa:	13 07       	cpc	r17, r19
    11fc:	f1 f0       	breq	.+60     	; 0x123a <modbusRead()+0x298>
    11fe:	a9 01       	movw	r20, r18
    1200:	44 0f       	add	r20, r20
    1202:	55 1f       	adc	r21, r21
    1204:	4e 0d       	add	r20, r14
    1206:	5f 1d       	adc	r21, r15
    1208:	4e 57       	subi	r20, 0x7E	; 126
    120a:	5d 4f       	sbci	r21, 0xFD	; 253
    120c:	fa 01       	movw	r30, r20
    120e:	40 a1       	ldd	r20, Z+32	; 0x20
    1210:	51 a1       	ldd	r21, Z+33	; 0x21
    1212:	cd 90       	ld	r12, X+
    1214:	dc 90       	ld	r13, X
    1216:	11 97       	sbiw	r26, 0x01	; 1
    1218:	4c 15       	cp	r20, r12
    121a:	5d 05       	cpc	r21, r13
    121c:	18 f4       	brcc	.+6      	; 0x1224 <modbusRead()+0x282>
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	5c 93       	st	X, r21
    1222:	4e 93       	st	-X, r20
    1224:	f3 01       	movw	r30, r6
    1226:	c0 80       	ld	r12, Z
    1228:	d1 80       	ldd	r13, Z+1	; 0x01
    122a:	c4 16       	cp	r12, r20
    122c:	d5 06       	cpc	r13, r21
    122e:	10 f4       	brcc	.+4      	; 0x1234 <modbusRead()+0x292>
    1230:	51 83       	std	Z+1, r21	; 0x01
    1232:	40 83       	st	Z, r20
    1234:	2f 5f       	subi	r18, 0xFF	; 255
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	df cf       	rjmp	.-66     	; 0x11f8 <modbusRead()+0x256>
    123a:	98 9e       	mul	r9, r24
    123c:	a0 01       	movw	r20, r0
    123e:	99 9e       	mul	r9, r25
    1240:	50 0d       	add	r21, r0
    1242:	11 24       	eor	r1, r1
    1244:	fa 01       	movw	r30, r20
    1246:	ee 57       	subi	r30, 0x7E	; 126
    1248:	fd 4f       	sbci	r31, 0xFD	; 253
    124a:	df 01       	movw	r26, r30
    124c:	a6 58       	subi	r26, 0x86	; 134
    124e:	bf 4f       	sbci	r27, 0xFF	; 255
    1250:	0d 91       	ld	r16, X+
    1252:	1c 91       	ld	r17, X
    1254:	11 97       	sbiw	r26, 0x01	; 1
    1256:	10 16       	cp	r1, r16
    1258:	11 06       	cpc	r1, r17
    125a:	0c f0       	brlt	.+2      	; 0x125e <modbusRead()+0x2bc>
    125c:	9b cf       	rjmp	.-202    	; 0x1194 <modbusRead()+0x1f2>
    125e:	80 81       	ld	r24, Z
    1260:	91 81       	ldd	r25, Z+1	; 0x01
    1262:	da 97       	sbiw	r26, 0x3a	; 58
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	9c 93       	st	X, r25
    1268:	8e 93       	st	-X, r24
    126a:	ee 5b       	subi	r30, 0xBE	; 190
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	91 83       	std	Z+1, r25	; 0x01
    1270:	80 83       	st	Z, r24
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	6f 01       	movw	r12, r30
    1278:	02 17       	cp	r16, r18
    127a:	13 07       	cpc	r17, r19
    127c:	09 f4       	brne	.+2      	; 0x1280 <modbusRead()+0x2de>
    127e:	8a cf       	rjmp	.-236    	; 0x1194 <modbusRead()+0x1f2>
    1280:	c9 01       	movw	r24, r18
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	84 0f       	add	r24, r20
    1288:	95 1f       	adc	r25, r21
    128a:	8e 57       	subi	r24, 0x7E	; 126
    128c:	9d 4f       	sbci	r25, 0xFD	; 253
    128e:	fc 01       	movw	r30, r24
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	ed 90       	ld	r14, X+
    1296:	fc 90       	ld	r15, X
    1298:	11 97       	sbiw	r26, 0x01	; 1
    129a:	8e 15       	cp	r24, r14
    129c:	9f 05       	cpc	r25, r15
    129e:	18 f4       	brcc	.+6      	; 0x12a6 <modbusRead()+0x304>
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	9c 93       	st	X, r25
    12a4:	8e 93       	st	-X, r24
    12a6:	f6 01       	movw	r30, r12
    12a8:	e0 80       	ld	r14, Z
    12aa:	f1 80       	ldd	r15, Z+1	; 0x01
    12ac:	e8 16       	cp	r14, r24
    12ae:	f9 06       	cpc	r15, r25
    12b0:	10 f4       	brcc	.+4      	; 0x12b6 <modbusRead()+0x314>
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	80 83       	st	Z, r24
    12b6:	2f 5f       	subi	r18, 0xFF	; 255
    12b8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ba:	de cf       	rjmp	.-68     	; 0x1278 <modbusRead()+0x2d6>
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 93 b4 16 	sts	0x16B4, r24	; 0x8016b4 <slaveSetupCheck>
    12c2:	05 eb       	ldi	r16, 0xB5	; 181
    12c4:	16 e1       	ldi	r17, 0x16	; 22
    12c6:	28 01       	movw	r4, r16
    12c8:	6c ea       	ldi	r22, 0xAC	; 172
    12ca:	76 2e       	mov	r7, r22
    12cc:	71 ea       	ldi	r23, 0xA1	; 161
    12ce:	87 2e       	mov	r8, r23
    12d0:	75 e0       	ldi	r23, 0x05	; 5
    12d2:	97 2e       	mov	r9, r23
    12d4:	8c 0e       	add	r8, r28
    12d6:	9d 1e       	adc	r9, r29
    12d8:	f6 e0       	ldi	r31, 0x06	; 6
    12da:	8f 0e       	add	r8, r31
    12dc:	91 1c       	adc	r9, r1
    12de:	e0 e3       	ldi	r30, 0x30	; 48
    12e0:	6e 2e       	mov	r6, r30
    12e2:	aa 24       	eor	r10, r10
    12e4:	a3 94       	inc	r10
    12e6:	b1 2c       	mov	r11, r1
    12e8:	d2 01       	movw	r26, r4
    12ea:	0d 90       	ld	r0, X+
    12ec:	00 20       	and	r0, r0
    12ee:	e9 f7       	brne	.-6      	; 0x12ea <modbusRead()+0x348>
    12f0:	cd 01       	movw	r24, r26
    12f2:	86 5b       	subi	r24, 0xB6	; 182
    12f4:	96 41       	sbci	r25, 0x16	; 22
    12f6:	98 01       	movw	r18, r16
    12f8:	25 5b       	subi	r18, 0xB5	; 181
    12fa:	36 41       	sbci	r19, 0x16	; 22
    12fc:	28 17       	cp	r18, r24
    12fe:	39 07       	cpc	r19, r25
    1300:	08 f0       	brcs	.+2      	; 0x1304 <modbusRead()+0x362>
    1302:	29 c1       	rjmp	.+594    	; 0x1556 <modbusRead()+0x5b4>
    1304:	f8 01       	movw	r30, r16
    1306:	20 81       	ld	r18, Z
    1308:	37 2d       	mov	r19, r7
    130a:	23 03       	mulsu	r18, r19
    130c:	c0 01       	movw	r24, r0
    130e:	11 24       	eor	r1, r1
    1310:	8e 57       	subi	r24, 0x7E	; 126
    1312:	9d 4f       	sbci	r25, 0xFD	; 253
    1314:	fc 01       	movw	r30, r24
    1316:	e8 58       	subi	r30, 0x88	; 136
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	40 81       	ld	r20, Z
    131c:	51 81       	ldd	r21, Z+1	; 0x01
    131e:	14 16       	cp	r1, r20
    1320:	15 06       	cpc	r1, r21
    1322:	0c f0       	brlt	.+2      	; 0x1326 <modbusRead()+0x384>
    1324:	8c c0       	rjmp	.+280    	; 0x143e <modbusRead()+0x49c>
    1326:	d4 01       	movw	r26, r8
    1328:	1d 92       	st	X+, r1
    132a:	1c 92       	st	X, r1
    132c:	cf 55       	subi	r28, 0x5F	; 95
    132e:	da 4f       	sbci	r29, 0xFA	; 250
    1330:	28 83       	st	Y, r18
    1332:	c1 5a       	subi	r28, 0xA1	; 161
    1334:	d5 40       	sbci	r29, 0x05	; 5
    1336:	22 e0       	ldi	r18, 0x02	; 2
    1338:	ce 55       	subi	r28, 0x5E	; 94
    133a:	da 4f       	sbci	r29, 0xFA	; 250
    133c:	28 83       	st	Y, r18
    133e:	c2 5a       	subi	r28, 0xA2	; 162
    1340:	d5 40       	sbci	r29, 0x05	; 5
    1342:	f4 97       	sbiw	r30, 0x34	; 52
    1344:	20 81       	ld	r18, Z
    1346:	31 81       	ldd	r19, Z+1	; 0x01
    1348:	cd 55       	subi	r28, 0x5D	; 93
    134a:	da 4f       	sbci	r29, 0xFA	; 250
    134c:	38 83       	st	Y, r19
    134e:	c3 5a       	subi	r28, 0xA3	; 163
    1350:	d5 40       	sbci	r29, 0x05	; 5
    1352:	cc 55       	subi	r28, 0x5C	; 92
    1354:	da 4f       	sbci	r29, 0xFA	; 250
    1356:	28 83       	st	Y, r18
    1358:	c4 5a       	subi	r28, 0xA4	; 164
    135a:	d5 40       	sbci	r29, 0x05	; 5
    135c:	8a 5b       	subi	r24, 0xBA	; 186
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	fc 01       	movw	r30, r24
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	ac 01       	movw	r20, r24
    1368:	4f 5f       	subi	r20, 0xFF	; 255
    136a:	5f 4f       	sbci	r21, 0xFF	; 255
    136c:	42 1b       	sub	r20, r18
    136e:	53 0b       	sbc	r21, r19
    1370:	cb 55       	subi	r28, 0x5B	; 91
    1372:	da 4f       	sbci	r29, 0xFA	; 250
    1374:	58 83       	st	Y, r21
    1376:	c5 5a       	subi	r28, 0xA5	; 165
    1378:	d5 40       	sbci	r29, 0x05	; 5
    137a:	8f 5f       	subi	r24, 0xFF	; 255
    137c:	82 1b       	sub	r24, r18
    137e:	ca 55       	subi	r28, 0x5A	; 90
    1380:	da 4f       	sbci	r29, 0xFA	; 250
    1382:	88 83       	st	Y, r24
    1384:	c6 5a       	subi	r28, 0xA6	; 166
    1386:	d5 40       	sbci	r29, 0x05	; 5
    1388:	66 e0       	ldi	r22, 0x06	; 6
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	ce 01       	movw	r24, r28
    138e:	8f 55       	subi	r24, 0x5F	; 95
    1390:	9a 4f       	sbci	r25, 0xFA	; 250
    1392:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    1396:	c9 55       	subi	r28, 0x59	; 89
    1398:	da 4f       	sbci	r29, 0xFA	; 250
    139a:	88 83       	st	Y, r24
    139c:	c7 5a       	subi	r28, 0xA7	; 167
    139e:	d5 40       	sbci	r29, 0x05	; 5
    13a0:	c8 55       	subi	r28, 0x58	; 88
    13a2:	da 4f       	sbci	r29, 0xFA	; 250
    13a4:	98 83       	st	Y, r25
    13a6:	c8 5a       	subi	r28, 0xA8	; 168
    13a8:	d5 40       	sbci	r29, 0x05	; 5
    13aa:	48 e0       	ldi	r20, 0x08	; 8
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	be 01       	movw	r22, r28
    13b0:	6f 55       	subi	r22, 0x5F	; 95
    13b2:	7a 4f       	sbci	r23, 0xFA	; 250
    13b4:	85 ea       	ldi	r24, 0xA5	; 165
    13b6:	99 e1       	ldi	r25, 0x19	; 25
    13b8:	0e 94 3a 02 	call	0x474	; 0x474 <Print::write(char const*, unsigned int)>
    13bc:	0e 94 ab 07 	call	0xf56	; 0xf56 <slaveRead()>
    13c0:	60 91 e2 16 	lds	r22, 0x16E2	; 0x8016e2 <modBuffer+0x2>
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	7b 01       	movw	r14, r22
    13c8:	53 e0       	ldi	r21, 0x03	; 3
    13ca:	ee 0c       	add	r14, r14
    13cc:	ff 1c       	adc	r15, r15
    13ce:	5a 95       	dec	r21
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <modbusRead()+0x428>
    13d2:	e0 ee       	ldi	r30, 0xE0	; 224
    13d4:	f6 e1       	ldi	r31, 0x16	; 22
    13d6:	cf 01       	movw	r24, r30
    13d8:	80 5e       	subi	r24, 0xE0	; 224
    13da:	96 41       	sbci	r25, 0x16	; 22
    13dc:	86 17       	cp	r24, r22
    13de:	97 07       	cpc	r25, r23
    13e0:	74 f5       	brge	.+92     	; 0x143e <modbusRead()+0x49c>
    13e2:	d3 80       	ldd	r13, Z+3	; 0x03
    13e4:	d8 01       	movw	r26, r16
    13e6:	4c 91       	ld	r20, X
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	26 2d       	mov	r18, r6
    13ee:	42 03       	mulsu	r20, r18
    13f0:	a0 01       	movw	r20, r0
    13f2:	11 24       	eor	r1, r1
    13f4:	a1 e0       	ldi	r26, 0x01	; 1
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	ac 0f       	add	r26, r28
    13fa:	bd 1f       	adc	r27, r29
    13fc:	4a 0f       	add	r20, r26
    13fe:	5b 1f       	adc	r21, r27
    1400:	2d 2c       	mov	r2, r13
    1402:	dd 0c       	add	r13, r13
    1404:	33 08       	sbc	r3, r3
    1406:	8e 15       	cp	r24, r14
    1408:	9f 05       	cpc	r25, r15
    140a:	bc f4       	brge	.+46     	; 0x143a <modbusRead()+0x498>
    140c:	6a 01       	movw	r12, r20
    140e:	c8 0e       	add	r12, r24
    1410:	d9 1e       	adc	r13, r25
    1412:	95 01       	movw	r18, r10
    1414:	08 2e       	mov	r0, r24
    1416:	02 c0       	rjmp	.+4      	; 0x141c <modbusRead()+0x47a>
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <modbusRead()+0x476>
    1420:	22 21       	and	r18, r2
    1422:	33 21       	and	r19, r3
    1424:	08 2e       	mov	r0, r24
    1426:	02 c0       	rjmp	.+4      	; 0x142c <modbusRead()+0x48a>
    1428:	35 95       	asr	r19
    142a:	27 95       	ror	r18
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <modbusRead()+0x486>
    1430:	d6 01       	movw	r26, r12
    1432:	90 96       	adiw	r26, 0x20	; 32
    1434:	2c 93       	st	X, r18
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	e6 cf       	rjmp	.-52     	; 0x1406 <modbusRead()+0x464>
    143a:	31 96       	adiw	r30, 0x01	; 1
    143c:	cc cf       	rjmp	.-104    	; 0x13d6 <modbusRead()+0x434>
    143e:	f8 01       	movw	r30, r16
    1440:	20 81       	ld	r18, Z
    1442:	37 2d       	mov	r19, r7
    1444:	23 03       	mulsu	r18, r19
    1446:	c0 01       	movw	r24, r0
    1448:	11 24       	eor	r1, r1
    144a:	8e 57       	subi	r24, 0x7E	; 126
    144c:	9d 4f       	sbci	r25, 0xFD	; 253
    144e:	fc 01       	movw	r30, r24
    1450:	e6 58       	subi	r30, 0x86	; 134
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	40 81       	ld	r20, Z
    1456:	51 81       	ldd	r21, Z+1	; 0x01
    1458:	14 16       	cp	r1, r20
    145a:	15 06       	cpc	r1, r21
    145c:	0c f0       	brlt	.+2      	; 0x1460 <modbusRead()+0x4be>
    145e:	74 c0       	rjmp	.+232    	; 0x1548 <modbusRead()+0x5a6>
    1460:	d4 01       	movw	r26, r8
    1462:	1d 92       	st	X+, r1
    1464:	1c 92       	st	X, r1
    1466:	cf 55       	subi	r28, 0x5F	; 95
    1468:	da 4f       	sbci	r29, 0xFA	; 250
    146a:	28 83       	st	Y, r18
    146c:	c1 5a       	subi	r28, 0xA1	; 161
    146e:	d5 40       	sbci	r29, 0x05	; 5
    1470:	23 e0       	ldi	r18, 0x03	; 3
    1472:	ce 55       	subi	r28, 0x5E	; 94
    1474:	da 4f       	sbci	r29, 0xFA	; 250
    1476:	28 83       	st	Y, r18
    1478:	c2 5a       	subi	r28, 0xA2	; 162
    147a:	d5 40       	sbci	r29, 0x05	; 5
    147c:	fa 97       	sbiw	r30, 0x3a	; 58
    147e:	20 81       	ld	r18, Z
    1480:	31 81       	ldd	r19, Z+1	; 0x01
    1482:	cd 55       	subi	r28, 0x5D	; 93
    1484:	da 4f       	sbci	r29, 0xFA	; 250
    1486:	38 83       	st	Y, r19
    1488:	c3 5a       	subi	r28, 0xA3	; 163
    148a:	d5 40       	sbci	r29, 0x05	; 5
    148c:	cc 55       	subi	r28, 0x5C	; 92
    148e:	da 4f       	sbci	r29, 0xFA	; 250
    1490:	28 83       	st	Y, r18
    1492:	c4 5a       	subi	r28, 0xA4	; 164
    1494:	d5 40       	sbci	r29, 0x05	; 5
    1496:	8e 5b       	subi	r24, 0xBE	; 190
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	fc 01       	movw	r30, r24
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	ac 01       	movw	r20, r24
    14a2:	4f 5f       	subi	r20, 0xFF	; 255
    14a4:	5f 4f       	sbci	r21, 0xFF	; 255
    14a6:	42 1b       	sub	r20, r18
    14a8:	53 0b       	sbc	r21, r19
    14aa:	cb 55       	subi	r28, 0x5B	; 91
    14ac:	da 4f       	sbci	r29, 0xFA	; 250
    14ae:	58 83       	st	Y, r21
    14b0:	c5 5a       	subi	r28, 0xA5	; 165
    14b2:	d5 40       	sbci	r29, 0x05	; 5
    14b4:	8f 5f       	subi	r24, 0xFF	; 255
    14b6:	82 1b       	sub	r24, r18
    14b8:	ca 55       	subi	r28, 0x5A	; 90
    14ba:	da 4f       	sbci	r29, 0xFA	; 250
    14bc:	88 83       	st	Y, r24
    14be:	c6 5a       	subi	r28, 0xA6	; 166
    14c0:	d5 40       	sbci	r29, 0x05	; 5
    14c2:	66 e0       	ldi	r22, 0x06	; 6
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	ce 01       	movw	r24, r28
    14c8:	8f 55       	subi	r24, 0x5F	; 95
    14ca:	9a 4f       	sbci	r25, 0xFA	; 250
    14cc:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    14d0:	c9 55       	subi	r28, 0x59	; 89
    14d2:	da 4f       	sbci	r29, 0xFA	; 250
    14d4:	88 83       	st	Y, r24
    14d6:	c7 5a       	subi	r28, 0xA7	; 167
    14d8:	d5 40       	sbci	r29, 0x05	; 5
    14da:	c8 55       	subi	r28, 0x58	; 88
    14dc:	da 4f       	sbci	r29, 0xFA	; 250
    14de:	98 83       	st	Y, r25
    14e0:	c8 5a       	subi	r28, 0xA8	; 168
    14e2:	d5 40       	sbci	r29, 0x05	; 5
    14e4:	48 e0       	ldi	r20, 0x08	; 8
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	be 01       	movw	r22, r28
    14ea:	6f 55       	subi	r22, 0x5F	; 95
    14ec:	7a 4f       	sbci	r23, 0xFA	; 250
    14ee:	85 ea       	ldi	r24, 0xA5	; 165
    14f0:	99 e1       	ldi	r25, 0x19	; 25
    14f2:	0e 94 3a 02 	call	0x474	; 0x474 <Print::write(char const*, unsigned int)>
    14f6:	0e 94 ab 07 	call	0xf56	; 0xf56 <slaveRead()>
    14fa:	80 91 e2 16 	lds	r24, 0x16E2	; 0x8016e2 <modBuffer+0x2>
    14fe:	86 95       	lsr	r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 ee       	ldi	r26, 0xE0	; 224
    1504:	b6 e1       	ldi	r27, 0x16	; 22
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	68 e1       	ldi	r22, 0x18	; 24
    150c:	12 96       	adiw	r26, 0x02	; 2
    150e:	28 17       	cp	r18, r24
    1510:	39 07       	cpc	r19, r25
    1512:	d4 f4       	brge	.+52     	; 0x1548 <modbusRead()+0x5a6>
    1514:	f8 01       	movw	r30, r16
    1516:	40 81       	ld	r20, Z
    1518:	46 03       	mulsu	r20, r22
    151a:	f0 01       	movw	r30, r0
    151c:	11 24       	eor	r1, r1
    151e:	e2 0f       	add	r30, r18
    1520:	f3 1f       	adc	r31, r19
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	4c 0f       	add	r20, r28
    152c:	5d 1f       	adc	r21, r29
    152e:	e4 0f       	add	r30, r20
    1530:	f5 1f       	adc	r31, r21
    1532:	11 96       	adiw	r26, 0x01	; 1
    1534:	5c 91       	ld	r21, X
    1536:	11 97       	sbiw	r26, 0x01	; 1
    1538:	12 96       	adiw	r26, 0x02	; 2
    153a:	4c 91       	ld	r20, X
    153c:	12 97       	sbiw	r26, 0x02	; 2
    153e:	51 83       	std	Z+1, r21	; 0x01
    1540:	40 83       	st	Z, r20
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	e2 cf       	rjmp	.-60     	; 0x150c <modbusRead()+0x56a>
    1548:	8c e2       	ldi	r24, 0x2C	; 44
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1550:	0f 5f       	subi	r16, 0xFF	; 255
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	c9 ce       	rjmp	.-622    	; 0x12e8 <modbusRead()+0x346>
    1556:	0e 94 87 07 	call	0xf0e	; 0xf0e <clrmodBuffer()>
    155a:	8c e0       	ldi	r24, 0x0C	; 12
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	90 93 ab 16 	sts	0x16AB, r25	; 0x8016ab <msgPos+0x1>
    1562:	80 93 aa 16 	sts	0x16AA, r24	; 0x8016aa <msgPos>
    1566:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <transactionID>
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <transactionID>
    1570:	e2 e1       	ldi	r30, 0x12	; 18
    1572:	f7 e1       	ldi	r31, 0x17	; 23
    1574:	24 ef       	ldi	r18, 0xF4	; 244
    1576:	31 e0       	ldi	r19, 0x01	; 1
    1578:	df 01       	movw	r26, r30
    157a:	a9 01       	movw	r20, r18
    157c:	1d 92       	st	X+, r1
    157e:	41 50       	subi	r20, 0x01	; 1
    1580:	50 40       	sbci	r21, 0x00	; 0
    1582:	e1 f7       	brne	.-8      	; 0x157c <modbusRead()+0x5da>
    1584:	8f 01       	movw	r16, r30
    1586:	e6 ed       	ldi	r30, 0xD6	; 214
    1588:	f6 e1       	ldi	r31, 0x16	; 22
    158a:	af 01       	movw	r20, r30
    158c:	da 01       	movw	r26, r20
    158e:	0d 90       	ld	r0, X+
    1590:	00 20       	and	r0, r0
    1592:	e9 f7       	brne	.-6      	; 0x158e <modbusRead()+0x5ec>
    1594:	9d 01       	movw	r18, r26
    1596:	27 5d       	subi	r18, 0xD7	; 215
    1598:	36 41       	sbci	r19, 0x16	; 22
    159a:	bf 01       	movw	r22, r30
    159c:	66 5d       	subi	r22, 0xD6	; 214
    159e:	76 41       	sbci	r23, 0x16	; 22
    15a0:	62 17       	cp	r22, r18
    15a2:	73 07       	cpc	r23, r19
    15a4:	28 f4       	brcc	.+10     	; 0x15b0 <modbusRead()+0x60e>
    15a6:	91 91       	ld	r25, Z+
    15a8:	d8 01       	movw	r26, r16
    15aa:	9d 93       	st	X+, r25
    15ac:	8d 01       	movw	r16, r26
    15ae:	ee cf       	rjmp	.-36     	; 0x158c <modbusRead()+0x5ea>
    15b0:	80 93 1a 17 	sts	0x171A, r24	; 0x80171a <serverMessage+0x8>
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 1b 17 	sts	0x171B, r24	; 0x80171b <serverMessage+0x9>
    15ba:	85 eb       	ldi	r24, 0xB5	; 181
    15bc:	88 2e       	mov	r8, r24
    15be:	86 e1       	ldi	r24, 0x16	; 22
    15c0:	98 2e       	mov	r9, r24
    15c2:	f1 2c       	mov	r15, r1
    15c4:	e1 2c       	mov	r14, r1
    15c6:	51 2c       	mov	r5, r1
    15c8:	e5 eb       	ldi	r30, 0xB5	; 181
    15ca:	f6 e1       	ldi	r31, 0x16	; 22
    15cc:	01 90       	ld	r0, Z+
    15ce:	00 20       	and	r0, r0
    15d0:	e9 f7       	brne	.-6      	; 0x15cc <modbusRead()+0x62a>
    15d2:	cf 01       	movw	r24, r30
    15d4:	86 5b       	subi	r24, 0xB6	; 182
    15d6:	96 41       	sbci	r25, 0x16	; 22
    15d8:	94 01       	movw	r18, r8
    15da:	25 5b       	subi	r18, 0xB5	; 181
    15dc:	36 41       	sbci	r19, 0x16	; 22
    15de:	28 17       	cp	r18, r24
    15e0:	39 07       	cpc	r19, r25
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <modbusRead()+0x644>
    15e4:	ef c0       	rjmp	.+478    	; 0x17c4 <modbusRead()+0x822>
    15e6:	d4 01       	movw	r26, r8
    15e8:	4d 90       	ld	r4, X+
    15ea:	4d 01       	movw	r8, r26
    15ec:	c4 2c       	mov	r12, r4
    15ee:	04 2c       	mov	r0, r4
    15f0:	00 0c       	add	r0, r0
    15f2:	dd 08       	sbc	r13, r13
    15f4:	bc ea       	ldi	r27, 0xAC	; 172
    15f6:	bc 9d       	mul	r27, r12
    15f8:	90 01       	movw	r18, r0
    15fa:	bd 9d       	mul	r27, r13
    15fc:	30 0d       	add	r19, r0
    15fe:	11 24       	eor	r1, r1
    1600:	c9 01       	movw	r24, r18
    1602:	8e 57       	subi	r24, 0x7E	; 126
    1604:	9d 4f       	sbci	r25, 0xFD	; 253
    1606:	fc 01       	movw	r30, r24
    1608:	e8 58       	subi	r30, 0x88	; 136
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	a0 80       	ld	r10, Z
    160e:	b1 80       	ldd	r11, Z+1	; 0x01
    1610:	1a 14       	cp	r1, r10
    1612:	1b 04       	cpc	r1, r11
    1614:	0c f0       	brlt	.+2      	; 0x1618 <modbusRead()+0x676>
    1616:	67 c0       	rjmp	.+206    	; 0x16e6 <modbusRead()+0x744>
    1618:	f4 97       	sbiw	r30, 0x34	; 52
    161a:	00 81       	ld	r16, Z
    161c:	11 81       	ldd	r17, Z+1	; 0x01
    161e:	f9 01       	movw	r30, r18
    1620:	ee 55       	subi	r30, 0x5E	; 94
    1622:	fd 4f       	sbci	r31, 0xFD	; 253
    1624:	c7 55       	subi	r28, 0x57	; 87
    1626:	da 4f       	sbci	r29, 0xFA	; 250
    1628:	f9 83       	std	Y+1, r31	; 0x01
    162a:	e8 83       	st	Y, r30
    162c:	c9 5a       	subi	r28, 0xA9	; 169
    162e:	d5 40       	sbci	r29, 0x05	; 5
    1630:	8a 5b       	subi	r24, 0xBA	; 186
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	dc 01       	movw	r26, r24
    1636:	8d 91       	ld	r24, X+
    1638:	9c 91       	ld	r25, X
    163a:	fc 01       	movw	r30, r24
    163c:	31 96       	adiw	r30, 0x01	; 1
    163e:	c5 55       	subi	r28, 0x55	; 85
    1640:	da 4f       	sbci	r29, 0xFA	; 250
    1642:	f9 83       	std	Y+1, r31	; 0x01
    1644:	e8 83       	st	Y, r30
    1646:	cb 5a       	subi	r28, 0xAB	; 171
    1648:	d5 40       	sbci	r29, 0x05	; 5
    164a:	f4 2d       	mov	r31, r4
    164c:	40 e3       	ldi	r20, 0x30	; 48
    164e:	f4 02       	muls	r31, r20
    1650:	30 01       	movw	r6, r0
    1652:	11 24       	eor	r1, r1
    1654:	60 1a       	sub	r6, r16
    1656:	71 0a       	sbc	r7, r17
    1658:	19 01       	movw	r2, r18
    165a:	20 1a       	sub	r2, r16
    165c:	31 0a       	sbc	r3, r17
    165e:	c5 55       	subi	r28, 0x55	; 85
    1660:	da 4f       	sbci	r29, 0xFA	; 250
    1662:	88 81       	ld	r24, Y
    1664:	99 81       	ldd	r25, Y+1	; 0x01
    1666:	cb 5a       	subi	r28, 0xAB	; 171
    1668:	d5 40       	sbci	r29, 0x05	; 5
    166a:	80 17       	cp	r24, r16
    166c:	91 07       	cpc	r25, r17
    166e:	d9 f1       	breq	.+118    	; 0x16e6 <modbusRead()+0x744>
    1670:	a5 01       	movw	r20, r10
    1672:	b8 01       	movw	r22, r16
    1674:	c7 55       	subi	r28, 0x57	; 87
    1676:	da 4f       	sbci	r29, 0xFA	; 250
    1678:	88 81       	ld	r24, Y
    167a:	99 81       	ldd	r25, Y+1	; 0x01
    167c:	c9 5a       	subi	r28, 0xA9	; 169
    167e:	d5 40       	sbci	r29, 0x05	; 5
    1680:	0e 94 8f 07 	call	0xf1e	; 0xf1e <arraycheck(unsigned short*, short, int)>
    1684:	88 23       	and	r24, r24
    1686:	51 f1       	breq	.+84     	; 0x16dc <modbusRead()+0x73a>
    1688:	f8 01       	movw	r30, r16
    168a:	e6 0d       	add	r30, r6
    168c:	f7 1d       	adc	r31, r7
    168e:	a1 e0       	ldi	r26, 0x01	; 1
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ac 0f       	add	r26, r28
    1694:	bd 1f       	adc	r27, r29
    1696:	ea 0f       	add	r30, r26
    1698:	fb 1f       	adc	r31, r27
    169a:	20 a1       	ldd	r18, Z+32	; 0x20
    169c:	d1 01       	movw	r26, r2
    169e:	a0 0f       	add	r26, r16
    16a0:	b1 1f       	adc	r27, r17
    16a2:	a6 53       	subi	r26, 0x36	; 54
    16a4:	bd 4f       	sbci	r27, 0xFD	; 253
    16a6:	9c 91       	ld	r25, X
    16a8:	58 2e       	mov	r5, r24
    16aa:	29 17       	cp	r18, r25
    16ac:	c9 f0       	breq	.+50     	; 0x16e0 <modbusRead()+0x73e>
    16ae:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <msgPos>
    16b2:	90 91 ab 16 	lds	r25, 0x16AB	; 0x8016ab <msgPos+0x1>
    16b6:	fc 01       	movw	r30, r24
    16b8:	ee 5e       	subi	r30, 0xEE	; 238
    16ba:	f8 4e       	sbci	r31, 0xE8	; 232
    16bc:	40 82       	st	Z, r4
    16be:	11 83       	std	Z+1, r17	; 0x01
    16c0:	02 83       	std	Z+2, r16	; 0x02
    16c2:	13 82       	std	Z+3, r1	; 0x03
    16c4:	05 96       	adiw	r24, 0x05	; 5
    16c6:	90 93 ab 16 	sts	0x16AB, r25	; 0x8016ab <msgPos+0x1>
    16ca:	80 93 aa 16 	sts	0x16AA, r24	; 0x8016aa <msgPos>
    16ce:	24 83       	std	Z+4, r18	; 0x04
    16d0:	2c 93       	st	X, r18
    16d2:	bf ef       	ldi	r27, 0xFF	; 255
    16d4:	eb 1a       	sub	r14, r27
    16d6:	fb 0a       	sbc	r15, r27
    16d8:	51 2c       	mov	r5, r1
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <modbusRead()+0x73e>
    16dc:	55 20       	and	r5, r5
    16de:	c9 f3       	breq	.-14     	; 0x16d2 <modbusRead()+0x730>
    16e0:	0f 5f       	subi	r16, 0xFF	; 255
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	bc cf       	rjmp	.-136    	; 0x165e <modbusRead()+0x6bc>
    16e6:	ec ea       	ldi	r30, 0xAC	; 172
    16e8:	ec 9d       	mul	r30, r12
    16ea:	80 01       	movw	r16, r0
    16ec:	ed 9d       	mul	r30, r13
    16ee:	10 0d       	add	r17, r0
    16f0:	11 24       	eor	r1, r1
    16f2:	0e 57       	subi	r16, 0x7E	; 126
    16f4:	1d 4f       	sbci	r17, 0xFD	; 253
    16f6:	f8 01       	movw	r30, r16
    16f8:	e6 58       	subi	r30, 0x86	; 134
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	60 80       	ld	r6, Z
    16fe:	71 80       	ldd	r7, Z+1	; 0x01
    1700:	16 14       	cp	r1, r6
    1702:	17 04       	cpc	r1, r7
    1704:	0c f0       	brlt	.+2      	; 0x1708 <modbusRead()+0x766>
    1706:	60 cf       	rjmp	.-320    	; 0x15c8 <modbusRead()+0x626>
    1708:	fa 97       	sbiw	r30, 0x3a	; 58
    170a:	c0 80       	ld	r12, Z
    170c:	d1 80       	ldd	r13, Z+1	; 0x01
    170e:	32 96       	adiw	r30, 0x02	; 2
    1710:	20 80       	ld	r2, Z
    1712:	31 80       	ldd	r3, Z+1	; 0x01
    1714:	ff ef       	ldi	r31, 0xFF	; 255
    1716:	2f 1a       	sub	r2, r31
    1718:	3f 0a       	sbc	r3, r31
    171a:	34 2d       	mov	r19, r4
    171c:	20 e3       	ldi	r18, 0x30	; 48
    171e:	32 02       	muls	r19, r18
    1720:	90 01       	movw	r18, r0
    1722:	11 24       	eor	r1, r1
    1724:	c7 55       	subi	r28, 0x57	; 87
    1726:	da 4f       	sbci	r29, 0xFA	; 250
    1728:	39 83       	std	Y+1, r19	; 0x01
    172a:	28 83       	st	Y, r18
    172c:	c9 5a       	subi	r28, 0xA9	; 169
    172e:	d5 40       	sbci	r29, 0x05	; 5
    1730:	b1 2c       	mov	r11, r1
    1732:	a1 2c       	mov	r10, r1
    1734:	c2 14       	cp	r12, r2
    1736:	d3 04       	cpc	r13, r3
    1738:	09 f4       	brne	.+2      	; 0x173c <modbusRead()+0x79a>
    173a:	46 cf       	rjmp	.-372    	; 0x15c8 <modbusRead()+0x626>
    173c:	a3 01       	movw	r20, r6
    173e:	b6 01       	movw	r22, r12
    1740:	c8 01       	movw	r24, r16
    1742:	0e 94 8f 07 	call	0xf1e	; 0xf1e <arraycheck(unsigned short*, short, int)>
    1746:	88 23       	and	r24, r24
    1748:	a1 f1       	breq	.+104    	; 0x17b2 <modbusRead()+0x810>
    174a:	c7 55       	subi	r28, 0x57	; 87
    174c:	da 4f       	sbci	r29, 0xFA	; 250
    174e:	e8 81       	ld	r30, Y
    1750:	f9 81       	ldd	r31, Y+1	; 0x01
    1752:	c9 5a       	subi	r28, 0xA9	; 169
    1754:	d5 40       	sbci	r29, 0x05	; 5
    1756:	ea 0d       	add	r30, r10
    1758:	fb 1d       	adc	r31, r11
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	4c 0f       	add	r20, r28
    1760:	5d 1f       	adc	r21, r29
    1762:	e4 0f       	add	r30, r20
    1764:	f5 1f       	adc	r31, r21
    1766:	20 81       	ld	r18, Z
    1768:	31 81       	ldd	r19, Z+1	; 0x01
    176a:	d5 01       	movw	r26, r10
    176c:	a8 5a       	subi	r26, 0xA8	; 168
    176e:	bf 4f       	sbci	r27, 0xFF	; 255
    1770:	a0 0f       	add	r26, r16
    1772:	b1 1f       	adc	r27, r17
    1774:	4d 91       	ld	r20, X+
    1776:	5c 91       	ld	r21, X
    1778:	11 97       	sbiw	r26, 0x01	; 1
    177a:	58 2e       	mov	r5, r24
    177c:	24 17       	cp	r18, r20
    177e:	35 07       	cpc	r19, r21
    1780:	d1 f0       	breq	.+52     	; 0x17b6 <modbusRead()+0x814>
    1782:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <msgPos>
    1786:	90 91 ab 16 	lds	r25, 0x16AB	; 0x8016ab <msgPos+0x1>
    178a:	fc 01       	movw	r30, r24
    178c:	ee 5e       	subi	r30, 0xEE	; 238
    178e:	f8 4e       	sbci	r31, 0xE8	; 232
    1790:	40 82       	st	Z, r4
    1792:	d1 82       	std	Z+1, r13	; 0x01
    1794:	c2 82       	std	Z+2, r12	; 0x02
    1796:	33 83       	std	Z+3, r19	; 0x03
    1798:	05 96       	adiw	r24, 0x05	; 5
    179a:	90 93 ab 16 	sts	0x16AB, r25	; 0x8016ab <msgPos+0x1>
    179e:	80 93 aa 16 	sts	0x16AA, r24	; 0x8016aa <msgPos>
    17a2:	24 83       	std	Z+4, r18	; 0x04
    17a4:	2d 93       	st	X+, r18
    17a6:	3c 93       	st	X, r19
    17a8:	5f ef       	ldi	r21, 0xFF	; 255
    17aa:	e5 1a       	sub	r14, r21
    17ac:	f5 0a       	sbc	r15, r21
    17ae:	51 2c       	mov	r5, r1
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <modbusRead()+0x814>
    17b2:	55 20       	and	r5, r5
    17b4:	c9 f3       	breq	.-14     	; 0x17a8 <modbusRead()+0x806>
    17b6:	8f ef       	ldi	r24, 0xFF	; 255
    17b8:	c8 1a       	sub	r12, r24
    17ba:	d8 0a       	sbc	r13, r24
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	a9 0e       	add	r10, r25
    17c0:	b1 1c       	adc	r11, r1
    17c2:	b8 cf       	rjmp	.-144    	; 0x1734 <modbusRead()+0x792>
    17c4:	1e 14       	cp	r1, r14
    17c6:	1f 04       	cpc	r1, r15
    17c8:	e4 f5       	brge	.+120    	; 0x1842 <modbusRead()+0x8a0>
    17ca:	f0 92 1c 17 	sts	0x171C, r15	; 0x80171c <serverMessage+0xa>
    17ce:	e0 92 1d 17 	sts	0x171D, r14	; 0x80171d <serverMessage+0xb>
    17d2:	00 91 aa 16 	lds	r16, 0x16AA	; 0x8016aa <msgPos>
    17d6:	10 91 ab 16 	lds	r17, 0x16AB	; 0x8016ab <msgPos+0x1>
    17da:	b8 01       	movw	r22, r16
    17dc:	82 e1       	ldi	r24, 0x12	; 18
    17de:	97 e1       	ldi	r25, 0x17	; 23
    17e0:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    17e4:	f8 01       	movw	r30, r16
    17e6:	ee 5e       	subi	r30, 0xEE	; 238
    17e8:	f8 4e       	sbci	r31, 0xE8	; 232
    17ea:	90 83       	st	Z, r25
    17ec:	0f 5f       	subi	r16, 0xFF	; 255
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	10 93 ab 16 	sts	0x16AB, r17	; 0x8016ab <msgPos+0x1>
    17f4:	00 93 aa 16 	sts	0x16AA, r16	; 0x8016aa <msgPos>
    17f8:	0e 5e       	subi	r16, 0xEE	; 238
    17fa:	18 4e       	sbci	r17, 0xE8	; 232
    17fc:	80 95       	com	r24
    17fe:	d8 01       	movw	r26, r16
    1800:	8c 93       	st	X, r24
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	90 93 b3 16 	sts	0x16B3, r25	; 0x8016b3 <state+0x1>
    180a:	80 93 b2 16 	sts	0x16B2, r24	; 0x8016b2 <state>
    180e:	c4 55       	subi	r28, 0x54	; 84
    1810:	da 4f       	sbci	r29, 0xFA	; 250
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	df 90       	pop	r13
    182a:	cf 90       	pop	r12
    182c:	bf 90       	pop	r11
    182e:	af 90       	pop	r10
    1830:	9f 90       	pop	r9
    1832:	8f 90       	pop	r8
    1834:	7f 90       	pop	r7
    1836:	6f 90       	pop	r6
    1838:	5f 90       	pop	r5
    183a:	4f 90       	pop	r4
    183c:	3f 90       	pop	r3
    183e:	2f 90       	pop	r2
    1840:	08 95       	ret
    1842:	8a e0       	ldi	r24, 0x0A	; 10
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	90 93 ab 16 	sts	0x16AB, r25	; 0x8016ab <msgPos+0x1>
    184a:	80 93 aa 16 	sts	0x16AA, r24	; 0x8016aa <msgPos>
    184e:	10 92 1b 17 	sts	0x171B, r1	; 0x80171b <serverMessage+0x9>
    1852:	6a e0       	ldi	r22, 0x0A	; 10
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	82 e1       	ldi	r24, 0x12	; 18
    1858:	97 e1       	ldi	r25, 0x17	; 23
    185a:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    185e:	90 93 1c 17 	sts	0x171C, r25	; 0x80171c <serverMessage+0xa>
    1862:	2b e0       	ldi	r18, 0x0B	; 11
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	30 93 ab 16 	sts	0x16AB, r19	; 0x8016ab <msgPos+0x1>
    186a:	20 93 aa 16 	sts	0x16AA, r18	; 0x8016aa <msgPos>
    186e:	80 93 1d 17 	sts	0x171D, r24	; 0x80171d <serverMessage+0xb>
    1872:	c7 cf       	rjmp	.-114    	; 0x1802 <modbusRead()+0x860>

00001874 <OKcomcheck(int)>:
_Z10OKcomchecki():
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1880:	88 e0       	ldi	r24, 0x08	; 8
    1882:	99 e1       	ldi	r25, 0x19	; 25
    1884:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
    1888:	89 2b       	or	r24, r25
    188a:	b9 f0       	breq	.+46     	; 0x18ba <OKcomcheck(int)+0x46>
    188c:	88 e0       	ldi	r24, 0x08	; 8
    188e:	99 e1       	ldi	r25, 0x19	; 25
    1890:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
    1894:	8c 01       	movw	r16, r24
    1896:	d0 e0       	ldi	r29, 0x00	; 0
    1898:	c0 e0       	ldi	r28, 0x00	; 0
    189a:	c0 17       	cp	r28, r16
    189c:	d1 07       	cpc	r29, r17
    189e:	6c f4       	brge	.+26     	; 0x18ba <OKcomcheck(int)+0x46>
    18a0:	88 e0       	ldi	r24, 0x08	; 8
    18a2:	99 e1       	ldi	r25, 0x19	; 25
    18a4:	0e 94 3b 11 	call	0x2276	; 0x2276 <HardwareSerial::read()>
    18a8:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
    18ac:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
    18b0:	ec 0f       	add	r30, r28
    18b2:	fd 1f       	adc	r31, r29
    18b4:	80 83       	st	Z, r24
    18b6:	21 96       	adiw	r28, 0x01	; 1
    18b8:	f0 cf       	rjmp	.-32     	; 0x189a <OKcomcheck(int)+0x26>
    18ba:	6d e3       	ldi	r22, 0x3D	; 61
    18bc:	72 e0       	ldi	r23, 0x02	; 2
    18be:	80 91 06 19 	lds	r24, 0x1906	; 0x801906 <simBuffer>
    18c2:	90 91 07 19 	lds	r25, 0x1907	; 0x801907 <simBuffer+0x1>
    18c6:	0e 94 44 18 	call	0x3088	; 0x3088 <strstr>
    18ca:	ec 01       	movw	r28, r24
    18cc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	cd 2b       	or	r28, r29
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <OKcomcheck(int)+0x64>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	08 95       	ret

000018e2 <simRead()>:
_Z7simReadv():
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	84 ef       	ldi	r24, 0xF4	; 244
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    18f2:	88 e0       	ldi	r24, 0x08	; 8
    18f4:	99 e1       	ldi	r25, 0x19	; 25
    18f6:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
    18fa:	89 2b       	or	r24, r25
    18fc:	b9 f0       	breq	.+46     	; 0x192c <simRead()+0x4a>
    18fe:	88 e0       	ldi	r24, 0x08	; 8
    1900:	99 e1       	ldi	r25, 0x19	; 25
    1902:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
    1906:	8c 01       	movw	r16, r24
    1908:	d0 e0       	ldi	r29, 0x00	; 0
    190a:	c0 e0       	ldi	r28, 0x00	; 0
    190c:	c0 17       	cp	r28, r16
    190e:	d1 07       	cpc	r29, r17
    1910:	84 f7       	brge	.-32     	; 0x18f2 <simRead()+0x10>
    1912:	88 e0       	ldi	r24, 0x08	; 8
    1914:	99 e1       	ldi	r25, 0x19	; 25
    1916:	0e 94 3b 11 	call	0x2276	; 0x2276 <HardwareSerial::read()>
    191a:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
    191e:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
    1922:	ec 0f       	add	r30, r28
    1924:	fd 1f       	adc	r31, r29
    1926:	80 83       	st	Z, r24
    1928:	21 96       	adiw	r28, 0x01	; 1
    192a:	f0 cf       	rjmp	.-32     	; 0x190c <simRead()+0x2a>
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <responseCheck(char*, unsigned int)>:
_Z13responseCheckPcj():
    1936:	6f 92       	push	r6
    1938:	7f 92       	push	r7
    193a:	8f 92       	push	r8
    193c:	9f 92       	push	r9
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	3c 01       	movw	r6, r24
    1954:	6b 01       	movw	r12, r22
    1956:	0e 94 72 14 	call	0x28e4	; 0x28e4 <millis>
    195a:	4b 01       	movw	r8, r22
    195c:	5c 01       	movw	r10, r24
    195e:	d0 e0       	ldi	r29, 0x00	; 0
    1960:	c0 e0       	ldi	r28, 0x00	; 0
    1962:	f1 2c       	mov	r15, r1
    1964:	e1 2c       	mov	r14, r1
    1966:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <simRead()>
    196a:	00 91 06 19 	lds	r16, 0x1906	; 0x801906 <simBuffer>
    196e:	10 91 07 19 	lds	r17, 0x1907	; 0x801907 <simBuffer+0x1>
    1972:	b3 01       	movw	r22, r6
    1974:	c8 01       	movw	r24, r16
    1976:	0e 94 44 18 	call	0x3088	; 0x3088 <strstr>
    197a:	89 2b       	or	r24, r25
    197c:	09 f4       	brne	.+2      	; 0x1980 <responseCheck(char*, unsigned int)+0x4a>
    197e:	64 c0       	rjmp	.+200    	; 0x1a48 <responseCheck(char*, unsigned int)+0x112>
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	81 e4       	ldi	r24, 0x41	; 65
    1984:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    1988:	8d e7       	ldi	r24, 0x7D	; 125
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	81 e4       	ldi	r24, 0x41	; 65
    1994:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    1998:	8d e7       	ldi	r24, 0x7D	; 125
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	81 e4       	ldi	r24, 0x41	; 65
    19a4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    19a8:	8d e7       	ldi	r24, 0x7D	; 125
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	81 e4       	ldi	r24, 0x41	; 65
    19b4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    19b8:	8d e7       	ldi	r24, 0x7D	; 125
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    19c0:	11 e0       	ldi	r17, 0x01	; 1
    19c2:	c1 e0       	ldi	r28, 0x01	; 1
    19c4:	d0 e0       	ldi	r29, 0x00	; 0
    19c6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <millis>
    19ca:	68 19       	sub	r22, r8
    19cc:	79 09       	sbc	r23, r9
    19ce:	8a 09       	sbc	r24, r10
    19d0:	9b 09       	sbc	r25, r11
    19d2:	c6 16       	cp	r12, r22
    19d4:	d7 06       	cpc	r13, r23
    19d6:	e8 06       	cpc	r14, r24
    19d8:	f9 06       	cpc	r15, r25
    19da:	18 f5       	brcc	.+70     	; 0x1a22 <responseCheck(char*, unsigned int)+0xec>
    19dc:	61 e0       	ldi	r22, 0x01	; 1
    19de:	82 e4       	ldi	r24, 0x42	; 66
    19e0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    19e4:	8d e7       	ldi	r24, 0x7D	; 125
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	82 e4       	ldi	r24, 0x42	; 66
    19f0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    19f4:	8d e7       	ldi	r24, 0x7D	; 125
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    19fc:	61 e0       	ldi	r22, 0x01	; 1
    19fe:	82 e4       	ldi	r24, 0x42	; 66
    1a00:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    1a04:	8d e7       	ldi	r24, 0x7D	; 125
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	82 e4       	ldi	r24, 0x42	; 66
    1a10:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    1a14:	8d e7       	ldi	r24, 0x7D	; 125
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1a1c:	d0 e0       	ldi	r29, 0x00	; 0
    1a1e:	c0 e0       	ldi	r28, 0x00	; 0
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <responseCheck(char*, unsigned int)+0xf2>
    1a22:	11 23       	and	r17, r17
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <responseCheck(char*, unsigned int)+0xf2>
    1a26:	9f cf       	rjmp	.-194    	; 0x1966 <responseCheck(char*, unsigned int)+0x30>
    1a28:	ce 01       	movw	r24, r28
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	cf 90       	pop	r12
    1a3a:	bf 90       	pop	r11
    1a3c:	af 90       	pop	r10
    1a3e:	9f 90       	pop	r9
    1a40:	8f 90       	pop	r8
    1a42:	7f 90       	pop	r7
    1a44:	6f 90       	pop	r6
    1a46:	08 95       	ret
    1a48:	60 e4       	ldi	r22, 0x40	; 64
    1a4a:	72 e0       	ldi	r23, 0x02	; 2
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	0e 94 44 18 	call	0x3088	; 0x3088 <strstr>
    1a52:	10 e0       	ldi	r17, 0x00	; 0
    1a54:	89 2b       	or	r24, r25
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <responseCheck(char*, unsigned int)+0x124>
    1a58:	b6 cf       	rjmp	.-148    	; 0x19c6 <responseCheck(char*, unsigned int)+0x90>
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	80 e4       	ldi	r24, 0x40	; 64
    1a5e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    1a62:	8d e7       	ldi	r24, 0x7D	; 125
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	80 e4       	ldi	r24, 0x40	; 64
    1a6e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    1a72:	8d e7       	ldi	r24, 0x7D	; 125
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	80 e4       	ldi	r24, 0x40	; 64
    1a7e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    1a82:	8d e7       	ldi	r24, 0x7D	; 125
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	80 e4       	ldi	r24, 0x40	; 64
    1a8e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
    1a92:	8d e7       	ldi	r24, 0x7D	; 125
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1a9a:	11 e0       	ldi	r17, 0x01	; 1
    1a9c:	c2 e0       	ldi	r28, 0x02	; 2
    1a9e:	d0 e0       	ldi	r29, 0x00	; 0
    1aa0:	92 cf       	rjmp	.-220    	; 0x19c6 <responseCheck(char*, unsigned int)+0x90>

00001aa2 <simSetup()>:
_Z8simSetupv():
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	c5 e0       	ldi	r28, 0x05	; 5
    1aaa:	d0 e0       	ldi	r29, 0x00	; 0
    1aac:	11 e0       	ldi	r17, 0x01	; 1
    1aae:	69 e1       	ldi	r22, 0x19	; 25
    1ab0:	72 e0       	ldi	r23, 0x02	; 2
    1ab2:	88 e0       	ldi	r24, 0x08	; 8
    1ab4:	99 e1       	ldi	r25, 0x19	; 25
    1ab6:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1aba:	8c e2       	ldi	r24, 0x2C	; 44
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	0e 94 3a 0c 	call	0x1874	; 0x1874 <OKcomcheck(int)>
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	10 e0       	ldi	r17, 0x00	; 0
    1ac6:	21 97       	sbiw	r28, 0x01	; 1
    1ac8:	91 f7       	brne	.-28     	; 0x1aae <simSetup()+0xc>
    1aca:	81 11       	cpse	r24, r1
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <simSetup()+0x30>
    1ace:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <simpow()>
    1ad2:	11 11       	cpse	r17, r1
    1ad4:	e9 cf       	rjmp	.-46     	; 0x1aa8 <simSetup()+0x6>
    1ad6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1ada:	62 e1       	ldi	r22, 0x12	; 18
    1adc:	72 e0       	ldi	r23, 0x02	; 2
    1ade:	88 e0       	ldi	r24, 0x08	; 8
    1ae0:	99 e1       	ldi	r25, 0x19	; 25
    1ae2:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1ae6:	60 e1       	ldi	r22, 0x10	; 16
    1ae8:	77 e2       	ldi	r23, 0x27	; 39
    1aea:	8d e3       	ldi	r24, 0x3D	; 61
    1aec:	92 e0       	ldi	r25, 0x02	; 2
    1aee:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1af2:	c0 91 06 19 	lds	r28, 0x1906	; 0x801906 <simBuffer>
    1af6:	d0 91 07 19 	lds	r29, 0x1907	; 0x801907 <simBuffer+0x1>
    1afa:	fe 01       	movw	r30, r28
    1afc:	a7 ed       	ldi	r26, 0xD7	; 215
    1afe:	b6 e1       	ldi	r27, 0x16	; 22
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	21 15       	cp	r18, r1
    1b06:	31 05       	cpc	r19, r1
    1b08:	21 f4       	brne	.+8      	; 0x1b12 <simSetup()+0x70>
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	80 53       	subi	r24, 0x30	; 48
    1b0e:	80 93 d6 16 	sts	0x16D6, r24	; 0x8016d6 <IMEI>
    1b12:	2f 5f       	subi	r18, 0xFF	; 255
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	82 85       	ldd	r24, Z+10	; 0x0a
    1b18:	82 95       	swap	r24
    1b1a:	80 7f       	andi	r24, 0xF0	; 240
    1b1c:	93 85       	ldd	r25, Z+11	; 0x0b
    1b1e:	90 53       	subi	r25, 0x30	; 48
    1b20:	89 2b       	or	r24, r25
    1b22:	8d 93       	st	X+, r24
    1b24:	32 96       	adiw	r30, 0x02	; 2
    1b26:	27 30       	cpi	r18, 0x07	; 7
    1b28:	31 05       	cpc	r19, r1
    1b2a:	61 f7       	brne	.-40     	; 0x1b04 <simSetup()+0x62>
    1b2c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1b30:	68 e0       	ldi	r22, 0x08	; 8
    1b32:	72 e0       	ldi	r23, 0x02	; 2
    1b34:	88 e0       	ldi	r24, 0x08	; 8
    1b36:	99 e1       	ldi	r25, 0x19	; 25
    1b38:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1b3c:	60 e1       	ldi	r22, 0x10	; 16
    1b3e:	77 e2       	ldi	r23, 0x27	; 39
    1b40:	86 e4       	ldi	r24, 0x46	; 70
    1b42:	92 e0       	ldi	r25, 0x02	; 2
    1b44:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1b48:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1b4c:	6c ee       	ldi	r22, 0xEC	; 236
    1b4e:	71 e0       	ldi	r23, 0x01	; 1
    1b50:	88 e0       	ldi	r24, 0x08	; 8
    1b52:	99 e1       	ldi	r25, 0x19	; 25
    1b54:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1b58:	60 e1       	ldi	r22, 0x10	; 16
    1b5a:	77 e2       	ldi	r23, 0x27	; 39
    1b5c:	8d e3       	ldi	r24, 0x3D	; 61
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	51 f1       	breq	.+84     	; 0x1bbc <simSetup()+0x11a>
    1b68:	62 ee       	ldi	r22, 0xE2	; 226
    1b6a:	71 e0       	ldi	r23, 0x01	; 1
    1b6c:	88 e0       	ldi	r24, 0x08	; 8
    1b6e:	99 e1       	ldi	r25, 0x19	; 25
    1b70:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1b74:	60 e1       	ldi	r22, 0x10	; 16
    1b76:	77 e2       	ldi	r23, 0x27	; 39
    1b78:	8d e3       	ldi	r24, 0x3D	; 61
    1b7a:	92 e0       	ldi	r25, 0x02	; 2
    1b7c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1b80:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1b84:	61 ec       	ldi	r22, 0xC1	; 193
    1b86:	71 e0       	ldi	r23, 0x01	; 1
    1b88:	88 e0       	ldi	r24, 0x08	; 8
    1b8a:	99 e1       	ldi	r25, 0x19	; 25
    1b8c:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1b90:	60 e1       	ldi	r22, 0x10	; 16
    1b92:	77 e2       	ldi	r23, 0x27	; 39
    1b94:	8d e3       	ldi	r24, 0x3D	; 61
    1b96:	92 e0       	ldi	r25, 0x02	; 2
    1b98:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1b9c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1ba0:	67 eb       	ldi	r22, 0xB7	; 183
    1ba2:	71 e0       	ldi	r23, 0x01	; 1
    1ba4:	88 e0       	ldi	r24, 0x08	; 8
    1ba6:	99 e1       	ldi	r25, 0x19	; 25
    1ba8:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1bac:	60 e1       	ldi	r22, 0x10	; 16
    1bae:	77 e2       	ldi	r23, 0x27	; 39
    1bb0:	8d e3       	ldi	r24, 0x3D	; 61
    1bb2:	92 e0       	ldi	r25, 0x02	; 2
    1bb4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1bb8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1bbc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1bc0:	6e ea       	ldi	r22, 0xAE	; 174
    1bc2:	71 e0       	ldi	r23, 0x01	; 1
    1bc4:	88 e0       	ldi	r24, 0x08	; 8
    1bc6:	99 e1       	ldi	r25, 0x19	; 25
    1bc8:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1bcc:	68 e8       	ldi	r22, 0x88	; 136
    1bce:	73 e1       	ldi	r23, 0x13	; 19
    1bd0:	8a e6       	ldi	r24, 0x6A	; 106
    1bd2:	92 e0       	ldi	r25, 0x02	; 2
    1bd4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	31 f0       	breq	.+12     	; 0x1be8 <simSetup()+0x146>
    1bdc:	68 e8       	ldi	r22, 0x88	; 136
    1bde:	73 e1       	ldi	r23, 0x13	; 19
    1be0:	88 e4       	ldi	r24, 0x48	; 72
    1be2:	92 e0       	ldi	r25, 0x02	; 2
    1be4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1be8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1bec:	64 ea       	ldi	r22, 0xA4	; 164
    1bee:	71 e0       	ldi	r23, 0x01	; 1
    1bf0:	88 e0       	ldi	r24, 0x08	; 8
    1bf2:	99 e1       	ldi	r25, 0x19	; 25
    1bf4:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1bf8:	60 e1       	ldi	r22, 0x10	; 16
    1bfa:	77 e2       	ldi	r23, 0x27	; 39
    1bfc:	8a e4       	ldi	r24, 0x4A	; 74
    1bfe:	92 e0       	ldi	r25, 0x02	; 2
    1c00:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1c04:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1c08:	6d e9       	ldi	r22, 0x9D	; 157
    1c0a:	71 e0       	ldi	r23, 0x01	; 1
    1c0c:	88 e0       	ldi	r24, 0x08	; 8
    1c0e:	99 e1       	ldi	r25, 0x19	; 25
    1c10:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1c14:	60 e1       	ldi	r22, 0x10	; 16
    1c16:	77 e2       	ldi	r23, 0x27	; 39
    1c18:	8d e3       	ldi	r24, 0x3D	; 61
    1c1a:	92 e0       	ldi	r25, 0x02	; 2
    1c1c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1c20:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
    1c24:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
    1c28:	87 81       	ldd	r24, Z+7	; 0x07
    1c2a:	80 93 d3 16 	sts	0x16D3, r24	; 0x8016d3 <CSQ>
    1c2e:	80 85       	ldd	r24, Z+8	; 0x08
    1c30:	80 93 d4 16 	sts	0x16D4, r24	; 0x8016d4 <CSQ+0x1>
    1c34:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1c38:	60 e9       	ldi	r22, 0x90	; 144
    1c3a:	71 e0       	ldi	r23, 0x01	; 1
    1c3c:	88 e0       	ldi	r24, 0x08	; 8
    1c3e:	99 e1       	ldi	r25, 0x19	; 25
    1c40:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1c44:	60 e1       	ldi	r22, 0x10	; 16
    1c46:	77 e2       	ldi	r23, 0x27	; 39
    1c48:	89 e5       	ldi	r24, 0x59	; 89
    1c4a:	92 e0       	ldi	r25, 0x02	; 2
    1c4c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1c50:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1c54:	66 e8       	ldi	r22, 0x86	; 134
    1c56:	71 e0       	ldi	r23, 0x01	; 1
    1c58:	88 e0       	ldi	r24, 0x08	; 8
    1c5a:	99 e1       	ldi	r25, 0x19	; 25
    1c5c:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1c60:	60 e1       	ldi	r22, 0x10	; 16
    1c62:	77 e2       	ldi	r23, 0x27	; 39
    1c64:	8d e3       	ldi	r24, 0x3D	; 61
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1c6c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
    1c70:	6c e5       	ldi	r22, 0x5C	; 92
    1c72:	71 e0       	ldi	r23, 0x01	; 1
    1c74:	88 e0       	ldi	r24, 0x08	; 8
    1c76:	99 e1       	ldi	r25, 0x19	; 25
    1c78:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
    1c7c:	60 e1       	ldi	r22, 0x10	; 16
    1c7e:	77 e2       	ldi	r23, 0x27	; 39
    1c80:	82 e6       	ldi	r24, 0x62	; 98
    1c82:	92 e0       	ldi	r25, 0x02	; 2
    1c84:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <clrsimBuffer()>

00001c92 <serverRead()>:
_Z10serverReadv():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:979
      simBuffer[i] = simSerial.read();
    }
  }
}

void serverRead() {
    1c92:	cf 92       	push	r12
    1c94:	df 92       	push	r13
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	c8 5e       	subi	r28, 0xE8	; 232
    1ca8:	d3 40       	sbci	r29, 0x03	; 3
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:985
  unsigned char buftemp[1000];
  int len;
  int start;
  int count = 0;

  millisDelay(300);
    1cb4:	8c e2       	ldi	r24, 0x2C	; 44
    1cb6:	91 e0       	ldi	r25, 0x01	; 1
    1cb8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
    1cbc:	8e 01       	movw	r16, r28
    1cbe:	0f 5f       	subi	r16, 0xFF	; 255
    1cc0:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:986
  while (simSerial.available()) {  // While data incomming: Read into buffer
    1cc2:	88 e0       	ldi	r24, 0x08	; 8
    1cc4:	99 e1       	ldi	r25, 0x19	; 25
    1cc6:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <serverRead()+0x3e>
    1cce:	42 c0       	rjmp	.+132    	; 0x1d54 <serverRead()+0xc2>
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	af 01       	movw	r20, r30
    1cd4:	40 1b       	sub	r20, r16
    1cd6:	51 0b       	sbc	r21, r17
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:993
    for (int i = 0; i < numBytes; i++) {
      buftemp[i] = simSerial.read();
    }
  }

  while (buftemp[count] != 44) {
    1cd8:	21 91       	ld	r18, Z+
    1cda:	2c 32       	cpi	r18, 0x2C	; 44
    1cdc:	d1 f7       	brne	.-12     	; 0x1cd2 <serverRead()+0x40>
    1cde:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ce0:	20 53       	subi	r18, 0x30	; 48
    1ce2:	33 0b       	sbc	r19, r19
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:997
    count++;
  }

  if (count == 4) {
    1ce4:	44 30       	cpi	r20, 0x04	; 4
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <serverRead()+0x5a>
    1cea:	49 c0       	rjmp	.+146    	; 0x1d7e <serverRead()+0xec>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:998
    len = ((buftemp[9] - 48) * 1000) + ((buftemp[10] - 48) * 100) + ((buftemp[11] - 48) * 10) + buftemp[12] - 48;
    1cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cee:	60 53       	subi	r22, 0x30	; 48
    1cf0:	77 0b       	sbc	r23, r23
    1cf2:	e4 e6       	ldi	r30, 0x64	; 100
    1cf4:	e6 9f       	mul	r30, r22
    1cf6:	a0 01       	movw	r20, r0
    1cf8:	e7 9f       	mul	r30, r23
    1cfa:	50 0d       	add	r21, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	e8 ee       	ldi	r30, 0xE8	; 232
    1d00:	f3 e0       	ldi	r31, 0x03	; 3
    1d02:	2e 9f       	mul	r18, r30
    1d04:	b0 01       	movw	r22, r0
    1d06:	2f 9f       	mul	r18, r31
    1d08:	70 0d       	add	r23, r0
    1d0a:	3e 9f       	mul	r19, r30
    1d0c:	70 0d       	add	r23, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	9a 01       	movw	r18, r20
    1d12:	26 0f       	add	r18, r22
    1d14:	37 1f       	adc	r19, r23
    1d16:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d18:	fa e0       	ldi	r31, 0x0A	; 10
    1d1a:	4f 9f       	mul	r20, r31
    1d1c:	20 0d       	add	r18, r0
    1d1e:	31 1d       	adc	r19, r1
    1d20:	11 24       	eor	r1, r1
    1d22:	20 5e       	subi	r18, 0xE0	; 224
    1d24:	31 40       	sbci	r19, 0x01	; 1
    1d26:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d28:	24 0f       	add	r18, r20
    1d2a:	31 1d       	adc	r19, r1
    1d2c:	20 53       	subi	r18, 0x30	; 48
    1d2e:	31 09       	sbc	r19, r1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:999
    start = 14;
    1d30:	ee e0       	ldi	r30, 0x0E	; 14
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	e0 0f       	add	r30, r16
    1d36:	f1 1f       	adc	r31, r17
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1012 (discriminator 3)
    len = buftemp[9] - 48;
    start = 11;
  }

  /********Rigtig kode**********/
  for (int i = 0; i < len; i++) {
    1d38:	82 17       	cp	r24, r18
    1d3a:	93 07       	cpc	r25, r19
    1d3c:	0c f0       	brlt	.+2      	; 0x1d40 <serverRead()+0xae>
    1d3e:	51 c0       	rjmp	.+162    	; 0x1de2 <serverRead()+0x150>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1013 (discriminator 2)
    simBuffer[i] = buftemp[start + i];
    1d40:	41 91       	ld	r20, Z+
    1d42:	a0 91 06 19 	lds	r26, 0x1906	; 0x801906 <simBuffer>
    1d46:	b0 91 07 19 	lds	r27, 0x1907	; 0x801907 <simBuffer+0x1>
    1d4a:	a8 0f       	add	r26, r24
    1d4c:	b9 1f       	adc	r27, r25
    1d4e:	4c 93       	st	X, r20
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1012 (discriminator 2)
    len = buftemp[9] - 48;
    start = 11;
  }

  /********Rigtig kode**********/
  for (int i = 0; i < len; i++) {
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	f2 cf       	rjmp	.-28     	; 0x1d38 <serverRead()+0xa6>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:987
  int start;
  int count = 0;

  millisDelay(300);
  while (simSerial.available()) {  // While data incomming: Read into buffer
    int numBytes = simSerial.available();
    1d54:	88 e0       	ldi	r24, 0x08	; 8
    1d56:	99 e1       	ldi	r25, 0x19	; 25
    1d58:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
    1d5c:	6c 01       	movw	r12, r24
    1d5e:	78 01       	movw	r14, r16
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:988 (discriminator 3)
    for (int i = 0; i < numBytes; i++) {
    1d60:	c7 01       	movw	r24, r14
    1d62:	80 1b       	sub	r24, r16
    1d64:	91 0b       	sbc	r25, r17
    1d66:	8c 15       	cp	r24, r12
    1d68:	9d 05       	cpc	r25, r13
    1d6a:	0c f0       	brlt	.+2      	; 0x1d6e <serverRead()+0xdc>
    1d6c:	aa cf       	rjmp	.-172    	; 0x1cc2 <serverRead()+0x30>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:989 (discriminator 2)
      buftemp[i] = simSerial.read();
    1d6e:	88 e0       	ldi	r24, 0x08	; 8
    1d70:	99 e1       	ldi	r25, 0x19	; 25
    1d72:	0e 94 3b 11 	call	0x2276	; 0x2276 <HardwareSerial::read()>
    1d76:	f7 01       	movw	r30, r14
    1d78:	81 93       	st	Z+, r24
    1d7a:	7f 01       	movw	r14, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:988 (discriminator 2)
  int count = 0;

  millisDelay(300);
  while (simSerial.available()) {  // While data incomming: Read into buffer
    int numBytes = simSerial.available();
    for (int i = 0; i < numBytes; i++) {
    1d7c:	f1 cf       	rjmp	.-30     	; 0x1d60 <serverRead()+0xce>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1000
  }

  if (count == 4) {
    len = ((buftemp[9] - 48) * 1000) + ((buftemp[10] - 48) * 100) + ((buftemp[11] - 48) * 10) + buftemp[12] - 48;
    start = 14;
  } else if (count == 3) {
    1d7e:	43 30       	cpi	r20, 0x03	; 3
    1d80:	51 05       	cpc	r21, r1
    1d82:	d1 f4       	brne	.+52     	; 0x1db8 <serverRead()+0x126>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1001
    len = ((buftemp[9] - 48) * 100) + ((buftemp[10] - 48) * 10) + buftemp[11] - 48;
    1d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d86:	60 53       	subi	r22, 0x30	; 48
    1d88:	77 0b       	sbc	r23, r23
    1d8a:	ea e0       	ldi	r30, 0x0A	; 10
    1d8c:	e6 9f       	mul	r30, r22
    1d8e:	a0 01       	movw	r20, r0
    1d90:	e7 9f       	mul	r30, r23
    1d92:	50 0d       	add	r21, r0
    1d94:	11 24       	eor	r1, r1
    1d96:	e4 e6       	ldi	r30, 0x64	; 100
    1d98:	e2 9f       	mul	r30, r18
    1d9a:	b0 01       	movw	r22, r0
    1d9c:	e3 9f       	mul	r30, r19
    1d9e:	70 0d       	add	r23, r0
    1da0:	11 24       	eor	r1, r1
    1da2:	46 0f       	add	r20, r22
    1da4:	57 1f       	adc	r21, r23
    1da6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1da8:	24 0f       	add	r18, r20
    1daa:	35 2f       	mov	r19, r21
    1dac:	31 1d       	adc	r19, r1
    1dae:	20 53       	subi	r18, 0x30	; 48
    1db0:	31 09       	sbc	r19, r1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1002
    start = 13;
    1db2:	ed e0       	ldi	r30, 0x0D	; 13
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	be cf       	rjmp	.-132    	; 0x1d34 <serverRead()+0xa2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1008
  } else if (count == 2) {
    len = ((buftemp[9] - 48) * 10) + buftemp[10] - 48;
    start = 12;
  } else {
    len = buftemp[9] - 48;
    start = 11;
    1db8:	eb e0       	ldi	r30, 0x0B	; 11
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1003
    len = ((buftemp[9] - 48) * 1000) + ((buftemp[10] - 48) * 100) + ((buftemp[11] - 48) * 10) + buftemp[12] - 48;
    start = 14;
  } else if (count == 3) {
    len = ((buftemp[9] - 48) * 100) + ((buftemp[10] - 48) * 10) + buftemp[11] - 48;
    start = 13;
  } else if (count == 2) {
    1dbc:	42 30       	cpi	r20, 0x02	; 2
    1dbe:	51 05       	cpc	r21, r1
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <serverRead()+0x132>
    1dc2:	b8 cf       	rjmp	.-144    	; 0x1d34 <serverRead()+0xa2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1004
    len = ((buftemp[9] - 48) * 10) + buftemp[10] - 48;
    1dc4:	6a e0       	ldi	r22, 0x0A	; 10
    1dc6:	62 9f       	mul	r22, r18
    1dc8:	a0 01       	movw	r20, r0
    1dca:	63 9f       	mul	r22, r19
    1dcc:	50 0d       	add	r21, r0
    1dce:	11 24       	eor	r1, r1
    1dd0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1dd2:	24 0f       	add	r18, r20
    1dd4:	35 2f       	mov	r19, r21
    1dd6:	31 1d       	adc	r19, r1
    1dd8:	20 53       	subi	r18, 0x30	; 48
    1dda:	31 09       	sbc	r19, r1
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1005
    start = 12;
    1ddc:	ec e0       	ldi	r30, 0x0C	; 12
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	a9 cf       	rjmp	.-174    	; 0x1d34 <serverRead()+0xa2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:1015

  /********Rigtig kode**********/
  for (int i = 0; i < len; i++) {
    simBuffer[i] = buftemp[start + i];
  }
}
    1de2:	c8 51       	subi	r28, 0x18	; 24
    1de4:	dc 4f       	sbci	r29, 0xFC	; 252
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	cf 90       	pop	r12
    1e00:	08 95       	ret

00001e02 <setup>:
setup():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:105
struct saved_data slaveSaved[30];  //Make struct for 30 slaves

/********Test kode**********/
char testbuf2[12] = { 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00 };

void setup() {
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	e5 97       	sbiw	r28, 0x35	; 53
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:107

  CLKPR = 1 << CLKPCE;  // Clock Prescaler Change Enable
    1e1e:	80 e8       	ldi	r24, 0x80	; 128
    1e20:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:108
  CLKPR = 0;            // Change clock division factor to 1.
    1e24:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
_ZN14HardwareSerial5beginEm():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1e28:	26 e0       	ldi	r18, 0x06	; 6
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	55 e2       	ldi	r21, 0x25	; 37
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	88 e0       	ldi	r24, 0x08	; 8
    1e34:	99 e1       	ldi	r25, 0x19	; 25
    1e36:	0e 94 22 12 	call	0x2444	; 0x2444 <HardwareSerial::begin(unsigned long, unsigned char)>
    1e3a:	26 e0       	ldi	r18, 0x06	; 6
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	55 e2       	ldi	r21, 0x25	; 37
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	85 ea       	ldi	r24, 0xA5	; 165
    1e46:	99 e1       	ldi	r25, 0x19	; 25
    1e48:	0e 94 22 12 	call	0x2444	; 0x2444 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:115
  //Begin serial communication
  simSerial.begin(9600);
  modbusSerial.begin(9600);

  //Setup mode of pins on master
  pinMode(DTR_E, OUTPUT);
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	8a e2       	ldi	r24, 0x2A	; 42
    1e50:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:116
  pinMode(PWRKEY, OUTPUT);
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	8b e2       	ldi	r24, 0x2B	; 43
    1e58:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:117
  pinMode(BLUE_LED, OUTPUT);
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	82 e4       	ldi	r24, 0x42	; 66
    1e60:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:118
  pinMode(GREEN_LED, OUTPUT);
    1e64:	61 e0       	ldi	r22, 0x01	; 1
    1e66:	81 e4       	ldi	r24, 0x41	; 65
    1e68:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:119
  pinMode(RED_LED, OUTPUT);
    1e6c:	61 e0       	ldi	r22, 0x01	; 1
    1e6e:	80 e4       	ldi	r24, 0x40	; 64
    1e70:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:120
  pinMode(Button, INPUT);
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	83 e4       	ldi	r24, 0x43	; 67
    1e78:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <pinMode>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:122

  digitalWrite(BLUE_LED, LOW);
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	82 e4       	ldi	r24, 0x42	; 66
    1e80:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:123
  digitalWrite(GREEN_LED, LOW);
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	81 e4       	ldi	r24, 0x41	; 65
    1e88:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:124
  digitalWrite(RED_LED, LOW);
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	80 e4       	ldi	r24, 0x40	; 64
    1e90:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:126

  digitalWrite(PWRKEY, HIGH);  // Set powerkey high so sim module stay on/off
    1e94:	61 e0       	ldi	r22, 0x01	; 1
    1e96:	8b e2       	ldi	r24, 0x2B	; 43
    1e98:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:127
  digitalWrite(DTR_E, LOW);    // Maybe not used?
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	8a e2       	ldi	r24, 0x2A	; 42
    1ea0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <digitalWrite>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:129

  millisDelay(3000);  //Start delay
    1ea4:	88 eb       	ldi	r24, 0xB8	; 184
    1ea6:	9b e0       	ldi	r25, 0x0B	; 11
    1ea8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:131

  simSetup();  //Sim module setup
    1eac:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <simSetup()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:138
  /**********Send model and firmware***************/

  char modelAndFirmware[20];  //Create message array
  short model = 0x0001;       //Model nr.
  short firmware = 0x0001;    //Firmware nr.
  transactionID++;
    1eb0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <transactionID>
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <transactionID>
    1eba:	9e 01       	movw	r18, r28
    1ebc:	2f 5f       	subi	r18, 0xFF	; 255
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	79 01       	movw	r14, r18
    1ec2:	a6 ed       	ldi	r26, 0xD6	; 214
    1ec4:	b6 e1       	ldi	r27, 0x16	; 22
    1ec6:	89 01       	movw	r16, r18
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:140

  for (int i = 0; i < strlen(IMEI); i++) {  //Put IMEI into message
    1ec8:	ad 01       	movw	r20, r26
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:140 (discriminator 3)
    1eca:	fa 01       	movw	r30, r20
    1ecc:	01 90       	ld	r0, Z+
    1ece:	00 20       	and	r0, r0
    1ed0:	e9 f7       	brne	.-6      	; 0x1ecc <setup+0xca>
    1ed2:	9f 01       	movw	r18, r30
    1ed4:	27 5d       	subi	r18, 0xD7	; 215
    1ed6:	36 41       	sbci	r19, 0x16	; 22
    1ed8:	bd 01       	movw	r22, r26
    1eda:	66 5d       	subi	r22, 0xD6	; 214
    1edc:	76 41       	sbci	r23, 0x16	; 22
    1ede:	62 17       	cp	r22, r18
    1ee0:	73 07       	cpc	r23, r19
    1ee2:	28 f4       	brcc	.+10     	; 0x1eee <setup+0xec>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:141 (discriminator 2)
    modelAndFirmware[i] = IMEI[i];
    1ee4:	9d 91       	ld	r25, X+
    1ee6:	f7 01       	movw	r30, r14
    1ee8:	91 93       	st	Z+, r25
    1eea:	7f 01       	movw	r14, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:140 (discriminator 2)
  char modelAndFirmware[20];  //Create message array
  short model = 0x0001;       //Model nr.
  short firmware = 0x0001;    //Firmware nr.
  transactionID++;

  for (int i = 0; i < strlen(IMEI); i++) {  //Put IMEI into message
    1eec:	ee cf       	rjmp	.-36     	; 0x1eca <setup+0xc8>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:144
    modelAndFirmware[i] = IMEI[i];
  }

  modelAndFirmware[8] = transactionID;  //Put transactionID into message
    1eee:	89 87       	std	Y+9, r24	; 0x09
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:146

  modelAndFirmware[9] = 0x02;  //Put command 02 into message
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	8a 87       	std	Y+10, r24	; 0x0a
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:148

  modelAndFirmware[10] = highByte(model);  //Put model nr. into message
    1ef4:	1b 86       	std	Y+11, r1	; 0x0b
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:149
  modelAndFirmware[11] = lowByte(model);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	8c 87       	std	Y+12, r24	; 0x0c
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:151

  modelAndFirmware[12] = highByte(firmware);  //Put firmware nr. into massage
    1efa:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:152
  modelAndFirmware[13] = lowByte(firmware);
    1efc:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:154

  modelAndFirmware[14] = highByte(CRC16_modbus(modelAndFirmware, 14));  //Put CRC into message
    1efe:	6e e0       	ldi	r22, 0x0E	; 14
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	c8 01       	movw	r24, r16
    1f04:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    1f08:	9f 87       	std	Y+15, r25	; 0x0f
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:155
  modelAndFirmware[15] = lowByte(CRC16_modbus(modelAndFirmware, 14));
    1f0a:	6e e0       	ldi	r22, 0x0E	; 14
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	c8 01       	movw	r24, r16
    1f10:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    1f14:	88 8b       	std	Y+16, r24	; 0x10
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:157

  simSerial.println(F("AT+CASEND=0,16"));  //Write to send message 16 bytes long
    1f16:	6e e7       	ldi	r22, 0x7E	; 126
    1f18:	72 e0       	ldi	r23, 0x02	; 2
    1f1a:	88 e0       	ldi	r24, 0x08	; 8
    1f1c:	99 e1       	ldi	r25, 0x19	; 25
    1f1e:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:158
  millisDelay(200);
    1f22:	88 ec       	ldi	r24, 0xC8	; 200
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:159
  clrsimBuffer();
    1f2a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:161

  simSerial.write(modelAndFirmware, sizeof(modelAndFirmware));  // Send model and firmware
    1f2e:	44 e1       	ldi	r20, 0x14	; 20
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	b8 01       	movw	r22, r16
    1f34:	88 e0       	ldi	r24, 0x08	; 8
    1f36:	99 e1       	ldi	r25, 0x19	; 25
    1f38:	0e 94 3a 02 	call	0x474	; 0x474 <Print::write(char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:162
  responseCheck("OK", 10000);
    1f3c:	60 e1       	ldi	r22, 0x10	; 16
    1f3e:	77 e2       	ldi	r23, 0x27	; 39
    1f40:	8d e3       	ldi	r24, 0x3D	; 61
    1f42:	92 e0       	ldi	r25, 0x02	; 2
    1f44:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:163
  clrsimBuffer();
    1f48:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:165

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    1f4c:	6d e6       	ldi	r22, 0x6D	; 109
    1f4e:	72 e0       	ldi	r23, 0x02	; 2
    1f50:	88 e0       	ldi	r24, 0x08	; 8
    1f52:	99 e1       	ldi	r25, 0x19	; 25
    1f54:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:166
  responseCheck("49", 10000);
    1f58:	60 e1       	ldi	r22, 0x10	; 16
    1f5a:	77 e2       	ldi	r23, 0x27	; 39
    1f5c:	89 e6       	ldi	r24, 0x69	; 105
    1f5e:	92 e0       	ldi	r25, 0x02	; 2
    1f60:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:167
  clrsimBuffer();
    1f64:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:172


  /**********Ask for slave setup on startup********/
  char msg[15];     // Create message array
  transactionID++;  // Change transactionID for new message
    1f68:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <transactionID>
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <transactionID>
    1f72:	7e 01       	movw	r14, r28
    1f74:	f7 e2       	ldi	r31, 0x27	; 39
    1f76:	ef 0e       	add	r14, r31
    1f78:	f1 1c       	adc	r15, r1
    1f7a:	a6 ed       	ldi	r26, 0xD6	; 214
    1f7c:	b6 e1       	ldi	r27, 0x16	; 22
    1f7e:	87 01       	movw	r16, r14
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:174

  for (int i = 0; i < strlen(IMEI); i++) {  //Add IMEI to message
    1f80:	ad 01       	movw	r20, r26
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:174 (discriminator 3)
    1f82:	fa 01       	movw	r30, r20
    1f84:	01 90       	ld	r0, Z+
    1f86:	00 20       	and	r0, r0
    1f88:	e9 f7       	brne	.-6      	; 0x1f84 <setup+0x182>
    1f8a:	9f 01       	movw	r18, r30
    1f8c:	27 5d       	subi	r18, 0xD7	; 215
    1f8e:	36 41       	sbci	r19, 0x16	; 22
    1f90:	bd 01       	movw	r22, r26
    1f92:	66 5d       	subi	r22, 0xD6	; 214
    1f94:	76 41       	sbci	r23, 0x16	; 22
    1f96:	62 17       	cp	r22, r18
    1f98:	73 07       	cpc	r23, r19
    1f9a:	28 f4       	brcc	.+10     	; 0x1fa6 <setup+0x1a4>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:175 (discriminator 2)
    msg[i] = IMEI[i];
    1f9c:	9d 91       	ld	r25, X+
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	91 93       	st	Z+, r25
    1fa2:	7f 01       	movw	r14, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:174 (discriminator 2)

  /**********Ask for slave setup on startup********/
  char msg[15];     // Create message array
  transactionID++;  // Change transactionID for new message

  for (int i = 0; i < strlen(IMEI); i++) {  //Add IMEI to message
    1fa4:	ee cf       	rjmp	.-36     	; 0x1f82 <setup+0x180>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:178
    msg[i] = IMEI[i];
  }

  msg[8] = transactionID;  //Add transactionID
    1fa6:	8f a7       	std	Y+47, r24	; 0x2f
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:180

  msg[9] = 0x03;  //Add command 03
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	88 ab       	std	Y+48, r24	; 0x30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:182

  msg[10] = highByte(CRC16_modbus(msg, 10));  //Add CRC
    1fac:	6a e0       	ldi	r22, 0x0A	; 10
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    1fb6:	99 ab       	std	Y+49, r25	; 0x31
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:183
  msg[11] = lowByte(CRC16_modbus(msg, 10));
    1fb8:	6a e0       	ldi	r22, 0x0A	; 10
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	c8 01       	movw	r24, r16
    1fbe:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    1fc2:	8a ab       	std	Y+50, r24	; 0x32
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:185

  simSerial.println(F("AT+CASEND=0,12"));  //Write to send message 12 bytes long
    1fc4:	6e e5       	ldi	r22, 0x5E	; 94
    1fc6:	72 e0       	ldi	r23, 0x02	; 2
    1fc8:	88 e0       	ldi	r24, 0x08	; 8
    1fca:	99 e1       	ldi	r25, 0x19	; 25
    1fcc:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:186
  millisDelay(500);
    1fd0:	84 ef       	ldi	r24, 0xF4	; 244
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:187
  clrsimBuffer();
    1fd8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:189

  simSerial.write(msg, sizeof(msg));  // Send message
    1fdc:	4f e0       	ldi	r20, 0x0F	; 15
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	b8 01       	movw	r22, r16
    1fe2:	88 e0       	ldi	r24, 0x08	; 8
    1fe4:	99 e1       	ldi	r25, 0x19	; 25
    1fe6:	0e 94 3a 02 	call	0x474	; 0x474 <Print::write(char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:190
  responseCheck("OK", 10000);
    1fea:	60 e1       	ldi	r22, 0x10	; 16
    1fec:	77 e2       	ldi	r23, 0x27	; 39
    1fee:	8d e3       	ldi	r24, 0x3D	; 61
    1ff0:	92 e0       	ldi	r25, 0x02	; 2
    1ff2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:191
  clrsimBuffer();
    1ff6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:193

  simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    1ffa:	6d e4       	ldi	r22, 0x4D	; 77
    1ffc:	72 e0       	ldi	r23, 0x02	; 2
    1ffe:	88 e0       	ldi	r24, 0x08	; 8
    2000:	99 e1       	ldi	r25, 0x19	; 25
    2002:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:195

  serverRead();  //Read message from server into simBuffer
    2006:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <serverRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:196
  clrsimBuffer();
    200a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:199

  /********Test kode**********/
  char testbuf[18] = { 0x01, 0x03, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x65, 0x6F };
    200e:	82 e1       	ldi	r24, 0x12	; 18
    2010:	e8 e2       	ldi	r30, 0x28	; 40
    2012:	f2 e0       	ldi	r31, 0x02	; 2
    2014:	de 01       	movw	r26, r28
    2016:	55 96       	adiw	r26, 0x15	; 21
    2018:	01 90       	ld	r0, Z+
    201a:	0d 92       	st	X+, r0
    201c:	8a 95       	dec	r24
    201e:	e1 f7       	brne	.-8      	; 0x2018 <setup+0x216>
    2020:	de 01       	movw	r26, r28
    2022:	55 96       	adiw	r26, 0x15	; 21
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:201

  for (int i = 0; i < 18; i++) {
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:202 (discriminator 2)
    simBuffer[i] = testbuf[i];
    2028:	2d 91       	ld	r18, X+
    202a:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
    202e:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
    2032:	e8 0f       	add	r30, r24
    2034:	f9 1f       	adc	r31, r25
    2036:	20 83       	st	Z, r18
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:201 (discriminator 2)
  clrsimBuffer();

  /********Test kode**********/
  char testbuf[18] = { 0x01, 0x03, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x65, 0x6F };

  for (int i = 0; i < 18; i++) {
    2038:	01 96       	adiw	r24, 0x01	; 1
    203a:	82 31       	cpi	r24, 0x12	; 18
    203c:	91 05       	cpc	r25, r1
    203e:	a1 f7       	brne	.-24     	; 0x2028 <setup+0x226>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:204
    simBuffer[i] = testbuf[i];
  }
}
    2040:	e5 96       	adiw	r28, 0x35	; 53
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	08 95       	ret

0000205a <loop>:
loop():
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:206

void loop() {
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	64 97       	sbiw	r28, 0x14	; 20
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:221
      // serverRead();  //Read server message
      // clrsimBuffer();

      // millisDelay(500);

  switch (state) {
    2076:	80 91 b2 16 	lds	r24, 0x16B2	; 0x8016b2 <state>
    207a:	90 91 b3 16 	lds	r25, 0x16B3	; 0x8016b3 <state+0x1>
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	91 05       	cpc	r25, r1
    2082:	09 f4       	brne	.+2      	; 0x2086 <loop+0x2c>
    2084:	43 c0       	rjmp	.+134    	; 0x210c <loop+0xb2>
    2086:	cc f4       	brge	.+50     	; 0x20ba <loop+0x60>
    2088:	89 2b       	or	r24, r25
    208a:	e9 f1       	breq	.+122    	; 0x2106 <loop+0xac>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:306
      simSerial.println(F("AT+CARECV=0,1460"));  //Read recieved message from server
      responseCheck("00", 1000);
      break;
  }

  if (powerStatus() == 0) {  //If power is still on
    208c:	0e 94 41 02 	call	0x482	; 0x482 <powerStatus()>
    2090:	81 11       	cpse	r24, r1
    2092:	06 c0       	rjmp	.+12     	; 0x20a0 <loop+0x46>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:307
    state = poweroff;
    2094:	83 e0       	ldi	r24, 0x03	; 3
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	90 93 b3 16 	sts	0x16B3, r25	; 0x8016b3 <state+0x1>
    209c:	80 93 b2 16 	sts	0x16B2, r24	; 0x8016b2 <state>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:309
  }
}
    20a0:	64 96       	adiw	r28, 0x14	; 20
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	08 95       	ret
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:221
      // serverRead();  //Read server message
      // clrsimBuffer();

      // millisDelay(500);

  switch (state) {
    20ba:	82 30       	cpi	r24, 0x02	; 2
    20bc:	91 05       	cpc	r25, r1
    20be:	09 f4       	brne	.+2      	; 0x20c2 <loop+0x68>
    20c0:	81 c0       	rjmp	.+258    	; 0x21c4 <loop+0x16a>
    20c2:	03 97       	sbiw	r24, 0x03	; 3
    20c4:	19 f7       	brne	.-58     	; 0x208c <loop+0x32>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:271
      break;

    case poweroff:  //Send power off to server

      char masterData[20];  //Create message array
      transactionID++;
    20c6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <transactionID>
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <transactionID>
    20d0:	9e 01       	movw	r18, r28
    20d2:	2f 5f       	subi	r18, 0xFF	; 255
    20d4:	3f 4f       	sbci	r19, 0xFF	; 255
    20d6:	79 01       	movw	r14, r18
    20d8:	a6 ed       	ldi	r26, 0xD6	; 214
    20da:	b6 e1       	ldi	r27, 0x16	; 22
    20dc:	89 01       	movw	r16, r18
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:273

      for (int i = 0; i < strlen(IMEI); i++) {  //Add IMEI
    20de:	ad 01       	movw	r20, r26
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:273 (discriminator 3)
    20e0:	fa 01       	movw	r30, r20
    20e2:	01 90       	ld	r0, Z+
    20e4:	00 20       	and	r0, r0
    20e6:	e9 f7       	brne	.-6      	; 0x20e2 <loop+0x88>
    20e8:	9f 01       	movw	r18, r30
    20ea:	27 5d       	subi	r18, 0xD7	; 215
    20ec:	36 41       	sbci	r19, 0x16	; 22
    20ee:	bd 01       	movw	r22, r26
    20f0:	66 5d       	subi	r22, 0xD6	; 214
    20f2:	76 41       	sbci	r23, 0x16	; 22
    20f4:	62 17       	cp	r22, r18
    20f6:	73 07       	cpc	r23, r19
    20f8:	08 f0       	brcs	.+2      	; 0x20fc <loop+0xa2>
    20fa:	67 c0       	rjmp	.+206    	; 0x21ca <loop+0x170>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:274 (discriminator 2)
        masterData[i] = IMEI[i];
    20fc:	9d 91       	ld	r25, X+
    20fe:	f7 01       	movw	r30, r14
    2100:	91 93       	st	Z+, r25
    2102:	7f 01       	movw	r14, r30
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:273 (discriminator 2)
    case poweroff:  //Send power off to server

      char masterData[20];  //Create message array
      transactionID++;

      for (int i = 0; i < strlen(IMEI); i++) {  //Add IMEI
    2104:	ed cf       	rjmp	.-38     	; 0x20e0 <loop+0x86>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:223

      // millisDelay(500);

  switch (state) {
    case slaveread:  //Slavesetup and read data from slaves. Also check for change in data.
      modbusRead();
    2106:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <modbusRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:224
      break;
    210a:	c0 cf       	rjmp	.-128    	; 0x208c <loop+0x32>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:228

    case serversend:

      millisDelay(1000);
    210c:	88 ee       	ldi	r24, 0xE8	; 232
    210e:	93 e0       	ldi	r25, 0x03	; 3
    2110:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:230

      sendToServer();  //Send message to server
    2114:	0e 94 8f 02 	call	0x51e	; 0x51e <sendToServer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:232

      simSerial.println(F("AT+CARECV=0,1460"));  // Read recieved message from server
    2118:	6c e3       	ldi	r22, 0x3C	; 60
    211a:	72 e0       	ldi	r23, 0x02	; 2
    211c:	88 e0       	ldi	r24, 0x08	; 8
    211e:	99 e1       	ldi	r25, 0x19	; 25
    2120:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:234

      serverRead();  //Read server message
    2124:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <serverRead()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:235
      clrsimBuffer();
    2128:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:237

      testbuf2[0] = transactionID;
    212c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <transactionID>
    2130:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <testbuf2>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:238
      testbuf2[10] = highByte(CRC16_modbus(testbuf2, 10));
    2134:	6a e0       	ldi	r22, 0x0A	; 10
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	86 e0       	ldi	r24, 0x06	; 6
    213a:	92 e0       	ldi	r25, 0x02	; 2
    213c:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    2140:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <testbuf2+0xa>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:239
      testbuf2[11] = lowByte(CRC16_modbus(testbuf2, 10));
    2144:	6a e0       	ldi	r22, 0x0A	; 10
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	86 e0       	ldi	r24, 0x06	; 6
    214a:	92 e0       	ldi	r25, 0x02	; 2
    214c:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    2150:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <testbuf2+0xb>
    2154:	a6 e0       	ldi	r26, 0x06	; 6
    2156:	b2 e0       	ldi	r27, 0x02	; 2
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:241

      for (int i = 0; i < 12; i++) {
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:242 (discriminator 2)
        simBuffer[i] = testbuf2[i];
    215c:	2d 91       	ld	r18, X+
    215e:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
    2162:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
    2166:	e8 0f       	add	r30, r24
    2168:	f9 1f       	adc	r31, r25
    216a:	20 83       	st	Z, r18
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:241 (discriminator 2)

      testbuf2[0] = transactionID;
      testbuf2[10] = highByte(CRC16_modbus(testbuf2, 10));
      testbuf2[11] = lowByte(CRC16_modbus(testbuf2, 10));

      for (int i = 0; i < 12; i++) {
    216c:	01 96       	adiw	r24, 0x01	; 1
    216e:	8c 30       	cpi	r24, 0x0C	; 12
    2170:	91 05       	cpc	r25, r1
    2172:	a1 f7       	brne	.-24     	; 0x215c <loop+0x102>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:246
        simBuffer[i] = testbuf2[i];
      }

      // Go to different case depending on response
      if (simBuffer[0] == transactionID) {
    2174:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <simBuffer>
    2178:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <simBuffer+0x1>
    217c:	90 81       	ld	r25, Z
    217e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <transactionID>
    2182:	98 13       	cpse	r25, r24
    2184:	1c c0       	rjmp	.+56     	; 0x21be <loop+0x164>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:247
        if (simBuffer[1] == 0x00) {  //If read hartbeat, read from slaves again
    2186:	81 81       	ldd	r24, Z+1	; 0x01
    2188:	81 11       	cpse	r24, r1
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <loop+0x13c>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:255
          state = slavewrite;
        } else if (simBuffer[1] == 0x02) {  //If read model and firmware, read from slaves
          state = slaveread;
        } else if (simBuffer[1] == 0x03) {  //If read setup, go to slave setup and read from slaves
          slaveSetupCheck = 0;              //Reset slave setup
          state = slaveread;
    218c:	10 92 b3 16 	sts	0x16B3, r1	; 0x8016b3 <state+0x1>
    2190:	10 92 b2 16 	sts	0x16B2, r1	; 0x8016b2 <state>
    2194:	7b cf       	rjmp	.-266    	; 0x208c <loop+0x32>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:249

      // Go to different case depending on response
      if (simBuffer[0] == transactionID) {
        if (simBuffer[1] == 0x00) {  //If read hartbeat, read from slaves again
          state = slaveread;
        } else if (simBuffer[1] == 0x01) {  //If read data, write to slaves
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	39 f4       	brne	.+14     	; 0x21a8 <loop+0x14e>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:250
          state = slavewrite;
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:260
          state = slaveread;
        } else if (simBuffer[1] == 0x04) {  //If read master setup, read from slaves
          state = slaveread;
        }
      } else {
        state = serversend;  //Send same message to server if nothing is read
    219e:	90 93 b3 16 	sts	0x16B3, r25	; 0x8016b3 <state+0x1>
    21a2:	80 93 b2 16 	sts	0x16B2, r24	; 0x8016b2 <state>
    21a6:	72 cf       	rjmp	.-284    	; 0x208c <loop+0x32>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:251
      if (simBuffer[0] == transactionID) {
        if (simBuffer[1] == 0x00) {  //If read hartbeat, read from slaves again
          state = slaveread;
        } else if (simBuffer[1] == 0x01) {  //If read data, write to slaves
          state = slavewrite;
        } else if (simBuffer[1] == 0x02) {  //If read model and firmware, read from slaves
    21a8:	82 30       	cpi	r24, 0x02	; 2
    21aa:	81 f3       	breq	.-32     	; 0x218c <loop+0x132>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:253
          state = slaveread;
        } else if (simBuffer[1] == 0x03) {  //If read setup, go to slave setup and read from slaves
    21ac:	83 30       	cpi	r24, 0x03	; 3
    21ae:	19 f4       	brne	.+6      	; 0x21b6 <loop+0x15c>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:254
          slaveSetupCheck = 0;              //Reset slave setup
    21b0:	10 92 b4 16 	sts	0x16B4, r1	; 0x8016b4 <slaveSetupCheck>
    21b4:	eb cf       	rjmp	.-42     	; 0x218c <loop+0x132>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:256
          state = slaveread;
        } else if (simBuffer[1] == 0x04) {  //If read master setup, read from slaves
    21b6:	84 30       	cpi	r24, 0x04	; 4
    21b8:	09 f0       	breq	.+2      	; 0x21bc <loop+0x162>
    21ba:	68 cf       	rjmp	.-304    	; 0x208c <loop+0x32>
    21bc:	e7 cf       	rjmp	.-50     	; 0x218c <loop+0x132>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:260
          state = slaveread;
        }
      } else {
        state = serversend;  //Send same message to server if nothing is read
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	ed cf       	rjmp	.-38     	; 0x219e <loop+0x144>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:265
      }
      break;

    case slavewrite:
      modbusWrite();  //Write data response to slaves
    21c4:	0e 94 03 03 	call	0x606	; 0x606 <modbusWrite()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:266
      break;
    21c8:	61 cf       	rjmp	.-318    	; 0x208c <loop+0x32>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:276
      transactionID++;

      for (int i = 0; i < strlen(IMEI); i++) {  //Add IMEI
        masterData[i] = IMEI[i];
      }
      masterData[8] = transactionID;
    21ca:	89 87       	std	Y+9, r24	; 0x09
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:278

      masterData[9] = 0x01;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	8a 87       	std	Y+10, r24	; 0x0a
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:280

      masterData[10] = highByte(0x0001);
    21d0:	1b 86       	std	Y+11, r1	; 0x0b
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:281
      masterData[11] = lowByte(0x0001);
    21d2:	8c 87       	std	Y+12, r24	; 0x0c
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:283

      masterData[12] = 0x00;
    21d4:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:285

      masterData[13] = highByte(0x0001);
    21d6:	1e 86       	std	Y+14, r1	; 0x0e
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:286
      masterData[14] = lowByte(0x0001);
    21d8:	8f 87       	std	Y+15, r24	; 0x0f
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:288

      masterData[15] = highByte(0x0001);
    21da:	18 8a       	std	Y+16, r1	; 0x10
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:289
      masterData[16] = lowByte(0x0001);
    21dc:	89 8b       	std	Y+17, r24	; 0x11
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:291

      masterData[17] = highByte(CRC16_modbus(masterData, 17));
    21de:	61 e1       	ldi	r22, 0x11	; 17
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	c8 01       	movw	r24, r16
    21e4:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    21e8:	9a 8b       	std	Y+18, r25	; 0x12
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:292
      masterData[18] = lowByte(CRC16_modbus(masterData, 17));
    21ea:	61 e1       	ldi	r22, 0x11	; 17
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	c8 01       	movw	r24, r16
    21f0:	0e 94 18 02 	call	0x430	; 0x430 <CRC16_modbus(char*, int)>
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:294

      simSerial.println(F("AT+CASEND=0,19"));  //Write to send message 19 bytes long
    21f6:	6d e2       	ldi	r22, 0x2D	; 45
    21f8:	72 e0       	ldi	r23, 0x02	; 2
    21fa:	88 e0       	ldi	r24, 0x08	; 8
    21fc:	99 e1       	ldi	r25, 0x19	; 25
    21fe:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:295
      millisDelay(500);
    2202:	84 ef       	ldi	r24, 0xF4	; 244
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <millisDelay(int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:296
      clrsimBuffer();
    220a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clrsimBuffer()>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:298

      simSerial.write(masterData, 19);  //Send message
    220e:	43 e1       	ldi	r20, 0x13	; 19
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	b8 01       	movw	r22, r16
    2214:	88 e0       	ldi	r24, 0x08	; 8
    2216:	99 e1       	ldi	r25, 0x19	; 25
    2218:	0e 94 3a 02 	call	0x474	; 0x474 <Print::write(char const*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:299
      responseCheck("OK", 1000);
    221c:	68 ee       	ldi	r22, 0xE8	; 232
    221e:	73 e0       	ldi	r23, 0x03	; 3
    2220:	8d e3       	ldi	r24, 0x3D	; 61
    2222:	92 e0       	ldi	r25, 0x02	; 2
    2224:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:301

      simSerial.println(F("AT+CARECV=0,1460"));  //Read recieved message from server
    2228:	6c e1       	ldi	r22, 0x1C	; 28
    222a:	72 e0       	ldi	r23, 0x02	; 2
    222c:	88 e0       	ldi	r24, 0x08	; 8
    222e:	99 e1       	ldi	r25, 0x19	; 25
    2230:	0e 94 06 14 	call	0x280c	; 0x280c <Print::println(__FlashStringHelper const*)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:302
      responseCheck("00", 1000);
    2234:	68 ee       	ldi	r22, 0xE8	; 232
    2236:	73 e0       	ldi	r23, 0x03	; 3
    2238:	86 e6       	ldi	r24, 0x66	; 102
    223a:	92 e0       	ldi	r25, 0x02	; 2
    223c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <responseCheck(char*, unsigned int)>
C:\Users\mbt\Documents\GitHub\GSM-Cloud-Modbus-Master\Programmering\Modbus_Master_kode/Modbus_Master_kode.ino:303
      break;
    2240:	25 cf       	rjmp	.-438    	; 0x208c <loop+0x32>

00002242 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2242:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2244:	91 8d       	ldd	r25, Z+25	; 0x19
    2246:	22 8d       	ldd	r18, Z+26	; 0x1a
    2248:	89 2f       	mov	r24, r25
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	80 5c       	subi	r24, 0xC0	; 192
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	82 1b       	sub	r24, r18
    2252:	91 09       	sbc	r25, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
    2254:	8f 73       	andi	r24, 0x3F	; 63
    2256:	99 27       	eor	r25, r25
    2258:	08 95       	ret

0000225a <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    225a:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    225c:	91 8d       	ldd	r25, Z+25	; 0x19
    225e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2260:	98 17       	cp	r25, r24
    2262:	31 f0       	breq	.+12     	; 0x2270 <HardwareSerial::peek()+0x16>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2264:	82 8d       	ldd	r24, Z+26	; 0x1a
    2266:	e8 0f       	add	r30, r24
    2268:	f1 1d       	adc	r31, r1
    226a:	85 8d       	ldd	r24, Z+29	; 0x1d
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2270:	8f ef       	ldi	r24, 0xFF	; 255
    2272:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2274:	08 95       	ret

00002276 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    2276:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2278:	91 8d       	ldd	r25, Z+25	; 0x19
    227a:	82 8d       	ldd	r24, Z+26	; 0x1a
    227c:	98 17       	cp	r25, r24
    227e:	61 f0       	breq	.+24     	; 0x2298 <HardwareSerial::read()+0x22>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2280:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2282:	ae 0f       	add	r26, r30
    2284:	bf 2f       	mov	r27, r31
    2286:	b1 1d       	adc	r27, r1
    2288:	5d 96       	adiw	r26, 0x1d	; 29
    228a:	8c 91       	ld	r24, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    228c:	92 8d       	ldd	r25, Z+26	; 0x1a
    228e:	9f 5f       	subi	r25, 0xFF	; 255
    2290:	9f 73       	andi	r25, 0x3F	; 63
    2292:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2298:	8f ef       	ldi	r24, 0xFF	; 255
    229a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    229c:	08 95       	ret

0000229e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    229e:	fc 01       	movw	r30, r24
    22a0:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    22a2:	44 8d       	ldd	r20, Z+28	; 0x1c
    22a4:	25 2f       	mov	r18, r21
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	84 2f       	mov	r24, r20
    22aa:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    22ac:	82 1b       	sub	r24, r18
    22ae:	93 0b       	sbc	r25, r19
    22b0:	54 17       	cp	r21, r20
    22b2:	10 f0       	brcs	.+4      	; 0x22b8 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    22b4:	cf 96       	adiw	r24, 0x3f	; 63
    22b6:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    22b8:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
    22ba:	08 95       	ret

000022bc <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	89 2b       	or	r24, r25
    22c2:	49 f0       	breq	.+18     	; 0x22d6 <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	89 2b       	or	r24, r25
    22ca:	29 f0       	breq	.+10     	; 0x22d6 <serialEventRun()+0x1a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    22cc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    22d0:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    22d2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    22d6:	84 ed       	ldi	r24, 0xD4	; 212
    22d8:	92 e1       	ldi	r25, 0x12	; 18
    22da:	89 2b       	or	r24, r25
    22dc:	49 f0       	breq	.+18     	; 0x22f0 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	89 2b       	or	r24, r25
    22e4:	29 f0       	breq	.+10     	; 0x22f0 <serialEventRun()+0x34>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    22e6:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <Serial1_available()>
    22ea:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
    22ec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    22f0:	8b e6       	ldi	r24, 0x6B	; 107
    22f2:	93 e1       	ldi	r25, 0x13	; 19
    22f4:	89 2b       	or	r24, r25
    22f6:	49 f0       	breq	.+18     	; 0x230a <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 1)
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	89 2b       	or	r24, r25
    22fe:	29 f0       	breq	.+10     	; 0x230a <serialEventRun()+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 3)
    2300:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <Serial2_available()>
    2304:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
    2306:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	89 2b       	or	r24, r25
    2310:	49 f0       	breq	.+18     	; 0x2324 <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 1)
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	89 2b       	or	r24, r25
    2318:	29 f0       	breq	.+10     	; 0x2324 <serialEventRun()+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 3)
    231a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    231e:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
    2320:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
    2324:	08 95       	ret

00002326 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2326:	fc 01       	movw	r30, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2328:	a4 8d       	ldd	r26, Z+28	; 0x1c
    232a:	a8 0f       	add	r26, r24
    232c:	b9 2f       	mov	r27, r25
    232e:	b1 1d       	adc	r27, r1
    2330:	a3 5a       	subi	r26, 0xA3	; 163
    2332:	bf 4f       	sbci	r27, 0xFF	; 255
    2334:	2c 91       	ld	r18, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2336:	84 8d       	ldd	r24, Z+28	; 0x1c
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	8f 73       	andi	r24, 0x3F	; 63
    233e:	99 27       	eor	r25, r25
    2340:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    2342:	a6 89       	ldd	r26, Z+22	; 0x16
    2344:	b7 89       	ldd	r27, Z+23	; 0x17
    2346:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2348:	a0 89       	ldd	r26, Z+16	; 0x10
    234a:	b1 89       	ldd	r27, Z+17	; 0x11
    234c:	8c 91       	ld	r24, X
    234e:	83 70       	andi	r24, 0x03	; 3
    2350:	80 64       	ori	r24, 0x40	; 64
    2352:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2354:	93 8d       	ldd	r25, Z+27	; 0x1b
    2356:	84 8d       	ldd	r24, Z+28	; 0x1c
    2358:	98 13       	cpse	r25, r24
    235a:	06 c0       	rjmp	.+12     	; 0x2368 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    235c:	02 88       	ldd	r0, Z+18	; 0x12
    235e:	f3 89       	ldd	r31, Z+19	; 0x13
    2360:	e0 2d       	mov	r30, r0
    2362:	80 81       	ld	r24, Z
    2364:	8f 7d       	andi	r24, 0xDF	; 223
    2366:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    2368:	08 95       	ret

0000236a <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2370:	88 8d       	ldd	r24, Y+24	; 0x18
    2372:	88 23       	and	r24, r24
    2374:	b9 f0       	breq	.+46     	; 0x23a4 <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2376:	aa 89       	ldd	r26, Y+18	; 0x12
    2378:	bb 89       	ldd	r27, Y+19	; 0x13
    237a:	e8 89       	ldd	r30, Y+16	; 0x10
    237c:	f9 89       	ldd	r31, Y+17	; 0x11
    237e:	8c 91       	ld	r24, X
    2380:	85 fd       	sbrc	r24, 5
    2382:	03 c0       	rjmp	.+6      	; 0x238a <HardwareSerial::flush()+0x20>
    2384:	80 81       	ld	r24, Z
    2386:	86 fd       	sbrc	r24, 6
    2388:	0d c0       	rjmp	.+26     	; 0x23a4 <HardwareSerial::flush()+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	07 fc       	sbrc	r0, 7
    238e:	f7 cf       	rjmp	.-18     	; 0x237e <HardwareSerial::flush()+0x14>
    2390:	8c 91       	ld	r24, X
    2392:	85 ff       	sbrs	r24, 5
    2394:	f2 cf       	rjmp	.-28     	; 0x237a <HardwareSerial::flush()+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    2396:	80 81       	ld	r24, Z
    2398:	85 ff       	sbrs	r24, 5
    239a:	ed cf       	rjmp	.-38     	; 0x2376 <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    239c:	ce 01       	movw	r24, r28
    239e:	0e 94 93 11 	call	0x2326	; 0x2326 <HardwareSerial::_tx_udr_empty_irq()>
    23a2:	e9 cf       	rjmp	.-46     	; 0x2376 <HardwareSerial::flush()+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	08 95       	ret

000023aa <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    23bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23c0:	98 13       	cpse	r25, r24
    23c2:	1a c0       	rjmp	.+52     	; 0x23f8 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    23c4:	e8 89       	ldd	r30, Y+16	; 0x10
    23c6:	f9 89       	ldd	r31, Y+17	; 0x11
    23c8:	80 81       	ld	r24, Z
    23ca:	85 ff       	sbrs	r24, 5
    23cc:	15 c0       	rjmp	.+42     	; 0x23f8 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    23ce:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    23d0:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    23d2:	ee 89       	ldd	r30, Y+22	; 0x16
    23d4:	ff 89       	ldd	r31, Y+23	; 0x17
    23d6:	60 83       	st	Z, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    23d8:	e8 89       	ldd	r30, Y+16	; 0x10
    23da:	f9 89       	ldd	r31, Y+17	; 0x11
    23dc:	80 81       	ld	r24, Z
    23de:	83 70       	andi	r24, 0x03	; 3
    23e0:	80 64       	ori	r24, 0x40	; 64
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    23e2:	80 83       	st	Z, r24
__iRestore():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    23e4:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	ff 90       	pop	r15
    23f4:	ef 90       	pop	r14
    23f6:	08 95       	ret
    23f8:	f6 2e       	mov	r15, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    23fa:	0b 8d       	ldd	r16, Y+27	; 0x1b
    23fc:	10 e0       	ldi	r17, 0x00	; 0
    23fe:	0f 5f       	subi	r16, 0xFF	; 255
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	0f 73       	andi	r16, 0x3F	; 63
    2404:	11 27       	eor	r17, r17
    2406:	e0 2e       	mov	r14, r16
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2408:	8c 8d       	ldd	r24, Y+28	; 0x1c
    240a:	8e 11       	cpse	r24, r14
    240c:	0c c0       	rjmp	.+24     	; 0x2426 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	07 fc       	sbrc	r0, 7
    2412:	fa cf       	rjmp	.-12     	; 0x2408 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2414:	e8 89       	ldd	r30, Y+16	; 0x10
    2416:	f9 89       	ldd	r31, Y+17	; 0x11
    2418:	80 81       	ld	r24, Z
    241a:	85 ff       	sbrs	r24, 5
    241c:	f5 cf       	rjmp	.-22     	; 0x2408 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    241e:	ce 01       	movw	r24, r28
    2420:	0e 94 93 11 	call	0x2326	; 0x2326 <HardwareSerial::_tx_udr_empty_irq()>
    2424:	f1 cf       	rjmp	.-30     	; 0x2408 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2426:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2428:	ec 0f       	add	r30, r28
    242a:	fd 2f       	mov	r31, r29
    242c:	f1 1d       	adc	r31, r1
    242e:	e3 5a       	subi	r30, 0xA3	; 163
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	f0 82       	st	Z, r15
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2434:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mbt\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2436:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    2438:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    243a:	ea 89       	ldd	r30, Y+18	; 0x12
    243c:	fb 89       	ldd	r31, Y+19	; 0x13
    243e:	80 81       	ld	r24, Z
    2440:	80 62       	ori	r24, 0x20	; 32
    2442:	cf cf       	rjmp	.-98     	; 0x23e2 <HardwareSerial::write(unsigned char)+0x38>

00002444 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2444:	cf 92       	push	r12
    2446:	df 92       	push	r13
    2448:	ef 92       	push	r14
    244a:	ff 92       	push	r15
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	ec 01       	movw	r28, r24
    2454:	6a 01       	movw	r12, r20
    2456:	7b 01       	movw	r14, r22
    2458:	12 2f       	mov	r17, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    245a:	60 e8       	ldi	r22, 0x80	; 128
    245c:	74 e8       	ldi	r23, 0x84	; 132
    245e:	8e e1       	ldi	r24, 0x1E	; 30
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a7 01       	movw	r20, r14
    2464:	96 01       	movw	r18, r12
    2466:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__udivmodsi4>
    246a:	21 50       	subi	r18, 0x01	; 1
    246c:	31 09       	sbc	r19, r1
    246e:	41 09       	sbc	r20, r1
    2470:	51 09       	sbc	r21, r1
    2472:	56 95       	lsr	r21
    2474:	47 95       	ror	r20
    2476:	37 95       	ror	r19
    2478:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    247a:	e8 89       	ldd	r30, Y+16	; 0x10
    247c:	f9 89       	ldd	r31, Y+17	; 0x11
    247e:	82 e0       	ldi	r24, 0x02	; 2
    2480:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2482:	21 15       	cp	r18, r1
    2484:	80 e1       	ldi	r24, 0x10	; 16
    2486:	38 07       	cpc	r19, r24
    2488:	98 f0       	brcs	.+38     	; 0x24b0 <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    248a:	e8 89       	ldd	r30, Y+16	; 0x10
    248c:	f9 89       	ldd	r31, Y+17	; 0x11
    248e:	10 82       	st	Z, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2490:	60 e4       	ldi	r22, 0x40	; 64
    2492:	72 e4       	ldi	r23, 0x42	; 66
    2494:	8f e0       	ldi	r24, 0x0F	; 15
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a7 01       	movw	r20, r14
    249a:	96 01       	movw	r18, r12
    249c:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__udivmodsi4>
    24a0:	21 50       	subi	r18, 0x01	; 1
    24a2:	31 09       	sbc	r19, r1
    24a4:	41 09       	sbc	r20, r1
    24a6:	51 09       	sbc	r21, r1
    24a8:	56 95       	lsr	r21
    24aa:	47 95       	ror	r20
    24ac:	37 95       	ror	r19
    24ae:	27 95       	ror	r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    24b0:	ec 85       	ldd	r30, Y+12	; 0x0c
    24b2:	fd 85       	ldd	r31, Y+13	; 0x0d
    24b4:	30 83       	st	Z, r19
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    24b6:	ee 85       	ldd	r30, Y+14	; 0x0e
    24b8:	ff 85       	ldd	r31, Y+15	; 0x0f
    24ba:	20 83       	st	Z, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    24bc:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    24be:	ec 89       	ldd	r30, Y+20	; 0x14
    24c0:	fd 89       	ldd	r31, Y+21	; 0x15
    24c2:	10 83       	st	Z, r17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    24c4:	ea 89       	ldd	r30, Y+18	; 0x12
    24c6:	fb 89       	ldd	r31, Y+19	; 0x13
    24c8:	80 81       	ld	r24, Z
    24ca:	88 69       	ori	r24, 0x98	; 152
    24cc:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    24ce:	ea 89       	ldd	r30, Y+18	; 0x12
    24d0:	fb 89       	ldd	r31, Y+19	; 0x13
    24d2:	80 81       	ld	r24, Z
    24d4:	8f 7d       	andi	r24, 0xDF	; 223
    24d6:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	1f 91       	pop	r17
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	df 90       	pop	r13
    24e4:	cf 90       	pop	r12
    24e6:	08 95       	ret

000024e8 <__vector_36>:
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    24e8:	1f 92       	push	r1
    24ea:	0f 92       	push	r0
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	0f 92       	push	r0
    24f0:	11 24       	eor	r1, r1
    24f2:	0b b6       	in	r0, 0x3b	; 59
    24f4:	0f 92       	push	r0
    24f6:	2f 93       	push	r18
    24f8:	8f 93       	push	r24
    24fa:	9f 93       	push	r25
    24fc:	ef 93       	push	r30
    24fe:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2500:	e0 91 18 19 	lds	r30, 0x1918	; 0x801918 <Serial1+0x10>
    2504:	f0 91 19 19 	lds	r31, 0x1919	; 0x801919 <Serial1+0x11>
    2508:	80 81       	ld	r24, Z
    250a:	e0 91 1e 19 	lds	r30, 0x191E	; 0x80191e <Serial1+0x16>
    250e:	f0 91 1f 19 	lds	r31, 0x191F	; 0x80191f <Serial1+0x17>
    2512:	82 fd       	sbrc	r24, 2
    2514:	1d c0       	rjmp	.+58     	; 0x2550 <__vector_36+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2516:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2518:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <Serial1+0x19>
    251c:	8f 5f       	subi	r24, 0xFF	; 255
    251e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2520:	20 91 22 19 	lds	r18, 0x1922	; 0x801922 <Serial1+0x1a>
    2524:	82 17       	cp	r24, r18
    2526:	41 f0       	breq	.+16     	; 0x2538 <__vector_36+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    2528:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <Serial1+0x19>
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	e8 5f       	subi	r30, 0xF8	; 248
    2530:	f6 4e       	sbci	r31, 0xE6	; 230
    2532:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2534:	80 93 21 19 	sts	0x1921, r24	; 0x801921 <Serial1+0x19>
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    2538:	ff 91       	pop	r31
    253a:	ef 91       	pop	r30
    253c:	9f 91       	pop	r25
    253e:	8f 91       	pop	r24
    2540:	2f 91       	pop	r18
    2542:	0f 90       	pop	r0
    2544:	0b be       	out	0x3b, r0	; 59
    2546:	0f 90       	pop	r0
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	0f 90       	pop	r0
    254c:	1f 90       	pop	r1
    254e:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2550:	80 81       	ld	r24, Z
__vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    2552:	f2 cf       	rjmp	.-28     	; 0x2538 <__vector_36+0x50>

00002554 <__vector_37>:
__vector_37():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2554:	1f 92       	push	r1
    2556:	0f 92       	push	r0
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	0f 92       	push	r0
    255c:	11 24       	eor	r1, r1
    255e:	0b b6       	in	r0, 0x3b	; 59
    2560:	0f 92       	push	r0
    2562:	2f 93       	push	r18
    2564:	3f 93       	push	r19
    2566:	4f 93       	push	r20
    2568:	5f 93       	push	r21
    256a:	6f 93       	push	r22
    256c:	7f 93       	push	r23
    256e:	8f 93       	push	r24
    2570:	9f 93       	push	r25
    2572:	af 93       	push	r26
    2574:	bf 93       	push	r27
    2576:	ef 93       	push	r30
    2578:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    257a:	88 e0       	ldi	r24, 0x08	; 8
    257c:	99 e1       	ldi	r25, 0x19	; 25
    257e:	0e 94 93 11 	call	0x2326	; 0x2326 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    2582:	ff 91       	pop	r31
    2584:	ef 91       	pop	r30
    2586:	bf 91       	pop	r27
    2588:	af 91       	pop	r26
    258a:	9f 91       	pop	r25
    258c:	8f 91       	pop	r24
    258e:	7f 91       	pop	r23
    2590:	6f 91       	pop	r22
    2592:	5f 91       	pop	r21
    2594:	4f 91       	pop	r20
    2596:	3f 91       	pop	r19
    2598:	2f 91       	pop	r18
    259a:	0f 90       	pop	r0
    259c:	0b be       	out	0x3b, r0	; 59
    259e:	0f 90       	pop	r0
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	0f 90       	pop	r0
    25a4:	1f 90       	pop	r1
    25a6:	18 95       	reti

000025a8 <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    25a8:	88 e0       	ldi	r24, 0x08	; 8
    25aa:	99 e1       	ldi	r25, 0x19	; 25
    25ac:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
    25b0:	21 e0       	ldi	r18, 0x01	; 1
    25b2:	89 2b       	or	r24, r25
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <Serial1_available()+0x10>
    25b6:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    25b8:	82 2f       	mov	r24, r18
    25ba:	08 95       	ret

000025bc <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    25bc:	e8 e0       	ldi	r30, 0x08	; 8
    25be:	f9 e1       	ldi	r31, 0x19	; 25
    25c0:	13 82       	std	Z+3, r1	; 0x03
    25c2:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    25c4:	88 ee       	ldi	r24, 0xE8	; 232
    25c6:	93 e0       	ldi	r25, 0x03	; 3
    25c8:	a0 e0       	ldi	r26, 0x00	; 0
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	84 83       	std	Z+4, r24	; 0x04
    25ce:	95 83       	std	Z+5, r25	; 0x05
    25d0:	a6 83       	std	Z+6, r26	; 0x06
    25d2:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    25d4:	80 e7       	ldi	r24, 0x70	; 112
    25d6:	92 e0       	ldi	r25, 0x02	; 2
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
    25dc:	8d ec       	ldi	r24, 0xCD	; 205
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	95 87       	std	Z+13, r25	; 0x0d
    25e2:	84 87       	std	Z+12, r24	; 0x0c
    25e4:	8c ec       	ldi	r24, 0xCC	; 204
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	97 87       	std	Z+15, r25	; 0x0f
    25ea:	86 87       	std	Z+14, r24	; 0x0e
    25ec:	88 ec       	ldi	r24, 0xC8	; 200
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	91 8b       	std	Z+17, r25	; 0x11
    25f2:	80 8b       	std	Z+16, r24	; 0x10
    25f4:	89 ec       	ldi	r24, 0xC9	; 201
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	93 8b       	std	Z+19, r25	; 0x13
    25fa:	82 8b       	std	Z+18, r24	; 0x12
    25fc:	8a ec       	ldi	r24, 0xCA	; 202
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	95 8b       	std	Z+21, r25	; 0x15
    2602:	84 8b       	std	Z+20, r24	; 0x14
    2604:	8e ec       	ldi	r24, 0xCE	; 206
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	97 8b       	std	Z+23, r25	; 0x17
    260a:	86 8b       	std	Z+22, r24	; 0x16
    260c:	11 8e       	std	Z+25, r1	; 0x19
    260e:	12 8e       	std	Z+26, r1	; 0x1a
    2610:	13 8e       	std	Z+27, r1	; 0x1b
    2612:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    2614:	08 95       	ret

00002616 <__vector_51>:
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:40
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    2616:	1f 92       	push	r1
    2618:	0f 92       	push	r0
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	0f 92       	push	r0
    261e:	11 24       	eor	r1, r1
    2620:	0b b6       	in	r0, 0x3b	; 59
    2622:	0f 92       	push	r0
    2624:	2f 93       	push	r18
    2626:	8f 93       	push	r24
    2628:	9f 93       	push	r25
    262a:	ef 93       	push	r30
    262c:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    262e:	e0 91 b5 19 	lds	r30, 0x19B5	; 0x8019b5 <Serial2+0x10>
    2632:	f0 91 b6 19 	lds	r31, 0x19B6	; 0x8019b6 <Serial2+0x11>
    2636:	80 81       	ld	r24, Z
    2638:	e0 91 bb 19 	lds	r30, 0x19BB	; 0x8019bb <Serial2+0x16>
    263c:	f0 91 bc 19 	lds	r31, 0x19BC	; 0x8019bc <Serial2+0x17>
    2640:	82 fd       	sbrc	r24, 2
    2642:	1d c0       	rjmp	.+58     	; 0x267e <__vector_51+0x68>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2644:	90 81       	ld	r25, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2646:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <Serial2+0x19>
    264a:	8f 5f       	subi	r24, 0xFF	; 255
    264c:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    264e:	20 91 bf 19 	lds	r18, 0x19BF	; 0x8019bf <Serial2+0x1a>
    2652:	82 17       	cp	r24, r18
    2654:	41 f0       	breq	.+16     	; 0x2666 <__vector_51+0x50>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    2656:	e0 91 be 19 	lds	r30, 0x19BE	; 0x8019be <Serial2+0x19>
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	eb 55       	subi	r30, 0x5B	; 91
    265e:	f6 4e       	sbci	r31, 0xE6	; 230
    2660:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2662:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <Serial2+0x19>
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
  Serial2._rx_complete_irq();
}
    2666:	ff 91       	pop	r31
    2668:	ef 91       	pop	r30
    266a:	9f 91       	pop	r25
    266c:	8f 91       	pop	r24
    266e:	2f 91       	pop	r18
    2670:	0f 90       	pop	r0
    2672:	0b be       	out	0x3b, r0	; 59
    2674:	0f 90       	pop	r0
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	0f 90       	pop	r0
    267a:	1f 90       	pop	r1
    267c:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    267e:	80 81       	ld	r24, Z
__vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
    2680:	f2 cf       	rjmp	.-28     	; 0x2666 <__vector_51+0x50>

00002682 <__vector_52>:
__vector_52():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:45

ISR(USART2_UDRE_vect)
{
    2682:	1f 92       	push	r1
    2684:	0f 92       	push	r0
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	0f 92       	push	r0
    268a:	11 24       	eor	r1, r1
    268c:	0b b6       	in	r0, 0x3b	; 59
    268e:	0f 92       	push	r0
    2690:	2f 93       	push	r18
    2692:	3f 93       	push	r19
    2694:	4f 93       	push	r20
    2696:	5f 93       	push	r21
    2698:	6f 93       	push	r22
    269a:	7f 93       	push	r23
    269c:	8f 93       	push	r24
    269e:	9f 93       	push	r25
    26a0:	af 93       	push	r26
    26a2:	bf 93       	push	r27
    26a4:	ef 93       	push	r30
    26a6:	ff 93       	push	r31
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:46
  Serial2._tx_udr_empty_irq();
    26a8:	85 ea       	ldi	r24, 0xA5	; 165
    26aa:	99 e1       	ldi	r25, 0x19	; 25
    26ac:	0e 94 93 11 	call	0x2326	; 0x2326 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:47
}
    26b0:	ff 91       	pop	r31
    26b2:	ef 91       	pop	r30
    26b4:	bf 91       	pop	r27
    26b6:	af 91       	pop	r26
    26b8:	9f 91       	pop	r25
    26ba:	8f 91       	pop	r24
    26bc:	7f 91       	pop	r23
    26be:	6f 91       	pop	r22
    26c0:	5f 91       	pop	r21
    26c2:	4f 91       	pop	r20
    26c4:	3f 91       	pop	r19
    26c6:	2f 91       	pop	r18
    26c8:	0f 90       	pop	r0
    26ca:	0b be       	out	0x3b, r0	; 59
    26cc:	0f 90       	pop	r0
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	0f 90       	pop	r0
    26d2:	1f 90       	pop	r1
    26d4:	18 95       	reti

000026d6 <Serial2_available()>:
_Z17Serial2_availablev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:54
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    26d6:	85 ea       	ldi	r24, 0xA5	; 165
    26d8:	99 e1       	ldi	r25, 0x19	; 25
    26da:	0e 94 21 11 	call	0x2242	; 0x2242 <HardwareSerial::available()>
    26de:	21 e0       	ldi	r18, 0x01	; 1
    26e0:	89 2b       	or	r24, r25
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <Serial2_available()+0x10>
    26e4:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
}
    26e6:	82 2f       	mov	r24, r18
    26e8:	08 95       	ret

000026ea <_GLOBAL__sub_I___vector_51>:
_ZN5PrintC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    26ea:	e5 ea       	ldi	r30, 0xA5	; 165
    26ec:	f9 e1       	ldi	r31, 0x19	; 25
    26ee:	13 82       	std	Z+3, r1	; 0x03
    26f0:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
    26f2:	88 ee       	ldi	r24, 0xE8	; 232
    26f4:	93 e0       	ldi	r25, 0x03	; 3
    26f6:	a0 e0       	ldi	r26, 0x00	; 0
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	84 83       	std	Z+4, r24	; 0x04
    26fc:	95 83       	std	Z+5, r25	; 0x05
    26fe:	a6 83       	std	Z+6, r26	; 0x06
    2700:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2702:	80 e7       	ldi	r24, 0x70	; 112
    2704:	92 e0       	ldi	r25, 0x02	; 2
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	80 83       	st	Z, r24
    270a:	85 ed       	ldi	r24, 0xD5	; 213
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	95 87       	std	Z+13, r25	; 0x0d
    2710:	84 87       	std	Z+12, r24	; 0x0c
    2712:	84 ed       	ldi	r24, 0xD4	; 212
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	97 87       	std	Z+15, r25	; 0x0f
    2718:	86 87       	std	Z+14, r24	; 0x0e
    271a:	80 ed       	ldi	r24, 0xD0	; 208
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	91 8b       	std	Z+17, r25	; 0x11
    2720:	80 8b       	std	Z+16, r24	; 0x10
    2722:	81 ed       	ldi	r24, 0xD1	; 209
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	93 8b       	std	Z+19, r25	; 0x13
    2728:	82 8b       	std	Z+18, r24	; 0x12
    272a:	82 ed       	ldi	r24, 0xD2	; 210
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	95 8b       	std	Z+21, r25	; 0x15
    2730:	84 8b       	std	Z+20, r24	; 0x14
    2732:	86 ed       	ldi	r24, 0xD6	; 214
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	97 8b       	std	Z+23, r25	; 0x17
    2738:	86 8b       	std	Z+22, r24	; 0x16
    273a:	11 8e       	std	Z+25, r1	; 0x19
    273c:	12 8e       	std	Z+26, r1	; 0x1a
    273e:	13 8e       	std	Z+27, r1	; 0x1b
    2740:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_51():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
    2742:	08 95       	ret

00002744 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:123
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
    2744:	af 92       	push	r10
    2746:	bf 92       	push	r11
    2748:	cf 92       	push	r12
    274a:	df 92       	push	r13
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	6c 01       	movw	r12, r24
    275a:	7b 01       	movw	r14, r22
    275c:	8b 01       	movw	r16, r22
    275e:	04 0f       	add	r16, r20
    2760:	15 1f       	adc	r17, r21
    2762:	eb 01       	movw	r28, r22
    2764:	5e 01       	movw	r10, r28
    2766:	ae 18       	sub	r10, r14
    2768:	bf 08       	sbc	r11, r15
    276a:	c0 17       	cp	r28, r16
    276c:	d1 07       	cpc	r29, r17
    276e:	59 f0       	breq	.+22     	; 0x2786 <Print::write(unsigned char const*, unsigned int)+0x42>
    2770:	69 91       	ld	r22, Y+
    2772:	d6 01       	movw	r26, r12
    2774:	ed 91       	ld	r30, X+
    2776:	fc 91       	ld	r31, X
    2778:	01 90       	ld	r0, Z+
    277a:	f0 81       	ld	r31, Z
    277c:	e0 2d       	mov	r30, r0
    277e:	c6 01       	movw	r24, r12
    2780:	19 95       	eicall
    2782:	89 2b       	or	r24, r25
    2784:	79 f7       	brne	.-34     	; 0x2764 <Print::write(unsigned char const*, unsigned int)+0x20>
    2786:	c5 01       	movw	r24, r10
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	ff 90       	pop	r15
    2792:	ef 90       	pop	r14
    2794:	df 90       	pop	r13
    2796:	cf 90       	pop	r12
    2798:	bf 90       	pop	r11
    279a:	af 90       	pop	r10
    279c:	08 95       	ret

0000279e <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    279e:	fb 01       	movw	r30, r22
    27a0:	01 90       	ld	r0, Z+
    27a2:	00 20       	and	r0, r0
    27a4:	e9 f7       	brne	.-6      	; 0x27a0 <Print::write(char const*) [clone .part.2]+0x2>
    27a6:	31 97       	sbiw	r30, 0x01	; 1
    27a8:	af 01       	movw	r20, r30
    27aa:	46 1b       	sub	r20, r22
    27ac:	57 0b       	sbc	r21, r23
    27ae:	dc 01       	movw	r26, r24
    27b0:	ed 91       	ld	r30, X+
    27b2:	fc 91       	ld	r31, X
    27b4:	02 80       	ldd	r0, Z+2	; 0x02
    27b6:	f3 81       	ldd	r31, Z+3	; 0x03
    27b8:	e0 2d       	mov	r30, r0
    27ba:	19 94       	eijmp

000027bc <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    27bc:	ef 92       	push	r14
    27be:	ff 92       	push	r15
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	8c 01       	movw	r16, r24
    27ca:	7b 01       	movw	r14, r22
    27cc:	d0 e0       	ldi	r29, 0x00	; 0
    27ce:	c0 e0       	ldi	r28, 0x00	; 0
    27d0:	f7 01       	movw	r30, r14
    27d2:	ec 0f       	add	r30, r28
    27d4:	fd 1f       	adc	r31, r29
    27d6:	64 91       	lpm	r22, Z
    27d8:	66 23       	and	r22, r22
    27da:	61 f0       	breq	.+24     	; 0x27f4 <Print::print(__FlashStringHelper const*)+0x38>
    27dc:	d8 01       	movw	r26, r16
    27de:	ed 91       	ld	r30, X+
    27e0:	fc 91       	ld	r31, X
    27e2:	01 90       	ld	r0, Z+
    27e4:	f0 81       	ld	r31, Z
    27e6:	e0 2d       	mov	r30, r0
    27e8:	c8 01       	movw	r24, r16
    27ea:	19 95       	eicall
    27ec:	89 2b       	or	r24, r25
    27ee:	11 f0       	breq	.+4      	; 0x27f4 <Print::print(__FlashStringHelper const*)+0x38>
    27f0:	21 96       	adiw	r28, 0x01	; 1
    27f2:	ee cf       	rjmp	.-36     	; 0x27d0 <Print::print(__FlashStringHelper const*)+0x14>
    27f4:	ce 01       	movw	r24, r28
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	08 95       	ret

00002804 <Print::println()>:
_ZN5Print5writeEPKc():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:127
}

size_t Print::println(void)
{
    2804:	6e e7       	ldi	r22, 0x7E	; 126
    2806:	72 e0       	ldi	r23, 0x02	; 2
    2808:	0c 94 cf 13 	jmp	0x279e	; 0x279e <Print::write(char const*) [clone .part.2]>

0000280c <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:115
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	ec 01       	movw	r28, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:116
  size_t n = print(ifsh);
    2816:	0e 94 de 13 	call	0x27bc	; 0x27bc <Print::print(__FlashStringHelper const*)>
    281a:	8c 01       	movw	r16, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:117
  n += println();
    281c:	ce 01       	movw	r24, r28
    281e:	0e 94 02 14 	call	0x2804	; 0x2804 <Print::println()>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:119
  return n;
}
    2822:	80 0f       	add	r24, r16
    2824:	91 1f       	adc	r25, r17
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	08 95       	ret

00002830 <initVariant>:
initVariant():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2830:	08 95       	ret

00002832 <main>:
main():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    2832:	0e 94 7e 14 	call	0x28fc	; 0x28fc <init>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    2836:	0e 94 18 14 	call	0x2830	; 0x2830 <initVariant>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    283a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <setup>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    283e:	ce e5       	ldi	r28, 0x5E	; 94
    2840:	d1 e1       	ldi	r29, 0x11	; 17
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    2842:	0e 94 2d 10 	call	0x205a	; 0x205a <loop>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    2846:	20 97       	sbiw	r28, 0x00	; 0
    2848:	e1 f3       	breq	.-8      	; 0x2842 <main+0x10>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    284a:	0e 94 5e 11 	call	0x22bc	; 0x22bc <serialEventRun()>
    284e:	f9 cf       	rjmp	.-14     	; 0x2842 <main+0x10>

00002850 <__vector_23>:
__vector_23():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    2850:	1f 92       	push	r1
    2852:	0f 92       	push	r0
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	0f 92       	push	r0
    2858:	11 24       	eor	r1, r1
    285a:	2f 93       	push	r18
    285c:	3f 93       	push	r19
    285e:	8f 93       	push	r24
    2860:	9f 93       	push	r25
    2862:	af 93       	push	r26
    2864:	bf 93       	push	r27
    2866:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <timer0_millis>
    286a:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <timer0_millis+0x1>
    286e:	a0 91 49 1a 	lds	r26, 0x1A49	; 0x801a49 <timer0_millis+0x2>
    2872:	b0 91 4a 1a 	lds	r27, 0x1A4A	; 0x801a4a <timer0_millis+0x3>
    2876:	30 91 46 1a 	lds	r19, 0x1A46	; 0x801a46 <timer0_fract>
    287a:	26 e0       	ldi	r18, 0x06	; 6
    287c:	23 0f       	add	r18, r19
    287e:	2d 37       	cpi	r18, 0x7D	; 125
    2880:	68 f1       	brcs	.+90     	; 0x28dc <__vector_23+0x8c>
    2882:	29 e8       	ldi	r18, 0x89	; 137
    2884:	23 0f       	add	r18, r19
    2886:	03 96       	adiw	r24, 0x03	; 3
    2888:	a1 1d       	adc	r26, r1
    288a:	b1 1d       	adc	r27, r1
    288c:	20 93 46 1a 	sts	0x1A46, r18	; 0x801a46 <timer0_fract>
    2890:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <timer0_millis>
    2894:	90 93 48 1a 	sts	0x1A48, r25	; 0x801a48 <timer0_millis+0x1>
    2898:	a0 93 49 1a 	sts	0x1A49, r26	; 0x801a49 <timer0_millis+0x2>
    289c:	b0 93 4a 1a 	sts	0x1A4A, r27	; 0x801a4a <timer0_millis+0x3>
    28a0:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <timer0_overflow_count>
    28a4:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <timer0_overflow_count+0x1>
    28a8:	a0 91 44 1a 	lds	r26, 0x1A44	; 0x801a44 <timer0_overflow_count+0x2>
    28ac:	b0 91 45 1a 	lds	r27, 0x1A45	; 0x801a45 <timer0_overflow_count+0x3>
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	a1 1d       	adc	r26, r1
    28b4:	b1 1d       	adc	r27, r1
    28b6:	80 93 42 1a 	sts	0x1A42, r24	; 0x801a42 <timer0_overflow_count>
    28ba:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <timer0_overflow_count+0x1>
    28be:	a0 93 44 1a 	sts	0x1A44, r26	; 0x801a44 <timer0_overflow_count+0x2>
    28c2:	b0 93 45 1a 	sts	0x1A45, r27	; 0x801a45 <timer0_overflow_count+0x3>
    28c6:	bf 91       	pop	r27
    28c8:	af 91       	pop	r26
    28ca:	9f 91       	pop	r25
    28cc:	8f 91       	pop	r24
    28ce:	3f 91       	pop	r19
    28d0:	2f 91       	pop	r18
    28d2:	0f 90       	pop	r0
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	0f 90       	pop	r0
    28d8:	1f 90       	pop	r1
    28da:	18 95       	reti
    28dc:	02 96       	adiw	r24, 0x02	; 2
    28de:	a1 1d       	adc	r26, r1
    28e0:	b1 1d       	adc	r27, r1
    28e2:	d4 cf       	rjmp	.-88     	; 0x288c <__vector_23+0x3c>

000028e4 <millis>:
millis():
    28e4:	2f b7       	in	r18, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	60 91 47 1a 	lds	r22, 0x1A47	; 0x801a47 <timer0_millis>
    28ec:	70 91 48 1a 	lds	r23, 0x1A48	; 0x801a48 <timer0_millis+0x1>
    28f0:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <timer0_millis+0x2>
    28f4:	90 91 4a 1a 	lds	r25, 0x1A4A	; 0x801a4a <timer0_millis+0x3>
    28f8:	2f bf       	out	0x3f, r18	; 63
    28fa:	08 95       	ret

000028fc <init>:
init():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    28fc:	78 94       	sei
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    28fe:	84 b5       	in	r24, 0x24	; 36
    2900:	83 60       	ori	r24, 0x03	; 3
    2902:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2904:	85 b5       	in	r24, 0x25	; 37
    2906:	83 60       	ori	r24, 0x03	; 3
    2908:	85 bd       	out	0x25, r24	; 37
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    290a:	ee e6       	ldi	r30, 0x6E	; 110
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	81 60       	ori	r24, 0x01	; 1
    2912:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2914:	e1 e8       	ldi	r30, 0x81	; 129
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	82 e0       	ldi	r24, 0x02	; 2
    291a:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    291c:	80 81       	ld	r24, Z
    291e:	81 60       	ori	r24, 0x01	; 1
    2920:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2922:	e0 e8       	ldi	r30, 0x80	; 128
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	81 60       	ori	r24, 0x01	; 1
    292a:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    292c:	e1 eb       	ldi	r30, 0xB1	; 177
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	84 60       	ori	r24, 0x04	; 4
    2934:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2936:	e0 eb       	ldi	r30, 0xB0	; 176
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	81 60       	ori	r24, 0x01	; 1
    293e:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    2940:	e1 e9       	ldi	r30, 0x91	; 145
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	83 60       	ori	r24, 0x03	; 3
    2948:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    294a:	e0 e9       	ldi	r30, 0x90	; 144
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	81 60       	ori	r24, 0x01	; 1
    2952:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    2954:	e1 ea       	ldi	r30, 0xA1	; 161
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	83 60       	ori	r24, 0x03	; 3
    295c:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    295e:	e0 ea       	ldi	r30, 0xA0	; 160
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	81 60       	ori	r24, 0x01	; 1
    2966:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    2968:	e1 e2       	ldi	r30, 0x21	; 33
    296a:	f1 e0       	ldi	r31, 0x01	; 1
    296c:	80 81       	ld	r24, Z
    296e:	83 60       	ori	r24, 0x03	; 3
    2970:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    2972:	e0 e2       	ldi	r30, 0x20	; 32
    2974:	f1 e0       	ldi	r31, 0x01	; 1
    2976:	80 81       	ld	r24, Z
    2978:	81 60       	ori	r24, 0x01	; 1
    297a:	80 83       	st	Z, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    297c:	86 e8       	ldi	r24, 0x86	; 134
    297e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2982:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    2986:	08 95       	ret

00002988 <analogRead>:
analogRead():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    2988:	80 31       	cpi	r24, 0x10	; 16
    298a:	20 f0       	brcs	.+8      	; 0x2994 <analogRead+0xc>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:49 (discriminator 1)
    298c:	84 34       	cpi	r24, 0x44	; 68
    298e:	08 f4       	brcc	.+2      	; 0x2992 <analogRead+0xa>
    2990:	84 e4       	ldi	r24, 0x44	; 68
    2992:	85 54       	subi	r24, 0x45	; 69
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:61 (discriminator 4)
#endif

#if defined(ADCSRB) && defined(MUX5)
  // the MUX5 bit of ADCSRB selects whether we're reading from channels
  // 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
  ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    2994:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    2998:	98 2f       	mov	r25, r24
    299a:	98 70       	andi	r25, 0x08	; 8
    299c:	27 7f       	andi	r18, 0xF7	; 247
    299e:	92 2b       	or	r25, r18
    29a0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:68 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    29a4:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <analog_reference>
    29a8:	90 e4       	ldi	r25, 0x40	; 64
    29aa:	29 9f       	mul	r18, r25
    29ac:	90 01       	movw	r18, r0
    29ae:	11 24       	eor	r1, r1
    29b0:	87 70       	andi	r24, 0x07	; 7
    29b2:	82 2b       	or	r24, r18
    29b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:76 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    29b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    29bc:	80 64       	ori	r24, 0x40	; 64
    29be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:79 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    29c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    29c6:	86 fd       	sbrc	r24, 6
    29c8:	fc cf       	rjmp	.-8      	; 0x29c2 <analogRead+0x3a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    29ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    29ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
    29d2:	08 95       	ret

000029d4 <turnOffPWM>:
turnOffPWM():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    29d4:	82 50       	subi	r24, 0x02	; 2
    29d6:	82 31       	cpi	r24, 0x12	; 18
    29d8:	08 f0       	brcs	.+2      	; 0x29dc <turnOffPWM+0x8>
    29da:	5f c0       	rjmp	.+190    	; 0x2a9a <turnOffPWM+0xc6>
    29dc:	e8 2f       	mov	r30, r24
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	88 27       	eor	r24, r24
    29e2:	ea 50       	subi	r30, 0x0A	; 10
    29e4:	fb 4e       	sbci	r31, 0xEB	; 235
    29e6:	8f 4f       	sbci	r24, 0xFF	; 255
    29e8:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__tablejump2__>
    29ec:	4a 15       	cp	r20, r10
    29ee:	4e 15       	cp	r20, r14
    29f0:	08 15       	cp	r16, r8
    29f2:	0e 15       	cp	r16, r14
    29f4:	12 15       	cp	r17, r2
    29f6:	4d 15       	cp	r20, r13
    29f8:	16 15       	cp	r17, r6
    29fa:	1c 15       	cp	r17, r12
    29fc:	20 15       	cp	r18, r0
    29fe:	26 15       	cp	r18, r6
    2a00:	2a 15       	cp	r18, r10
    2a02:	2e 15       	cp	r18, r14
    2a04:	34 15       	cp	r19, r4
    2a06:	38 15       	cp	r19, r8
    2a08:	4d 15       	cp	r20, r13
    2a0a:	3c 15       	cp	r19, r12
    2a0c:	42 15       	cp	r20, r2
    2a0e:	46 15       	cp	r20, r6
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    2a10:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2a14:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2a16:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    2a1a:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2a1c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2a20:	8f 7d       	andi	r24, 0xDF	; 223
    2a22:	f9 cf       	rjmp	.-14     	; 0x2a16 <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    2a24:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2a28:	87 7f       	andi	r24, 0xF7	; 247
    2a2a:	f5 cf       	rjmp	.-22     	; 0x2a16 <turnOffPWM+0x42>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2a2c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2a30:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2a32:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    2a36:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2a38:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2a3c:	8f 7d       	andi	r24, 0xDF	; 223
    2a3e:	f9 cf       	rjmp	.-14     	; 0x2a32 <turnOffPWM+0x5e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2a40:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2a44:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    2a46:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    2a4a:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2a4c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2a50:	8f 7d       	andi	r24, 0xDF	; 223
    2a52:	f9 cf       	rjmp	.-14     	; 0x2a46 <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    2a54:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2a58:	87 7f       	andi	r24, 0xF7	; 247
    2a5a:	f5 cf       	rjmp	.-22     	; 0x2a46 <turnOffPWM+0x72>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    2a5c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2a60:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    2a62:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    2a66:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    2a68:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2a6c:	8f 7d       	andi	r24, 0xDF	; 223
    2a6e:	f9 cf       	rjmp	.-14     	; 0x2a62 <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    2a70:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2a74:	87 7f       	andi	r24, 0xF7	; 247
    2a76:	f5 cf       	rjmp	.-22     	; 0x2a62 <turnOffPWM+0x8e>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    2a78:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2a7c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    2a7e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    2a82:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    2a84:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2a88:	8f 7d       	andi	r24, 0xDF	; 223
    2a8a:	f9 cf       	rjmp	.-14     	; 0x2a7e <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    2a8c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2a90:	87 7f       	andi	r24, 0xF7	; 247
    2a92:	f5 cf       	rjmp	.-22     	; 0x2a7e <turnOffPWM+0xaa>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    2a94:	84 b5       	in	r24, 0x24	; 36
    2a96:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2a98:	84 bd       	out	0x24, r24	; 36
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    2a9a:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2a9c:	84 b5       	in	r24, 0x24	; 36
    2a9e:	8f 7d       	andi	r24, 0xDF	; 223
    2aa0:	fb cf       	rjmp	.-10     	; 0x2a98 <turnOffPWM+0xc4>

00002aa2 <pinMode>:
pinMode():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	ed 51       	subi	r30, 0x1D	; 29
    2aac:	fd 4f       	sbci	r31, 0xFD	; 253
    2aae:	24 91       	lpm	r18, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    2ab0:	87 5c       	subi	r24, 0xC7	; 199
    2ab2:	9c 4f       	sbci	r25, 0xFC	; 252
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    2ab8:	88 23       	and	r24, r24
    2aba:	c9 f0       	breq	.+50     	; 0x2aee <pinMode+0x4c>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	e7 55       	subi	r30, 0x57	; 87
    2ac6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ac8:	a5 91       	lpm	r26, Z+
    2aca:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    2acc:	fc 01       	movw	r30, r24
    2ace:	e1 57       	subi	r30, 0x71	; 113
    2ad0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ad2:	c5 91       	lpm	r28, Z+
    2ad4:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    2ad6:	61 11       	cpse	r22, r1
    2ad8:	0d c0       	rjmp	.+26     	; 0x2af4 <pinMode+0x52>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2ada:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    2adc:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    2ade:	8c 91       	ld	r24, X
    2ae0:	20 95       	com	r18
    2ae2:	82 23       	and	r24, r18
    2ae4:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    2ae6:	88 81       	ld	r24, Y
    2ae8:	28 23       	and	r18, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2aea:	28 83       	st	Y, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2aec:	9f bf       	out	0x3f, r25	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    2af4:	62 30       	cpi	r22, 0x02	; 2
    2af6:	51 f4       	brne	.+20     	; 0x2b0c <pinMode+0x6a>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    2af8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    2afa:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2afc:	3c 91       	ld	r19, X
    2afe:	82 2f       	mov	r24, r18
    2b00:	80 95       	com	r24
    2b02:	83 23       	and	r24, r19
    2b04:	8c 93       	st	X, r24
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    2b06:	e8 81       	ld	r30, Y
    2b08:	2e 2b       	or	r18, r30
    2b0a:	ef cf       	rjmp	.-34     	; 0x2aea <pinMode+0x48>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2b0c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    2b0e:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2b10:	ec 91       	ld	r30, X
    2b12:	2e 2b       	or	r18, r30
    2b14:	2c 93       	st	X, r18
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    2b16:	8f bf       	out	0x3f, r24	; 63
    2b18:	ea cf       	rjmp	.-44     	; 0x2aee <pinMode+0x4c>

00002b1a <digitalWrite>:
digitalWrite():
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2b1a:	1f 93       	push	r17
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	f9 01       	movw	r30, r18
    2b26:	e3 57       	subi	r30, 0x73	; 115
    2b28:	fd 4f       	sbci	r31, 0xFD	; 253
    2b2a:	84 91       	lpm	r24, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2b2c:	f9 01       	movw	r30, r18
    2b2e:	ed 51       	subi	r30, 0x1D	; 29
    2b30:	fd 4f       	sbci	r31, 0xFD	; 253
    2b32:	d4 91       	lpm	r29, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    2b34:	f9 01       	movw	r30, r18
    2b36:	e7 5c       	subi	r30, 0xC7	; 199
    2b38:	fc 4f       	sbci	r31, 0xFC	; 252
    2b3a:	c4 91       	lpm	r28, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2b3c:	cc 23       	and	r28, r28
    2b3e:	a9 f0       	breq	.+42     	; 0x2b6a <digitalWrite+0x50>
    2b40:	16 2f       	mov	r17, r22
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2b42:	81 11       	cpse	r24, r1
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2b44:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <turnOffPWM>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2b48:	ec 2f       	mov	r30, r28
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	ee 0f       	add	r30, r30
    2b4e:	ff 1f       	adc	r31, r31
    2b50:	e1 57       	subi	r30, 0x71	; 113
    2b52:	fc 4f       	sbci	r31, 0xFC	; 252
    2b54:	a5 91       	lpm	r26, Z+
    2b56:	b4 91       	lpm	r27, Z
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2b58:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    2b5a:	f8 94       	cli
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2b5c:	ec 91       	ld	r30, X
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2b5e:	11 11       	cpse	r17, r1
    2b60:	08 c0       	rjmp	.+16     	; 0x2b72 <digitalWrite+0x58>
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2b62:	d0 95       	com	r29
    2b64:	de 23       	and	r29, r30
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2b66:	dc 93       	st	X, r29
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2b68:	8f bf       	out	0x3f, r24	; 63
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	08 95       	ret
C:\Users\mbt\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2b72:	de 2b       	or	r29, r30
    2b74:	f8 cf       	rjmp	.-16     	; 0x2b66 <digitalWrite+0x4c>

00002b76 <__floatunsisf>:
__floatunsisf():
    2b76:	e8 94       	clt
    2b78:	09 c0       	rjmp	.+18     	; 0x2b8c <__floatsisf+0x12>

00002b7a <__floatsisf>:
    2b7a:	97 fb       	bst	r25, 7
    2b7c:	3e f4       	brtc	.+14     	; 0x2b8c <__floatsisf+0x12>
    2b7e:	90 95       	com	r25
    2b80:	80 95       	com	r24
    2b82:	70 95       	com	r23
    2b84:	61 95       	neg	r22
    2b86:	7f 4f       	sbci	r23, 0xFF	; 255
    2b88:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8c:	99 23       	and	r25, r25
    2b8e:	a9 f0       	breq	.+42     	; 0x2bba <__floatsisf+0x40>
    2b90:	f9 2f       	mov	r31, r25
    2b92:	96 e9       	ldi	r25, 0x96	; 150
    2b94:	bb 27       	eor	r27, r27
    2b96:	93 95       	inc	r25
    2b98:	f6 95       	lsr	r31
    2b9a:	87 95       	ror	r24
    2b9c:	77 95       	ror	r23
    2b9e:	67 95       	ror	r22
    2ba0:	b7 95       	ror	r27
    2ba2:	f1 11       	cpse	r31, r1
    2ba4:	f8 cf       	rjmp	.-16     	; 0x2b96 <__floatsisf+0x1c>
    2ba6:	fa f4       	brpl	.+62     	; 0x2be6 <__floatsisf+0x6c>
    2ba8:	bb 0f       	add	r27, r27
    2baa:	11 f4       	brne	.+4      	; 0x2bb0 <__floatsisf+0x36>
    2bac:	60 ff       	sbrs	r22, 0
    2bae:	1b c0       	rjmp	.+54     	; 0x2be6 <__floatsisf+0x6c>
    2bb0:	6f 5f       	subi	r22, 0xFF	; 255
    2bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb8:	16 c0       	rjmp	.+44     	; 0x2be6 <__floatsisf+0x6c>
    2bba:	88 23       	and	r24, r24
    2bbc:	11 f0       	breq	.+4      	; 0x2bc2 <__floatsisf+0x48>
    2bbe:	96 e9       	ldi	r25, 0x96	; 150
    2bc0:	11 c0       	rjmp	.+34     	; 0x2be4 <__floatsisf+0x6a>
    2bc2:	77 23       	and	r23, r23
    2bc4:	21 f0       	breq	.+8      	; 0x2bce <__floatsisf+0x54>
    2bc6:	9e e8       	ldi	r25, 0x8E	; 142
    2bc8:	87 2f       	mov	r24, r23
    2bca:	76 2f       	mov	r23, r22
    2bcc:	05 c0       	rjmp	.+10     	; 0x2bd8 <__floatsisf+0x5e>
    2bce:	66 23       	and	r22, r22
    2bd0:	71 f0       	breq	.+28     	; 0x2bee <__floatsisf+0x74>
    2bd2:	96 e8       	ldi	r25, 0x86	; 134
    2bd4:	86 2f       	mov	r24, r22
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	2a f0       	brmi	.+10     	; 0x2be6 <__floatsisf+0x6c>
    2bdc:	9a 95       	dec	r25
    2bde:	66 0f       	add	r22, r22
    2be0:	77 1f       	adc	r23, r23
    2be2:	88 1f       	adc	r24, r24
    2be4:	da f7       	brpl	.-10     	; 0x2bdc <__floatsisf+0x62>
    2be6:	88 0f       	add	r24, r24
    2be8:	96 95       	lsr	r25
    2bea:	87 95       	ror	r24
    2bec:	97 f9       	bld	r25, 7
    2bee:	08 95       	ret

00002bf0 <__fp_cmp>:
__fp_cmp():
    2bf0:	99 0f       	add	r25, r25
    2bf2:	00 08       	sbc	r0, r0
    2bf4:	55 0f       	add	r21, r21
    2bf6:	aa 0b       	sbc	r26, r26
    2bf8:	e0 e8       	ldi	r30, 0x80	; 128
    2bfa:	fe ef       	ldi	r31, 0xFE	; 254
    2bfc:	16 16       	cp	r1, r22
    2bfe:	17 06       	cpc	r1, r23
    2c00:	e8 07       	cpc	r30, r24
    2c02:	f9 07       	cpc	r31, r25
    2c04:	c0 f0       	brcs	.+48     	; 0x2c36 <__fp_cmp+0x46>
    2c06:	12 16       	cp	r1, r18
    2c08:	13 06       	cpc	r1, r19
    2c0a:	e4 07       	cpc	r30, r20
    2c0c:	f5 07       	cpc	r31, r21
    2c0e:	98 f0       	brcs	.+38     	; 0x2c36 <__fp_cmp+0x46>
    2c10:	62 1b       	sub	r22, r18
    2c12:	73 0b       	sbc	r23, r19
    2c14:	84 0b       	sbc	r24, r20
    2c16:	95 0b       	sbc	r25, r21
    2c18:	39 f4       	brne	.+14     	; 0x2c28 <__fp_cmp+0x38>
    2c1a:	0a 26       	eor	r0, r26
    2c1c:	61 f0       	breq	.+24     	; 0x2c36 <__fp_cmp+0x46>
    2c1e:	23 2b       	or	r18, r19
    2c20:	24 2b       	or	r18, r20
    2c22:	25 2b       	or	r18, r21
    2c24:	21 f4       	brne	.+8      	; 0x2c2e <__fp_cmp+0x3e>
    2c26:	08 95       	ret
    2c28:	0a 26       	eor	r0, r26
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <__fp_cmp+0x3e>
    2c2c:	a1 40       	sbci	r26, 0x01	; 1
    2c2e:	a6 95       	lsr	r26
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	81 1d       	adc	r24, r1
    2c34:	81 1d       	adc	r24, r1
    2c36:	08 95       	ret

00002c38 <__fp_inf>:
__fp_inf():
    2c38:	97 f9       	bld	r25, 7
    2c3a:	9f 67       	ori	r25, 0x7F	; 127
    2c3c:	80 e8       	ldi	r24, 0x80	; 128
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	60 e0       	ldi	r22, 0x00	; 0
    2c42:	08 95       	ret

00002c44 <__fp_nan>:
__fp_nan():
    2c44:	9f ef       	ldi	r25, 0xFF	; 255
    2c46:	80 ec       	ldi	r24, 0xC0	; 192
    2c48:	08 95       	ret

00002c4a <__fp_pscA>:
__fp_pscA():
    2c4a:	00 24       	eor	r0, r0
    2c4c:	0a 94       	dec	r0
    2c4e:	16 16       	cp	r1, r22
    2c50:	17 06       	cpc	r1, r23
    2c52:	18 06       	cpc	r1, r24
    2c54:	09 06       	cpc	r0, r25
    2c56:	08 95       	ret

00002c58 <__fp_pscB>:
__fp_pscB():
    2c58:	00 24       	eor	r0, r0
    2c5a:	0a 94       	dec	r0
    2c5c:	12 16       	cp	r1, r18
    2c5e:	13 06       	cpc	r1, r19
    2c60:	14 06       	cpc	r1, r20
    2c62:	05 06       	cpc	r0, r21
    2c64:	08 95       	ret

00002c66 <__fp_round>:
__fp_round():
    2c66:	09 2e       	mov	r0, r25
    2c68:	03 94       	inc	r0
    2c6a:	00 0c       	add	r0, r0
    2c6c:	11 f4       	brne	.+4      	; 0x2c72 <__fp_round+0xc>
    2c6e:	88 23       	and	r24, r24
    2c70:	52 f0       	brmi	.+20     	; 0x2c86 <__fp_round+0x20>
    2c72:	bb 0f       	add	r27, r27
    2c74:	40 f4       	brcc	.+16     	; 0x2c86 <__fp_round+0x20>
    2c76:	bf 2b       	or	r27, r31
    2c78:	11 f4       	brne	.+4      	; 0x2c7e <__fp_round+0x18>
    2c7a:	60 ff       	sbrs	r22, 0
    2c7c:	04 c0       	rjmp	.+8      	; 0x2c86 <__fp_round+0x20>
    2c7e:	6f 5f       	subi	r22, 0xFF	; 255
    2c80:	7f 4f       	sbci	r23, 0xFF	; 255
    2c82:	8f 4f       	sbci	r24, 0xFF	; 255
    2c84:	9f 4f       	sbci	r25, 0xFF	; 255
    2c86:	08 95       	ret

00002c88 <__fp_split3>:
__fp_split3():
    2c88:	57 fd       	sbrc	r21, 7
    2c8a:	90 58       	subi	r25, 0x80	; 128
    2c8c:	44 0f       	add	r20, r20
    2c8e:	55 1f       	adc	r21, r21
    2c90:	59 f0       	breq	.+22     	; 0x2ca8 <__fp_splitA+0x10>
    2c92:	5f 3f       	cpi	r21, 0xFF	; 255
    2c94:	71 f0       	breq	.+28     	; 0x2cb2 <__fp_splitA+0x1a>
    2c96:	47 95       	ror	r20

00002c98 <__fp_splitA>:
    2c98:	88 0f       	add	r24, r24
    2c9a:	97 fb       	bst	r25, 7
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	61 f0       	breq	.+24     	; 0x2cb8 <__fp_splitA+0x20>
    2ca0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ca2:	79 f0       	breq	.+30     	; 0x2cc2 <__fp_splitA+0x2a>
    2ca4:	87 95       	ror	r24
    2ca6:	08 95       	ret
    2ca8:	12 16       	cp	r1, r18
    2caa:	13 06       	cpc	r1, r19
    2cac:	14 06       	cpc	r1, r20
    2cae:	55 1f       	adc	r21, r21
    2cb0:	f2 cf       	rjmp	.-28     	; 0x2c96 <__fp_split3+0xe>
    2cb2:	46 95       	lsr	r20
    2cb4:	f1 df       	rcall	.-30     	; 0x2c98 <__fp_splitA>
    2cb6:	08 c0       	rjmp	.+16     	; 0x2cc8 <__fp_splitA+0x30>
    2cb8:	16 16       	cp	r1, r22
    2cba:	17 06       	cpc	r1, r23
    2cbc:	18 06       	cpc	r1, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	f1 cf       	rjmp	.-30     	; 0x2ca4 <__fp_splitA+0xc>
    2cc2:	86 95       	lsr	r24
    2cc4:	71 05       	cpc	r23, r1
    2cc6:	61 05       	cpc	r22, r1
    2cc8:	08 94       	sec
    2cca:	08 95       	ret

00002ccc <__fp_zero>:
__fp_zero():
    2ccc:	e8 94       	clt

00002cce <__fp_szero>:
    2cce:	bb 27       	eor	r27, r27
    2cd0:	66 27       	eor	r22, r22
    2cd2:	77 27       	eor	r23, r23
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	97 f9       	bld	r25, 7
    2cd8:	08 95       	ret

00002cda <__gesf2>:
__gesf2():
    2cda:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__fp_cmp>
    2cde:	08 f4       	brcc	.+2      	; 0x2ce2 <__gesf2+0x8>
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	08 95       	ret

00002ce4 <__mulsf3>:
__mulsf3():
    2ce4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__mulsf3x>
    2ce8:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__fp_round>
    2cec:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fp_pscA>
    2cf0:	38 f0       	brcs	.+14     	; 0x2d00 <__mulsf3+0x1c>
    2cf2:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__fp_pscB>
    2cf6:	20 f0       	brcs	.+8      	; 0x2d00 <__mulsf3+0x1c>
    2cf8:	95 23       	and	r25, r21
    2cfa:	11 f0       	breq	.+4      	; 0x2d00 <__mulsf3+0x1c>
    2cfc:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__fp_inf>
    2d00:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_nan>
    2d04:	11 24       	eor	r1, r1
    2d06:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_szero>

00002d0a <__mulsf3x>:
__mulsf3x():
    2d0a:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fp_split3>
    2d0e:	70 f3       	brcs	.-36     	; 0x2cec <__mulsf3+0x8>

00002d10 <__mulsf3_pse>:
    2d10:	95 9f       	mul	r25, r21
    2d12:	c1 f3       	breq	.-16     	; 0x2d04 <__mulsf3+0x20>
    2d14:	95 0f       	add	r25, r21
    2d16:	50 e0       	ldi	r21, 0x00	; 0
    2d18:	55 1f       	adc	r21, r21
    2d1a:	62 9f       	mul	r22, r18
    2d1c:	f0 01       	movw	r30, r0
    2d1e:	72 9f       	mul	r23, r18
    2d20:	bb 27       	eor	r27, r27
    2d22:	f0 0d       	add	r31, r0
    2d24:	b1 1d       	adc	r27, r1
    2d26:	63 9f       	mul	r22, r19
    2d28:	aa 27       	eor	r26, r26
    2d2a:	f0 0d       	add	r31, r0
    2d2c:	b1 1d       	adc	r27, r1
    2d2e:	aa 1f       	adc	r26, r26
    2d30:	64 9f       	mul	r22, r20
    2d32:	66 27       	eor	r22, r22
    2d34:	b0 0d       	add	r27, r0
    2d36:	a1 1d       	adc	r26, r1
    2d38:	66 1f       	adc	r22, r22
    2d3a:	82 9f       	mul	r24, r18
    2d3c:	22 27       	eor	r18, r18
    2d3e:	b0 0d       	add	r27, r0
    2d40:	a1 1d       	adc	r26, r1
    2d42:	62 1f       	adc	r22, r18
    2d44:	73 9f       	mul	r23, r19
    2d46:	b0 0d       	add	r27, r0
    2d48:	a1 1d       	adc	r26, r1
    2d4a:	62 1f       	adc	r22, r18
    2d4c:	83 9f       	mul	r24, r19
    2d4e:	a0 0d       	add	r26, r0
    2d50:	61 1d       	adc	r22, r1
    2d52:	22 1f       	adc	r18, r18
    2d54:	74 9f       	mul	r23, r20
    2d56:	33 27       	eor	r19, r19
    2d58:	a0 0d       	add	r26, r0
    2d5a:	61 1d       	adc	r22, r1
    2d5c:	23 1f       	adc	r18, r19
    2d5e:	84 9f       	mul	r24, r20
    2d60:	60 0d       	add	r22, r0
    2d62:	21 1d       	adc	r18, r1
    2d64:	82 2f       	mov	r24, r18
    2d66:	76 2f       	mov	r23, r22
    2d68:	6a 2f       	mov	r22, r26
    2d6a:	11 24       	eor	r1, r1
    2d6c:	9f 57       	subi	r25, 0x7F	; 127
    2d6e:	50 40       	sbci	r21, 0x00	; 0
    2d70:	9a f0       	brmi	.+38     	; 0x2d98 <__mulsf3_pse+0x88>
    2d72:	f1 f0       	breq	.+60     	; 0x2db0 <__mulsf3_pse+0xa0>
    2d74:	88 23       	and	r24, r24
    2d76:	4a f0       	brmi	.+18     	; 0x2d8a <__mulsf3_pse+0x7a>
    2d78:	ee 0f       	add	r30, r30
    2d7a:	ff 1f       	adc	r31, r31
    2d7c:	bb 1f       	adc	r27, r27
    2d7e:	66 1f       	adc	r22, r22
    2d80:	77 1f       	adc	r23, r23
    2d82:	88 1f       	adc	r24, r24
    2d84:	91 50       	subi	r25, 0x01	; 1
    2d86:	50 40       	sbci	r21, 0x00	; 0
    2d88:	a9 f7       	brne	.-22     	; 0x2d74 <__mulsf3_pse+0x64>
    2d8a:	9e 3f       	cpi	r25, 0xFE	; 254
    2d8c:	51 05       	cpc	r21, r1
    2d8e:	80 f0       	brcs	.+32     	; 0x2db0 <__mulsf3_pse+0xa0>
    2d90:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__fp_inf>
    2d94:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_szero>
    2d98:	5f 3f       	cpi	r21, 0xFF	; 255
    2d9a:	e4 f3       	brlt	.-8      	; 0x2d94 <__mulsf3_pse+0x84>
    2d9c:	98 3e       	cpi	r25, 0xE8	; 232
    2d9e:	d4 f3       	brlt	.-12     	; 0x2d94 <__mulsf3_pse+0x84>
    2da0:	86 95       	lsr	r24
    2da2:	77 95       	ror	r23
    2da4:	67 95       	ror	r22
    2da6:	b7 95       	ror	r27
    2da8:	f7 95       	ror	r31
    2daa:	e7 95       	ror	r30
    2dac:	9f 5f       	subi	r25, 0xFF	; 255
    2dae:	c1 f7       	brne	.-16     	; 0x2da0 <__mulsf3_pse+0x90>
    2db0:	fe 2b       	or	r31, r30
    2db2:	88 0f       	add	r24, r24
    2db4:	91 1d       	adc	r25, r1
    2db6:	96 95       	lsr	r25
    2db8:	87 95       	ror	r24
    2dba:	97 f9       	bld	r25, 7
    2dbc:	08 95       	ret

00002dbe <__udivmodsi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    2dbe:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2dc0:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2dc2:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2dc4:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2dc6:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2dc8:	0d c0       	rjmp	.+26     	; 0x2de4 <__udivmodsi4_ep>

00002dca <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    2dca:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    2dcc:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    2dce:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2dd0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2dd2:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2dd4:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2dd6:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2dd8:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    2dda:	20 f0       	brcs	.+8      	; 0x2de4 <__udivmodsi4_ep>
__udivmodsi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    2ddc:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    2dde:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2de0:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2de2:	f5 0b       	sbc	r31, r21

00002de4 <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2de4:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2de6:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2de8:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    2dea:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    2dec:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    2dee:	69 f7       	brne	.-38     	; 0x2dca <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    2df0:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2df2:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2df4:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2df6:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    2df8:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    2dfa:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    2dfc:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    2dfe:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    2e00:	08 95       	ret

00002e02 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2e02:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2e04:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    2e06:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    2e08:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    2e0a:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    2e0c:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    2e0e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2e10:	19 94       	eijmp

00002e12 <malloc>:
malloc():
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	82 30       	cpi	r24, 0x02	; 2
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	10 f4       	brcc	.+4      	; 0x2e24 <malloc+0x12>
    2e20:	82 e0       	ldi	r24, 0x02	; 2
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	e0 91 4d 1a 	lds	r30, 0x1A4D	; 0x801a4d <__flp>
    2e28:	f0 91 4e 1a 	lds	r31, 0x1A4E	; 0x801a4e <__flp+0x1>
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	a0 e0       	ldi	r26, 0x00	; 0
    2e34:	30 97       	sbiw	r30, 0x00	; 0
    2e36:	99 f4       	brne	.+38     	; 0x2e5e <malloc+0x4c>
    2e38:	21 15       	cp	r18, r1
    2e3a:	31 05       	cpc	r19, r1
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <malloc+0x2e>
    2e3e:	4a c0       	rjmp	.+148    	; 0x2ed4 <malloc+0xc2>
    2e40:	28 1b       	sub	r18, r24
    2e42:	39 0b       	sbc	r19, r25
    2e44:	24 30       	cpi	r18, 0x04	; 4
    2e46:	31 05       	cpc	r19, r1
    2e48:	d8 f5       	brcc	.+118    	; 0x2ec0 <malloc+0xae>
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4e:	61 15       	cp	r22, r1
    2e50:	71 05       	cpc	r23, r1
    2e52:	89 f1       	breq	.+98     	; 0x2eb6 <malloc+0xa4>
    2e54:	fb 01       	movw	r30, r22
    2e56:	93 83       	std	Z+3, r25	; 0x03
    2e58:	82 83       	std	Z+2, r24	; 0x02
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	11 c0       	rjmp	.+34     	; 0x2e80 <malloc+0x6e>
    2e5e:	40 81       	ld	r20, Z
    2e60:	51 81       	ldd	r21, Z+1	; 0x01
    2e62:	02 81       	ldd	r16, Z+2	; 0x02
    2e64:	13 81       	ldd	r17, Z+3	; 0x03
    2e66:	48 17       	cp	r20, r24
    2e68:	59 07       	cpc	r21, r25
    2e6a:	e0 f0       	brcs	.+56     	; 0x2ea4 <malloc+0x92>
    2e6c:	48 17       	cp	r20, r24
    2e6e:	59 07       	cpc	r21, r25
    2e70:	99 f4       	brne	.+38     	; 0x2e98 <malloc+0x86>
    2e72:	10 97       	sbiw	r26, 0x00	; 0
    2e74:	61 f0       	breq	.+24     	; 0x2e8e <malloc+0x7c>
    2e76:	12 96       	adiw	r26, 0x02	; 2
    2e78:	0c 93       	st	X, r16
    2e7a:	12 97       	sbiw	r26, 0x02	; 2
    2e7c:	13 96       	adiw	r26, 0x03	; 3
    2e7e:	1c 93       	st	X, r17
    2e80:	32 96       	adiw	r30, 0x02	; 2
    2e82:	cf 01       	movw	r24, r30
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	08 95       	ret
    2e8e:	00 93 4d 1a 	sts	0x1A4D, r16	; 0x801a4d <__flp>
    2e92:	10 93 4e 1a 	sts	0x1A4E, r17	; 0x801a4e <__flp+0x1>
    2e96:	f4 cf       	rjmp	.-24     	; 0x2e80 <malloc+0x6e>
    2e98:	21 15       	cp	r18, r1
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	51 f0       	breq	.+20     	; 0x2eb2 <malloc+0xa0>
    2e9e:	42 17       	cp	r20, r18
    2ea0:	53 07       	cpc	r21, r19
    2ea2:	38 f0       	brcs	.+14     	; 0x2eb2 <malloc+0xa0>
    2ea4:	a9 01       	movw	r20, r18
    2ea6:	db 01       	movw	r26, r22
    2ea8:	9a 01       	movw	r18, r20
    2eaa:	bd 01       	movw	r22, r26
    2eac:	df 01       	movw	r26, r30
    2eae:	f8 01       	movw	r30, r16
    2eb0:	c1 cf       	rjmp	.-126    	; 0x2e34 <malloc+0x22>
    2eb2:	ef 01       	movw	r28, r30
    2eb4:	f9 cf       	rjmp	.-14     	; 0x2ea8 <malloc+0x96>
    2eb6:	90 93 4e 1a 	sts	0x1A4E, r25	; 0x801a4e <__flp+0x1>
    2eba:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <__flp>
    2ebe:	cd cf       	rjmp	.-102    	; 0x2e5a <malloc+0x48>
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e2 0f       	add	r30, r18
    2ec4:	f3 1f       	adc	r31, r19
    2ec6:	81 93       	st	Z+, r24
    2ec8:	91 93       	st	Z+, r25
    2eca:	22 50       	subi	r18, 0x02	; 2
    2ecc:	31 09       	sbc	r19, r1
    2ece:	39 83       	std	Y+1, r19	; 0x01
    2ed0:	28 83       	st	Y, r18
    2ed2:	d7 cf       	rjmp	.-82     	; 0x2e82 <malloc+0x70>
    2ed4:	20 91 4b 1a 	lds	r18, 0x1A4B	; 0x801a4b <__brkval>
    2ed8:	30 91 4c 1a 	lds	r19, 0x1A4C	; 0x801a4c <__brkval+0x1>
    2edc:	23 2b       	or	r18, r19
    2ede:	41 f4       	brne	.+16     	; 0x2ef0 <malloc+0xde>
    2ee0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2ee4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2ee8:	30 93 4c 1a 	sts	0x1A4C, r19	; 0x801a4c <__brkval+0x1>
    2eec:	20 93 4b 1a 	sts	0x1A4B, r18	; 0x801a4b <__brkval>
    2ef0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2ef4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2ef8:	21 15       	cp	r18, r1
    2efa:	31 05       	cpc	r19, r1
    2efc:	41 f4       	brne	.+16     	; 0x2f0e <malloc+0xfc>
    2efe:	2d b7       	in	r18, 0x3d	; 61
    2f00:	3e b7       	in	r19, 0x3e	; 62
    2f02:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2f06:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2f0a:	24 1b       	sub	r18, r20
    2f0c:	35 0b       	sbc	r19, r21
    2f0e:	e0 91 4b 1a 	lds	r30, 0x1A4B	; 0x801a4b <__brkval>
    2f12:	f0 91 4c 1a 	lds	r31, 0x1A4C	; 0x801a4c <__brkval+0x1>
    2f16:	e2 17       	cp	r30, r18
    2f18:	f3 07       	cpc	r31, r19
    2f1a:	a0 f4       	brcc	.+40     	; 0x2f44 <malloc+0x132>
    2f1c:	2e 1b       	sub	r18, r30
    2f1e:	3f 0b       	sbc	r19, r31
    2f20:	28 17       	cp	r18, r24
    2f22:	39 07       	cpc	r19, r25
    2f24:	78 f0       	brcs	.+30     	; 0x2f44 <malloc+0x132>
    2f26:	ac 01       	movw	r20, r24
    2f28:	4e 5f       	subi	r20, 0xFE	; 254
    2f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2c:	24 17       	cp	r18, r20
    2f2e:	35 07       	cpc	r19, r21
    2f30:	48 f0       	brcs	.+18     	; 0x2f44 <malloc+0x132>
    2f32:	4e 0f       	add	r20, r30
    2f34:	5f 1f       	adc	r21, r31
    2f36:	50 93 4c 1a 	sts	0x1A4C, r21	; 0x801a4c <__brkval+0x1>
    2f3a:	40 93 4b 1a 	sts	0x1A4B, r20	; 0x801a4b <__brkval>
    2f3e:	81 93       	st	Z+, r24
    2f40:	91 93       	st	Z+, r25
    2f42:	9f cf       	rjmp	.-194    	; 0x2e82 <malloc+0x70>
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	e0 e0       	ldi	r30, 0x00	; 0
    2f48:	9c cf       	rjmp	.-200    	; 0x2e82 <malloc+0x70>

00002f4a <free>:
free():
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	e9 f0       	breq	.+58     	; 0x2f8c <free+0x42>
    2f52:	fc 01       	movw	r30, r24
    2f54:	32 97       	sbiw	r30, 0x02	; 2
    2f56:	13 82       	std	Z+3, r1	; 0x03
    2f58:	12 82       	std	Z+2, r1	; 0x02
    2f5a:	a0 91 4d 1a 	lds	r26, 0x1A4D	; 0x801a4d <__flp>
    2f5e:	b0 91 4e 1a 	lds	r27, 0x1A4E	; 0x801a4e <__flp+0x1>
    2f62:	ed 01       	movw	r28, r26
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	10 97       	sbiw	r26, 0x00	; 0
    2f6a:	a1 f4       	brne	.+40     	; 0x2f94 <free+0x4a>
    2f6c:	20 81       	ld	r18, Z
    2f6e:	31 81       	ldd	r19, Z+1	; 0x01
    2f70:	82 0f       	add	r24, r18
    2f72:	93 1f       	adc	r25, r19
    2f74:	20 91 4b 1a 	lds	r18, 0x1A4B	; 0x801a4b <__brkval>
    2f78:	30 91 4c 1a 	lds	r19, 0x1A4C	; 0x801a4c <__brkval+0x1>
    2f7c:	28 17       	cp	r18, r24
    2f7e:	39 07       	cpc	r19, r25
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <free+0x3a>
    2f82:	61 c0       	rjmp	.+194    	; 0x3046 <free+0xfc>
    2f84:	f0 93 4c 1a 	sts	0x1A4C, r31	; 0x801a4c <__brkval+0x1>
    2f88:	e0 93 4b 1a 	sts	0x1A4B, r30	; 0x801a4b <__brkval>
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	08 95       	ret
    2f92:	ea 01       	movw	r28, r20
    2f94:	ce 17       	cp	r28, r30
    2f96:	df 07       	cpc	r29, r31
    2f98:	e8 f5       	brcc	.+122    	; 0x3014 <free+0xca>
    2f9a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f9c:	5b 81       	ldd	r21, Y+3	; 0x03
    2f9e:	9e 01       	movw	r18, r28
    2fa0:	41 15       	cp	r20, r1
    2fa2:	51 05       	cpc	r21, r1
    2fa4:	b1 f7       	brne	.-20     	; 0x2f92 <free+0x48>
    2fa6:	e9 01       	movw	r28, r18
    2fa8:	fb 83       	std	Y+3, r31	; 0x03
    2faa:	ea 83       	std	Y+2, r30	; 0x02
    2fac:	49 91       	ld	r20, Y+
    2fae:	59 91       	ld	r21, Y+
    2fb0:	c4 0f       	add	r28, r20
    2fb2:	d5 1f       	adc	r29, r21
    2fb4:	ec 17       	cp	r30, r28
    2fb6:	fd 07       	cpc	r31, r29
    2fb8:	61 f4       	brne	.+24     	; 0x2fd2 <free+0x88>
    2fba:	80 81       	ld	r24, Z
    2fbc:	91 81       	ldd	r25, Z+1	; 0x01
    2fbe:	02 96       	adiw	r24, 0x02	; 2
    2fc0:	84 0f       	add	r24, r20
    2fc2:	95 1f       	adc	r25, r21
    2fc4:	e9 01       	movw	r28, r18
    2fc6:	99 83       	std	Y+1, r25	; 0x01
    2fc8:	88 83       	st	Y, r24
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	9b 83       	std	Y+3, r25	; 0x03
    2fd0:	8a 83       	std	Y+2, r24	; 0x02
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	e0 e0       	ldi	r30, 0x00	; 0
    2fd6:	12 96       	adiw	r26, 0x02	; 2
    2fd8:	8d 91       	ld	r24, X+
    2fda:	9c 91       	ld	r25, X
    2fdc:	13 97       	sbiw	r26, 0x03	; 3
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	b9 f5       	brne	.+110    	; 0x3050 <free+0x106>
    2fe2:	2d 91       	ld	r18, X+
    2fe4:	3c 91       	ld	r19, X
    2fe6:	11 97       	sbiw	r26, 0x01	; 1
    2fe8:	cd 01       	movw	r24, r26
    2fea:	02 96       	adiw	r24, 0x02	; 2
    2fec:	82 0f       	add	r24, r18
    2fee:	93 1f       	adc	r25, r19
    2ff0:	20 91 4b 1a 	lds	r18, 0x1A4B	; 0x801a4b <__brkval>
    2ff4:	30 91 4c 1a 	lds	r19, 0x1A4C	; 0x801a4c <__brkval+0x1>
    2ff8:	28 17       	cp	r18, r24
    2ffa:	39 07       	cpc	r19, r25
    2ffc:	39 f6       	brne	.-114    	; 0x2f8c <free+0x42>
    2ffe:	30 97       	sbiw	r30, 0x00	; 0
    3000:	51 f5       	brne	.+84     	; 0x3056 <free+0x10c>
    3002:	10 92 4e 1a 	sts	0x1A4E, r1	; 0x801a4e <__flp+0x1>
    3006:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <__flp>
    300a:	b0 93 4c 1a 	sts	0x1A4C, r27	; 0x801a4c <__brkval+0x1>
    300e:	a0 93 4b 1a 	sts	0x1A4B, r26	; 0x801a4b <__brkval>
    3012:	bc cf       	rjmp	.-136    	; 0x2f8c <free+0x42>
    3014:	d3 83       	std	Z+3, r29	; 0x03
    3016:	c2 83       	std	Z+2, r28	; 0x02
    3018:	40 81       	ld	r20, Z
    301a:	51 81       	ldd	r21, Z+1	; 0x01
    301c:	84 0f       	add	r24, r20
    301e:	95 1f       	adc	r25, r21
    3020:	c8 17       	cp	r28, r24
    3022:	d9 07       	cpc	r29, r25
    3024:	61 f4       	brne	.+24     	; 0x303e <free+0xf4>
    3026:	4e 5f       	subi	r20, 0xFE	; 254
    3028:	5f 4f       	sbci	r21, 0xFF	; 255
    302a:	88 81       	ld	r24, Y
    302c:	99 81       	ldd	r25, Y+1	; 0x01
    302e:	48 0f       	add	r20, r24
    3030:	59 1f       	adc	r21, r25
    3032:	51 83       	std	Z+1, r21	; 0x01
    3034:	40 83       	st	Z, r20
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	9b 81       	ldd	r25, Y+3	; 0x03
    303a:	93 83       	std	Z+3, r25	; 0x03
    303c:	82 83       	std	Z+2, r24	; 0x02
    303e:	21 15       	cp	r18, r1
    3040:	31 05       	cpc	r19, r1
    3042:	09 f0       	breq	.+2      	; 0x3046 <free+0xfc>
    3044:	b0 cf       	rjmp	.-160    	; 0x2fa6 <free+0x5c>
    3046:	f0 93 4e 1a 	sts	0x1A4E, r31	; 0x801a4e <__flp+0x1>
    304a:	e0 93 4d 1a 	sts	0x1A4D, r30	; 0x801a4d <__flp>
    304e:	9e cf       	rjmp	.-196    	; 0x2f8c <free+0x42>
    3050:	fd 01       	movw	r30, r26
    3052:	dc 01       	movw	r26, r24
    3054:	c0 cf       	rjmp	.-128    	; 0x2fd6 <free+0x8c>
    3056:	13 82       	std	Z+3, r1	; 0x03
    3058:	12 82       	std	Z+2, r1	; 0x02
    305a:	d7 cf       	rjmp	.-82     	; 0x300a <free+0xc0>

0000305c <strcat>:
strcat():
    305c:	fb 01       	movw	r30, r22
    305e:	dc 01       	movw	r26, r24
    3060:	0d 90       	ld	r0, X+
    3062:	00 20       	and	r0, r0
    3064:	e9 f7       	brne	.-6      	; 0x3060 <strcat+0x4>
    3066:	11 97       	sbiw	r26, 0x01	; 1
    3068:	01 90       	ld	r0, Z+
    306a:	0d 92       	st	X+, r0
    306c:	00 20       	and	r0, r0
    306e:	e1 f7       	brne	.-8      	; 0x3068 <strcat+0xc>
    3070:	08 95       	ret

00003072 <strchr>:
strchr():
    3072:	fc 01       	movw	r30, r24
    3074:	81 91       	ld	r24, Z+
    3076:	86 17       	cp	r24, r22
    3078:	21 f0       	breq	.+8      	; 0x3082 <strchr+0x10>
    307a:	88 23       	and	r24, r24
    307c:	d9 f7       	brne	.-10     	; 0x3074 <strchr+0x2>
    307e:	99 27       	eor	r25, r25
    3080:	08 95       	ret
    3082:	31 97       	sbiw	r30, 0x01	; 1
    3084:	cf 01       	movw	r24, r30
    3086:	08 95       	ret

00003088 <strstr>:
strstr():
    3088:	fb 01       	movw	r30, r22
    308a:	51 91       	ld	r21, Z+
    308c:	55 23       	and	r21, r21
    308e:	a9 f0       	breq	.+42     	; 0x30ba <strstr+0x32>
    3090:	bf 01       	movw	r22, r30
    3092:	dc 01       	movw	r26, r24
    3094:	4d 91       	ld	r20, X+
    3096:	45 17       	cp	r20, r21
    3098:	41 11       	cpse	r20, r1
    309a:	e1 f7       	brne	.-8      	; 0x3094 <strstr+0xc>
    309c:	59 f4       	brne	.+22     	; 0x30b4 <strstr+0x2c>
    309e:	cd 01       	movw	r24, r26
    30a0:	01 90       	ld	r0, Z+
    30a2:	00 20       	and	r0, r0
    30a4:	49 f0       	breq	.+18     	; 0x30b8 <strstr+0x30>
    30a6:	4d 91       	ld	r20, X+
    30a8:	40 15       	cp	r20, r0
    30aa:	41 11       	cpse	r20, r1
    30ac:	c9 f3       	breq	.-14     	; 0x30a0 <strstr+0x18>
    30ae:	fb 01       	movw	r30, r22
    30b0:	41 11       	cpse	r20, r1
    30b2:	ef cf       	rjmp	.-34     	; 0x3092 <strstr+0xa>
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	08 95       	ret

000030bc <sprintf>:
sprintf():
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	2e 97       	sbiw	r28, 0x0e	; 14
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	0e 89       	ldd	r16, Y+22	; 0x16
    30d6:	1f 89       	ldd	r17, Y+23	; 0x17
    30d8:	86 e0       	ldi	r24, 0x06	; 6
    30da:	8c 83       	std	Y+4, r24	; 0x04
    30dc:	1a 83       	std	Y+2, r17	; 0x02
    30de:	09 83       	std	Y+1, r16	; 0x01
    30e0:	8f ef       	ldi	r24, 0xFF	; 255
    30e2:	9f e7       	ldi	r25, 0x7F	; 127
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	ae 01       	movw	r20, r28
    30ea:	46 5e       	subi	r20, 0xE6	; 230
    30ec:	5f 4f       	sbci	r21, 0xFF	; 255
    30ee:	68 8d       	ldd	r22, Y+24	; 0x18
    30f0:	79 8d       	ldd	r23, Y+25	; 0x19
    30f2:	ce 01       	movw	r24, r28
    30f4:	01 96       	adiw	r24, 0x01	; 1
    30f6:	0e 94 8e 18 	call	0x311c	; 0x311c <vfprintf>
    30fa:	2f 81       	ldd	r18, Y+7	; 0x07
    30fc:	38 85       	ldd	r19, Y+8	; 0x08
    30fe:	02 0f       	add	r16, r18
    3100:	13 1f       	adc	r17, r19
    3102:	f8 01       	movw	r30, r16
    3104:	10 82       	st	Z, r1
    3106:	2e 96       	adiw	r28, 0x0e	; 14
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	1f 91       	pop	r17
    3118:	0f 91       	pop	r16
    311a:	08 95       	ret

0000311c <vfprintf>:
vfprintf():
    311c:	2f 92       	push	r2
    311e:	3f 92       	push	r3
    3120:	4f 92       	push	r4
    3122:	5f 92       	push	r5
    3124:	6f 92       	push	r6
    3126:	7f 92       	push	r7
    3128:	8f 92       	push	r8
    312a:	9f 92       	push	r9
    312c:	af 92       	push	r10
    312e:	bf 92       	push	r11
    3130:	cf 92       	push	r12
    3132:	df 92       	push	r13
    3134:	ef 92       	push	r14
    3136:	ff 92       	push	r15
    3138:	0f 93       	push	r16
    313a:	1f 93       	push	r17
    313c:	cf 93       	push	r28
    313e:	df 93       	push	r29
    3140:	00 d0       	rcall	.+0      	; 0x3142 <vfprintf+0x26>
    3142:	00 d0       	rcall	.+0      	; 0x3144 <vfprintf+0x28>
    3144:	00 d0       	rcall	.+0      	; 0x3146 <vfprintf+0x2a>
    3146:	1f 92       	push	r1
    3148:	1f 92       	push	r1
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	7c 01       	movw	r14, r24
    3150:	3b 01       	movw	r6, r22
    3152:	8a 01       	movw	r16, r20
    3154:	fc 01       	movw	r30, r24
    3156:	17 82       	std	Z+7, r1	; 0x07
    3158:	16 82       	std	Z+6, r1	; 0x06
    315a:	83 81       	ldd	r24, Z+3	; 0x03
    315c:	81 ff       	sbrs	r24, 1
    315e:	dd c1       	rjmp	.+954    	; 0x351a <vfprintf+0x3fe>
    3160:	ce 01       	movw	r24, r28
    3162:	01 96       	adiw	r24, 0x01	; 1
    3164:	5c 01       	movw	r10, r24
    3166:	f7 01       	movw	r30, r14
    3168:	93 81       	ldd	r25, Z+3	; 0x03
    316a:	f3 01       	movw	r30, r6
    316c:	93 fd       	sbrc	r25, 3
    316e:	85 91       	lpm	r24, Z+
    3170:	93 ff       	sbrs	r25, 3
    3172:	81 91       	ld	r24, Z+
    3174:	3f 01       	movw	r6, r30
    3176:	88 23       	and	r24, r24
    3178:	09 f4       	brne	.+2      	; 0x317c <vfprintf+0x60>
    317a:	53 c1       	rjmp	.+678    	; 0x3422 <vfprintf+0x306>
    317c:	85 32       	cpi	r24, 0x25	; 37
    317e:	39 f4       	brne	.+14     	; 0x318e <vfprintf+0x72>
    3180:	93 fd       	sbrc	r25, 3
    3182:	85 91       	lpm	r24, Z+
    3184:	93 ff       	sbrs	r25, 3
    3186:	81 91       	ld	r24, Z+
    3188:	3f 01       	movw	r6, r30
    318a:	85 32       	cpi	r24, 0x25	; 37
    318c:	29 f4       	brne	.+10     	; 0x3198 <vfprintf+0x7c>
    318e:	b7 01       	movw	r22, r14
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	0e 94 a6 1a 	call	0x354c	; 0x354c <fputc>
    3196:	e7 cf       	rjmp	.-50     	; 0x3166 <vfprintf+0x4a>
    3198:	91 2c       	mov	r9, r1
    319a:	21 2c       	mov	r2, r1
    319c:	31 2c       	mov	r3, r1
    319e:	ff e1       	ldi	r31, 0x1F	; 31
    31a0:	f3 15       	cp	r31, r3
    31a2:	38 f0       	brcs	.+14     	; 0x31b2 <vfprintf+0x96>
    31a4:	8b 32       	cpi	r24, 0x2B	; 43
    31a6:	11 f1       	breq	.+68     	; 0x31ec <vfprintf+0xd0>
    31a8:	90 f4       	brcc	.+36     	; 0x31ce <vfprintf+0xb2>
    31aa:	80 32       	cpi	r24, 0x20	; 32
    31ac:	09 f1       	breq	.+66     	; 0x31f0 <vfprintf+0xd4>
    31ae:	83 32       	cpi	r24, 0x23	; 35
    31b0:	29 f1       	breq	.+74     	; 0x31fc <vfprintf+0xe0>
    31b2:	37 fc       	sbrc	r3, 7
    31b4:	3c c0       	rjmp	.+120    	; 0x322e <vfprintf+0x112>
    31b6:	20 ed       	ldi	r18, 0xD0	; 208
    31b8:	28 0f       	add	r18, r24
    31ba:	2a 30       	cpi	r18, 0x0A	; 10
    31bc:	50 f5       	brcc	.+84     	; 0x3212 <vfprintf+0xf6>
    31be:	36 fe       	sbrs	r3, 6
    31c0:	20 c0       	rjmp	.+64     	; 0x3202 <vfprintf+0xe6>
    31c2:	8a e0       	ldi	r24, 0x0A	; 10
    31c4:	98 9e       	mul	r9, r24
    31c6:	20 0d       	add	r18, r0
    31c8:	11 24       	eor	r1, r1
    31ca:	92 2e       	mov	r9, r18
    31cc:	06 c0       	rjmp	.+12     	; 0x31da <vfprintf+0xbe>
    31ce:	8d 32       	cpi	r24, 0x2D	; 45
    31d0:	91 f0       	breq	.+36     	; 0x31f6 <vfprintf+0xda>
    31d2:	80 33       	cpi	r24, 0x30	; 48
    31d4:	71 f7       	brne	.-36     	; 0x31b2 <vfprintf+0x96>
    31d6:	68 94       	set
    31d8:	30 f8       	bld	r3, 0
    31da:	f3 01       	movw	r30, r6
    31dc:	93 fd       	sbrc	r25, 3
    31de:	85 91       	lpm	r24, Z+
    31e0:	93 ff       	sbrs	r25, 3
    31e2:	81 91       	ld	r24, Z+
    31e4:	3f 01       	movw	r6, r30
    31e6:	81 11       	cpse	r24, r1
    31e8:	da cf       	rjmp	.-76     	; 0x319e <vfprintf+0x82>
    31ea:	21 c0       	rjmp	.+66     	; 0x322e <vfprintf+0x112>
    31ec:	68 94       	set
    31ee:	31 f8       	bld	r3, 1
    31f0:	68 94       	set
    31f2:	32 f8       	bld	r3, 2
    31f4:	f2 cf       	rjmp	.-28     	; 0x31da <vfprintf+0xbe>
    31f6:	68 94       	set
    31f8:	33 f8       	bld	r3, 3
    31fa:	ef cf       	rjmp	.-34     	; 0x31da <vfprintf+0xbe>
    31fc:	68 94       	set
    31fe:	34 f8       	bld	r3, 4
    3200:	ec cf       	rjmp	.-40     	; 0x31da <vfprintf+0xbe>
    3202:	ea e0       	ldi	r30, 0x0A	; 10
    3204:	2e 9e       	mul	r2, r30
    3206:	20 0d       	add	r18, r0
    3208:	11 24       	eor	r1, r1
    320a:	22 2e       	mov	r2, r18
    320c:	68 94       	set
    320e:	35 f8       	bld	r3, 5
    3210:	e4 cf       	rjmp	.-56     	; 0x31da <vfprintf+0xbe>
    3212:	8e 32       	cpi	r24, 0x2E	; 46
    3214:	29 f4       	brne	.+10     	; 0x3220 <vfprintf+0x104>
    3216:	36 fc       	sbrc	r3, 6
    3218:	04 c1       	rjmp	.+520    	; 0x3422 <vfprintf+0x306>
    321a:	68 94       	set
    321c:	36 f8       	bld	r3, 6
    321e:	dd cf       	rjmp	.-70     	; 0x31da <vfprintf+0xbe>
    3220:	8c 36       	cpi	r24, 0x6C	; 108
    3222:	19 f4       	brne	.+6      	; 0x322a <vfprintf+0x10e>
    3224:	68 94       	set
    3226:	37 f8       	bld	r3, 7
    3228:	d8 cf       	rjmp	.-80     	; 0x31da <vfprintf+0xbe>
    322a:	88 36       	cpi	r24, 0x68	; 104
    322c:	b1 f2       	breq	.-84     	; 0x31da <vfprintf+0xbe>
    322e:	98 2f       	mov	r25, r24
    3230:	9f 7d       	andi	r25, 0xDF	; 223
    3232:	95 54       	subi	r25, 0x45	; 69
    3234:	93 30       	cpi	r25, 0x03	; 3
    3236:	e0 f0       	brcs	.+56     	; 0x3270 <vfprintf+0x154>
    3238:	83 36       	cpi	r24, 0x63	; 99
    323a:	a1 f1       	breq	.+104    	; 0x32a4 <vfprintf+0x188>
    323c:	83 37       	cpi	r24, 0x73	; 115
    323e:	c1 f1       	breq	.+112    	; 0x32b0 <vfprintf+0x194>
    3240:	83 35       	cpi	r24, 0x53	; 83
    3242:	09 f0       	breq	.+2      	; 0x3246 <vfprintf+0x12a>
    3244:	63 c0       	rjmp	.+198    	; 0x330c <vfprintf+0x1f0>
    3246:	28 01       	movw	r4, r16
    3248:	f2 e0       	ldi	r31, 0x02	; 2
    324a:	4f 0e       	add	r4, r31
    324c:	51 1c       	adc	r5, r1
    324e:	f8 01       	movw	r30, r16
    3250:	c0 80       	ld	r12, Z
    3252:	d1 80       	ldd	r13, Z+1	; 0x01
    3254:	69 2d       	mov	r22, r9
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	36 fc       	sbrc	r3, 6
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <vfprintf+0x144>
    325c:	6f ef       	ldi	r22, 0xFF	; 255
    325e:	7f ef       	ldi	r23, 0xFF	; 255
    3260:	c6 01       	movw	r24, r12
    3262:	0e 94 90 1a 	call	0x3520	; 0x3520 <strnlen_P>
    3266:	4c 01       	movw	r8, r24
    3268:	68 94       	set
    326a:	37 f8       	bld	r3, 7
    326c:	82 01       	movw	r16, r4
    326e:	0a c0       	rjmp	.+20     	; 0x3284 <vfprintf+0x168>
    3270:	0c 5f       	subi	r16, 0xFC	; 252
    3272:	1f 4f       	sbci	r17, 0xFF	; 255
    3274:	ff e3       	ldi	r31, 0x3F	; 63
    3276:	f9 83       	std	Y+1, r31	; 0x01
    3278:	88 24       	eor	r8, r8
    327a:	83 94       	inc	r8
    327c:	91 2c       	mov	r9, r1
    327e:	65 01       	movw	r12, r10
    3280:	e8 94       	clt
    3282:	37 f8       	bld	r3, 7
    3284:	33 fe       	sbrs	r3, 3
    3286:	2d c0       	rjmp	.+90     	; 0x32e2 <vfprintf+0x1c6>
    3288:	52 2c       	mov	r5, r2
    328a:	81 14       	cp	r8, r1
    328c:	91 04       	cpc	r9, r1
    328e:	71 f5       	brne	.+92     	; 0x32ec <vfprintf+0x1d0>
    3290:	55 20       	and	r5, r5
    3292:	09 f4       	brne	.+2      	; 0x3296 <vfprintf+0x17a>
    3294:	68 cf       	rjmp	.-304    	; 0x3166 <vfprintf+0x4a>
    3296:	b7 01       	movw	r22, r14
    3298:	80 e2       	ldi	r24, 0x20	; 32
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	0e 94 a6 1a 	call	0x354c	; 0x354c <fputc>
    32a0:	5a 94       	dec	r5
    32a2:	f6 cf       	rjmp	.-20     	; 0x3290 <vfprintf+0x174>
    32a4:	f8 01       	movw	r30, r16
    32a6:	80 81       	ld	r24, Z
    32a8:	89 83       	std	Y+1, r24	; 0x01
    32aa:	0e 5f       	subi	r16, 0xFE	; 254
    32ac:	1f 4f       	sbci	r17, 0xFF	; 255
    32ae:	e4 cf       	rjmp	.-56     	; 0x3278 <vfprintf+0x15c>
    32b0:	28 01       	movw	r4, r16
    32b2:	f2 e0       	ldi	r31, 0x02	; 2
    32b4:	4f 0e       	add	r4, r31
    32b6:	51 1c       	adc	r5, r1
    32b8:	f8 01       	movw	r30, r16
    32ba:	c0 80       	ld	r12, Z
    32bc:	d1 80       	ldd	r13, Z+1	; 0x01
    32be:	69 2d       	mov	r22, r9
    32c0:	70 e0       	ldi	r23, 0x00	; 0
    32c2:	36 fc       	sbrc	r3, 6
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <vfprintf+0x1ae>
    32c6:	6f ef       	ldi	r22, 0xFF	; 255
    32c8:	7f ef       	ldi	r23, 0xFF	; 255
    32ca:	c6 01       	movw	r24, r12
    32cc:	0e 94 9b 1a 	call	0x3536	; 0x3536 <strnlen>
    32d0:	4c 01       	movw	r8, r24
    32d2:	82 01       	movw	r16, r4
    32d4:	d5 cf       	rjmp	.-86     	; 0x3280 <vfprintf+0x164>
    32d6:	b7 01       	movw	r22, r14
    32d8:	80 e2       	ldi	r24, 0x20	; 32
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	0e 94 a6 1a 	call	0x354c	; 0x354c <fputc>
    32e0:	2a 94       	dec	r2
    32e2:	28 14       	cp	r2, r8
    32e4:	19 04       	cpc	r1, r9
    32e6:	09 f0       	breq	.+2      	; 0x32ea <vfprintf+0x1ce>
    32e8:	b0 f7       	brcc	.-20     	; 0x32d6 <vfprintf+0x1ba>
    32ea:	ce cf       	rjmp	.-100    	; 0x3288 <vfprintf+0x16c>
    32ec:	f6 01       	movw	r30, r12
    32ee:	37 fc       	sbrc	r3, 7
    32f0:	85 91       	lpm	r24, Z+
    32f2:	37 fe       	sbrs	r3, 7
    32f4:	81 91       	ld	r24, Z+
    32f6:	6f 01       	movw	r12, r30
    32f8:	b7 01       	movw	r22, r14
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	0e 94 a6 1a 	call	0x354c	; 0x354c <fputc>
    3300:	51 10       	cpse	r5, r1
    3302:	5a 94       	dec	r5
    3304:	f1 e0       	ldi	r31, 0x01	; 1
    3306:	8f 1a       	sub	r8, r31
    3308:	91 08       	sbc	r9, r1
    330a:	bf cf       	rjmp	.-130    	; 0x328a <vfprintf+0x16e>
    330c:	84 36       	cpi	r24, 0x64	; 100
    330e:	19 f0       	breq	.+6      	; 0x3316 <vfprintf+0x1fa>
    3310:	89 36       	cpi	r24, 0x69	; 105
    3312:	09 f0       	breq	.+2      	; 0x3316 <vfprintf+0x1fa>
    3314:	77 c0       	rjmp	.+238    	; 0x3404 <vfprintf+0x2e8>
    3316:	f8 01       	movw	r30, r16
    3318:	37 fe       	sbrs	r3, 7
    331a:	6b c0       	rjmp	.+214    	; 0x33f2 <vfprintf+0x2d6>
    331c:	60 81       	ld	r22, Z
    331e:	71 81       	ldd	r23, Z+1	; 0x01
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	93 81       	ldd	r25, Z+3	; 0x03
    3324:	0c 5f       	subi	r16, 0xFC	; 252
    3326:	1f 4f       	sbci	r17, 0xFF	; 255
    3328:	f3 2d       	mov	r31, r3
    332a:	ff 76       	andi	r31, 0x6F	; 111
    332c:	3f 2e       	mov	r3, r31
    332e:	97 ff       	sbrs	r25, 7
    3330:	09 c0       	rjmp	.+18     	; 0x3344 <vfprintf+0x228>
    3332:	90 95       	com	r25
    3334:	80 95       	com	r24
    3336:	70 95       	com	r23
    3338:	61 95       	neg	r22
    333a:	7f 4f       	sbci	r23, 0xFF	; 255
    333c:	8f 4f       	sbci	r24, 0xFF	; 255
    333e:	9f 4f       	sbci	r25, 0xFF	; 255
    3340:	68 94       	set
    3342:	37 f8       	bld	r3, 7
    3344:	2a e0       	ldi	r18, 0x0A	; 10
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	a5 01       	movw	r20, r10
    334a:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__ultoa_invert>
    334e:	c8 2e       	mov	r12, r24
    3350:	ca 18       	sub	r12, r10
    3352:	8c 2c       	mov	r8, r12
    3354:	43 2c       	mov	r4, r3
    3356:	36 fe       	sbrs	r3, 6
    3358:	0c c0       	rjmp	.+24     	; 0x3372 <vfprintf+0x256>
    335a:	e8 94       	clt
    335c:	40 f8       	bld	r4, 0
    335e:	c9 14       	cp	r12, r9
    3360:	40 f4       	brcc	.+16     	; 0x3372 <vfprintf+0x256>
    3362:	34 fe       	sbrs	r3, 4
    3364:	05 c0       	rjmp	.+10     	; 0x3370 <vfprintf+0x254>
    3366:	32 fc       	sbrc	r3, 2
    3368:	03 c0       	rjmp	.+6      	; 0x3370 <vfprintf+0x254>
    336a:	f3 2d       	mov	r31, r3
    336c:	fe 7e       	andi	r31, 0xEE	; 238
    336e:	4f 2e       	mov	r4, r31
    3370:	89 2c       	mov	r8, r9
    3372:	44 fe       	sbrs	r4, 4
    3374:	aa c0       	rjmp	.+340    	; 0x34ca <vfprintf+0x3ae>
    3376:	fe 01       	movw	r30, r28
    3378:	ec 0d       	add	r30, r12
    337a:	f1 1d       	adc	r31, r1
    337c:	80 81       	ld	r24, Z
    337e:	80 33       	cpi	r24, 0x30	; 48
    3380:	09 f0       	breq	.+2      	; 0x3384 <vfprintf+0x268>
    3382:	9c c0       	rjmp	.+312    	; 0x34bc <vfprintf+0x3a0>
    3384:	24 2d       	mov	r18, r4
    3386:	29 7e       	andi	r18, 0xE9	; 233
    3388:	42 2e       	mov	r4, r18
    338a:	84 2d       	mov	r24, r4
    338c:	88 70       	andi	r24, 0x08	; 8
    338e:	58 2e       	mov	r5, r24
    3390:	43 fc       	sbrc	r4, 3
    3392:	aa c0       	rjmp	.+340    	; 0x34e8 <vfprintf+0x3cc>
    3394:	40 fe       	sbrs	r4, 0
    3396:	a4 c0       	rjmp	.+328    	; 0x34e0 <vfprintf+0x3c4>
    3398:	9c 2c       	mov	r9, r12
    339a:	82 14       	cp	r8, r2
    339c:	18 f4       	brcc	.+6      	; 0x33a4 <vfprintf+0x288>
    339e:	2c 0c       	add	r2, r12
    33a0:	92 2c       	mov	r9, r2
    33a2:	98 18       	sub	r9, r8
    33a4:	44 fe       	sbrs	r4, 4
    33a6:	a6 c0       	rjmp	.+332    	; 0x34f4 <vfprintf+0x3d8>
    33a8:	b7 01       	movw	r22, r14
    33aa:	80 e3       	ldi	r24, 0x30	; 48
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 a6 1a 	call	0x354c	; 0x354c <fputc>
    33b2:	42 fe       	sbrs	r4, 2
    33b4:	09 c0       	rjmp	.+18     	; 0x33c8 <vfprintf+0x2ac>
    33b6:	88 e7       	ldi	r24, 0x78	; 120
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	41 fe       	sbrs	r4, 1
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <vfprintf+0x2a6>
    33be:	88 e5       	ldi	r24, 0x58	; 88
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	b7 01       	movw	r22, r14
    33c4:	0e 94 a6 1a 	call	0x354c	; 0x354c <fputc>
    33c8:	c9 14       	cp	r12, r9
    33ca:	08 f4       	brcc	.+2      	; 0x33ce <vfprintf+0x2b2>
    33cc:	9f c0       	rjmp	.+318    	; 0x350c <vfprintf+0x3f0>
    33ce:	ca 94       	dec	r12
    33d0:	d1 2c       	mov	r13, r1
    33d2:	9f ef       	ldi	r25, 0xFF	; 255
    33d4:	c9 1a       	sub	r12, r25
    33d6:	d9 0a       	sbc	r13, r25
    33d8:	ca 0c       	add	r12, r10
    33da:	db 1c       	adc	r13, r11
    33dc:	f6 01       	movw	r30, r12
    33de:	82 91       	ld	r24, -Z
    33e0:	6f 01       	movw	r12, r30
    33e2:	b7 01       	movw	r22, r14
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	0e 94 a6 1a 	call	0x354c	; 0x354c <fputc>
    33ea:	ac 14       	cp	r10, r12
    33ec:	bd 04       	cpc	r11, r13
    33ee:	b1 f7       	brne	.-20     	; 0x33dc <vfprintf+0x2c0>
    33f0:	4f cf       	rjmp	.-354    	; 0x3290 <vfprintf+0x174>
    33f2:	60 81       	ld	r22, Z
    33f4:	71 81       	ldd	r23, Z+1	; 0x01
    33f6:	07 2e       	mov	r0, r23
    33f8:	00 0c       	add	r0, r0
    33fa:	88 0b       	sbc	r24, r24
    33fc:	99 0b       	sbc	r25, r25
    33fe:	0e 5f       	subi	r16, 0xFE	; 254
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	92 cf       	rjmp	.-220    	; 0x3328 <vfprintf+0x20c>
    3404:	d3 2c       	mov	r13, r3
    3406:	e8 94       	clt
    3408:	d4 f8       	bld	r13, 4
    340a:	2a e0       	ldi	r18, 0x0A	; 10
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	85 37       	cpi	r24, 0x75	; 117
    3410:	e1 f1       	breq	.+120    	; 0x348a <vfprintf+0x36e>
    3412:	23 2d       	mov	r18, r3
    3414:	29 7f       	andi	r18, 0xF9	; 249
    3416:	d2 2e       	mov	r13, r18
    3418:	8f 36       	cpi	r24, 0x6F	; 111
    341a:	a9 f1       	breq	.+106    	; 0x3486 <vfprintf+0x36a>
    341c:	f0 f4       	brcc	.+60     	; 0x345a <vfprintf+0x33e>
    341e:	88 35       	cpi	r24, 0x58	; 88
    3420:	51 f1       	breq	.+84     	; 0x3476 <vfprintf+0x35a>
    3422:	f7 01       	movw	r30, r14
    3424:	86 81       	ldd	r24, Z+6	; 0x06
    3426:	97 81       	ldd	r25, Z+7	; 0x07
    3428:	2b 96       	adiw	r28, 0x0b	; 11
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	df 90       	pop	r13
    3442:	cf 90       	pop	r12
    3444:	bf 90       	pop	r11
    3446:	af 90       	pop	r10
    3448:	9f 90       	pop	r9
    344a:	8f 90       	pop	r8
    344c:	7f 90       	pop	r7
    344e:	6f 90       	pop	r6
    3450:	5f 90       	pop	r5
    3452:	4f 90       	pop	r4
    3454:	3f 90       	pop	r3
    3456:	2f 90       	pop	r2
    3458:	08 95       	ret
    345a:	80 37       	cpi	r24, 0x70	; 112
    345c:	49 f0       	breq	.+18     	; 0x3470 <vfprintf+0x354>
    345e:	88 37       	cpi	r24, 0x78	; 120
    3460:	01 f7       	brne	.-64     	; 0x3422 <vfprintf+0x306>
    3462:	d4 fe       	sbrs	r13, 4
    3464:	02 c0       	rjmp	.+4      	; 0x346a <vfprintf+0x34e>
    3466:	68 94       	set
    3468:	d2 f8       	bld	r13, 2
    346a:	20 e1       	ldi	r18, 0x10	; 16
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	0d c0       	rjmp	.+26     	; 0x348a <vfprintf+0x36e>
    3470:	68 94       	set
    3472:	d4 f8       	bld	r13, 4
    3474:	f6 cf       	rjmp	.-20     	; 0x3462 <vfprintf+0x346>
    3476:	34 fe       	sbrs	r3, 4
    3478:	03 c0       	rjmp	.+6      	; 0x3480 <vfprintf+0x364>
    347a:	82 2f       	mov	r24, r18
    347c:	86 60       	ori	r24, 0x06	; 6
    347e:	d8 2e       	mov	r13, r24
    3480:	20 e1       	ldi	r18, 0x10	; 16
    3482:	32 e0       	ldi	r19, 0x02	; 2
    3484:	02 c0       	rjmp	.+4      	; 0x348a <vfprintf+0x36e>
    3486:	28 e0       	ldi	r18, 0x08	; 8
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	f8 01       	movw	r30, r16
    348c:	d7 fe       	sbrs	r13, 7
    348e:	0f c0       	rjmp	.+30     	; 0x34ae <vfprintf+0x392>
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	0c 5f       	subi	r16, 0xFC	; 252
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	a5 01       	movw	r20, r10
    349e:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__ultoa_invert>
    34a2:	c8 2e       	mov	r12, r24
    34a4:	ca 18       	sub	r12, r10
    34a6:	3d 2c       	mov	r3, r13
    34a8:	e8 94       	clt
    34aa:	37 f8       	bld	r3, 7
    34ac:	52 cf       	rjmp	.-348    	; 0x3352 <vfprintf+0x236>
    34ae:	60 81       	ld	r22, Z
    34b0:	71 81       	ldd	r23, Z+1	; 0x01
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	0e 5f       	subi	r16, 0xFE	; 254
    34b8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ba:	f0 cf       	rjmp	.-32     	; 0x349c <vfprintf+0x380>
    34bc:	42 fc       	sbrc	r4, 2
    34be:	02 c0       	rjmp	.+4      	; 0x34c4 <vfprintf+0x3a8>
    34c0:	83 94       	inc	r8
    34c2:	63 cf       	rjmp	.-314    	; 0x338a <vfprintf+0x26e>
    34c4:	83 94       	inc	r8
    34c6:	83 94       	inc	r8
    34c8:	60 cf       	rjmp	.-320    	; 0x338a <vfprintf+0x26e>
    34ca:	84 2d       	mov	r24, r4
    34cc:	86 78       	andi	r24, 0x86	; 134
    34ce:	09 f4       	brne	.+2      	; 0x34d2 <vfprintf+0x3b6>
    34d0:	5c cf       	rjmp	.-328    	; 0x338a <vfprintf+0x26e>
    34d2:	f6 cf       	rjmp	.-20     	; 0x34c0 <vfprintf+0x3a4>
    34d4:	b7 01       	movw	r22, r14
    34d6:	80 e2       	ldi	r24, 0x20	; 32
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	0e 94 a6 1a 	call	0x354c	; 0x354c <fputc>
    34de:	83 94       	inc	r8
    34e0:	82 14       	cp	r8, r2
    34e2:	c0 f3       	brcs	.-16     	; 0x34d4 <vfprintf+0x3b8>
    34e4:	51 2c       	mov	r5, r1
    34e6:	5e cf       	rjmp	.-324    	; 0x33a4 <vfprintf+0x288>
    34e8:	52 2c       	mov	r5, r2
    34ea:	58 18       	sub	r5, r8
    34ec:	82 14       	cp	r8, r2
    34ee:	08 f4       	brcc	.+2      	; 0x34f2 <vfprintf+0x3d6>
    34f0:	59 cf       	rjmp	.-334    	; 0x33a4 <vfprintf+0x288>
    34f2:	f8 cf       	rjmp	.-16     	; 0x34e4 <vfprintf+0x3c8>
    34f4:	84 2d       	mov	r24, r4
    34f6:	86 78       	andi	r24, 0x86	; 134
    34f8:	09 f4       	brne	.+2      	; 0x34fc <vfprintf+0x3e0>
    34fa:	66 cf       	rjmp	.-308    	; 0x33c8 <vfprintf+0x2ac>
    34fc:	8b e2       	ldi	r24, 0x2B	; 43
    34fe:	41 fe       	sbrs	r4, 1
    3500:	80 e2       	ldi	r24, 0x20	; 32
    3502:	47 fc       	sbrc	r4, 7
    3504:	8d e2       	ldi	r24, 0x2D	; 45
    3506:	b7 01       	movw	r22, r14
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	5c cf       	rjmp	.-328    	; 0x33c4 <vfprintf+0x2a8>
    350c:	b7 01       	movw	r22, r14
    350e:	80 e3       	ldi	r24, 0x30	; 48
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	0e 94 a6 1a 	call	0x354c	; 0x354c <fputc>
    3516:	9a 94       	dec	r9
    3518:	57 cf       	rjmp	.-338    	; 0x33c8 <vfprintf+0x2ac>
    351a:	8f ef       	ldi	r24, 0xFF	; 255
    351c:	9f ef       	ldi	r25, 0xFF	; 255
    351e:	84 cf       	rjmp	.-248    	; 0x3428 <vfprintf+0x30c>

00003520 <strnlen_P>:
strnlen_P():
    3520:	fc 01       	movw	r30, r24
    3522:	05 90       	lpm	r0, Z+
    3524:	61 50       	subi	r22, 0x01	; 1
    3526:	70 40       	sbci	r23, 0x00	; 0
    3528:	01 10       	cpse	r0, r1
    352a:	d8 f7       	brcc	.-10     	; 0x3522 <strnlen_P+0x2>
    352c:	80 95       	com	r24
    352e:	90 95       	com	r25
    3530:	8e 0f       	add	r24, r30
    3532:	9f 1f       	adc	r25, r31
    3534:	08 95       	ret

00003536 <strnlen>:
strnlen():
    3536:	fc 01       	movw	r30, r24
    3538:	61 50       	subi	r22, 0x01	; 1
    353a:	70 40       	sbci	r23, 0x00	; 0
    353c:	01 90       	ld	r0, Z+
    353e:	01 10       	cpse	r0, r1
    3540:	d8 f7       	brcc	.-10     	; 0x3538 <strnlen+0x2>
    3542:	80 95       	com	r24
    3544:	90 95       	com	r25
    3546:	8e 0f       	add	r24, r30
    3548:	9f 1f       	adc	r25, r31
    354a:	08 95       	ret

0000354c <fputc>:
fputc():
    354c:	0f 93       	push	r16
    354e:	1f 93       	push	r17
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	18 2f       	mov	r17, r24
    3556:	09 2f       	mov	r16, r25
    3558:	eb 01       	movw	r28, r22
    355a:	8b 81       	ldd	r24, Y+3	; 0x03
    355c:	81 fd       	sbrc	r24, 1
    355e:	09 c0       	rjmp	.+18     	; 0x3572 <fputc+0x26>
    3560:	1f ef       	ldi	r17, 0xFF	; 255
    3562:	0f ef       	ldi	r16, 0xFF	; 255
    3564:	81 2f       	mov	r24, r17
    3566:	90 2f       	mov	r25, r16
    3568:	df 91       	pop	r29
    356a:	cf 91       	pop	r28
    356c:	1f 91       	pop	r17
    356e:	0f 91       	pop	r16
    3570:	08 95       	ret
    3572:	82 ff       	sbrs	r24, 2
    3574:	14 c0       	rjmp	.+40     	; 0x359e <fputc+0x52>
    3576:	2e 81       	ldd	r18, Y+6	; 0x06
    3578:	3f 81       	ldd	r19, Y+7	; 0x07
    357a:	8c 81       	ldd	r24, Y+4	; 0x04
    357c:	9d 81       	ldd	r25, Y+5	; 0x05
    357e:	28 17       	cp	r18, r24
    3580:	39 07       	cpc	r19, r25
    3582:	3c f4       	brge	.+14     	; 0x3592 <fputc+0x46>
    3584:	e8 81       	ld	r30, Y
    3586:	f9 81       	ldd	r31, Y+1	; 0x01
    3588:	cf 01       	movw	r24, r30
    358a:	01 96       	adiw	r24, 0x01	; 1
    358c:	99 83       	std	Y+1, r25	; 0x01
    358e:	88 83       	st	Y, r24
    3590:	10 83       	st	Z, r17
    3592:	8e 81       	ldd	r24, Y+6	; 0x06
    3594:	9f 81       	ldd	r25, Y+7	; 0x07
    3596:	01 96       	adiw	r24, 0x01	; 1
    3598:	9f 83       	std	Y+7, r25	; 0x07
    359a:	8e 83       	std	Y+6, r24	; 0x06
    359c:	e3 cf       	rjmp	.-58     	; 0x3564 <fputc+0x18>
    359e:	e8 85       	ldd	r30, Y+8	; 0x08
    35a0:	f9 85       	ldd	r31, Y+9	; 0x09
    35a2:	81 2f       	mov	r24, r17
    35a4:	19 95       	eicall
    35a6:	89 2b       	or	r24, r25
    35a8:	a1 f3       	breq	.-24     	; 0x3592 <fputc+0x46>
    35aa:	da cf       	rjmp	.-76     	; 0x3560 <fputc+0x14>

000035ac <__ultoa_invert>:
__ultoa_invert():
    35ac:	fa 01       	movw	r30, r20
    35ae:	aa 27       	eor	r26, r26
    35b0:	28 30       	cpi	r18, 0x08	; 8
    35b2:	51 f1       	breq	.+84     	; 0x3608 <__ultoa_invert+0x5c>
    35b4:	20 31       	cpi	r18, 0x10	; 16
    35b6:	81 f1       	breq	.+96     	; 0x3618 <__ultoa_invert+0x6c>
    35b8:	e8 94       	clt
    35ba:	6f 93       	push	r22
    35bc:	6e 7f       	andi	r22, 0xFE	; 254
    35be:	6e 5f       	subi	r22, 0xFE	; 254
    35c0:	7f 4f       	sbci	r23, 0xFF	; 255
    35c2:	8f 4f       	sbci	r24, 0xFF	; 255
    35c4:	9f 4f       	sbci	r25, 0xFF	; 255
    35c6:	af 4f       	sbci	r26, 0xFF	; 255
    35c8:	b1 e0       	ldi	r27, 0x01	; 1
    35ca:	3e d0       	rcall	.+124    	; 0x3648 <__ultoa_invert+0x9c>
    35cc:	b4 e0       	ldi	r27, 0x04	; 4
    35ce:	3c d0       	rcall	.+120    	; 0x3648 <__ultoa_invert+0x9c>
    35d0:	67 0f       	add	r22, r23
    35d2:	78 1f       	adc	r23, r24
    35d4:	89 1f       	adc	r24, r25
    35d6:	9a 1f       	adc	r25, r26
    35d8:	a1 1d       	adc	r26, r1
    35da:	68 0f       	add	r22, r24
    35dc:	79 1f       	adc	r23, r25
    35de:	8a 1f       	adc	r24, r26
    35e0:	91 1d       	adc	r25, r1
    35e2:	a1 1d       	adc	r26, r1
    35e4:	6a 0f       	add	r22, r26
    35e6:	71 1d       	adc	r23, r1
    35e8:	81 1d       	adc	r24, r1
    35ea:	91 1d       	adc	r25, r1
    35ec:	a1 1d       	adc	r26, r1
    35ee:	20 d0       	rcall	.+64     	; 0x3630 <__ultoa_invert+0x84>
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <__ultoa_invert+0x48>
    35f2:	68 94       	set
    35f4:	3f 91       	pop	r19
    35f6:	2a e0       	ldi	r18, 0x0A	; 10
    35f8:	26 9f       	mul	r18, r22
    35fa:	11 24       	eor	r1, r1
    35fc:	30 19       	sub	r19, r0
    35fe:	30 5d       	subi	r19, 0xD0	; 208
    3600:	31 93       	st	Z+, r19
    3602:	de f6       	brtc	.-74     	; 0x35ba <__ultoa_invert+0xe>
    3604:	cf 01       	movw	r24, r30
    3606:	08 95       	ret
    3608:	46 2f       	mov	r20, r22
    360a:	47 70       	andi	r20, 0x07	; 7
    360c:	40 5d       	subi	r20, 0xD0	; 208
    360e:	41 93       	st	Z+, r20
    3610:	b3 e0       	ldi	r27, 0x03	; 3
    3612:	0f d0       	rcall	.+30     	; 0x3632 <__ultoa_invert+0x86>
    3614:	c9 f7       	brne	.-14     	; 0x3608 <__ultoa_invert+0x5c>
    3616:	f6 cf       	rjmp	.-20     	; 0x3604 <__ultoa_invert+0x58>
    3618:	46 2f       	mov	r20, r22
    361a:	4f 70       	andi	r20, 0x0F	; 15
    361c:	40 5d       	subi	r20, 0xD0	; 208
    361e:	4a 33       	cpi	r20, 0x3A	; 58
    3620:	18 f0       	brcs	.+6      	; 0x3628 <__ultoa_invert+0x7c>
    3622:	49 5d       	subi	r20, 0xD9	; 217
    3624:	31 fd       	sbrc	r19, 1
    3626:	40 52       	subi	r20, 0x20	; 32
    3628:	41 93       	st	Z+, r20
    362a:	02 d0       	rcall	.+4      	; 0x3630 <__ultoa_invert+0x84>
    362c:	a9 f7       	brne	.-22     	; 0x3618 <__ultoa_invert+0x6c>
    362e:	ea cf       	rjmp	.-44     	; 0x3604 <__ultoa_invert+0x58>
    3630:	b4 e0       	ldi	r27, 0x04	; 4
    3632:	a6 95       	lsr	r26
    3634:	97 95       	ror	r25
    3636:	87 95       	ror	r24
    3638:	77 95       	ror	r23
    363a:	67 95       	ror	r22
    363c:	ba 95       	dec	r27
    363e:	c9 f7       	brne	.-14     	; 0x3632 <__ultoa_invert+0x86>
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	61 05       	cpc	r22, r1
    3644:	71 05       	cpc	r23, r1
    3646:	08 95       	ret
    3648:	9b 01       	movw	r18, r22
    364a:	ac 01       	movw	r20, r24
    364c:	0a 2e       	mov	r0, r26
    364e:	06 94       	lsr	r0
    3650:	57 95       	ror	r21
    3652:	47 95       	ror	r20
    3654:	37 95       	ror	r19
    3656:	27 95       	ror	r18
    3658:	ba 95       	dec	r27
    365a:	c9 f7       	brne	.-14     	; 0x364e <__ultoa_invert+0xa2>
    365c:	62 0f       	add	r22, r18
    365e:	73 1f       	adc	r23, r19
    3660:	84 1f       	adc	r24, r20
    3662:	95 1f       	adc	r25, r21
    3664:	a0 1d       	adc	r26, r0
    3666:	08 95       	ret

00003668 <eeprom_read_byte>:
eeprom_read_byte():
    3668:	f9 99       	sbic	0x1f, 1	; 31
    366a:	fe cf       	rjmp	.-4      	; 0x3668 <eeprom_read_byte>
    366c:	92 bd       	out	0x22, r25	; 34
    366e:	81 bd       	out	0x21, r24	; 33
    3670:	f8 9a       	sbi	0x1f, 0	; 31
    3672:	99 27       	eor	r25, r25
    3674:	80 b5       	in	r24, 0x20	; 32
    3676:	08 95       	ret

00003678 <eeprom_write_byte>:
eeprom_write_byte():
    3678:	26 2f       	mov	r18, r22

0000367a <eeprom_write_r18>:
    367a:	f9 99       	sbic	0x1f, 1	; 31
    367c:	fe cf       	rjmp	.-4      	; 0x367a <eeprom_write_r18>
    367e:	1f ba       	out	0x1f, r1	; 31
    3680:	92 bd       	out	0x22, r25	; 34
    3682:	81 bd       	out	0x21, r24	; 33
    3684:	20 bd       	out	0x20, r18	; 32
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	fa 9a       	sbi	0x1f, 2	; 31
    368c:	f9 9a       	sbi	0x1f, 1	; 31
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	01 96       	adiw	r24, 0x01	; 1
    3692:	08 95       	ret

00003694 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3694:	f8 94       	cli

00003696 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3696:	ff cf       	rjmp	.-2      	; 0x3696 <__stop_program>
